// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=exe, use-js-string=true, version=5.8.2+5.8.2
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return 0;}
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) == 0);}
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_float_of_string(s){
    var res;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(s.length > 0 && res === res) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) return res;
    var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = parseInt(m[1] + m[2] + m3, 16),
      exponent = (m[5] | 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Infinity;
    if(/^-inf(inity)?$/i.test(s)) return - Infinity;
    caml_failwith("float_of_string");
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_ml_bytes_length(s){return s.l;}
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Uint8Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      default: caml_convert_string_to_bytes(s);
      case 0:
       return s.c;
      case 4:
       return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c;
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F;
   }
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   var caml_callback = caml_call_gen;
   function caml_js_wrap_callback_strict(arity, f){
    return function(){
     var
      n = arguments.length,
      args = new Array(arity),
      len = Math.min(arguments.length, arity);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c == 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_list_of_js_array(a){
    var l = 0;
    for(var i = a.length - 1; i >= 0; i--){var e = a[i]; l = [0, e, l];}
    return l;
   }
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
         d = ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070DB);
         b = ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
         a = ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
         c = ff(c, d, a, b, buffer[6], 17, 0xA8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xFD469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098D8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
         c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
         a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);
         b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xC040B340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
         b = gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
         a = gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
         b = gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
         d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
         c = gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
         a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
         d = gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
         a = hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771F681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
         a = hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
         c = hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
         b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
         d = hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
         c = hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881D05);
         a = hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
         d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
         b = hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xF4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
         c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
         b = ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
         c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
         d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
         c = ii(c, d, a, b, buffer[6], 15, 0xA3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
         a = ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
         d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
         b = ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
    return t;
   }
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   var caml_sys_fds = new Array(3);
   function caml_sys_close(fd){
    var file = caml_sys_fds[fd];
    if(file) file.close();
    delete caml_sys_fds[fd];
    return 0;
   }
   var caml_ml_channels = new Array();
   function caml_ml_channel_get(id){return caml_ml_channels[id];}
   function caml_ml_flush(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.opened){
     chan.opened = false;
     caml_sys_close(chan.fd);
     chan.fd = - 1;
     chan.buffer = new Uint8Array(0);
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_debug_info_status(){return 0;}
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length == 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     var
      nread =
        chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channel_get(chanid),
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channel_get(chanid);
    chan.name = name;
    return 0;
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_obj_make_forward(b, v){b[0] = 250; b[1] = v; return 0;}
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_build_symbols(symb){
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.symbols){
      if(! caml_global_data.symidx)
       caml_global_data.symidx = caml_build_symbols(caml_global_data.symbols);
      var nid = caml_global_data.symidx[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   var
    cst$1 = "",
    cst$12 = " ",
    cst$11 = '"',
    cst_Li = "%Li",
    cst_a = "%a",
    cst_d = "%d",
    cst_i = "%i",
    cst_li = "%li",
    cst_ni = "%ni",
    cst_s = "%s",
    cst_u = "%u",
    cst$7 = "'",
    cst_Program_not_linked_with_g_ =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst$9 = ",",
    cst_characters = ", characters ",
    cst_Infinity = "-Infinity",
    cst = ".",
    cst_0 = ".0",
    cst$10 = ":",
    cst$4 = ": ",
    cst$6 = "<",
    cst_hov = "<hov>",
    cst_hv2 = "<hv2>",
    cst$5 = ">",
    cst_1_2 = "@;<1 -2>",
    cst_1_0 = "@;<1 0>",
    cst$3 = "@[",
    cst$2 = "@{",
    cst_AggregateFolder = "AggregateFolder",
    cst_AirTime = "AirTime",
    cst_Album = "Album",
    cst_AlbumArtist = "AlbumArtist",
    cst_AlbumId = "AlbumId",
    cst_Artist = "Artist",
    cst_Ascending = "Ascending",
    cst_Assert_failure = "Assert_failure",
    cst_Audio = "Audio",
    cst_AudioBook = "AudioBook",
    cst_BasePluginFolder = "BasePluginFolder",
    cst_BasicSyncInfo = "BasicSyncInfo",
    cst_Book = "Book",
    cst_BoxSet = "BoxSet",
    cst_Budget = "Budget",
    cst_CanDelete = "CanDelete",
    cst_CanDownload = "CanDownload",
    cst_Channel = "Channel",
    cst_ChannelFolderItem = "ChannelFolderItem",
    cst_ChannelImage = "ChannelImage",
    cst_ChannelInfo = "ChannelInfo",
    cst_Chapters = "Chapters",
    cst_ChildCount = "ChildCount",
    cst_CollectionFolder = "CollectionFolder",
    cst_CollectionType = "CollectionType",
    cst_CommunityRating = "CommunityRating",
    cst_CriticRating = "CriticRating",
    cst_CumulativeRunTimeTicks = "CumulativeRunTimeTicks",
    cst_CustomRating = "CustomRating",
    cst_DateCreated = "DateCreated",
    cst_DateLastMediaAdded = "DateLastMediaAdded",
    cst_DateLastRefreshed = "DateLastRefreshed",
    cst_DateLastSaved = "DateLastSaved",
    cst_DatePlayed = "DatePlayed",
    cst_Descending = "Descending",
    cst_DisplayPreferencesId = "DisplayPreferencesId",
    cst_Division_by_zero = "Division_by_zero",
    cst_EnableMediaSourceDisplay = "EnableMediaSourceDisplay",
    cst_End_of_file = "End_of_file",
    cst_Episode = "Episode",
    cst_Etag = "Etag",
    cst_ExternalEtag = "ExternalEtag",
    cst_ExternalSeriesId = "ExternalSeriesId",
    cst_ExternalUrls = "ExternalUrls",
    cst_ExtraIds = "ExtraIds",
    cst_Failure = "Failure",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Folder = "Folder",
    cst_Genre = "Genre",
    cst_Genres = "Genres",
    cst_Height = "Height",
    cst_HomePageUrl = "HomePageUrl",
    cst_Id = "Id",
    cst_ImageBlurHashes = "ImageBlurHashes",
    cst_Infinity$0 = "Infinity",
    cst_InheritedParentalRatingVal = "InheritedParentalRatingValue",
    cst_Invalid_argument = "Invalid_argument",
    cst_IsHD = "IsHD",
    cst_ItemCounts = "ItemCounts",
    cst_ItemId = "ItemId",
    cst_Items = "Items",
    cst_LiveTvChannel = "LiveTvChannel",
    cst_LiveTvProgram = "LiveTvProgram",
    cst_LocalTrailerCount = "LocalTrailerCount",
    cst_Locations = "Locations",
    cst_ManualPlaylistsFolder = "ManualPlaylistsFolder",
    cst_Match_failure = "Match_failure",
    cst_MediaSourceCount = "MediaSourceCount",
    cst_MediaSources = "MediaSources",
    cst_MediaStreams = "MediaStreams",
    cst_Movie = "Movie",
    cst_MusicAlbum = "MusicAlbum",
    cst_MusicArtist = "MusicArtist",
    cst_MusicGenre = "MusicGenre",
    cst_MusicVideo = "MusicVideo",
    cst_NaN = "NaN",
    cst_Name = "Name",
    cst_Not_found = "Not_found",
    cst_OriginalTitle = "OriginalTitle",
    cst_Out_of_memory = "Out_of_memory",
    cst_Overview = "Overview",
    cst_ParentId = "ParentId",
    cst_Path = "Path",
    cst_People = "People",
    cst_Person = "Person",
    cst_Photo = "Photo",
    cst_PhotoAlbum = "PhotoAlbum",
    cst_PlayAccess = "PlayAccess",
    cst_PlayCount = "PlayCount",
    cst_Playlist = "Playlist",
    cst_PlaylistsFolder = "PlaylistsFolder",
    cst_PremiereDate = "PremiereDate",
    cst_PresentationUniqueKey = "PresentationUniqueKey",
    cst_Primary = "Primary",
    cst_PrimaryImageAspectRatio = "PrimaryImageAspectRatio",
    cst_ProductionLocations = "ProductionLocations",
    cst_ProductionYear = "ProductionYear",
    cst_Program = "Program",
    cst_ProviderIds = "ProviderIds",
    cst_Random = "Random",
    cst_Recording = "Recording",
    cst_RecursiveItemCount = "RecursiveItemCount",
    cst_RefreshState = "RefreshState",
    cst_RemoteTrailers = "RemoteTrailers",
    cst_Revenue = "Revenue",
    cst_Runtime = "Runtime",
    cst_ScreenshotImageTags = "ScreenshotImageTags",
    cst_Season = "Season",
    cst_SeasonUserData = "SeasonUserData",
    cst_Series = "Series",
    cst_SeriesPresentationUniqueKe = "SeriesPresentationUniqueKey",
    cst_SeriesPrimaryImage = "SeriesPrimaryImage",
    cst_SeriesStudio = "SeriesStudio",
    cst_ServerId = "ServerId",
    cst_ServiceName = "ServiceName",
    cst_Set_bal = "Set.bal",
    cst_Settings = "Settings",
    cst_SortName = "SortName",
    cst_SpecialEpisodeNumbers = "SpecialEpisodeNumbers",
    cst_SpecialFeatureCount = "SpecialFeatureCount",
    cst_Stack_overflow = "Stack_overflow",
    cst_StartIndex = "StartIndex",
    cst_Studio = "Studio",
    cst_Studios = "Studios",
    cst_SyncInfo = "SyncInfo",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Taglines = "Taglines",
    cst_Tags = "Tags",
    cst_ThemeSongIds = "ThemeSongIds",
    cst_ThemeVideoIds = "ThemeVideoIds",
    cst_TotalRecordCount = "TotalRecordCount",
    cst_Trailer = "Trailer",
    cst_TvChannel = "TvChannel",
    cst_TvProgram = "TvProgram",
    cst_Type = "Type",
    cst_Undefined_recursive_module = "Undefined_recursive_module",
    cst_UserRootFolder = "UserRootFolder",
    cst_UserView = "UserView",
    cst_Video = "Video",
    cst_Width = "Width",
    cst_Year = "Year",
    cst$8 = '\\"',
    cst$0 = "\\\\",
    cst_b = "\\b",
    cst_f = "\\f",
    cst_n = "\\n",
    cst_r = "\\r",
    cst_t = "\\t",
    cst_u00 = "\\u00",
    cst_buffer_ml = "buffer.ml",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_console = "console",
    cst_date_added = "date_added",
    cst_empty_input = "empty input",
    cst_enableImages = "enableImages",
    cst_enableUserData = "enableUserData",
    cst_error = "error",
    cst_false = "false",
    cst_fields = "fields",
    cst_fut = "fut",
    cst_id = "id",
    cst_ids = "ids",
    cst_includeExternalContent = "includeExternalContent",
    cst_includeItemTypes = "includeItemTypes",
    cst_item = "item",
    cst_item_Id = "item.Id",
    cst_items = "items",
    cst_items_by_date_added = "items_by_date_added",
    cst_junk_after_end_of_JSON_val = "junk after end of JSON value: ",
    cst_lib_db_stores_ml = "lib/db/stores.ml",
    cst_limit = "limit",
    cst_music = "music",
    cst_music$0 = "music\0",
    cst_name = "name",
    cst_null = "null",
    cst_parentId = "parentId",
    cst_pathname = "pathname",
    cst_recursive = "recursive",
    cst_sortBy = "sortBy",
    cst_sortOrder = "sortOrder",
    cst_sort_name = "sort_name",
    cst_sorts = "sorts",
    cst_sorts_views = "sorts.views",
    cst_src_core_CCString_pp_ml = "src/core/CCString.pp.ml",
    cst_startIndex = "startIndex",
    cst_start_index = "start_index",
    cst_to = "to",
    cst_total_record_count = "total_record_count",
    cst_true = "true",
    cst_tuples_not_supported_in_yo =
      "tuples not supported in yojson basic mode",
    cst_unexpected_character = "unexpected character '",
    cst_userId = "userId",
    cst_variants_not_supported_in_ =
      "variants not supported in yojson basic mode",
    cst_views = "views";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var undef = undefined;
   caml_fs_init();
   var
    Out_of_memory = [248, cst_Out_of_memory, -1],
    Sys_error = [248, cst_Sys_error, -2],
    Failure = [248, cst_Failure, -3],
    Invalid_argument = [248, cst_Invalid_argument, -4],
    End_of_file = [248, cst_End_of_file, -5],
    Division_by_zero = [248, cst_Division_by_zero, -6],
    Not_found = [248, cst_Not_found, -7],
    Match_failure = [248, cst_Match_failure, -8],
    Stack_overflow = [248, cst_Stack_overflow, -9],
    Sys_blocked_io = [248, cst_Sys_blocked_io, -10],
    Assert_failure = [248, cst_Assert_failure, -11],
    Undefined_recursive_module = [248, cst_Undefined_recursive_module, -12],
    dummy_pos = [0, cst$1, 0, 0, -1],
    zero_pos = [0, cst$1, 1, 0, 0],
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, cst$4, [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    ocaml_lex_tables =
      [0,
       "\0\0\xe5\xff\x11\0\xe8\xff\x03\0\xea\xff~\0\0\0q\0\0\0\x01\0\x01\0\x02\0{\0\xf3\xff\xf4\xff\xf5\xff\xf6\xff\xf7\xff\xf8\xff\xf9\xff\xfa\xff\xfb\xff\xfc\xff\x01\0\x02\0\0\0\0\0\x02\0\xff\xff\0\0\0\0\x03\0\xfe\xff\x03\0\x01\0\x0b\0\xfd\xff\xef\xff\x03\0\n\0\x0b\0\x05\0\xf2\xff\x14\0\x13\x000\0L\0C\0?\0K\0T\0\xf1\xffU\0S\0O\0U\0K\0G\0S\0T\0]\0\xf0\xff_\0]\0Y\0_\0U\0Q\0\x01\0 \0\x9b\0\xba\0\xd1\0\xdb\0\xe5\0\xf0\0\xfa\0\x12\x01B\x01\xec\xff\xeb\xff^\x01u\x01\x9b\x01\xb2\x015\0\xe7\xffX\x01\xfc\xff\xfd\xff\xfe\xff\x0e\0\xff\xff",
       "\xff\xff\xff\xff\x1a\0\xff\xff\x16\0\xff\xff\x1a\0\x11\0\x11\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a\0\x1a\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\xff\xff\x12\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff",
       "\x01\0\0\0\xff\xff\0\0\xff\xff\0\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xffV\0\0\0Y\0\0\0\0\0\0\0\xff\xff\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x03\0\0\0\x04\0\x04\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x06\0\x04\0\0\0\0\0\0\0\0\0\x13\0\x12\0\0\0\n\0\x0f\0\r\0G\0\x02\0\x07\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\x0e\0W\0\x11\0]\0\x10\0\xff\xffV\0\0\0\0\0\0\0\0\0F\0\0\0\0\0\0\0\x0b\0;\0M\0\0\0M\0\t\0&\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0\0\0\x15\0\0\0\x14\0\0\0\0\0\0\0E\0\"\0\x1e\x002\0F\0\x19\0\x1d\0!\0\f\0<\0+\0\x1f\0$\0\x18\x005\x003\0&\0\x1b\0 \0\x1a\0\x1c\0#\0%\0,\0*\0-\0\x17\0.\0\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0G\0P\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\x07\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\x000\0F\x001\0+\0&\x004\x006\x007\x008\x009\0:\x004\0?\0=\0>\0(\0@\0A\0B\0C\0D\0>\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\0\0F\0\0\0\0\0\0\0N\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0)\0\0\0\0\0\0\0\0\0'\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0K\0\0\0K\0I\0\x05\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0I\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0O\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff[\0\0\0Q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0O\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0O\0\0\0\\\0\0\0O\0\0\0O\0R\0\0\0\0\0\0\0\0\0\0\0\0\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0N\0S\0S\0S\0S\0S\0S\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0\0\0T\0T\0T\0T\0T\0T\0U\0U\0U\0U\0U\0U\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0U\0U\0U\0U\0U\0U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x04\0\0\0\xff\xff\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\\\0\0\0V\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\0\0\n\0F\0\xff\xffF\0\0\0E\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\t\0\x18\0\x19\0'\0\x07\0\0\0\x1c\0 \0\0\0\n\0*\0\x1e\0#\0\0\0\x0b\0\f\0\"\0\x1a\0\x1f\0\0\0\x1b\0\x18\0$\0(\0)\0,\0\0\0-\0\0\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0.\0\b\0\x06\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0/\0\b\x000\x001\x002\x003\x005\x006\x007\x008\x009\0:\0;\0<\0=\0\r\0?\0@\0A\0B\0C\0D\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\b\0\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xffI\0H\0\0\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0H\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0N\0V\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0X\0\xff\xffO\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\xff\xffN\0\xff\xffX\0\xff\xffN\0\xff\xffN\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffR\0R\0R\0R\0R\0R\0R\0R\0R\0R\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0R\0R\0R\0R\0R\0R\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xffR\0R\0R\0R\0R\0R\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\xff\xffS\0S\0S\0S\0S\0S\0T\0T\0T\0T\0T\0T\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffX\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst$1,
       cst$1,
       cst$1,
       cst$1,
       cst$1,
       cst$1],
    tp_loc = "lib/data_source/jellyfin_api.ml.Types.order",
    tp_loc$0 = "lib/data_source/jellyfin_api.ml.Types.sort",
    tp_loc$1 = "lib/data_source/jellyfin_api.ml.Item.image_blur_hashes",
    tp_loc$2 = "lib/data_source/jellyfin_api.ml.Item.type_",
    tp_loc$3 = "lib/data_source/jellyfin_api.ml.Item.field",
    tp_loc$4 = "lib/data_source/jellyfin_api.ml.Item.t",
    tp_loc$5 = "lib/data_source/jellyfin_api.ml.Items.params",
    tp_loc$6 = "lib/data_source/jellyfin_api.ml.Items.response",
    tp_loc$7 = "lib/data_source/jellyfin_api.ml.Views.params",
    tp_loc$8 = "lib/data_source/jellyfin_api.ml.Views.response",
    tp_loc$9 =
      "lib/data_source/jellyfin_api.ml.Virtual_folders.virtual_folder",
    tp_loc$10 = "lib/db/stores.ml.Orderred_items.t",
    path$0 = [0, cst_id],
    name$2 = cst_items_by_date_added,
    tp_loc$11 = "lib/db/stores.ml.Items.sorts",
    tp_loc$12 = "lib/db/stores.ml.Items.t",
    path$2 = [0, "sorts.date_added"],
    path$3 = [0, cst_item_Id],
    name$3 = cst_items,
    path$6 = [0, cst_ItemId],
    name$4 = "virtual_folders",
    name$5 = cst_items_by_date_added,
    name$6 = "items_by_view_and_kind",
    name$7 = "items_by_id",
    name$8 = "items_by_type_and_name",
    include_item_types = [0, 17, [0, 16, [0, 1, 0]]],
    initial_report = [0, 0, 0];
   caml_register_global
    (11, Undefined_recursive_module, cst_Undefined_recursive_module);
   caml_register_global(10, Assert_failure, cst_Assert_failure);
   caml_register_global(9, Sys_blocked_io, cst_Sys_blocked_io);
   caml_register_global(8, Stack_overflow, cst_Stack_overflow);
   caml_register_global(7, Match_failure, cst_Match_failure);
   caml_register_global(6, Not_found, cst_Not_found);
   caml_register_global(5, Division_by_zero, cst_Division_by_zero);
   caml_register_global(4, End_of_file, cst_End_of_file);
   caml_register_global(3, Invalid_argument, cst_Invalid_argument);
   caml_register_global(2, Failure, cst_Failure);
   caml_register_global(1, Sys_error, cst_Sys_error);
   caml_register_global(0, Out_of_memory, cst_Out_of_memory);
   var
    _h_ = "input",
    _g_ = [0, 0, [0, 7, 0]],
    _f_ = "output_substring",
    _e_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _d_ = cst,
    _b_ = cst_true,
    _c_ = cst_false,
    _a_ = "char_of_int",
    _l_ = "CamlinternalLazy.Undefined",
    _m_ = "result is Error _",
    _o_ = cst$0,
    _p_ = "\\'",
    _q_ = cst_b,
    _r_ = cst_t,
    _s_ = cst_n,
    _t_ = cst_r,
    _n_ = "Char.chr",
    _v_ = "List.init",
    _u_ = "hd",
    _y_ = "String.blit / Bytes.blit_string",
    _x_ = "Bytes.blit",
    _w_ = "String.sub / Bytes.sub",
    _C_ = "String.contains_from / Bytes.contains_from",
    _B_ = "String.index_from / Bytes.index_from",
    _A_ = cst$1,
    _z_ = "String.concat",
    _H_ = [0, "array.ml", 322, 4],
    _F_ = "Array.blit",
    _E_ = "Array.fill",
    _D_ = "Array.init",
    _G_ = "Stdlib.Array.Bottom",
    _I_ = "Lexing.lex_refill: cannot grow buffer",
    _J_ = cst_Set_bal,
    _K_ = cst_Set_bal,
    _L_ = cst_Set_bal,
    _M_ = cst_Set_bal,
    _O_ = "Stdlib.Queue.Empty",
    _U_ = "Buffer.add_substring/add_subbytes",
    _S_ = "Buffer.add: cannot grow buffer",
    _R_ = [0, cst_buffer_ml, 93, 2],
    _Q_ = [0, cst_buffer_ml, 94, 2],
    _P_ = "Buffer.sub",
    _ab_ = "%c",
    _ac_ = cst_s,
    _ad_ = cst_i,
    _ae_ = cst_li,
    _af_ = cst_ni,
    _ag_ = cst_Li,
    _ah_ = "%f",
    _ai_ = "%B",
    _aj_ = "%{",
    _ak_ = "%}",
    _al_ = "%(",
    _am_ = "%)",
    _an_ = cst_a,
    _ao_ = "%t",
    _ap_ = "%?",
    _aq_ = "%r",
    _ar_ = "%_r",
    _as_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _aD_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _av_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _aE_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _aw_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _aF_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _ax_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _aG_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _ay_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _aH_ = [0, cst_camlinternalFormat_ml, 831, 30],
    _az_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _aB_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _at_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _aC_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _au_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _aA_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _bC_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    _bD_ = "Printf: bad conversion %[",
    _bE_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _bF_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _bG_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    _bH_ = "Printf: bad conversion %_",
    _bI_ = cst$2,
    _bJ_ = cst$3,
    _bK_ = cst$2,
    _bL_ = cst$3,
    _bN_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _bM_ = [0, 0, 4],
    _bB_ = "nan",
    _bz_ = "neg_infinity",
    _bA_ = "infinity",
    _by_ = cst,
    _bx_ = [0, 103],
    _bl_ = "%+nd",
    _bm_ = "% nd",
    _bo_ = "%+ni",
    _bp_ = "% ni",
    _bq_ = "%nx",
    _br_ = "%#nx",
    _bs_ = "%nX",
    _bt_ = "%#nX",
    _bu_ = "%no",
    _bv_ = "%#no",
    _bk_ = "%nd",
    _bn_ = cst_ni,
    _bw_ = "%nu",
    _a__ = "%+ld",
    _a$_ = "% ld",
    _bb_ = "%+li",
    _bc_ = "% li",
    _bd_ = "%lx",
    _be_ = "%#lx",
    _bf_ = "%lX",
    _bg_ = "%#lX",
    _bh_ = "%lo",
    _bi_ = "%#lo",
    _a9_ = "%ld",
    _ba_ = cst_li,
    _bj_ = "%lu",
    _aX_ = "%+Ld",
    _aY_ = "% Ld",
    _a0_ = "%+Li",
    _a1_ = "% Li",
    _a2_ = "%Lx",
    _a3_ = "%#Lx",
    _a4_ = "%LX",
    _a5_ = "%#LX",
    _a6_ = "%Lo",
    _a7_ = "%#Lo",
    _aW_ = "%Ld",
    _aZ_ = cst_Li,
    _a8_ = "%Lu",
    _aK_ = "%+d",
    _aL_ = "% d",
    _aN_ = "%+i",
    _aO_ = "% i",
    _aP_ = "%x",
    _aQ_ = "%#x",
    _aR_ = "%X",
    _aS_ = "%#X",
    _aT_ = "%o",
    _aU_ = "%#o",
    _aJ_ = cst_d,
    _aM_ = cst_i,
    _aV_ = cst_u,
    _V_ = "@]",
    _W_ = "@}",
    _X_ = "@?",
    _Y_ = "@\n",
    _Z_ = "@.",
    ___ = "@@",
    _$_ = "@%",
    _aa_ = "@",
    _aI_ = "CamlinternalFormat.Type_mismatch",
    _bR_ = cst$1,
    _bS_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _cd_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _ce_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"],
    _cc_ = "Fatal error: out of memory in uncaught exception handler",
    _cb_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _b__ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _b$_ =
      [0,
       [11, cst_Program_not_linked_with_g_, 0],
       cst_Program_not_linked_with_g_],
    _b2_ = "Raised at",
    _b3_ = "Re-raised at",
    _b4_ = "Raised by primitive operation at",
    _b5_ = "Called from",
    _b6_ = " (inlined)",
    _b8_ = cst$1,
    _b7_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _b9_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _bX_ = "Out of memory",
    _bY_ = "Stack overflow",
    _bZ_ = "Pattern matching failed",
    _b0_ = "Assertion failed",
    _b1_ = "Undefined recursive module",
    _bT_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _bU_ = cst$1,
    _bV_ = cst$1,
    _bW_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _bQ_ = [0, [4, 0, 0, 0, 0], cst_d],
    _bO_ = [0, [3, 0, 0], "%S"],
    _bP_ = "_",
    _ca_ =
      [0,
       cst$1,
       "(Cannot print locations:\n bytecode executable program file not found)",
       "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
       "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
       "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"],
    _cg_ = "Fun.Finally_raised: ",
    _cf_ = "Stdlib.Fun.Finally_raised",
    _ch_ = "x",
    _ci_ =
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
    _cn_ = "Hashtbl: unsupported hash table format",
    _cl_ = cst$1,
    _cG_ = [3, 0, 3],
    _cH_ = cst,
    _cD_ = cst$5,
    _cE_ = "<\/",
    _cF_ = cst$1,
    _cA_ = cst$5,
    _cB_ = cst$6,
    _cC_ = cst$1,
    _cz_ = "\n",
    _cv_ = cst$1,
    _cw_ = cst$1,
    _cx_ = cst$1,
    _cy_ = cst$1,
    _cu_ = [0, cst$1],
    _cq_ = cst$1,
    _cr_ = cst$1,
    _cs_ = cst$1,
    _ct_ = cst$1,
    _cp_ = [0, cst$1, 0, cst$1],
    _co_ = "Stdlib.Format.String_tag",
    _cI_ = "Jsoo_runtime.Error.Exn",
    _cJ_ = "jsError",
    _cM_ = [0, "src/fut.ml", 34, 25],
    _cT_ = "info",
    _cS_ = cst_error,
    _cR_ = "log",
    _cP_ = "search",
    _cO_ = [0, 1],
    _cN_ = cst_pathname,
    _cU_ = "isSecureContext",
    _cV_ = "cache",
    _cW_ = "credentials",
    _cX_ = "headers",
    _cY_ = "integrity",
    _cZ_ = "keepalive",
    _c0_ = "method",
    _c1_ = "mode",
    _c2_ = "redirect",
    _c3_ = "referrer",
    _c4_ = "referrerPolicy",
    _dd_ = "open",
    _da_ = "autoIncrement",
    _db_ = "keyPath",
    _dc_ = "new object store with options:",
    _c9_ = "readonly",
    _c__ = "readwrite",
    _c$_ = "readwriteflush",
    _c5_ = "next",
    _c6_ = "nextUnique",
    _c7_ = "prev",
    _c8_ = "prevUnique",
    _dg_ = [0, [11, "\x1b[", [4, 0, 0, 0, [12, 109, 0]]], "\x1b[%dm"],
    _dh_ = "CCResult.Get_error",
    _dl_ = [0, cst_src_core_CCString_pp_ml, 116, 10],
    _dk_ = [0, cst_src_core_CCString_pp_ml, 89, 10],
    _dj_ = cst$1,
    _dv_ = "expected low surrogate escape sequence (u)",
    _dw_ = "invalid low surrogate for code point beyond U+FFFF'",
    _dx_ = "expected low surrogate escape char (\\)",
    _dy_ = "invalid escape in string",
    _du_ = "end of string in escape sequence",
    _dp_ = "' ",
    _dq_ = " '",
    _dt_ = cst$1,
    _dr_ = cst$4,
    _ds_ = " at offset ",
    _dn_ = cst$7,
    _do_ = "invalid hex char in unicode escape: '",
    _dm_ = "Jsonxt__Lexxer_utils.Lex_error",
    _dz_ = [6, 1],
    _dA_ = [6, 0],
    _dB_ = cst$7,
    _dC_ = cst_unexpected_character,
    _dD_ = cst$7,
    _dE_ = cst_unexpected_character,
    _dF_ = cst$7,
    _dG_ = cst_unexpected_character,
    _dH_ = cst$7,
    _dI_ = cst_unexpected_character,
    _dJ_ = [0, cst$1],
    _dK_ = cst$7,
    _dL_ = cst_unexpected_character,
    _dM_ = "unexpected EOF in comment",
    _dN_ = "Jsonxt__Error_info.Json_error_info",
    _dO_ = cst_0,
    _dP_ = cst_0,
    _dQ_ = "unexpected '{'",
    _dR_ = "unexpected '}'",
    _dS_ = "unexpected null value",
    _dT_ = "unexpected negative infinity",
    _dU_ = "unexpected Not-a-Number",
    _dV_ = "unexpected infinity",
    _dW_ = "unexpected end-of-input",
    _dX_ = "unexpected ','",
    _dY_ = "unexpected ':'",
    _dZ_ = "unexpected '['",
    _d0_ = "unexpected ']'",
    _d1_ = "unexpected '<'",
    _d2_ = "unexpected '>'",
    _d3_ = "unexpected '('",
    _d4_ = "unexpected ')'",
    _d5_ = cst$7,
    _d6_ = "unexpected string '",
    _d7_ = cst$7,
    _d8_ = "unexpected large integer '",
    _d9_ = cst$7,
    _d__ = "unexpected integer '",
    _d$_ = cst$7,
    _ea_ = "unexpected float '",
    _eb_ = cst$7,
    _ec_ = "compliance error '",
    _ed_ = cst$7,
    _ee_ = cst_true,
    _eg_ = cst_false,
    _ef_ = "unexpected boolean '",
    _ek_ = [1, "Unexpected end-of-input"],
    _ei_ = [0, 148000204, "tuple must have at least 2 elements"],
    _ej_ = [0, 148000204, "variant must have at least a string"],
    _eh_ = "Jsonxt__Parser.Make(Compliance).Parse_error",
    _en_ = cst_b,
    _eo_ = cst_t,
    _ep_ = cst_n,
    _eq_ = cst_f,
    _er_ = cst_r,
    _es_ = cst$8,
    _el_ = cst$0,
    _em_ = cst_u00,
    _eu_ = cst_null,
    _ev_ = cst$9,
    _ew_ =
      [0,
       [12,
        123,
        [17,
         [0, cst_1_0, 1, 0],
         [15, [17, [0, cst_1_2, 1, -2], [12, 125, 0]]]]],
       "{@;<1 0>%a@;<1 -2>}"],
    _ex_ = "{}",
    _ey_ = cst$9,
    _ez_ =
      [0,
       [12,
        91,
        [17,
         [0, cst_1_0, 1, 0],
         [18,
          [1, [0, [11, cst_hov, 0], cst_hov]],
          [15, [17, 0, [17, [0, cst_1_2, 1, -2], [12, 93, 0]]]]]]],
       "[@;<1 0>@[<hov>%a@]@;<1 -2>]"],
    _eA_ = "[]",
    _eB_ = "()",
    _eC_ = cst$9,
    _eD_ =
      [0,
       [12,
        40,
        [17, [0, "@,", 0, 0], [15, [17, [0, "@;<0 -2>", 0, -2], [12, 41, 0]]]]],
       "(@,%a@;<0 -2>)"],
    _eE_ =
      [0,
       [12,
        60,
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [2, 0, [11, cst$4, [15, [17, 0, [12, 62, 0]]]]]]],
       "<@[<hv2>%s: %a@]>"],
    _eF_ = [0, [12, 60, [2, 0, [12, 62, 0]]], "<%s>"],
    _eG_ =
      [0,
       [18,
        [1, [0, [11, cst_hv2, 0], cst_hv2]],
        [2, 0, [11, cst$4, [15, [17, 0, 0]]]]],
       "@[<hv2>%s: %a@]"],
    _eJ_ = [0, [15, [17, 2, 0]], "%a@?"],
    _eI_ = [0, [15, 0], cst_a],
    _eH_ =
      [0,
       [18, [1, [0, [11, cst_hv2, 0], cst_hv2]], [15, [17, 0, 0]]],
       "@[<hv2>%a@]"],
    _et_ = [0, [2, 0, [17, [0, "@ ", 1, 0], 0]], "%s@ "],
    _eM_ = "Expected `String",
    _eL_ = "Expected `Assoc",
    _eO_ = "{",
    _eP_ = "}",
    _eQ_ = "Null",
    _eR_ = cst_Infinity,
    _eS_ = "NAN",
    _eT_ = cst_Infinity$0,
    _eU_ = "end-of-file",
    _eV_ = cst$9,
    _eW_ = cst$10,
    _eX_ = "[",
    _eY_ = "]",
    _eZ_ = cst$6,
    _e0_ = cst$5,
    _e1_ = "(",
    _e2_ = ")",
    _e3_ = cst$7,
    _e4_ = "input error '",
    _e5_ = cst_true,
    _e6_ = cst_false,
    _e9_ = cst_junk_after_end_of_JSON_val,
    _e__ = [0, 0],
    _e$_ = [1, cst_empty_input],
    _e7_ = cst_junk_after_end_of_JSON_val,
    _e8_ = [1, cst_empty_input],
    _fm_ = cst$1,
    _fn_ = cst$1,
    _fj_ = cst_null,
    _fk_ = cst$9,
    _fl_ = cst$9,
    _fi_ = cst$10,
    _fc_ = cst_b,
    _fd_ = cst_t,
    _fe_ = cst_n,
    _ff_ = cst_f,
    _fg_ = cst_r,
    _fh_ = cst$8,
    _fa_ = cst$0,
    _fb_ = cst_u00,
    _fw_ = cst_null,
    _fy_ = cst$9,
    _fx_ = cst$1,
    _fA_ = cst$9,
    _fz_ = cst$1,
    _fq_ = cst_b,
    _fr_ = cst_t,
    _fs_ = cst_n,
    _ft_ = cst_f,
    _fu_ = cst_r,
    _fv_ = cst$8,
    _fo_ = cst$0,
    _fp_ = cst_u00,
    _f4_ = [0, 928231259, cst_Infinity$0],
    _f5_ = [0, 928231259, cst_Infinity],
    _f3_ = [0, 928231259, cst_NaN],
    _f2_ = cst_NaN,
    _f0_ = cst_Infinity,
    _f1_ = cst_Infinity$0,
    _fZ_ = [0, 0],
    _fX_ = cst$11,
    _fY_ = cst$11,
    _fW_ = "floatlit not supported in yojson safe mode",
    _fV_ = cst_NaN,
    _fT_ = cst_Infinity,
    _fU_ = cst_Infinity$0,
    _fS_ = [0, 0],
    _fR_ = cst_variants_not_supported_in_,
    _fQ_ = cst_variants_not_supported_in_,
    _fP_ = cst_tuples_not_supported_in_yo,
    _fO_ = cst_tuples_not_supported_in_yo,
    _fN_ = "floatlit not supported in yojson basic mode",
    _fM_ = cst_variants_not_supported_in_,
    _fL_ = cst_tuples_not_supported_in_yo,
    _fK_ = cst_NaN,
    _fI_ = cst_Infinity,
    _fJ_ = cst_Infinity$0,
    _fH_ = [0, 0],
    _fG_ = [5, "Integer out of bounds"],
    _fC_ = ", line",
    _fD_ = "File ",
    _fF_ = "Line",
    _fE_ =
      [0,
       [2,
        0,
        [12,
         32,
         [4,
          0,
          0,
          0,
          [11,
           " chars ",
           [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, cst$4, 0]]]]]]]],
       "%s %d chars %d-%d: "],
    _fB_ = "Jsonxt__Yojson.Json_error",
    _f6_ = [1, [0, 3854881, "Failed to unmarshal data"]],
    _f$_ = "list_of_yojson: list needed",
    _f__ = "int_of_yojson: integer needed",
    _f9_ = "string_of_yojson: string needed",
    _f8_ = "bool_of_yojson: true/false needed",
    _f7_ = "Ppx_yojson_conv_lib__Yojson_conv.Of_yojson_error",
    _gi_ = cst$12,
    _gk_ = "_of_yojson: list instead of atom for record expected",
    _gj_ =
      [0,
       [2,
        0,
        [11,
         "_of_yojson: the following record elements were undefined: ",
         [2, 0, 0]]],
       "%s_of_yojson: the following record elements were undefined: %s"],
    _gh_ = "extra fields",
    _gg_ = "duplicate fields",
    _ge_ = cst$12,
    _gf_ =
      [0,
       [2, 0, [11, "_of_yojson: ", [2, 0, [11, cst$4, [2, 0, 0]]]]],
       "%s_of_yojson: %s: %s"],
    _gd_ = "_of_yojson: unexpected variant constructor",
    _gc_ = "_of_yojson: expected a variant type, saw an empty list",
    _gb_ = "_of_yojson: expected a variant type, saw a nested list",
    _ga_ = "_of_yojson: this constructor does not take arguments",
    _i9_ = "An error occured while decoding response: ",
    _i5_ = [0, [11, ", Token=", [3, 0, 0]], ", Token=%S"],
    _i8_ = cst$1,
    _i6_ = cst$1,
    _i7_ =
      [0,
       [11,
        'MediaBrowser Client="Ocamix", Device="Firefox", DeviceId="',
        [2, 0, [11, '", Version="0.1"', [2, 0, 0]]]],
       'MediaBrowser Client="Ocamix", Device="Firefox", DeviceId="%s", Version="0.1"%s'],
    _i2_ = cst_ItemId,
    _i3_ = cst_Locations,
    _i4_ = cst_Name,
    _iZ_ = "item_id",
    _i0_ = "locations",
    _i1_ = cst_name,
    _iX_ = [0, "Views", 0],
    _iY_ = "Users",
    _iU_ = cst_StartIndex,
    _iV_ = cst_TotalRecordCount,
    _iW_ = cst_Items,
    _iR_ = cst_start_index,
    _iS_ = cst_total_record_count,
    _iT_ = cst_items,
    _iQ_ = cst_includeExternalContent,
    _iP_ = "include_external_content",
    _iO_ = [0, cst_Items, 0],
    _iL_ = cst_StartIndex,
    _iM_ = cst_TotalRecordCount,
    _iN_ = cst_Items,
    _iI_ = cst_start_index,
    _iJ_ = cst_total_record_count,
    _iK_ = cst_items,
    _iw_ = cst_enableImages,
    _ix_ = cst_enableUserData,
    _iy_ = cst_recursive,
    _iz_ = cst_sortBy,
    _iA_ = cst_sortOrder,
    _iB_ = cst_limit,
    _iC_ = cst_startIndex,
    _iD_ = cst_includeItemTypes,
    _iE_ = cst_fields,
    _iF_ = cst_userId,
    _iG_ = cst_parentId,
    _iH_ = cst_ids,
    _ip_ = "enable_images",
    _iq_ = "enable_user_data",
    _ir_ = cst_recursive,
    _is_ = "sort_by",
    _it_ = "include_item_types",
    _iu_ = cst_fields,
    _iv_ = "user_id",
    _io_ = cst_CollectionType,
    _if_ = cst_Type,
    _ig_ = cst_ImageBlurHashes,
    _ih_ = cst_ServerId,
    _ii_ = cst_ParentId,
    _ij_ = cst_AlbumId,
    _ik_ = cst_Path,
    _il_ = cst_Id,
    _im_ = cst_SortName,
    _in_ = cst_Name,
    _ia_ = "type_",
    _ib_ = "image_blur_hashes",
    _ic_ = "server_id",
    _id_ = cst_id,
    _ie_ = cst_name,
    _h$_ = [0, "lib/data_source/jellyfin_api.ml", 193, 64],
    _hc_ = [0, 848054398, [0, [0, -976970511, cst_AirTime], 0]],
    _hd_ = [0, 848054398, [0, [0, -976970511, cst_BasicSyncInfo], 0]],
    _he_ = [0, 848054398, [0, [0, -976970511, cst_CanDelete], 0]],
    _hf_ = [0, 848054398, [0, [0, -976970511, cst_CanDownload], 0]],
    _hg_ = [0, 848054398, [0, [0, -976970511, cst_ChannelImage], 0]],
    _hh_ = [0, 848054398, [0, [0, -976970511, cst_ChannelInfo], 0]],
    _hi_ = [0, 848054398, [0, [0, -976970511, cst_Chapters], 0]],
    _hj_ = [0, 848054398, [0, [0, -976970511, cst_ChildCount], 0]],
    _hk_ = [0, 848054398, [0, [0, -976970511, cst_CumulativeRunTimeTicks], 0]],
    _hl_ = [0, 848054398, [0, [0, -976970511, cst_CustomRating], 0]],
    _hm_ = [0, 848054398, [0, [0, -976970511, cst_DateCreated], 0]],
    _hn_ = [0, 848054398, [0, [0, -976970511, cst_DateLastMediaAdded], 0]],
    _ho_ = [0, 848054398, [0, [0, -976970511, cst_DateLastRefreshed], 0]],
    _hp_ = [0, 848054398, [0, [0, -976970511, cst_DateLastSaved], 0]],
    _hq_ = [0, 848054398, [0, [0, -976970511, cst_DisplayPreferencesId], 0]],
    _hr_ =
      [0, 848054398, [0, [0, -976970511, cst_EnableMediaSourceDisplay], 0]],
    _hs_ = [0, 848054398, [0, [0, -976970511, cst_Etag], 0]],
    _ht_ = [0, 848054398, [0, [0, -976970511, cst_ExternalEtag], 0]],
    _hu_ = [0, 848054398, [0, [0, -976970511, cst_ExternalSeriesId], 0]],
    _hv_ = [0, 848054398, [0, [0, -976970511, cst_ExternalUrls], 0]],
    _hw_ = [0, 848054398, [0, [0, -976970511, cst_ExtraIds], 0]],
    _hx_ = [0, 848054398, [0, [0, -976970511, cst_Genres], 0]],
    _hy_ = [0, 848054398, [0, [0, -976970511, cst_Height], 0]],
    _hz_ = [0, 848054398, [0, [0, -976970511, cst_HomePageUrl], 0]],
    _hA_ =
      [0, 848054398, [0, [0, -976970511, cst_InheritedParentalRatingVal], 0]],
    _hB_ = [0, 848054398, [0, [0, -976970511, cst_IsHD], 0]],
    _hC_ = [0, 848054398, [0, [0, -976970511, cst_ItemCounts], 0]],
    _hD_ = [0, 848054398, [0, [0, -976970511, cst_LocalTrailerCount], 0]],
    _hE_ = [0, 848054398, [0, [0, -976970511, cst_MediaSourceCount], 0]],
    _hF_ = [0, 848054398, [0, [0, -976970511, cst_MediaSources], 0]],
    _hG_ = [0, 848054398, [0, [0, -976970511, cst_MediaStreams], 0]],
    _hH_ = [0, 848054398, [0, [0, -976970511, cst_OriginalTitle], 0]],
    _hI_ = [0, 848054398, [0, [0, -976970511, cst_Overview], 0]],
    _hJ_ = [0, 848054398, [0, [0, -976970511, cst_ParentId], 0]],
    _hK_ = [0, 848054398, [0, [0, -976970511, cst_Path], 0]],
    _hL_ = [0, 848054398, [0, [0, -976970511, cst_People], 0]],
    _hM_ = [0, 848054398, [0, [0, -976970511, cst_PlayAccess], 0]],
    _hN_ = [0, 848054398, [0, [0, -976970511, cst_PresentationUniqueKey], 0]],
    _hO_ =
      [0, 848054398, [0, [0, -976970511, cst_PrimaryImageAspectRatio], 0]],
    _hP_ = [0, 848054398, [0, [0, -976970511, cst_ProductionLocations], 0]],
    _hQ_ = [0, 848054398, [0, [0, -976970511, cst_ProviderIds], 0]],
    _hR_ = [0, 848054398, [0, [0, -976970511, cst_RecursiveItemCount], 0]],
    _hS_ = [0, 848054398, [0, [0, -976970511, cst_RefreshState], 0]],
    _hT_ = [0, 848054398, [0, [0, -976970511, cst_RemoteTrailers], 0]],
    _hU_ = [0, 848054398, [0, [0, -976970511, cst_ScreenshotImageTags], 0]],
    _hV_ = [0, 848054398, [0, [0, -976970511, cst_SeasonUserData], 0]],
    _hW_ =
      [0, 848054398, [0, [0, -976970511, cst_SeriesPresentationUniqueKe], 0]],
    _hX_ = [0, 848054398, [0, [0, -976970511, cst_SeriesPrimaryImage], 0]],
    _hY_ = [0, 848054398, [0, [0, -976970511, cst_SeriesStudio], 0]],
    _hZ_ = [0, 848054398, [0, [0, -976970511, cst_ServiceName], 0]],
    _h0_ = [0, 848054398, [0, [0, -976970511, cst_Settings], 0]],
    _h1_ = [0, 848054398, [0, [0, -976970511, cst_SortName], 0]],
    _h2_ = [0, 848054398, [0, [0, -976970511, cst_SpecialEpisodeNumbers], 0]],
    _h3_ = [0, 848054398, [0, [0, -976970511, cst_SpecialFeatureCount], 0]],
    _h4_ = [0, 848054398, [0, [0, -976970511, cst_Studios], 0]],
    _h5_ = [0, 848054398, [0, [0, -976970511, cst_SyncInfo], 0]],
    _h6_ = [0, 848054398, [0, [0, -976970511, cst_Taglines], 0]],
    _h7_ = [0, 848054398, [0, [0, -976970511, cst_Tags], 0]],
    _h8_ = [0, 848054398, [0, [0, -976970511, cst_ThemeSongIds], 0]],
    _h9_ = [0, 848054398, [0, [0, -976970511, cst_ThemeVideoIds], 0]],
    _h__ = [0, 848054398, [0, [0, -976970511, cst_Width], 0]],
    _gD_ = [0, 848054398, [0, [0, -976970511, cst_AggregateFolder], 0]],
    _gE_ = [0, 848054398, [0, [0, -976970511, cst_Audio], 0]],
    _gF_ = [0, 848054398, [0, [0, -976970511, cst_AudioBook], 0]],
    _gG_ = [0, 848054398, [0, [0, -976970511, cst_BasePluginFolder], 0]],
    _gH_ = [0, 848054398, [0, [0, -976970511, cst_Book], 0]],
    _gI_ = [0, 848054398, [0, [0, -976970511, cst_BoxSet], 0]],
    _gJ_ = [0, 848054398, [0, [0, -976970511, cst_Channel], 0]],
    _gK_ = [0, 848054398, [0, [0, -976970511, cst_ChannelFolderItem], 0]],
    _gL_ = [0, 848054398, [0, [0, -976970511, cst_CollectionFolder], 0]],
    _gM_ = [0, 848054398, [0, [0, -976970511, cst_Episode], 0]],
    _gN_ = [0, 848054398, [0, [0, -976970511, cst_Folder], 0]],
    _gO_ = [0, 848054398, [0, [0, -976970511, cst_Genre], 0]],
    _gP_ = [0, 848054398, [0, [0, -976970511, cst_LiveTvChannel], 0]],
    _gQ_ = [0, 848054398, [0, [0, -976970511, cst_LiveTvProgram], 0]],
    _gR_ = [0, 848054398, [0, [0, -976970511, cst_ManualPlaylistsFolder], 0]],
    _gS_ = [0, 848054398, [0, [0, -976970511, cst_Movie], 0]],
    _gT_ = [0, 848054398, [0, [0, -976970511, cst_MusicAlbum], 0]],
    _gU_ = [0, 848054398, [0, [0, -976970511, cst_MusicArtist], 0]],
    _gV_ = [0, 848054398, [0, [0, -976970511, cst_MusicGenre], 0]],
    _gW_ = [0, 848054398, [0, [0, -976970511, cst_MusicVideo], 0]],
    _gX_ = [0, 848054398, [0, [0, -976970511, cst_Person], 0]],
    _gY_ = [0, 848054398, [0, [0, -976970511, cst_Photo], 0]],
    _gZ_ = [0, 848054398, [0, [0, -976970511, cst_PhotoAlbum], 0]],
    _g0_ = [0, 848054398, [0, [0, -976970511, cst_Playlist], 0]],
    _g1_ = [0, 848054398, [0, [0, -976970511, cst_PlaylistsFolder], 0]],
    _g2_ = [0, 848054398, [0, [0, -976970511, cst_Program], 0]],
    _g3_ = [0, 848054398, [0, [0, -976970511, cst_Recording], 0]],
    _g4_ = [0, 848054398, [0, [0, -976970511, cst_Season], 0]],
    _g5_ = [0, 848054398, [0, [0, -976970511, cst_Series], 0]],
    _g6_ = [0, 848054398, [0, [0, -976970511, cst_Studio], 0]],
    _g7_ = [0, 848054398, [0, [0, -976970511, cst_Trailer], 0]],
    _g8_ = [0, 848054398, [0, [0, -976970511, cst_TvChannel], 0]],
    _g9_ = [0, 848054398, [0, [0, -976970511, cst_TvProgram], 0]],
    _g__ = [0, 848054398, [0, [0, -976970511, cst_UserRootFolder], 0]],
    _g$_ = [0, 848054398, [0, [0, -976970511, cst_UserView], 0]],
    _ha_ = [0, 848054398, [0, [0, -976970511, cst_Video], 0]],
    _hb_ = [0, 848054398, [0, [0, -976970511, cst_Year], 0]],
    _gC_ = cst_Primary,
    _gn_ = [0, 848054398, [0, [0, -976970511, cst_Album], 0]],
    _go_ = [0, 848054398, [0, [0, -976970511, cst_AlbumArtist], 0]],
    _gp_ = [0, 848054398, [0, [0, -976970511, cst_Artist], 0]],
    _gq_ = [0, 848054398, [0, [0, -976970511, cst_Budget], 0]],
    _gr_ = [0, 848054398, [0, [0, -976970511, cst_CommunityRating], 0]],
    _gs_ = [0, 848054398, [0, [0, -976970511, cst_CriticRating], 0]],
    _gt_ = [0, 848054398, [0, [0, -976970511, cst_DateCreated], 0]],
    _gu_ = [0, 848054398, [0, [0, -976970511, cst_DatePlayed], 0]],
    _gv_ = [0, 848054398, [0, [0, -976970511, cst_PlayCount], 0]],
    _gw_ = [0, 848054398, [0, [0, -976970511, cst_PremiereDate], 0]],
    _gx_ = [0, 848054398, [0, [0, -976970511, cst_ProductionYear], 0]],
    _gy_ = [0, 848054398, [0, [0, -976970511, cst_SortName], 0]],
    _gz_ = [0, 848054398, [0, [0, -976970511, cst_Random], 0]],
    _gA_ = [0, 848054398, [0, [0, -976970511, cst_Revenue], 0]],
    _gB_ = [0, 848054398, [0, [0, -976970511, cst_Runtime], 0]],
    _gl_ = [0, 848054398, [0, [0, -976970511, cst_Descending], 0]],
    _gm_ = [0, 848054398, [0, [0, -976970511, cst_Ascending], 0]],
    _jw_ = [0, cst_lib_db_stores_ml, 116, 13],
    _jv_ = [0, cst_lib_db_stores_ml, 107, 19],
    _js_ = [0, cst_lib_db_stores_ml, 99, 13],
    _jr_ = [0, cst_lib_db_stores_ml, 93, 19],
    _jn_ = [0, cst_lib_db_stores_ml, 66, 13],
    _jl_ = cst_item,
    _jm_ = cst_sorts,
    _jj_ = cst_item,
    _jk_ = cst_sorts,
    _jg_ = cst_sort_name,
    _jh_ = cst_views,
    _ji_ = cst_date_added,
    _jd_ = cst_sort_name,
    _je_ = cst_views,
    _jf_ = cst_date_added,
    _jb_ = cst_item,
    _jc_ = cst_id,
    _i$_ = cst_item,
    _ja_ = cst_id,
    _jo_ = [0, cst_sorts_views],
    _jp_ = [0, "item.Name"],
    _jq_ = [0, cst_item_Id],
    _jt_ = [0, cst_sorts_views],
    _ju_ = [0, "item.Type"],
    _jx_ = [0, "sorts.sort_name"],
    _jy_ = [0, "item.CollectionType"],
    _j4_ = [0, 1, 0],
    _jY_ = [0, 6, 0],
    _jZ_ = [0, 0],
    _j0_ = [0, 33, [0, 34, 0]],
    _j2_ = cst$1,
    _j1_ = [0, 1],
    _j3_ = [0, "lib/db/sync.ml", 334, 6],
    _jV_ = [0, cst$10, 0],
    _jW_ = cst_to,
    _jX_ = "Fetching items",
    _jU_ = [0, 1],
    _jT_ = [0, 34, 0],
    _jS_ = [0, 33, 0],
    _jQ_ = [0, 1],
    _jR_ = [0, 0],
    _jO_ = [0, 0],
    _jP_ = [0, 2],
    _jL_ = [0, 6, 0],
    _jM_ = [0, 0],
    _jN_ = [0, 0],
    _j5_ = cst_to,
    _j6_ = "Upgrading indexed_db schema from version",
    _j7_ = [0, "Erasing existing stores", 0],
    _j8_ = [0, 0],
    _j9_ = [0, 0],
    _j__ = [0, 0],
    _j$_ = "Stores created:",
    _kr_ = "An error occured while loading item",
    _kn_ = cst_music,
    _ko_ = cst_music$0,
    _kp_ = [0, 0],
    _kq_ = [0, 1],
    _km_ = "Item should exists.",
    _ki_ = cst_music,
    _kj_ = cst_music$0,
    _kk_ = [0, 0],
    _kl_ = [0, 1],
    _kd_ = [0, [2, 0, 0], cst_s],
    _ke_ = cst_Audio,
    _kf_ = "Audio\0",
    _kg_ = [0, 0],
    _kh_ = [0, 1],
    _kc_ = [0, 0],
    _ka_ = "tracks",
    _kb_ = [0, 1];
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   function make(v){return [0, v];}
   function get(r){return r[1];}
   function compare_and_set(r, seen, v){
    var cur = r[1];
    return cur === seen ? (r[1] = v, 1) : 0;
   }
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   var max_int = 2147483647;
   function symbol_concat(s1, s2){return s1 + s2;}
   function char_of_int(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(_a_);
   }
   function string_of_bool(b){return b ? _b_ : _c_;}
   function string_of_int(n){return "" + n;}
   function valid_float_lexem(s){
    var l = caml_ml_string_length(s);
    function loop(i){
     var i$0 = i;
     for(;;){
      if(l <= i$0) return symbol_concat(s, _d_);
      var match = caml_string_get(s, i$0);
      a:
      {
       if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
       return s;
      }
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    return loop(0);
   }
   function string_of_float(f){
    return valid_float_lexem(caml_format_float("%.12g", f));
   }
   function symbol(l1, l2){
    if(! l1) return l2;
    var tl = l1[2], hd = l1[1];
    return [0, hd, symbol(tl, l2)];
   }
   caml_ml_open_descriptor_in(0);
   var
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2);
   function open_out_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_out(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_out(name){return open_out_gen(_e_, 438, name);}
   function flush_all(param){
    function iter(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var l = param$0[2], a = param$0[1];
      try{caml_ml_flush(a);}
      catch(_tT_){
       var _tS_ = caml_wrap_exception(_tT_);
       if(_tS_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_tS_, 0);
      }
      param$0 = l;
     }
    }
    return iter(caml_ml_out_channels_list(0));
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function output_substring(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
     return caml_ml_output(oc, s, ofs, len);
    return invalid_arg(_f_);
   }
   function close_out(oc){
    caml_ml_flush(oc);
    caml_ml_close_channel(oc);
    return;
   }
   function open_in_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_in(name){return open_in_gen(_g_, 0, name);}
   function input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_input(ic, s, ofs, len);
    return invalid_arg(_h_);
   }
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   var exit_function = make(flush_all);
   function at_exit(f){
    for(;;){
     var f_yet_to_run = make(1), old_exit = get(exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
         if(compare_and_set(f_yet_to_run$0, 1, 0)) caml_call1(f, 0);
         return caml_call1(old_exit$0, 0);
        },
      success = compare_and_set(exit_function, old_exit, new_exit),
      _tR_ = 1 - success;
     if(! _tR_) return _tR_;
    }
   }
   function do_at_exit(param){return caml_call1(get(exit_function), 0);}
   caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   function _i_(_tQ_){return caml_ml_close_channel(_tQ_);}
   function _j_(_tP_, _tO_){return caml_ml_output_char(_tP_, _tO_);}
   function _k_(_tN_){return caml_ml_flush(_tN_);}
   var
    max_array_length = caml_sys_const_max_wosize(0),
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function is_block(a){return 1 - (typeof a === "number" ? 1 : 0);}
   var Undefined = [248, _l_, caml_fresh_oo_id(0)];
   function raise_undefined(param){
    throw caml_maybe_attach_backtrace(Undefined, 1);
   }
   function force_lazy_block(blk){
    var closure = blk[1];
    blk[1] = raise_undefined;
    try{
     var result = caml_call1(closure, 0);
     caml_obj_make_forward(blk, result);
     return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     blk[1] = function(param){throw caml_maybe_attach_backtrace(e, 0);};
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function value(o, default$0){
    if(! o) return default$0;
    var v = o[1];
    return v;
   }
   function map(f, o){
    if(! o) return 0;
    var v = o[1];
    return [0, caml_call1(f, v)];
   }
   function get_ok(param){
    if(0 !== param[0]) return invalid_arg(_m_);
    var v = param[1];
    return v;
   }
   function map$0(f, e){
    if(0 !== e[0]) return e;
    var v = e[1];
    return [0, caml_call1(f, v)];
   }
   function of_int_exn(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(_n_);
   }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c) return _o_;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){if(39 <= c) return _p_; break a;}
      if(14 > c)
       switch(c){
         case 8:
          return _q_;
         case 9:
          return _r_;
         case 10:
          return _s_;
         case 13:
          return _t_;
       }
     }
     var s = caml_create_bytes(4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s);
    }
    var s$0 = caml_create_bytes(1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0);
   }
   function lowercase_ascii(c){return 25 < c - 65 >>> 0 ? c : c + 32 | 0;}
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function compare(c1, c2){return c1 - c2 | 0;}
   function equal(c1, c2){return 0 === compare(c1, c2) ? 1 : 0;}
   function hd(param){
    if(! param) return failwith(_u_);
    var a = param[1];
    return a;
   }
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0;
     var l1$1 = l1$0[2], a = l1$0[1], l2$1 = [0, a, l2$0];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function rev(l){return rev_append(l, 0);}
   function init_tailrec_aux(acc, i, n, f){
    var acc$0 = acc, i$0 = i;
    for(;;){
     if(n <= i$0) return acc$0;
     var i$1 = i$0 + 1 | 0, acc$1 = [0, caml_call1(f, i$0), acc$0];
     acc$0 = acc$1;
     i$0 = i$1;
    }
   }
   function init_aux(i, n, f){
    if(n <= i) return 0;
    var r = caml_call1(f, i);
    return [0, r, init_aux(i + 1 | 0, n, f)];
   }
   function init(len, f){
    return 0 <= len
            ? 50
              < len
              ? rev(init_tailrec_aux(0, 0, len, f))
              : init_aux(0, len, f)
            : invalid_arg(_v_);
   }
   function flatten(param){
    if(! param) return 0;
    var r = param[2], l = param[1];
    return symbol(l, flatten(r));
   }
   function map$1(f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call1(f, a);
    return [0, r, map$1(f, l)];
   }
   function rev_map(f, l){
    function rmap_f(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return accu$0;
      var
       l = param$0[2],
       a = param$0[1],
       accu$1 = [0, caml_call1(f, a), accu$0];
      accu$0 = accu$1;
      param$0 = l;
     }
    }
    return rmap_f(0, l);
   }
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     caml_call1(f, a);
     param$0 = l;
    }
   }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
    for(;;){
     if(! l$0) return accu$0;
     var l$1 = l$0[2], a = l$0[1], accu$1 = caml_call2(f, accu$0, a);
     accu$0 = accu$1;
     l$0 = l$1;
    }
   }
   function exists(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _tM_ = caml_call1(p, a);
     if(_tM_) return _tM_;
     param$0 = l;
    }
   }
   function memq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1], _tL_ = a === x ? 1 : 0;
     if(_tL_) return _tL_;
     param$0 = l;
    }
   }
   function min$0(x, y){return x <= y ? x : y;}
   function max(x, y){return y <= x ? x : y;}
   function to_string(x){return "" + x;}
   function make$0(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function copy(s){
    var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
   }
   function of_string(s){return copy(caml_bytes_of_string(s));}
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return invalid_arg(_w_);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2){caml_blit_bytes(s1, ofs1, s2, ofs2, len); return;}
    return invalid_arg(_x_);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2){caml_blit_string(s1, ofs1, s2, ofs2, len); return;}
    return invalid_arg(_y_);
   }
   function escaped$0(s){
    var n = [0, 0], _tE_ = caml_ml_bytes_length(s) - 1 | 0, _tD_ = 0;
    if(_tE_ >= 0){
     var i$0 = _tD_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _tI_ = match - 34 | 0;
          if(58 < _tI_ >>> 0){
           if(93 <= _tI_) break c;
          }
          else if(56 < _tI_ - 1 >>> 0) break b;
          var _tJ_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _tJ_ = 4;
        break a;
       }
       var _tJ_ = 2;
      }
      n[1] = n[1] + _tJ_ | 0;
      var _tK_ = i$0 + 1 | 0;
      if(_tE_ === i$0) break;
      i$0 = _tK_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s)) return copy(s);
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var _tG_ = caml_ml_bytes_length(s) - 1 | 0, _tF_ = 0;
    if(_tG_ >= 0){
     var i = _tF_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _tH_ = i + 1 | 0;
      if(_tG_ === i) break;
      i = _tH_;
     }
    }
    return s$0;
   }
   function map$2(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _tB_ = l - 1 | 0, _tA_ = 0;
    if(_tB_ >= 0){
     var i = _tA_;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(s, i)));
      var _tC_ = i + 1 | 0;
      if(_tB_ === i) break;
      i = _tC_;
     }
    }
    return r;
   }
   function uppercase_ascii$0(s){return map$2(uppercase_ascii, s);}
   function lowercase_ascii$0(s){return map$2(lowercase_ascii, s);}
   function unsafe_of_string(_tz_){return caml_bytes_of_string(_tz_);}
   function unsafe_to_string(_ty_){return caml_string_of_bytes(_ty_);}
   function make$1(n, c){return unsafe_to_string(make$0(n, c));}
   function sub$0(s, ofs, len){
    return unsafe_to_string(sub(unsafe_of_string(s), ofs, len));
   }
   function ensure_ge(x, y){return y <= x ? x : invalid_arg(_z_);}
   function sum_lengths(acc, seplen, param){
    var acc$0 = acc, param$0 = param;
    for(;;){
     if(! param$0) return acc$0;
     var hd = param$0[1];
     if(! param$0[2]) return caml_ml_string_length(hd) + acc$0 | 0;
     var
      tl = param$0[2],
      acc$1 =
        ensure_ge((caml_ml_string_length(hd) + seplen | 0) + acc$0 | 0, acc$0);
     acc$0 = acc$1;
     param$0 = tl;
    }
   }
   function unsafe_blits(dst, pos, sep, seplen, param){
    var pos$0 = pos, param$0 = param;
    for(;;){
     if(! param$0) return dst;
     var hd = param$0[1];
     if(! param$0[2]){
      caml_blit_string(hd, 0, dst, pos$0, caml_ml_string_length(hd));
      return dst;
     }
     var tl = param$0[2];
     caml_blit_string(hd, 0, dst, pos$0, caml_ml_string_length(hd));
     caml_blit_string
      (sep, 0, dst, pos$0 + caml_ml_string_length(hd) | 0, seplen);
     var pos$1 = (pos$0 + caml_ml_string_length(hd) | 0) + seplen | 0;
     pos$0 = pos$1;
     param$0 = tl;
    }
   }
   function concat(sep, l){
    if(! l) return _A_;
    var seplen = caml_ml_string_length(sep);
    return unsafe_to_string
            (unsafe_blits
              (caml_create_bytes(sum_lengths(0, seplen, l)),
               0,
               sep,
               seplen,
               l));
   }
   function escaped$1(s){
    function escape_if_needed(s, n, i){
     var i$0 = i;
     for(;;){
      if(n <= i$0) return s;
      var _tx_ = caml_string_unsafe_get(s, i$0) - 32 | 0;
      a:
      {
       if(59 < _tx_ >>> 0){
        if(33 < _tx_ - 61 >>> 0) break a;
       }
       else if(2 === _tx_) break a;
       var i$1 = i$0 + 1 | 0;
       i$0 = i$1;
       continue;
      }
      return unsafe_to_string(escaped$0(unsafe_of_string(s)));
     }
    }
    return escape_if_needed(s, caml_ml_string_length(s), 0);
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function index_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return invalid_arg(_B_);
   }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _tv_ = 1; return _tv_;}
     catch(_tw_){
      var _tu_ = caml_wrap_exception(_tw_);
      if(_tu_ === Not_found) return 0;
      throw caml_maybe_attach_backtrace(_tu_, 0);
     }
    return invalid_arg(_C_);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function uppercase_ascii$1(s){
    return unsafe_to_string(uppercase_ascii$0(unsafe_of_string(s)));
   }
   function lowercase_ascii$1(s){
    return unsafe_to_string(lowercase_ascii$0(unsafe_of_string(s)));
   }
   function compare$0(x, y){return caml_string_compare(x, y);}
   function symbol$0(_tt_, _ts_){return _tt_ == _ts_ ? 1 : 0;}
   function init$0(l, f){
    if(0 === l) return [0];
    if(0 > l) return invalid_arg(_D_);
    var res = caml_make_vect(l, caml_call1(f, 0)), _tq_ = l - 1 | 0, _tp_ = 1;
    if(_tq_ >= 1){
     var i = _tp_;
     for(;;){
      res[1 + i] = caml_call1(f, i);
      var _tr_ = i + 1 | 0;
      if(_tq_ === i) break;
      i = _tr_;
     }
    }
    return res;
   }
   function fill(a, ofs, len, v){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs){caml_array_fill(a, ofs, len, v); return;}
    return invalid_arg(_E_);
   }
   function blit$0(a1, ofs1, a2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2){
     caml_array_blit(a1, ofs1, a2, ofs2, len);
     return;
    }
    return invalid_arg(_F_);
   }
   function iter$0(f, a){
    var _tn_ = a.length - 2 | 0, _tm_ = 0;
    if(_tn_ >= 0){
     var i = _tm_;
     for(;;){
      caml_call1(f, a[1 + i]);
      var _to_ = i + 1 | 0;
      if(_tn_ === i) break;
      i = _to_;
     }
    }
    return;
   }
   function map$3(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call1(f, a[1])),
     _tk_ = l - 1 | 0,
     _tj_ = 1;
    if(_tk_ >= 1){
     var i = _tj_;
     for(;;){
      r[1 + i] = caml_call1(f, a[1 + i]);
      var _tl_ = i + 1 | 0;
      if(_tk_ === i) break;
      i = _tl_;
     }
    }
    return r;
   }
   function to_list(a){
    function tolist(i, res){
     var i$0 = i, res$0 = res;
     for(;;){
      if(0 > i$0) return res$0;
      var res$1 = [0, a[1 + i$0], res$0], i$1 = i$0 - 1 | 0;
      i$0 = i$1;
      res$0 = res$1;
     }
    }
    return tolist(a.length - 2 | 0, 0);
   }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var t = param$0[2], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = t;
    }
   }
   function of_list(l){
    if(! l) return [0];
    var tl = l[2], hd = l[1], a = caml_make_vect(list_length(0, l), hd);
    function fill(i, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return a;
      var tl = param$0[2], hd = param$0[1];
      a[1 + i$0] = hd;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param$0 = tl;
     }
    }
    return fill(1, tl);
   }
   var Bottom = [248, _G_, caml_fresh_oo_id(0)];
   function sort(cmp, a){
    function maxson(l, i){
     var i31 = ((i + i | 0) + i | 0) + 1 | 0, x = [0, i31];
     if((i31 + 2 | 0) < l){
      var _tc_ = i31 + 1 | 0, _td_ = caml_check_bound(a, _tc_)[1 + _tc_];
      if(caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _td_) < 0)
       x[1] = i31 + 1 | 0;
      var
       _te_ = i31 + 2 | 0,
       _tf_ = caml_check_bound(a, _te_)[1 + _te_],
       _tg_ = x[1];
      if(caml_call2(cmp, caml_check_bound(a, _tg_)[1 + _tg_], _tf_) < 0)
       x[1] = i31 + 2 | 0;
      return x[1];
     }
     if((i31 + 1 | 0) < l){
      var _th_ = i31 + 1 | 0, _ti_ = caml_check_bound(a, _th_)[1 + _th_];
      if(0 > caml_call2(cmp, caml_check_bound(a, i31)[1 + i31], _ti_))
       return i31 + 1 | 0;
     }
     if(i31 < l) return i31;
     throw caml_maybe_attach_backtrace([0, Bottom, i], 1);
    }
    function trickledown(l, i, e){
     var i$0 = i;
     for(;;){
      var j = maxson(l, i$0);
      if(0 >= caml_call2(cmp, caml_check_bound(a, j)[1 + j], e)){caml_check_bound(a, i$0)[1 + i$0] = e; return;}
      var _tb_ = caml_check_bound(a, j)[1 + j];
      caml_check_bound(a, i$0)[1 + i$0] = _tb_;
      i$0 = j;
     }
    }
    function trickle(l, i, e){
     try{trickledown(l, i, e); return;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
      var i$0 = exn[2];
      caml_check_bound(a, i$0)[1 + i$0] = e;
      return;
     }
    }
    function bubbledown(l, i){
     var i$0 = i;
     for(;;){
      var j = maxson(l, i$0), _ta_ = caml_check_bound(a, j)[1 + j];
      caml_check_bound(a, i$0)[1 + i$0] = _ta_;
      i$0 = j;
     }
    }
    function bubble(l, i){
     try{var _s$_ = bubbledown(l, i); return _s$_;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
      var i$0 = exn[2];
      return i$0;
     }
    }
    function trickleup(i, e){
     var i$0 = i;
     for(;;){
      var father = (i$0 - 1 | 0) / 3 | 0;
      if(i$0 === father)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
      if(0 <= caml_call2(cmp, caml_check_bound(a, father)[1 + father], e)){caml_check_bound(a, i$0)[1 + i$0] = e; return;}
      var _s__ = caml_check_bound(a, father)[1 + father];
      caml_check_bound(a, i$0)[1 + i$0] = _s__;
      if(0 >= father){caml_check_bound(a, 0)[1] = e; return;}
      i$0 = father;
     }
    }
    var l = a.length - 1, _s6_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
    if(_s6_ >= 0){
     var i$0 = _s6_;
     for(;;){
      trickle(l, i$0, caml_check_bound(a, i$0)[1 + i$0]);
      var _s9_ = i$0 - 1 | 0;
      if(0 === i$0) break;
      i$0 = _s9_;
     }
    }
    var _s7_ = l - 1 | 0;
    if(_s7_ >= 2){
     var i = _s7_;
     for(;;){
      var e$0 = caml_check_bound(a, i)[1 + i];
      a[1 + i] = caml_check_bound(a, 0)[1];
      trickleup(bubble(i, 0), e$0);
      var _s8_ = i - 1 | 0;
      if(2 === i) break;
      i = _s8_;
     }
    }
    if(1 < l){
     var e = caml_check_bound(a, 1)[2];
     a[2] = caml_check_bound(a, 0)[1];
     a[1] = e;
    }
    return;
   }
   function lex_refill(read_fun, aux_buffer, lexbuf){
    var
     read = caml_call2(read_fun, aux_buffer, caml_ml_bytes_length(aux_buffer)),
     n = 0 < read ? read : (lexbuf[9] = 1, 0);
    if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0)){
     if
      (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
       <= caml_ml_bytes_length(lexbuf[2]))
      blit(lexbuf[2], lexbuf[5], lexbuf[2], 0, lexbuf[3] - lexbuf[5] | 0);
     else{
      var
       newlen =
         min$0(2 * caml_ml_bytes_length(lexbuf[2]) | 0, max_string_length);
      if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0)) failwith(_I_);
      var newbuf = caml_create_bytes(newlen);
      blit(lexbuf[2], lexbuf[5], newbuf, 0, lexbuf[3] - lexbuf[5] | 0);
      lexbuf[2] = newbuf;
     }
     var s = lexbuf[5];
     lexbuf[4] = lexbuf[4] + s | 0;
     lexbuf[6] = lexbuf[6] - s | 0;
     lexbuf[5] = 0;
     lexbuf[7] = lexbuf[7] - s | 0;
     lexbuf[3] = lexbuf[3] - s | 0;
     var t = lexbuf[10], _s4_ = t.length - 2 | 0, _s3_ = 0;
     if(_s4_ >= 0){
      var i = _s3_;
      for(;;){
       var v = caml_check_bound(t, i)[1 + i];
       if(0 <= v) caml_check_bound(t, i)[1 + i] = v - s | 0;
       var _s5_ = i + 1 | 0;
       if(_s4_ === i) break;
       i = _s5_;
      }
     }
    }
    blit(aux_buffer, 0, lexbuf[2], lexbuf[3], n);
    lexbuf[3] = lexbuf[3] + n | 0;
    return 0;
   }
   function from_function(opt, f){
    if(opt)
     var sth = opt[1], with_positions = sth;
    else
     var with_positions = 1;
    var
     _sZ_ = with_positions ? zero_pos : dummy_pos,
     _s0_ = with_positions ? zero_pos : dummy_pos,
     _s1_ = caml_create_bytes(512);
    return [0,
            function(_s2_){return lex_refill(f, _s1_, _s2_);},
            caml_create_bytes(1024),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            [0],
            _s0_,
            _sZ_];
   }
   function from_channel(with_positions, ic){
    return from_function
            (with_positions, function(buf, n){return input(ic, buf, 0, n);});
   }
   function from_string(opt, s){
    if(opt)
     var sth = opt[1], with_positions = sth;
    else
     var with_positions = 1;
    var
     _sX_ = with_positions ? zero_pos : dummy_pos,
     _sY_ = with_positions ? zero_pos : dummy_pos;
    return [0,
            function(lexbuf){lexbuf[9] = 1; return 0;},
            of_string(s),
            caml_ml_string_length(s),
            0,
            0,
            0,
            0,
            0,
            1,
            [0],
            _sY_,
            _sX_];
   }
   function lexeme(lexbuf){
    var len = lexbuf[6] - lexbuf[5] | 0;
    return sub_string(lexbuf[2], lexbuf[5], len);
   }
   function sub_lexeme(lexbuf, i1, i2){
    var len = i2 - i1 | 0;
    return sub_string(lexbuf[2], i1, len);
   }
   function Make(Ord){
    function height(param){if(! param) return 0; var h = param[4]; return h;}
    function create(l, v, r){
     if(l) var h = l[4], hl = h; else var hl = 0;
     if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
     var _sW_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
     return [0, l, v, r, _sW_];
    }
    function bal(l, v, r){
     if(l) var h = l[4], hl = h; else var hl = 0;
     if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
     if((hr + 2 | 0) < hl){
      if(! l) return invalid_arg(_K_);
      var lr = l[3], lv = l[2], ll = l[1], _sR_ = height(lr);
      if(_sR_ <= height(ll)) return create(ll, lv, create(lr, v, r));
      if(! lr) return invalid_arg(_J_);
      var lrr = lr[3], lrv = lr[2], lrl = lr[1], _sS_ = create(lrr, v, r);
      return create(create(ll, lv, lrl), lrv, _sS_);
     }
     if((hl + 2 | 0) >= hr){
      var _sV_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
      return [0, l, v, r, _sV_];
     }
     if(! r) return invalid_arg(_M_);
     var rr = r[3], rv = r[2], rl = r[1], _sT_ = height(rl);
     if(_sT_ <= height(rr)) return create(create(l, v, rl), rv, rr);
     if(! rl) return invalid_arg(_L_);
     var rlr = rl[3], rlv = rl[2], rll = rl[1], _sU_ = create(rlr, rv, rr);
     return create(create(l, v, rll), rlv, _sU_);
    }
    function add(x, t){
     if(! t) return [0, 0, x, 0, 1];
     var r = t[3], v = t[2], l = t[1], c = caml_call2(Ord[1], x, v);
     if(0 === c) return t;
     if(0 <= c){var rr = add(x, r); return r === rr ? t : bal(l, v, rr);}
     var ll = add(x, l);
     return l === ll ? t : bal(ll, v, r);
    }
    function iter(f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var r = param$0[3], v = param$0[2], l = param$0[1];
      iter(f, l);
      caml_call1(f, v);
      param$0 = r;
     }
    }
    function elements_aux(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return accu$0;
      var
       r = param$0[3],
       v = param$0[2],
       l = param$0[1],
       accu$1 = [0, v, elements_aux(accu$0, r)];
      accu$0 = accu$1;
      param$0 = l;
     }
    }
    function elements(s){return elements_aux(0, s);}
    function find_last_opt_aux(v0, f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var r = param$0[3], v0$0 = param$0[2], l = param$0[1];
      param$0 = caml_call1(f, v0$0) ? r : l;
     }
    }
    function find_last_opt(f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var r = param$0[3], v = param$0[2], l = param$0[1];
      if(caml_call1(f, v)) return find_last_opt_aux(v, f, r);
      param$0 = l;
     }
    }
    return [0,
            ,
            ,
            ,
            add,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            0,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            iter,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            elements,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            find_last_opt];
   }
   function _N_(_sP_){
    var _sQ_ = Make(_sP_);
    return [0,
            _sQ_[17],
            ,
            ,
            _sQ_[4],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _sQ_[31],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _sQ_[39],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _sQ_[50]];
   }
   function create(param){return [0, 0, 0];}
   function clear(s){s[1] = 0; s[2] = 0; return;}
   function push(x, s){s[1] = [0, x, s[1]]; s[2] = s[2] + 1 | 0; return 0;}
   function pop_opt(s){
    var match = s[1];
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return [0, hd];
   }
   function top_opt(s){
    var match = s[1];
    if(! match) return 0;
    var hd = match[1];
    return [0, hd];
   }
   function iter$1(f, s){return iter(f, s[1]);}
   var Empty = [248, _O_, caml_fresh_oo_id(0)];
   function create$0(param){return [0, 0, 0, 0];}
   function clear$0(q){q[1] = 0; q[2] = 0; q[3] = 0; return;}
   function add(x, q){
    var cell = [0, x, 0], match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
   }
   function peek_opt(q){
    var match = q[2];
    if(! match) return 0;
    var content = match[1];
    return [0, content];
   }
   function take(q){
    var _sO_ = q[2];
    if(! _sO_) throw caml_maybe_attach_backtrace(Empty, 1);
    if(_sO_[2]){var next = _sO_[2]; q[1] = q[1] - 1 | 0; q[2] = next; return;}
    clear$0(q);
    return;
   }
   function take_opt(q){
    var _sN_ = q[2];
    if(! _sN_) return 0;
    var content = _sN_[1];
    if(_sN_[2]){
     var next = _sN_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return [0, content];
    }
    clear$0(q);
    return [0, content];
   }
   function length(q){return q[1];}
   function from(f){return [0, [0, 0, [3, [0, 0, f]]]];}
   function create$1(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = max_string_length < n$0 ? max_string_length : n$0,
     s = caml_create_bytes(n$1);
    return [0, s, 0, n$1, s];
   }
   function contents(b){return sub_string(b[1], 0, b[2]);}
   function sub$1(b, ofs, len){
    if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
     return sub_string(b[1], ofs, len);
    return invalid_arg(_P_);
   }
   function length$0(b){return b[2];}
   function reset(b){
    b[2] = 0;
    b[1] = b[4];
    b[3] = caml_ml_bytes_length(b[1]);
    return;
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[3], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(max_string_length < new_len[1])
     if((old_pos + more | 0) <= max_string_length)
      new_len[1] = max_string_length;
     else
      failwith(_S_);
    var new_buffer = caml_create_bytes(new_len[1]);
    blit(b[1], 0, new_buffer, 0, b[2]);
    b[1] = new_buffer;
    b[3] = new_len[1];
    if((b[2] + more | 0) > b[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _R_], 1);
    if((old_pos + more | 0) <= b[3]) return;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _Q_], 1);
   }
   function add_char(b, c){
    var pos = b[2];
    if(b[3] <= pos) resize(b, 1);
    caml_bytes_unsafe_set(b[1], pos, c);
    b[2] = pos + 1 | 0;
    return 0;
   }
   function add_substring(b, s, offset, len){
    var _sK_ = offset < 0 ? 1 : 0;
    if(_sK_)
     var _sL_ = _sK_;
    else
     var
      _sM_ = len < 0 ? 1 : 0,
      _sL_ = _sM_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_sL_) invalid_arg(_U_);
    var new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, offset, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_string(b, s){
    var len = caml_ml_string_length(s), new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, 0, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var len = caml_ml_bytes_length(buf[2]), min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len = max(len * 2 | 0, min_len),
      new_str = caml_create_bytes(new_len);
     blit(buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
    return;
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    blit_string(s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return;
   }
   function buffer_contents(buf){return sub_string(buf[2], 0, buf[1]);}
   function char_of_fconv(opt, fconv){
    if(opt) var sth = opt[1], cF = sth; else var cF = 70;
    switch(fconv[2]){
      case 0:
       return 102;
      case 1:
       return 101;
      case 2:
       return 69;
      case 3:
       return 103;
      case 4:
       return 71;
      case 5:
       return cF;
      case 6:
       return 104;
      case 7:
       return 72;
      default: return 70;
    }
   }
   function bprint_fconv_flag(buf, fconv){
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) return buffer_add_char(buf, 35);
    return;
   }
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return _V_;
       case 1:
        return _W_;
       case 2:
        return _X_;
       case 3:
        return _Y_;
       case 4:
        return _Z_;
       case 5:
        return ___;
       default: return _$_;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default:
       var c = formatting_lit[1]; return symbol_concat(_aa_, make$1(1, c));
    }
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, _ab_);
        fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, _ac_);
        fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, _ad_);
        fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, _ae_);
        fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, _af_);
        fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, _ag_);
        fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, _ah_);
        fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, _ai_);
        fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, _aj_);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, _ak_);
        fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, _al_);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, _am_);
        fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, _an_);
        fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, _ao_);
        fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, _ap_);
        fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, _aq_);
        fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, _ar_);
        fmtty$0 = fmtty$15;
     }
    }
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param === "number")
     return [0,
             function(param){return;},
             function(param){return;},
             function(param){return;},
             function(param){return;}];
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match = fmtty_rel_det(rest),
        de = match[4],
        ed = match[3],
        af = match[2],
        fa = match[1];
       return [0,
               function(param){fa(0); return;},
               function(param){af(0); return;},
               ed,
               de];
      case 1:
       var
        rest$0 = param[1],
        match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        ed$0 = match$0[3],
        af$0 = match$0[2],
        fa$0 = match$0[1];
       return [0,
               function(param){fa$0(0); return;},
               function(param){af$0(0); return;},
               ed$0,
               de$0];
      case 2:
       var
        rest$1 = param[1],
        match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        ed$1 = match$1[3],
        af$1 = match$1[2],
        fa$1 = match$1[1];
       return [0,
               function(param){fa$1(0); return;},
               function(param){af$1(0); return;},
               ed$1,
               de$1];
      case 3:
       var
        rest$2 = param[1],
        match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        ed$2 = match$2[3],
        af$2 = match$2[2],
        fa$2 = match$2[1];
       return [0,
               function(param){fa$2(0); return;},
               function(param){af$2(0); return;},
               ed$2,
               de$2];
      case 4:
       var
        rest$3 = param[1],
        match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        ed$3 = match$3[3],
        af$3 = match$3[2],
        fa$3 = match$3[1];
       return [0,
               function(param){fa$3(0); return;},
               function(param){af$3(0); return;},
               ed$3,
               de$3];
      case 5:
       var
        rest$4 = param[1],
        match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        ed$4 = match$4[3],
        af$4 = match$4[2],
        fa$4 = match$4[1];
       return [0,
               function(param){fa$4(0); return;},
               function(param){af$4(0); return;},
               ed$4,
               de$4];
      case 6:
       var
        rest$5 = param[1],
        match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        ed$5 = match$5[3],
        af$5 = match$5[2],
        fa$5 = match$5[1];
       return [0,
               function(param){fa$5(0); return;},
               function(param){af$5(0); return;},
               ed$5,
               de$5];
      case 7:
       var
        rest$6 = param[1],
        match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        ed$6 = match$6[3],
        af$6 = match$6[2],
        fa$6 = match$6[1];
       return [0,
               function(param){fa$6(0); return;},
               function(param){af$6(0); return;},
               ed$6,
               de$6];
      case 8:
       var
        rest$7 = param[2],
        match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        ed$7 = match$7[3],
        af$7 = match$7[2],
        fa$7 = match$7[1];
       return [0,
               function(param){fa$7(0); return;},
               function(param){af$7(0); return;},
               ed$7,
               de$7];
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        ed$8 = match$8[3],
        af$8 = match$8[2],
        fa$8 = match$8[1],
        ty = trans(symm(ty1), ty2),
        match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        dj = match$9[3],
        ga = match$9[2],
        ag = match$9[1];
       return [0,
               function(param){fa$8(0); ag(0); return;},
               function(param){ga(0); af$8(0); return;},
               function(param){ed$8(0); dj(0); return;},
               function(param){jd(0); de$8(0); return;}];
      case 10:
       var
        rest$9 = param[1],
        match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        ed$9 = match$10[3],
        af$9 = match$10[2],
        fa$9 = match$10[1];
       return [0,
               function(param){fa$9(0); return;},
               function(param){af$9(0); return;},
               ed$9,
               de$9];
      case 11:
       var
        rest$10 = param[1],
        match$11 = fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        ed$10 = match$11[3],
        af$10 = match$11[2],
        fa$10 = match$11[1];
       return [0,
               function(param){fa$10(0); return;},
               function(param){af$10(0); return;},
               ed$10,
               de$10];
      case 12:
       var
        rest$11 = param[1],
        match$12 = fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        ed$11 = match$12[3],
        af$11 = match$12[2],
        fa$11 = match$12[1];
       return [0,
               function(param){fa$11(0); return;},
               function(param){af$11(0); return;},
               ed$11,
               de$11];
      case 13:
       var
        rest$12 = param[1],
        match$13 = fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        ed$12 = match$13[3],
        af$12 = match$13[2],
        fa$12 = match$13[1];
       return [0,
               function(param){fa$12(0); return;},
               function(param){af$12(0); return;},
               function(param){ed$12(0); return;},
               function(param){de$12(0); return;}];
      default:
       var
        rest$13 = param[1],
        match$14 = fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        ed$13 = match$14[3],
        af$13 = match$14[2],
        fa$13 = match$14[1];
       return [0,
               function(param){fa$13(0); return;},
               function(param){af$13(0); return;},
               function(param){ed$13(0); return;},
               function(param){de$13(0); return;}];
    }
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _sJ_ = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), _sJ_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aB_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aC_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aD_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aE_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aF_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aG_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aH_], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aA_], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, _as_], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _au_], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _at_], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _az_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ay_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ax_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aw_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _av_], 1);
   }
   var Type_mismatch = [248, _aI_, caml_fresh_oo_id(0)];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_format(fmt, fmtty){
    var _sI_ = type_format_gen(fmt, fmtty);
    if(typeof _sI_[2] !== "number")
     throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    var fmt$0 = _sI_[1];
    return fmt$0;
   }
   function type_format_gen(fmt, fmtty){
    if(typeof fmt === "number") return [0, 0, fmtty];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty$0 = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$1 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$1];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$2 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$3 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$4 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$5 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$6 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$7 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$8 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$9 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$9];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty),
        fmtty$10 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$10];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty),
        fmtty$11 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$11];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty),
        fmtty$12 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$12];
      case 13:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[2],
         sub_fmtty = fmtty[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$13 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$13];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[3],
         sub_fmtty1 = fmtty[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _sH_ = [0, erase_rel(sub_fmtty1)];
        if(caml_notequal([0, erase_rel(sub_fmtty$1)], _sH_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 = type_format_gen(fmt_rest$13, erase_rel(fmtty_rest$10)),
         fmtty$14 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$14];
       }
       break;
      case 15:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$15 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$15];
       }
       break;
      case 16:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$16 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$16];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty),
        fmtty$17 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$17];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       return type_formatting_gen(formatting_gen, fmt_rest$17, fmtty);
      case 19:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$13 = fmtty[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$18 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$18];
       }
       break;
      case 20:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$14 = fmtty[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$19 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$19];
       }
       break;
      case 21:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$15 = fmtty[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$20 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$20];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       return type_ignored_param(ign, rest, fmtty);
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_formatting_gen(formatting_gen, fmt0, fmtty0){
    if(0 === formatting_gen[0]){
     var
      match = formatting_gen[1],
      str = match[2],
      fmt1 = match[1],
      match$0 = type_format_gen(fmt1, fmtty0),
      fmtty2 = match$0[2],
      fmt2 = match$0[1],
      match$1 = type_format_gen(fmt0, fmtty2),
      fmtty3 = match$1[2],
      fmt3 = match$1[1];
     return [0, [18, [0, [0, fmt2, str]], fmt3], fmtty3];
    }
    var
     match$2 = formatting_gen[1],
     str$0 = match$2[2],
     fmt1$0 = match$2[1],
     match$3 = type_format_gen(fmt1$0, fmtty0),
     fmtty2$0 = match$3[2],
     fmt2$0 = match$3[1],
     match$4 = type_format_gen(fmt0, fmtty2$0),
     fmtty3$0 = match$4[2],
     fmt3$0 = match$4[1];
    return [0, [18, [1, [0, fmt2$0, str$0]], fmt3$0], fmtty3$0];
   }
   function type_ignored_param(ign, fmt, fmtty){
    if(typeof ign !== "number")
     switch(ign[0]){
       case 0:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 1:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 2:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 3:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 4:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 5:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 6:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 7:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 8:
        var sub_fmtty = ign[2], pad_opt = ign[1];
        return type_ignored_param_one([8, pad_opt, sub_fmtty], fmt, fmtty);
       case 9:
        var
         sub_fmtty$0 = ign[2],
         pad_opt$0 = ign[1],
         _sG_ = type_ignored_format_substituti(sub_fmtty$0, fmt, fmtty),
         match$0 = _sG_[2],
         fmtty$1 = match$0[2],
         fmt$1 = match$0[1],
         sub_fmtty$1 = _sG_[1];
        return [0, [23, [9, pad_opt$0, sub_fmtty$1], fmt$1], fmtty$1];
       case 10:
        return type_ignored_param_one(ign, fmt, fmtty);
       default: return type_ignored_param_one(ign, fmt, fmtty);
     }
    switch(ign){
      case 0:
       return type_ignored_param_one(ign, fmt, fmtty);
      case 1:
       return type_ignored_param_one(ign, fmt, fmtty);
      case 2:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         match = type_format_gen(fmt, fmtty_rest),
         fmtty$0 = match[2],
         fmt$0 = match[1];
        return [0, [23, 2, fmt$0], fmtty$0];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      default: return type_ignored_param_one(ign, fmt, fmtty);
    }
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _sE_ = [0, erase_rel(sub1_fmtty)];
        if(caml_notequal([0, erase_rel(sub1_fmtty$0)], _sE_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _sF_ = [0, erase_rel(sub2_fmtty$1)];
        if(caml_notequal([0, erase_rel(sub2_fmtty$2)], _sF_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (erase_rel(sub_fmtty_rest$17), fmt, fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function recast(fmt, fmtty){
    return type_format(fmt, erase_rel(symm(fmtty)));
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = abs(width);
    if(width$0 <= len) return str;
    var _sD_ = 2 === padty$0 ? 48 : 32, res = make$0(width$0, _sD_);
    switch(padty$0){
      case 0:
       blit_string(str, 0, res, 0, len); break;
      case 1:
       blit_string(str, 0, res, width$0 - len | 0, len); break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        blit_string(str, 1, res, (width$0 - len | 0) + 1 | 0, len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        blit_string(str, 2, res, (width$0 - len | 0) + 2 | 0, len - 2 | 0);
        break;
       }
       blit_string(str, 0, res, width$0 - len | 0, len);
    }
    return unsafe_to_string(res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = abs(prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
            if
             (120 !== caml_string_get(str, 1)
              && 88 !== caml_string_get(str, 1))
             break c;
            var res$1 = make$0(prec$0 + 2 | 0, 48);
            caml_bytes_set(res$1, 1, caml_string_get(str, 1));
            blit_string
             (str, 2, res$1, (prec$0 - len | 0) + 4 | 0, len - 2 | 0);
            return unsafe_to_string(res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = make$0(prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       blit_string(str, 1, res$0, (prec$0 - len | 0) + 2 | 0, len - 1 | 0);
       return unsafe_to_string(res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = make$0(prec$0, 48);
      blit_string(str, 0, res, prec$0 - len | 0, len);
      return unsafe_to_string(res);
     }
    }
    return str;
   }
   function string_to_caml_string(str){
    var
     str$0 = escaped$1(str),
     l = caml_ml_string_length(str$0),
     res = make$0(l + 2 | 0, 34);
    caml_blit_string(str$0, 0, res, 1, l);
    return unsafe_to_string(res);
   }
   function format_of_iconv(param){
    switch(param){
      case 1:
       return _aK_;
      case 2:
       return _aL_;
      case 4:
       return _aN_;
      case 5:
       return _aO_;
      case 6:
       return _aP_;
      case 7:
       return _aQ_;
      case 8:
       return _aR_;
      case 9:
       return _aS_;
      case 10:
       return _aT_;
      case 11:
       return _aU_;
      case 0:
      case 13:
       return _aJ_;
      case 3:
      case 14:
       return _aM_;
      default: return _aV_;
    }
   }
   function format_of_iconvL(param){
    switch(param){
      case 1:
       return _aX_;
      case 2:
       return _aY_;
      case 4:
       return _a0_;
      case 5:
       return _a1_;
      case 6:
       return _a2_;
      case 7:
       return _a3_;
      case 8:
       return _a4_;
      case 9:
       return _a5_;
      case 10:
       return _a6_;
      case 11:
       return _a7_;
      case 0:
      case 13:
       return _aW_;
      case 3:
      case 14:
       return _aZ_;
      default: return _a8_;
    }
   }
   function format_of_iconvl(param){
    switch(param){
      case 1:
       return _a__;
      case 2:
       return _a$_;
      case 4:
       return _bb_;
      case 5:
       return _bc_;
      case 6:
       return _bd_;
      case 7:
       return _be_;
      case 8:
       return _bf_;
      case 9:
       return _bg_;
      case 10:
       return _bh_;
      case 11:
       return _bi_;
      case 0:
      case 13:
       return _a9_;
      case 3:
      case 14:
       return _ba_;
      default: return _bj_;
    }
   }
   function format_of_iconvn(param){
    switch(param){
      case 1:
       return _bl_;
      case 2:
       return _bm_;
      case 4:
       return _bo_;
      case 5:
       return _bp_;
      case 6:
       return _bq_;
      case 7:
       return _br_;
      case 8:
       return _bs_;
      case 9:
       return _bt_;
      case 10:
       return _bu_;
      case 11:
       return _bv_;
      case 0:
      case 13:
       return _bk_;
      case 3:
      case 14:
       return _bn_;
      default: return _bw_;
    }
   }
   function format_of_fconv(fconv, prec){
    var
     prec$0 = abs(prec),
     symb = char_of_fconv(_bx_, fconv),
     buf = buffer_create(16);
    buffer_add_char(buf, 37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, to_string(prec$0));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _sy_ = caml_ml_string_length(s) - 1 | 0, _sx_ = 0;
    if(_sy_ >= 0){
     var i$0 = _sx_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _sC_ = i$0 + 1 | 0;
      if(_sy_ === i$0) break;
      i$0 = _sC_;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++; return;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _sA_ = caml_ml_string_length(s) - 1 | 0,
     _sz_ = 0;
    if(_sA_ >= 0){
     var i = _sz_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1]--; put(c);}
      var _sB_ = i + 1 | 0;
      if(_sA_ === i) break;
      i = _sB_;
     }
    }
    return unsafe_to_string(buf);
   }
   function convert_int(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconv(iconv), n));
   }
   function convert_int32(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconvl(iconv), n));
   }
   function convert_nativeint(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconvn(iconv), n));
   }
   function convert_int64(iconv, n){
    return transform_int_alt
            (iconv, caml_int64_format(format_of_iconvL(iconv), n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return caml_hexstring_of_float(x, prec, sign);
    }
    function add_dot_if_needed(str){
     var len = caml_ml_string_length(str);
     function is_valid(i){
      var i$0 = i;
      for(;;){
       if(i$0 === len) return 0;
       var _sw_ = caml_string_get(str, i$0) - 46 | 0;
       a:
       {
        if(23 < _sw_ >>> 0){
         if(55 === _sw_) break a;
        }
        else if(21 < _sw_ - 1 >>> 0) break a;
        var i$1 = i$0 + 1 | 0;
        i$0 = i$1;
        continue;
       }
       return 1;
      }
     }
     return is_valid(0) ? str : symbol_concat(str, _by_);
    }
    function caml_special_val(str){
     var match = caml_classify_float(x);
     return 3 === match ? x < 0. ? _bz_ : _bA_ : 4 <= match ? _bB_ : str;
    }
    switch(fconv[2]){
      case 5:
       var str = caml_format_float(format_of_fconv(fconv, prec), x);
       return caml_special_val(add_dot_if_needed(str));
      case 6:
       return hex(0);
      case 7:
       return uppercase_ascii$1(hex(0));
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function format_caml_char(c){
    var
     str = escaped(c),
     l = caml_ml_string_length(str),
     res = make$0(l + 2 | 0, 39);
    caml_blit_string(str, 0, res, 1, l);
    return unsafe_to_string(res);
   }
   function string_of_fmtty(fmtty){
    var buf = buffer_create(16);
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var new_acc = [4, acc$0, format_caml_char(c)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        return make_float_padding_precision
                (k$0, acc$0, rest$7, pad$5, prec$3, fconv);
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, string_of_bool);
       case 10:
        var rest$9 = fmt$0[1], acc$1 = [7, acc$0];
        acc$0 = acc$1;
        fmt$0 = rest$9;
        break;
       case 11:
        var rest$10 = fmt$0[2], str = fmt$0[1], acc$2 = [2, acc$0, str];
        acc$0 = acc$2;
        fmt$0 = rest$10;
        break;
       case 12:
        var rest$11 = fmt$0[2], chr = fmt$0[1], acc$3 = [3, acc$0, chr];
        acc$0 = acc$3;
        fmt$0 = rest$11;
        break;
       case 13:
        var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
         ty = string_of_fmtty(sub_fmtty);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1];
         return make_printf
                 (k$0, acc$0, concat_fmt(recast(fmt, fmtty), rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit];
        acc$0 = acc$4;
        fmt$0 = rest$16;
        break;
       case 18:
        var _su_ = fmt$0[1];
        if(0 === _su_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _su_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){return make_printf(k, [1, acc, [0, kacc]], rest);};
         k$0 = k$1;
         acc$0 = 0;
         fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _su_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){return make_printf(k, [1, acc, [1, kacc]], rest);};
         k$0 = k$2;
         acc$0 = 0;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bC_], 1);
       case 20:
        var rest$19 = fmt$0[3], new_acc = [8, acc$0, _bD_];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (make_ignored_param, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
        return make_ignored_param(counter$1, k$0, acc$0, ign, rest$22);
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _sv_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _sv_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _sv_);
     }
    }
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param(counter, k, acc, ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
        return make_invalid_arg(counter$0, k, acc, fmt);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
        return make_invalid_arg(counter$1, k, acc, fmt);
       case 2:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bE_], 1);
       default:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
        return make_invalid_arg(counter$2, k, acc, fmt);
     }
    switch(ign[0]){
      case 0:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
       return make_invalid_arg(counter$3, k, acc, fmt);
      case 1:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
       return make_invalid_arg(counter$4, k, acc, fmt);
      case 2:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
       return make_invalid_arg(counter$5, k, acc, fmt);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
       return make_invalid_arg(counter$6, k, acc, fmt);
      case 4:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
       return make_invalid_arg(counter$7, k, acc, fmt);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
       return make_invalid_arg(counter$8, k, acc, fmt);
      case 6:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
       return make_invalid_arg(counter$9, k, acc, fmt);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
       return make_invalid_arg(counter$10, k, acc, fmt);
      case 8:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
       return make_invalid_arg(counter$11, k, acc, fmt);
      case 9:
       var fmtty = ign[2];
       if(counter >= 50)
        return caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
       return make_from_fmtty$0(counter$14, k, acc, fmtty, fmt);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
       return make_invalid_arg(counter$12, k, acc, fmt);
      default:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
       return make_invalid_arg(counter$13, k, acc, fmt);
    }
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty(k, acc, concat_fmtty(ty, rest$8), fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _st_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bF_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bG_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _ss_ = [8, acc, _bH_];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _ss_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _ss_, fmt);
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_float_padding_precision(k, acc, fmt, pad, prec, fconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = convert_float(fconv, p, x);
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var
                 str = convert_float(fconv, default_float_precision(fconv), x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = convert_float(fconv, p, x);
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_padding(padty, w, convert_float(fconv, p, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var
                 str = convert_float(fconv, default_float_precision(fconv), x),
                 str$0 = fix_padding(padty, w, str);
                return make_printf(k, [4, acc, str$0], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var str = fix_padding(padty$0, w, convert_float(fconv, p, x));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var
                str = convert_float(fconv, default_float_precision(fconv), x),
                str$0 = fix_padding(padty$0, w, str);
               return make_printf(k, [4, acc, str$0], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _sr_ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _sr_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _sr_, rest);
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return output_string(o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         output_string(o, _bI_);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         output_acc(o, p$0);
         output_string(o, _bJ_);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1]; output_acc(o, p$4); return _k_(o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return output_string(o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return _j_(o, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return add_string(b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         strput_acc(b, p$0);
         add_string(b, _bK_);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         strput_acc(b, p$0);
         add_string(b, _bL_);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        return add_string(b, caml_call1(f, 0));
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return add_string(b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        return add_char(b, c);
     }
    }
   }
   function failwith_message(param){
    var fmt = param[1], buf = create$1(256);
    function k(acc){strput_acc(buf, acc); return failwith(contents(buf));}
    return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
    if(str == cst$1) return _bM_;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
     return caml_call1(failwith_message(_bN_), str);
    }
    function parse_spaces(i){
     var i$0 = i;
     for(;;){
      if(i$0 === len) return i$0;
      var match = caml_string_get(str, i$0);
      if(9 !== match && 32 !== match) return i$0;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    function parse_lword(i, j){
     var j$0 = j;
     for(;;){
      if(j$0 === len) return j$0;
      if(25 < caml_string_get(str, j$0) - 97 >>> 0) return j$0;
      var j$1 = j$0 + 1 | 0;
      j$0 = j$1;
     }
    }
    function parse_int(i, j){
     var j$0 = j;
     for(;;){
      if(j$0 === len) return j$0;
      var match = caml_string_get(str, j$0);
      a:
      {
       if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
       return j$0;
      }
      var j$1 = j$0 + 1 | 0;
      j$0 = j$1;
     }
    }
    var
     wstart = parse_spaces(0),
     wend = parse_lword(wstart, wstart),
     box_name = sub$0(str, wstart, wend - wstart | 0),
     nstart = parse_spaces(wend),
     nend = parse_int(nstart, nstart);
    if(nstart === nend)
     var indent = 0;
    else
     try{
      var
       _sp_ = caml_int_of_string(sub$0(str, nstart, nend - nstart | 0)),
       indent = _sp_;
     }
     catch(_sq_){
      var _sn_ = caml_wrap_exception(_sq_);
      if(_sn_[1] !== Failure) throw caml_maybe_attach_backtrace(_sn_, 0);
      var _so_ = invalid_box(0), indent = _so_;
     }
    var exp_end = parse_spaces(nend);
    if(exp_end !== len) invalid_box(0);
    a:
    {
     if(box_name !== cst$1 && box_name !== "b"){
      if(box_name === "h"){var box_type = 0; break a;}
      if(box_name === "hov"){var box_type = 3; break a;}
      if(box_name === "hv"){var box_type = 2; break a;}
      if(box_name !== "v"){var box_type = invalid_box(0); break a;}
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
    return [0, indent, box_type];
   }
   function kfprintf(k, o, param){
    var fmt = param[1];
    return make_printf
            (function(acc){output_acc(o, acc); return caml_call1(k, o);},
             0,
             fmt);
   }
   function fprintf(oc, fmt){
    return kfprintf(function(_sm_){return 0;}, oc, fmt);
   }
   function eprintf(fmt){return fprintf(stderr, fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = create$1(64);
     strput_acc(buf, acc);
     return caml_call1(k, contents(buf));
    }
    return make_printf(k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var printers = make(0);
   function field(x, i){
    var f = x[1 + i];
    return is_block(f)
            ? caml_obj_tag
               (f)
              === 252
              ? caml_call1(sprintf(_bO_), f)
              : caml_obj_tag(f) === 253 ? string_of_float(f) : _bP_
            : caml_call1(sprintf(_bQ_), f);
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return _bR_;
    var _sk_ = other_fields(x, i + 1 | 0), _sl_ = field(x, i);
    return caml_call2(sprintf(_bS_), _sl_, _sk_);
   }
   function fields(x){
    var match = x.length - 1;
    if(2 >= match >>> 0)
     switch(match){
       case 0:
        return _bU_;
       case 1:
        return _bV_;
       default:
        var _sj_ = field(x, 1); return caml_call1(sprintf(_bW_), _sj_);
     }
    var _sh_ = other_fields(x, 2), _si_ = field(x, 1);
    return caml_call2(sprintf(_bT_), _si_, _sh_);
   }
   function use_printers(x){
    function conv(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var tl = param$0[2], hd = param$0[1];
      a:
      {
       try{var val = caml_call1(hd, x);}catch(_sg_){break a;}
       if(val){var s = val[1]; return [0, s];}
      }
      param$0 = tl;
     }
    }
    return conv(get(printers));
   }
   function to_string_default(x){
    if(x === Out_of_memory) return _bX_;
    if(x === Stack_overflow) return _bY_;
    if(x[1] === Match_failure){
     var match = x[2], char$0 = match[3], line = match[2], file = match[1];
     return caml_call5
             (sprintf(locfmt), file, line, char$0, char$0 + 5 | 0, _bZ_);
    }
    if(x[1] === Assert_failure){
     var
      match$0 = x[2],
      char$1 = match$0[3],
      line$0 = match$0[2],
      file$0 = match$0[1];
     return caml_call5
             (sprintf(locfmt), file$0, line$0, char$1, char$1 + 6 | 0, _b0_);
    }
    if(x[1] === Undefined_recursive_module){
     var
      match$1 = x[2],
      char$2 = match$1[3],
      line$1 = match$1[2],
      file$1 = match$1[1];
     return caml_call5
             (sprintf(locfmt), file$1, line$1, char$2, char$2 + 6 | 0, _b1_);
    }
    if(0 !== caml_obj_tag(x)) return x[1];
    var constructor = x[1][1];
    return symbol_concat(constructor, fields(x));
   }
   function to_string$0(e){
    var match = use_printers(e);
    if(! match) return to_string_default(e);
    var s = match[1];
    return s;
   }
   function convert_raw_backtrace(bt){
    var _sf_ = [0, caml_convert_raw_backtrace(bt)];
    return _sf_;
   }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
     return is_raise ? 0 === pos ? _b2_ : _b3_ : 0 === pos ? _b4_ : _b5_;
    }
    if(0 === slot[0]){
     var
      _r9_ = slot[5],
      _r__ = slot[4],
      _r$_ = slot[3],
      _sa_ = slot[6] ? _b6_ : _b8_,
      _sb_ = slot[2],
      _sc_ = slot[7],
      _sd_ = info(slot[1]);
     return [0,
             caml_call7
              (sprintf(_b7_), _sd_, _sc_, _sb_, _sa_, _r$_, _r__, _r9_)];
    }
    if(slot[1]) return 0;
    var _se_ = info(0);
    return [0, caml_call1(sprintf(_b9_), _se_)];
   }
   function print_exception_backtrace(outchan, backtrace){
    if(! backtrace) return fprintf(outchan, _b$_);
    var a = backtrace[1], _r7_ = a.length - 2 | 0, _r6_ = 0;
    if(_r7_ >= 0){
     var i = _r6_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){var str = match[1]; caml_call1(fprintf(outchan, _b__), str);}
      var _r8_ = i + 1 | 0;
      if(_r7_ === i) break;
      i = _r8_;
     }
    }
    return;
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    return print_exception_backtrace
            (outchan, convert_raw_backtrace(raw_backtrace));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = get(printers),
      new_printers = [0, fn, old_printers],
      success = compare_and_set(printers, old_printers, new_printers),
      _r5_ = 1 - success;
     if(! _r5_) return _r5_;
    }
   }
   var errors = _ca_.slice();
   function default_uncaught_exception_han(exn, raw_backtrace){
    var _r3_ = to_string$0(exn);
    caml_call1(eprintf(_cb_), _r3_);
    print_raw_backtrace(stderr, raw_backtrace);
    var status = caml_ml_debug_info_status(0);
    if(status < 0){
     var _r4_ = abs(status);
     prerr_endline(caml_check_bound(errors, _r4_)[1 + _r4_]);
    }
    return _k_(stderr);
   }
   var empty_backtrace = [0];
   function try_get_raw_backtrace(param){
    var _r2_ = caml_get_exception_raw_backtrace(0);
    return _r2_;
   }
   function handle_uncaught_exception(exn, debugger_in_use){
    try{
     var
      raw_backtrace =
        debugger_in_use ? empty_backtrace : try_get_raw_backtrace(0);
     try{do_at_exit(0);}catch(_r1_){}
     try{
      var
       _rZ_ = default_uncaught_exception_han(exn, raw_backtrace),
       _rY_ = _rZ_;
     }
     catch(exn$1){
      var
       exn$0 = caml_wrap_exception(exn$1),
       raw_backtrace$0 = try_get_raw_backtrace(0),
       _rW_ = to_string$0(exn);
      caml_call1(eprintf(_cd_), _rW_);
      print_raw_backtrace(stderr, raw_backtrace);
      var _rX_ = to_string$0(exn$0);
      caml_call1(eprintf(_ce_), _rX_);
      print_raw_backtrace(stderr, raw_backtrace$0);
      var _rY_ = _k_(stderr);
     }
     return _rY_;
    }
    catch(_r0_){
     var _rV_ = caml_wrap_exception(_r0_);
     if(_rV_ === Out_of_memory) return prerr_endline(_cc_);
     throw caml_maybe_attach_backtrace(_rV_, 0);
    }
   }
   function handle_uncaught_exception$0(exn, debugger_in_use){
    try{
     var _rT_ = handle_uncaught_exception(exn, debugger_in_use);
     return _rT_;
    }
    catch(_rU_){return 0;}
   }
   caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception$0);
   var Finally_raised = [248, _cf_, caml_fresh_oo_id(0)];
   register_printer
    (function(param){
      if(param[1] !== Finally_raised) return 0;
      var exn = param[2];
      return [0, symbol_concat(_cg_, to_string$0(exn))];
     });
   function string(str){
    return caml_md5_string(str, 0, caml_ml_string_length(str));
   }
   function new_state(param){return [0, caml_make_vect(55, 0), 0];}
   function assign(st1, st2){
    blit$0(st2[1], 0, st1[1], 0, 55);
    st1[2] = st2[2];
    return;
   }
   function full_init(s, seed){
    function combine(accu, x){
     return string(symbol_concat(accu, to_string(x)));
    }
    function extract(d){
     var
      _rQ_ = caml_string_get(d, 3) << 24,
      _rR_ = caml_string_get(d, 2) << 16,
      _rS_ = caml_string_get(d, 1) << 8;
     return ((caml_string_get(d, 0) + _rS_ | 0) + _rR_ | 0) + _rQ_ | 0;
    }
    var
     seed$0 = 0 === seed.length - 1 ? [0, 0] : seed,
     l = seed$0.length - 1,
     i$0 = 0;
    for(;;){
     caml_check_bound(s[1], i$0)[1 + i$0] = i$0;
     var _rP_ = i$0 + 1 | 0;
     if(54 === i$0) break;
     i$0 = _rP_;
    }
    var accu = [0, _ch_], _rK_ = 54 + max(55, l) | 0, _rJ_ = 0;
    if(_rK_ >= 0){
     var i = _rJ_;
     for(;;){
      var
       j = i % 55 | 0,
       k = caml_mod(i, l),
       _rL_ = caml_check_bound(seed$0, k)[1 + k];
      accu[1] = combine(accu[1], _rL_);
      var
       _rM_ = extract(accu[1]),
       _rN_ = (caml_check_bound(s[1], j)[1 + j] ^ _rM_) & 1073741823;
      caml_check_bound(s[1], j)[1 + j] = _rN_;
      var _rO_ = i + 1 | 0;
      if(_rK_ === i) break;
      i = _rO_;
     }
    }
    s[2] = 0;
    return;
   }
   function make$2(seed){
    var result = new_state(0);
    full_init(result, seed);
    return result;
   }
   function make_self_init(param){return make$2(caml_sys_random_seed(0));}
   function copy$0(s){
    var result = new_state(0);
    assign(result, s);
    return result;
   }
   function bits(s){
    s[2] = (s[2] + 1 | 0) % 55 | 0;
    var
     _rG_ = s[2],
     curval = caml_check_bound(s[1], _rG_)[1 + _rG_],
     _rH_ = (s[2] + 24 | 0) % 55 | 0,
     newval =
       caml_check_bound(s[1], _rH_)[1 + _rH_]
       + (curval ^ (curval >>> 25 | 0) & 31)
       | 0,
     newval30 = newval & 1073741823,
     _rI_ = s[2];
    caml_check_bound(s[1], _rI_)[1 + _rI_] = newval30;
    return newval30;
   }
   var default$0 = [0, _ci_.slice(), 0];
   function full_init$0(seed){return full_init(default$0, seed);}
   function self_init(param){return full_init$0(caml_sys_random_seed(0));}
   function get_state(param){return copy$0(default$0);}
   function ongoing_traversal(h){
    var _rE_ = h.length - 1 < 4 ? 1 : 0, _rF_ = _rE_ || (h[4] < 0 ? 1 : 0);
    return _rF_;
   }
   try{var _kt_ = caml_sys_getenv("OCAMLRUNPARAM"), params = _kt_;}
   catch(_rC_){
    var _cj_ = caml_wrap_exception(_rC_);
    if(_cj_ !== Not_found) throw caml_maybe_attach_backtrace(_cj_, 0);
    try{var _ks_ = caml_sys_getenv("CAMLRUNPARAM"), _cm_ = _ks_;}
    catch(_rD_){
     var _ck_ = caml_wrap_exception(_rD_);
     if(_ck_ !== Not_found) throw caml_maybe_attach_backtrace(_ck_, 0);
     var _cm_ = _cl_;
    }
    var params = _cm_;
   }
   var
    randomized_default = contains(params, 82),
    prng = [246, function(_rB_){return make_self_init(0);}];
   function power_2_above(x, n){
    var x$0 = x;
    for(;;){
     if(n <= x$0) return x$0;
     if(max_array_length < (x$0 * 2 | 0)) return x$0;
     var x$1 = x$0 * 2 | 0;
     x$0 = x$1;
    }
   }
   function create$2(opt, initial_size){
    if(opt)
     var sth = opt[1], random = sth;
    else
     var random = randomized_default;
    var s = power_2_above(16, initial_size);
    if(random)
     var
      _rz_ = caml_obj_tag(prng),
      _rA_ =
        250 === _rz_ ? prng[1] : 246 === _rz_ ? force_lazy_block(prng) : prng,
      seed = bits(_rA_);
    else
     var seed = 0;
    return [0, 0, caml_make_vect(s, 0), seed, s];
   }
   function clear$1(h){
    var _ry_ = 0 < h[1] ? 1 : 0;
    return _ry_ ? (h[1] = 0, fill(h[2], 0, h[2].length - 1, 0)) : _ry_;
   }
   function insert_all_buckets(indexfun, inplace, odata, ndata){
    var nsize = ndata.length - 1, ndata_tail = caml_make_vect(nsize, 0);
    function insert_bucket(cell){
     var cell$0 = cell;
     for(;;){
      if(! cell$0) return;
      var
       key = cell$0[1],
       data = cell$0[2],
       next = cell$0[3],
       cell$1 = inplace ? cell$0 : [0, key, data, 0],
       nidx = caml_call1(indexfun, key),
       match = caml_check_bound(ndata_tail, nidx)[1 + nidx];
      if(match)
       match[3] = cell$1;
      else
       caml_check_bound(ndata, nidx)[1 + nidx] = cell$1;
      caml_check_bound(ndata_tail, nidx)[1 + nidx] = cell$1;
      cell$0 = next;
     }
    }
    var _rt_ = odata.length - 2 | 0, _rs_ = 0;
    if(_rt_ >= 0){
     var i$0 = _rs_;
     for(;;){
      insert_bucket(caml_check_bound(odata, i$0)[1 + i$0]);
      var _rx_ = i$0 + 1 | 0;
      if(_rt_ === i$0) break;
      i$0 = _rx_;
     }
    }
    if(inplace){
     var _rv_ = nsize - 1 | 0, _ru_ = 0;
     if(_rv_ >= 0){
      var i = _ru_;
      for(;;){
       var match = caml_check_bound(ndata_tail, i)[1 + i];
       if(match) match[3] = 0;
       var _rw_ = i + 1 | 0;
       if(_rv_ === i) break;
       i = _rw_;
      }
     }
    }
    return;
   }
   function resize$0(indexfun, h){
    var
     odata = h[2],
     osize = odata.length - 1,
     nsize = osize * 2 | 0,
     _rr_ = nsize < max_array_length ? 1 : 0;
    if(! _rr_) return _rr_;
    var ndata = caml_make_vect(nsize, 0), inplace = 1 - ongoing_traversal(h);
    h[2] = ndata;
    return insert_all_buckets(caml_call1(indexfun, h), inplace, odata, ndata);
   }
   function hash(x){return caml_hash(10, 100, 0, x);}
   function key_index(h, key){
    return 4 <= h.length - 1
            ? caml_hash(10, 100, h[3], key) & (h[2].length - 2 | 0)
            : invalid_arg(_cn_);
   }
   function add$0(h, key, data){
    var
     i = key_index(h, key),
     bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
    caml_check_bound(h[2], i)[1 + i] = bucket;
    h[1] = h[1] + 1 | 0;
    var _rq_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
    return _rq_ ? resize$0(key_index, h) : _rq_;
   }
   function remove_bucket(h, i, key, prec, c){
    var prec$1 = prec, prec$0 = c;
    for(;;){
     if(! prec$0) return;
     var k = prec$0[1], next = prec$0[3];
     if(0 === caml_compare(k, key)){
      h[1] = h[1] - 1 | 0;
      if(prec$1){prec$1[3] = next; return;}
      caml_check_bound(h[2], i)[1 + i] = next;
      return;
     }
     prec$1 = prec$0;
     prec$0 = next;
    }
   }
   function remove(h, key){
    var i = key_index(h, key);
    return remove_bucket(h, i, key, 0, caml_check_bound(h[2], i)[1 + i]);
   }
   function find_rec(key, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     var k = param$0[1], data = param$0[2], next = param$0[3];
     if(0 === caml_compare(key, k)) return data;
     param$0 = next;
    }
   }
   function find(h, key){
    var
     _rp_ = key_index(h, key),
     match = caml_check_bound(h[2], _rp_)[1 + _rp_];
    if(! match) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return d1;
    if(! next1) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return d2;
    if(! next2) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    return 0 === caml_compare(key, k3) ? d3 : find_rec(key, next3);
   }
   function find_all(h, key){
    function find_in_bucket(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var k = param$0[1], data = param$0[2], next = param$0[3];
      if(0 === caml_compare(k, key)) return [0, data, find_in_bucket(next)];
      param$0 = next;
     }
    }
    var _ro_ = key_index(h, key);
    return find_in_bucket(caml_check_bound(h[2], _ro_)[1 + _ro_]);
   }
   function id(x){return x;}
   var zero = 0, unknown = -1;
   function is_known(n){return 0 <= n ? 1 : 0;}
   var String_tag = [248, _co_, caml_fresh_oo_id(0)];
   function pp_enqueue(state, token){
    state[13] = state[13] + token[3] | 0;
    return add(token, state[28]);
   }
   function pp_clear_queue(state){
    state[12] = 1;
    state[13] = 1;
    return clear$0(state[28]);
   }
   var pp_infinity = 1000000010;
   function pp_output_string(state, s){
    return caml_call3(state[17], s, 0, caml_ml_string_length(s));
   }
   function pp_output_newline(state){return caml_call1(state[19], 0);}
   function pp_output_spaces(state, n){return caml_call1(state[20], n);}
   function pp_output_indent(state, n){return caml_call1(state[21], n);}
   function format_pp_text(state, size, text){
    state[9] = state[9] - size | 0;
    pp_output_string(state, text);
    state[11] = 0;
    return;
   }
   function format_string(state, s){
    var _rn_ = s !== cst$1 ? 1 : 0;
    return _rn_ ? format_pp_text(state, caml_ml_string_length(s), s) : _rn_;
   }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
    format_string(state, before);
    pp_output_newline(state);
    state[11] = 1;
    var
     indent = (state[6] - width | 0) + offset | 0,
     real_indent = min$0(state[8], indent);
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
    pp_output_indent(state, state[10]);
    return format_string(state, after);
   }
   function break_line(state, width){
    return break_new_line(state, _cp_, width);
   }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
    format_string(state, before);
    state[9] = state[9] - width | 0;
    pp_output_spaces(state, width);
    return format_string(state, after);
   }
   function pp_force_break_line(state){
    var match = top_opt(state[2]);
    if(! match) return pp_output_newline(state);
    var
     match$0 = match[1],
     width = match$0[2],
     box_type = match$0[1],
     _rm_ = state[9] < width ? 1 : 0;
    if(! _rm_) return _rm_;
    if(3 < box_type - 1 >>> 0) return;
    return break_line(state, width);
   }
   function pp_skip_token(state){
    var match = take_opt(state[28]);
    if(! match) return;
    var match$0 = match[1], size = match$0[1], length = match$0[3];
    state[12] = state[12] - length | 0;
    var _rl_ = id(size);
    state[9] = state[9] + _rl_ | 0;
    return;
   }
   function format_pp_token(state, size, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        var match = top_opt(state[3]);
        if(! match) return;
        var
         tabs = match[1][1],
         add_tab =
           function(n, ls){
            if(! ls) return [0, n, 0];
            var l = ls[2], x = ls[1];
            return caml_lessthan(n, x) ? [0, n, ls] : [0, x, add_tab(n, l)];
           };
        tabs[1] = add_tab(state[6] - state[9] | 0, tabs[1]);
        return;
       case 1:
        pop_opt(state[2]); return;
       case 2:
        pop_opt(state[3]); return;
       case 3:
        var match$0 = top_opt(state[2]);
        if(! match$0) return pp_output_newline(state);
        var width = match$0[1][2];
        return break_line(state, width);
       case 4:
        var _rk_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
        return _rk_ ? pp_skip_token(state) : _rk_;
       default:
        var match$1 = pop_opt(state[5]);
        if(! match$1) return;
        var tag_name = match$1[1], marker = caml_call1(state[25], tag_name);
        return pp_output_string(state, marker);
     }
    switch(param[0]){
      case 0:
       var s = param[1]; return format_pp_text(state, size, s);
      case 1:
       var
        breaks = param[2],
        fits = param[1],
        off = breaks[2],
        before = breaks[1],
        match$2 = top_opt(state[2]);
       if(! match$2) return;
       var match$3 = match$2[1], width$0 = match$3[2], box_type = match$3[1];
       switch(box_type){
         case 0:
          return break_same_line(state, fits);
         case 1:
          return break_new_line(state, breaks, width$0);
         case 2:
          return break_new_line(state, breaks, width$0);
         case 3:
          return state[9] < (size + caml_ml_string_length(before) | 0)
                  ? break_new_line(state, breaks, width$0)
                  : break_same_line(state, fits);
         case 4:
          return state[11]
                  ? break_same_line(state, fits)
                  : state
                     [9]
                    < (size + caml_ml_string_length(before) | 0)
                    ? break_new_line(state, breaks, width$0)
                    : ((state
                       [6]
                      - width$0
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ? break_new_line(state, breaks, width$0)
                      : break_same_line(state, fits);
         default: return break_same_line(state, fits);
       }
      case 2:
       var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
        match$4 = top_opt(state[3]);
       if(! match$4) return;
       var tabs$0 = match$4[1][1], match$5 = tabs$0[1];
       if(match$5)
        var
         first = match$5[1],
         find =
           function(param){
            var param$0 = param;
            for(;;){
             if(! param$0) return first;
             var tail = param$0[2], head = param$0[1];
             if(insertion_point <= head) return head;
             param$0 = tail;
            }
           },
         tab = find(tabs$0[1]);
       else
        var tab = insertion_point;
       var offset = tab - insertion_point | 0;
       return 0 <= offset
               ? break_same_line(state, [0, _cr_, offset + n | 0, _cq_])
               : break_new_line
                 (state, [0, _ct_, tab + off$0 | 0, _cs_], state[6]);
      case 3:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0) pp_force_break_line(state);
       var
        width$1 = state[9] - off$1 | 0,
        box_type$0 = 1 === ty ? 1 : state[9] < size ? ty : 5;
       return push([0, box_type$0, width$1], state[2]);
      case 4:
       var tbox = param[1]; return push(tbox, state[3]);
      default:
       var
        tag_name$0 = param[1],
        marker$0 = caml_call1(state[24], tag_name$0);
       pp_output_string(state, marker$0);
       return push(tag_name$0, state[5]);
    }
   }
   function advance_left(state){
    for(;;){
     var match = peek_opt(state[28]);
     if(! match) return 0;
     var
      match$0 = match[1],
      size = match$0[1],
      length = match$0[3],
      token = match$0[2],
      pending_count = state[13] - state[12] | 0,
      _ri_ = is_known(size),
      _rj_ = _ri_ || (state[9] <= pending_count ? 1 : 0);
     if(! _rj_) return _rj_;
     take(state[28]);
     var size$0 = is_known(size) ? id(size) : pp_infinity;
     format_pp_token(state, size$0, token);
     state[12] = length + state[12] | 0;
    }
   }
   function enqueue_advance(state, tok){
    pp_enqueue(state, tok);
    return advance_left(state);
   }
   function enqueue_string_as(state, size, s){
    return enqueue_advance(state, [0, size, [0, s], id(size)]);
   }
   function enqueue_string(state, s){
    return enqueue_string_as(state, id(caml_ml_string_length(s)), s);
   }
   function initialize_scan_stack(stack){
    clear(stack);
    var queue_elem = [0, unknown, _cu_, 0];
    return push([0, -1, queue_elem], stack);
   }
   function set_size(state, ty){
    var match = top_opt(state[1]);
    if(! match) return;
    var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
     size = id(queue_elem[1]);
    if(left_total < state[12]) return initialize_scan_stack(state[1]);
    var _rh_ = queue_elem[2];
    if(typeof _rh_ !== "number")
     switch(_rh_[0]){
       case 3:
        if(1 - ty){
         queue_elem[1] = id(state[13] + size | 0);
         pop_opt(state[1]);
        }
        return;
       case 1:
       case 2:
        if(ty){queue_elem[1] = id(state[13] + size | 0); pop_opt(state[1]);}
        return;
     }
    return;
   }
   function scan_push(state, b, token){
    pp_enqueue(state, token);
    if(b) set_size(state, 1);
    var elem = [0, state[13], token];
    return push(elem, state[1]);
   }
   function pp_open_box_gen(state, indent, br_ty){
    state[14] = state[14] + 1 | 0;
    if(state[14] < state[15]){
     var size = id(- state[13] | 0), elem = [0, size, [3, indent, br_ty], 0];
     return scan_push(state, 0, elem);
    }
    var _rg_ = state[14] === state[15] ? 1 : 0;
    return _rg_ ? enqueue_string(state, state[16]) : _rg_;
   }
   function pp_open_sys_box(state){return pp_open_box_gen(state, 0, 3);}
   function pp_close_box(state, param){
    var _re_ = 1 < state[14] ? 1 : 0;
    if(_re_){
     if(state[14] < state[15]){
      pp_enqueue(state, [0, zero, 1, 0]);
      set_size(state, 1);
      set_size(state, 0);
     }
     state[14] = state[14] - 1 | 0;
     var _rf_ = 0;
    }
    else
     var _rf_ = _re_;
    return _rf_;
   }
   function pp_open_stag(state, tag_name){
    if(state[22]){push(tag_name, state[4]); caml_call1(state[26], tag_name);}
    var _rd_ = state[23];
    if(! _rd_) return _rd_;
    var token = [5, tag_name];
    return pp_enqueue(state, [0, zero, token, 0]);
   }
   function pp_close_stag(state, param){
    if(state[23]) pp_enqueue(state, [0, zero, 5, 0]);
    var _rb_ = state[22];
    if(_rb_){
     var match = pop_opt(state[4]);
     if(match){
      var tag_name = match[1];
      return caml_call1(state[27], tag_name);
     }
     var _rc_ = 0;
    }
    else
     var _rc_ = _rb_;
    return _rc_;
   }
   function pp_close_tag(state, param){return pp_close_stag(state, 0);}
   function pp_rinit(state){
    pp_clear_queue(state);
    initialize_scan_stack(state[1]);
    clear(state[2]);
    clear(state[3]);
    clear(state[4]);
    clear(state[5]);
    state[10] = 0;
    state[14] = 0;
    state[9] = state[6];
    return pp_open_sys_box(state);
   }
   function clear_tag_stack(state){
    return iter$1(function(param){return pp_close_tag(state, 0);}, state[4]);
   }
   function pp_flush_queue(state, b){
    clear_tag_stack(state);
    for(;;){
     if(1 >= state[14]){
      state[13] = pp_infinity;
      advance_left(state);
      if(b) pp_output_newline(state);
      return pp_rinit(state);
     }
     pp_close_box(state, 0);
    }
   }
   function pp_print_as_size(state, size, s){
    var _ra_ = state[14] < state[15] ? 1 : 0;
    return _ra_ ? enqueue_string_as(state, size, s) : _ra_;
   }
   function pp_print_as(state, isize, s){
    return pp_print_as_size(state, id(isize), s);
   }
   function pp_print_string(state, s){
    return pp_print_as(state, caml_ml_string_length(s), s);
   }
   function pp_print_bool(state, b){
    return pp_print_string(state, string_of_bool(b));
   }
   function pp_print_char(state, c){
    return pp_print_as(state, 1, make$1(1, c));
   }
   function pp_print_newline(state, param){
    pp_flush_queue(state, 1);
    return caml_call1(state[18], 0);
   }
   function pp_print_flush(state, param){
    pp_flush_queue(state, 0);
    return caml_call1(state[18], 0);
   }
   function pp_force_newline(state, param){
    var _q$_ = state[14] < state[15] ? 1 : 0;
    return _q$_ ? enqueue_advance(state, [0, zero, 3, 0]) : _q$_;
   }
   function pp_print_custom_break(state, fits, breaks){
    var
     after = fits[3],
     width = fits[2],
     before = fits[1],
     _q__ = state[14] < state[15] ? 1 : 0;
    if(! _q__) return _q__;
    var
     size = id(- state[13] | 0),
     token = [1, fits, breaks],
     length =
       (caml_ml_string_length(before) + width | 0)
       + caml_ml_string_length(after)
       | 0,
     elem = [0, size, token, length];
    return scan_push(state, 1, elem);
   }
   function pp_print_break(state, width, offset){
    return pp_print_custom_break
            (state, [0, _cy_, width, _cx_], [0, _cw_, offset, _cv_]);
   }
   function pp_print_cut(state, param){return pp_print_break(state, 0, 0);}
   function display_newline(state, param){
    return caml_call3(state[17], _cz_, 0, 1);
   }
   var blank_line = make$1(80, 32);
   function display_blanks(state, n){
    var n$0 = n;
    for(;;){
     var _q9_ = 0 < n$0 ? 1 : 0;
     if(! _q9_) return _q9_;
     if(80 >= n$0) return caml_call3(state[17], blank_line, 0, n$0);
     caml_call3(state[17], blank_line, 0, 80);
     var n$1 = n$0 - 80 | 0;
     n$0 = n$1;
    }
   }
   function default_pp_mark_open_tag(param){
    if(param[1] !== String_tag) return _cC_;
    var s = param[2];
    return symbol_concat(_cB_, symbol_concat(s, _cA_));
   }
   function default_pp_mark_close_tag(param){
    if(param[1] !== String_tag) return _cF_;
    var s = param[2];
    return symbol_concat(_cE_, symbol_concat(s, _cD_));
   }
   function default_pp_print_open_tag(_q8_){return 0;}
   function default_pp_print_close_tag(_q7_){return 0;}
   function pp_make_formatter(f, g, h, i, j){
    var pp_queue = create$0(0), sys_tok = [0, unknown, _cG_, 0];
    add(sys_tok, pp_queue);
    var scan_stack = create(0);
    initialize_scan_stack(scan_stack);
    push([0, 1, sys_tok], scan_stack);
    var pp_margin = 78, _q4_ = create(0), _q5_ = create(0), _q6_ = create(0);
    return [0,
            scan_stack,
            create(0),
            _q6_,
            _q5_,
            _q4_,
            pp_margin,
            10,
            68,
            pp_margin,
            0,
            1,
            1,
            1,
            1,
            max_int,
            _cH_,
            f,
            g,
            h,
            i,
            j,
            0,
            0,
            default_pp_mark_open_tag,
            default_pp_mark_close_tag,
            default_pp_print_open_tag,
            default_pp_print_close_tag,
            pp_queue];
   }
   function make_formatter(output, flush){
    var
     ppf =
       pp_make_formatter
        (output,
         flush,
         function(_q3_){return 0;},
         function(_q2_){return 0;},
         function(_q1_){return 0;});
    ppf[19] = function(_q0_){return display_newline(ppf, _q0_);};
    ppf[20] = function(_qZ_){return display_blanks(ppf, _qZ_);};
    ppf[21] = function(_qY_){return display_blanks(ppf, _qY_);};
    return ppf;
   }
   function formatter_of_out_channel(oc){
    return make_formatter
            (function(_qV_, _qW_, _qX_){
              return output_substring(oc, _qV_, _qW_, _qX_);
             },
             function(param){return _k_(oc);});
   }
   function formatter_of_buffer(b){
    return make_formatter
            (function(_qS_, _qT_, _qU_){
              return add_substring(b, _qS_, _qT_, _qU_);
             },
             function(_qR_){return 0;});
   }
   var pp_buffer_size = 512;
   function pp_make_buffer(param){return create$1(pp_buffer_size);}
   var
    stdbuf = pp_make_buffer(0),
    std_formatter = formatter_of_out_channel(stdout),
    err_formatter = formatter_of_out_channel(stderr);
   formatter_of_buffer(stdbuf);
   function flush_buffer_formatter(buf, ppf){
    pp_flush_queue(ppf, 0);
    var s = contents(buf);
    reset(buf);
    return s;
   }
   function pp_print_list(opt, pp_v, ppf, param){
    var opt$0 = opt, param$0 = param;
    for(;;){
     if(opt$0)
      var sth = opt$0[1], pp_sep = sth;
     else
      var pp_sep = pp_print_cut;
     if(! param$0) return 0;
     var v = param$0[1];
     if(! param$0[2]) return caml_call2(pp_v, ppf, v);
     var vs = param$0[2];
     caml_call2(pp_v, ppf, v);
     caml_call2(pp_sep, ppf, 0);
     var opt$1 = [0, pp_sep];
     opt$0 = opt$1;
     param$0 = vs;
    }
   }
   function compute_tag(output, tag_acc){
    var buf = create$1(16), ppf = formatter_of_buffer(buf);
    caml_call2(output, ppf, tag_acc);
    pp_print_flush(ppf, 0);
    var len = length$0(buf);
    return 2 <= len ? sub$1(buf, 1, len - 2 | 0) : contents(buf);
   }
   function output_formatting_lit(ppf, fmting_lit){
    if(typeof fmting_lit === "number")
     switch(fmting_lit){
       case 0:
        return pp_close_box(ppf, 0);
       case 1:
        return pp_close_tag(ppf, 0);
       case 2:
        return pp_print_flush(ppf, 0);
       case 3:
        return pp_force_newline(ppf, 0);
       case 4:
        return pp_print_newline(ppf, 0);
       case 5:
        return pp_print_char(ppf, 64);
       default: return pp_print_char(ppf, 37);
     }
    switch(fmting_lit[0]){
      case 0:
       var offset = fmting_lit[3], width = fmting_lit[2];
       return pp_print_break(ppf, width, offset);
      case 1:
       return 0;
      default:
       var c = fmting_lit[1];
       pp_print_char(ppf, 64);
       return pp_print_char(ppf, c);
    }
   }
   function output_acc$0(ppf, acc){
    if(typeof acc === "number") return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
          output_acc$0(ppf, p);
          return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
           output_acc$0(ppf, p$0);
           return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(output_acc$0, acc$0)]);
          }
          var acc$1 = match[1];
          output_acc$0(ppf, p$0);
          var
           match$0 = open_box_of_string(compute_tag(output_acc$0, acc$1)),
           bty = match$0[2],
           indent = match$0[1];
          return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _qI_ = acc[1];
          if(typeof _qI_ !== "number" && 0 === _qI_[0]){
           var _qJ_ = _qI_[2];
           if(typeof _qJ_ !== "number" && 1 === _qJ_[0]){
            var s$0 = acc[2], size = _qJ_[2], p$2 = _qI_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _qI_;
          break a;
         case 3:
          var _qK_ = acc[1];
          if(typeof _qK_ !== "number" && 0 === _qK_[0]){
           var _qL_ = _qK_[2];
           if(typeof _qL_ !== "number" && 1 === _qL_[0]){
            var c$0 = acc[2], size$0 = _qL_[2], p$4 = _qK_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _qK_;
          break c;
         case 4:
          var _qN_ = acc[1];
          if(typeof _qN_ !== "number" && 0 === _qN_[0]){
           var _qO_ = _qN_[2];
           if(typeof _qO_ !== "number" && 1 === _qO_[0]){
            var s$0 = acc[2], size = _qO_[2], p$2 = _qN_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _qN_;
          break a;
         case 5:
          var _qP_ = acc[1];
          if(typeof _qP_ !== "number" && 0 === _qP_[0]){
           var _qQ_ = _qP_[2];
           if(typeof _qQ_ !== "number" && 1 === _qQ_[0]){
            var c$0 = acc[2], size$0 = _qQ_[2], p$4 = _qP_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _qP_;
          break c;
         case 6:
          var f$0 = acc[2], p$5 = acc[1];
          output_acc$0(ppf, p$5);
          return caml_call1(f$0, ppf);
         case 7:
          var p$6 = acc[1];
          output_acc$0(ppf, p$6);
          return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$7 = acc[1];
          output_acc$0(ppf, p$7);
          return invalid_arg(msg);
       }
       output_acc$0(ppf, p$4);
       var _qM_ = make$1(1, c$0);
       return pp_print_as_size(ppf, id(size$0), _qM_);
      }
      output_acc$0(ppf, p$3);
      return pp_print_char(ppf, c);
     }
     output_acc$0(ppf, p$2);
     return pp_print_as_size(ppf, id(size), s$0);
    }
    output_acc$0(ppf, p$1);
    return pp_print_string(ppf, s);
   }
   function kfprintf$0(k, ppf, param){
    var fmt = param[1];
    return make_printf
            (function(acc){output_acc$0(ppf, acc); return caml_call1(k, ppf);},
             0,
             fmt);
   }
   function fprintf$0(ppf){
    function _qF_(_qH_){return 0;}
    return function(_qG_){return kfprintf$0(_qF_, ppf, _qG_);};
   }
   function kasprintf(k, param){
    var fmt = param[1], b = pp_make_buffer(0), ppf = formatter_of_buffer(b);
    function k$0(acc){
     output_acc$0(ppf, acc);
     return caml_call1(k, flush_buffer_formatter(b, ppf));
    }
    return make_printf(k$0, 0, fmt);
   }
   function asprintf(fmt){return kasprintf(id, fmt);}
   function flush_standard_formatters(param){
    pp_print_flush(std_formatter, 0);
    return pp_print_flush(err_formatter, 0);
   }
   at_exit(flush_standard_formatters);
   function register_exception(name, exn){
    var slot = caml_obj_tag(exn) === 248 ? exn : exn[1];
    caml_register_named_value(name, slot);
    return;
   }
   var Error = [248, _cI_, caml_fresh_oo_id(0)];
   register_exception(_cJ_, [0, Error, [0]]);
   (function(exn){throw exn;});
   var jv_global = globalThis, empty = cst$1;
   function append(s0, s1){return s0.concat(s1);}
   function concat$0(opt, ss){
    if(opt) var sth = opt[1], sep = sth; else var sep = empty;
    return caml_list_to_js_array(ss).join(sep);
   }
   function slice(opt, stop, s){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(stop)
     var stop$0 = stop[1], args = [0, start, stop$0];
    else
     var args = [0, start];
    return caml_js_meth_call(s, "slice", args);
   }
   function cuts(sep, s){return caml_list_of_js_array(s.split(sep));}
   function starts_with(prefix, s){return s.startsWith(prefix) | 0;}
   jv_global["Number"];
   var null$0 = null, undefined$0 = undefined;
   function is_null(v){return v === null$0 ? 1 : 0;}
   function is_undefined(v){return v === undefined$0 ? 1 : 0;}
   function is_none(v){
    var _qE_ = is_null(v);
    return _qE_ ? _qE_ : is_undefined(v);
   }
   function to_option(conv, v){
    return is_none(v) ? 0 : [0, caml_call1(conv, v)];
   }
   function of_option(none, conv, param){
    if(! param) return none;
    var v = param[1];
    return caml_call1(conv, v);
   }
   var global = globalThis;
   function set_if_some(o, p, param){
    if(! param) return;
    var v = param[1];
    o[p] = v;
    return;
   }
   function get$0(o, p){o[p]; return;}
   function set(o, p, b){o[p] = ! ! b; return;}
   function set_if_some$0(o, p, param){
    if(! param) return;
    var b = param[1];
    return set(o, p, b);
   }
   function get$1(o, p){return o[p];}
   function set$0(o, p, b){o[p] = b; return;}
   function set_if_some$1(o, p, param){
    if(! param) return;
    var f = param[1];
    return set$0(o, p, f);
   }
   function create$3(n){return new global["Array"](n);}
   function length$1(a){return a["length"];}
   function to_array(conv, v){
    var len = length$1(v);
    return init$0(len, function(i){return caml_call1(conv, v[i]);});
   }
   function of_array(conv, a){
    var len = a.length - 1, ja = create$3(len), _qC_ = len - 1 | 0, _qB_ = 0;
    if(_qC_ >= 0){
     var i = _qB_;
     for(;;){
      ja[i] = caml_call1(conv, caml_check_bound(a, i)[1 + i]);
      var _qD_ = i + 1 | 0;
      if(_qC_ === i) break;
      i = _qD_;
     }
    }
    return ja;
   }
   function to_list$0(conv, v){
    var len = length$1(v);
    return init(len, function(i){return caml_call1(conv, v[i]);});
   }
   function of_list$0(conv, l){
    function loop(i, ja, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return ja;
      var vs = param$0[2], v = param$0[1];
      ja[i$0] = caml_call1(conv, v);
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param$0 = vs;
     }
    }
    return loop(0, create$3(0), l);
   }
   function v(name, msg){
    var e = new global["Error"](msg);
    if(! name) return e;
    var n = name[1];
    e[cst_name] = n;
    return e;
   }
   function throw$0(name, msg){
    var e = v(name, msg);
    return caml_call1(function(exn){throw exn;}, e);
   }
   var promise = global["Promise"];
   function create$4(f){
    function g(res, rej){
     return caml_call2
             (f, function(x){return res(x);}, function(x){return rej(x);});
    }
    return new promise(caml_js_wrap_callback_strict(2, g));
   }
   function resolve(v){return promise.resolve(v);}
   function bind(p, res){return p.then(caml_js_wrap_callback_strict(1, res));}
   function then(p, res, rej){
    return p.then
            (caml_js_wrap_callback_strict(1, res),
             caml_js_wrap_callback_strict(1, rej));
   }
   function all(arr){return promise.all(arr);}
   function _cK_(_qA_){return caml_string_of_jsstring(_qA_);}
   function _cL_(_qz_){return caml_jsstring_of_string(_qz_);}
   function fut(p){return {fut: p};}
   function promise$0(f){return f[cst_fut];}
   function promise$1(f){return f[cst_fut];}
   function create$5(param){
    function not_set(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _cM_], 1);
    }
    function is_set(param){return throw$0(0, "The future is already set");}
    var setter = [0, not_set];
    function set_setter(resolve, reject){setter[1] = resolve; return 0;}
    var p = create$4(set_setter);
    function set(v){caml_call1(setter[1], v); setter[1] = is_set; return 0;}
    return [0, fut(p), set];
   }
   function return$0(v){return fut(resolve(v));}
   function bind$0(f, fn){
    return fut
            (bind
              (promise$0(f),
               function(v){return promise$0(caml_call1(fn, v));}));
   }
   function map$4(fn, f){
    return bind$0(f, function(v){return return$0(caml_call1(fn, v));});
   }
   function of_list$1(fs){
    var arr = of_list$0(promise$1, fs), all$0 = all(arr);
    function to_list(l){
     return resolve(to_list$0(function(_qy_){return _qy_;}, l));
    }
    return fut(bind(all$0, to_list));
   }
   function ok(v){return return$0([0, v]);}
   function of_promise(ok, error, p){
    function ok$0(v){return resolve([0, caml_call1(ok, v)]);}
    function error$0(e){return resolve([1, caml_call1(error, e)]);}
    return fut(then(p, ok$0, error$0));
   }
   function of_promise$0(ok, v){
    return of_promise(ok, function(_qx_){return _qx_;}, v);
   }
   function let$0(f, fn){return map$4(fn, f);}
   function let$1(f, fn){
    return function(_qw_){return bind$0(f, _qw_);}
            (function(e){
              if(0 !== e[0]) return return$0(e);
              var v = e[1];
              return caml_call1(fn, v);
             });
   }
   function let$2(f, fn){
    return map$4(function(_qv_){return map$0(fn, _qv_);}, f);
   }
   global["Event"];
   function current_target(e){return e["currentTarget"];}
   function listen(opt, type, f, t){
    if(opt) var sth = opt[1], opts = sth; else var opts = {};
    var f$0 = caml_js_wrap_callback_strict(1, f);
    t.addEventListener(type, f$0, opts);
    return;
   }
   global["ArrayBuffer"];
   global["DataView"];
   global["Blob"];
   global["File"];
   var json = global["JSON"];
   function encode(v){return json.stringify(v);}
   function decode(s){
    try{var v = json.parse(s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   global["encodeURI"];
   global["decodeURI"];
   var
    encode_component = global["encodeURIComponent"],
    decode_component = global["decodeURIComponent"],
    url = global["URL"];
   function v$0(base, s){
    if(! base) return new url(s);
    var b = base[1];
    return new url(s, b);
   }
   var prefix = "/";
   function path(u){return get$1(u, _cN_);}
   function path_segments(u){
    function decode_seg(s){return decode_component(s);}
    try{
     var
      p = path(u),
      p$0 = starts_with(prefix, p) ? slice(_cO_, 0, p) : p,
      _qu_ = [0, map$1(decode_seg, cuts(prefix, p$0))];
     return _qu_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   function with_path_segments(u, segs){
    function encode_seg(s){return append(prefix, encode_component(s));}
    try{
     var u$0 = new url(u), path = concat$0(0, map$1(encode_seg, segs));
     u$0[cst_pathname] = path;
     var _qt_ = [0, u$0];
     return _qt_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   var usp = global["URLSearchParams"];
   function to_jstr(p){return p.toString();}
   function of_obj(o){return new usp(o);}
   function with_query_params(u, ps){
    var u$0 = new url(u);
    set$0(u$0, _cP_, to_jstr(ps));
    return u$0;
   }
   function to_jstr$0(u){return u.toString();}
   var global_document = global["document"];
   if(! is_none(global_document)) global_document["documentElement"];
   function call(c, meth, args){caml_js_meth_call(c, meth, args); return 0;}
   var _cQ_ = global[cst_console];
   function msg_to_jv_array(msg){
    function loop(a, i, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return a;
      var vs = param$0[2], v = param$0[1];
      a[i$0] = v;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param$0 = vs;
     }
    }
    return caml_js_to_array(loop(create$3(0), 0, msg));
   }
   function log(msg){return call(_cQ_, _cR_, msg_to_jv_array(msg));}
   function error(msg){return call(_cQ_, _cS_, msg_to_jv_array(msg));}
   function info(msg){return call(_cQ_, _cT_, msg_to_jv_array(msg));}
   global[cst_console];
   global["navigator"];
   global["performance"];
   global["window"];
   get$0(global, _cU_);
   global["ClipboardItem"];
   global["FormData"];
   function of_jstr(_qs_){return _qs_;}
   function text(r){
    return of_promise$0(function(_qr_){return _qr_;}, r.text());
   }
   var headers = global["Headers"];
   function of_assoc(init, l){
    if(init) var h = init[1], args = [0, h]; else var args = [0];
    var hs = caml_js_new(headers, args);
    function add(hs, param){
     var v = param[2], k = param[1];
     hs.append(k, v);
     return 0;
    }
    iter(function(_qq_){return add(hs, _qq_);}, l);
    return hs;
   }
   function init$1
   (body,
    cache,
    credentials,
    headers,
    integrity,
    keepalive,
    method,
    mode,
    redirect,
    referrer,
    referrer_policy,
    signal,
    param){
    var o = {};
    o["body"] = of_option(undefined$0, function(_qp_){return _qp_;}, body);
    set_if_some$1(o, _cV_, cache);
    set_if_some$1(o, _cW_, credentials);
    set_if_some(o, _cX_, map(function(_qo_){return _qo_;}, headers));
    set_if_some$1(o, _cY_, integrity);
    set_if_some$0(o, _cZ_, keepalive);
    set_if_some$1(o, _c0_, method);
    set_if_some$1(o, _c1_, mode);
    set_if_some$1(o, _c2_, redirect);
    set_if_some$1(o, _c3_, referrer);
    set_if_some$1(o, _c4_, referrer_policy);
    o["signal"] = of_option(undefined$0, function(_qn_){return _qn_;}, signal);
    return o;
   }
   var request = global["Request"];
   function v$1(opt, url){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    return new request(url, init);
   }
   global["Response"];
   var fetch = global["fetch"];
   function request$0(r){
    function _qk_(_qm_){return _qm_;}
    return function(_ql_){return of_promise$0(_qk_, _ql_);}(fetch(r));
   }
   global["MediaStream"];
   global["MediaRecorder"];
   global["MessageChannel"];
   global["BroadcastChannel"];
   var message = "message";
   function data(e){return e["data"];}
   global["Notification"];
   global["WebSocket"];
   var worker = global["Worker"];
   function create$6(opt, uri){
    if(opt) var sth = opt[1], opts = sth; else var opts = undefined$0;
    return new worker(uri, opts);
   }
   global["SharedWorker"];
   function post(opts, v){
    if(opts) var o = opts[1], opts$0 = o; else var opts$0 = undefined$0;
    global.postMessage(v, opts$0);
    return 0;
   }
   global["clients"];
   global["registration"];
   global["serviceWorker"];
   function to_jv(param){
    if(0 === param[0]){var p = param[1]; return _cL_(p);}
    var keys = param[1];
    return of_array(to_jv, keys);
   }
   function bound(lower, upper, opt, _qj_, param){
    if(opt) var sth = opt[1], lower_open = sth; else var lower_open = 0;
    if(_qj_) var sth$0 = _qj_[1], upper_open = sth$0; else var upper_open = 0;
    var c = global["IDBKeyRange"];
    return c.bound(lower, upper, ! ! lower_open, ! ! upper_open);
   }
   function old_version(t){return t["oldVersion"];}
   function new_version(t){return t["newVersion"];}
   var
    upgrade_needed = "upgradeneeded",
    success = "success",
    error$0 = cst_error;
   function of_jv(f, j){return [0, j, f];}
   function error$1(t){return t[1][cst_error];}
   function result(t){
    var _qi_ = t[1]["result"];
    return caml_call1(t[2], _qi_);
   }
   function on_success(f, t){
    function f$0(ev){return caml_call2(f, ev, t);}
    listen(0, success, f$0, t[1]);
    return t;
   }
   function on_error(f, t){
    function f$0(ev){return caml_call2(f, ev, t);}
    listen(0, error$0, f$0, t[1]);
    return t;
   }
   function fut$0(t){
    var match = create$5(0), set = match[2], result_fut = match[1];
    on_success(function(param, t){return set([0, result(t)]);}, t);
    on_error(function(param, t){return set([1, error$1(t)]);}, t);
    return result_fut;
   }
   function to_string$1(param){
    switch(param){
      case 0:
       return _c5_;
      case 1:
       return _c6_;
      case 2:
       return _c7_;
      default: return _c8_;
    }
   }
   function to_jv$0(d){return _cL_(to_string$1(d));}
   function Content_access(Content, Key){
    function get(key, t){
     function f(jv){
      return to_option(function(j){return caml_call1(Content[4], j);}, jv);
     }
     return function(_qh_){return of_jv(f, _qh_);}
             (t.get(caml_call1(Key[2], key)));
    }
    function get_all(t){
     function f(jv){
      return to_array(function(c){return caml_call1(Content[4], c);}, jv);
     }
     return function(_qg_){return of_jv(f, _qg_);}(t.getAll());
    }
    function get_all_keys(query, t){
     if(query)
      var query$0 = query[1], args = [0, query$0];
     else
      var args = [0];
     function f(jv){
      return to_array(function(c){return caml_call1(Content[1][3], c);}, jv);
     }
     return function(_qf_){return of_jv(f, _qf_);}
             (caml_js_meth_call(t, "getAllKeys", args));
    }
    function key(t){
     var _qc_ = t["key"], _qd_ = Key[3];
     return function(_qe_){return to_option(_qd_, _qe_);}(_qc_);
    }
    function primary_key(t){
     var _p$_ = t["primaryKey"], _qa_ = Content[1][3];
     return function(_qb_){return to_option(_qa_, _qb_);}(_p$_);
    }
    function advance(count, t){t.advance(count); return t;}
    function continue$0(key, t){
     if(key)
      var key$0 = key[1], args = [0, caml_call1(Content[1][2], key$0)];
     else
      var args = [0];
     caml_js_meth_call(t, "continue", args);
     return 0;
    }
    var
     Cursor = [0, key, primary_key, advance, continue$0],
     key$0 = Cursor[1],
     primary_key$0 = Cursor[2],
     advance$0 = Cursor[3],
     continue$1 = Cursor[4];
    function value(t){
     function of_jv(j){return caml_call1(Content[4], j);}
     var v = t["value"];
     return to_option(of_jv, v);
    }
    function delete$0(t){
     function _p9_(param){return 0;}
     return function(_p__){return of_jv(_p9_, _p__);}(t.delete());
    }
    function update(v, t){
     var _p6_ = t.update(caml_call1(Content[3], v)), _p7_ = Content[1][3];
     return function(_p8_){return of_jv(_p7_, _p8_);}(_p6_);
    }
    var
     Cursor_with_value =
       [0,
        key$0,
        primary_key$0,
        advance$0,
        continue$1,
        value,
        delete$0,
        update];
    function open_cursor(query, direction, t){
     var direction$0 = map(to_jv$0, direction);
     if(query){
      var q = query[1];
      if(direction$0)
       var d = direction$0[1], _p3_ = [0, q, d];
      else
       var _p3_ = [0, q];
      var args = _p3_;
     }
     else if(direction$0)
      var d$0 = direction$0[1], args = [0, null$0, d$0];
     else
      var args = [0];
     function f(jv){return to_option(function(_p5_){return _p5_;}, jv);}
     return function(_p4_){return of_jv(f, _p4_);}
             (caml_js_meth_call(t, "openCursor", args));
    }
    return [0, , get, get_all, get_all_keys, , Cursor_with_value, open_cursor];
   }
   function Make_index(P, C, K){
    var
     get_all_keys = function(_p2_){return Content_access(C, _p2_);}(K)[4],
     name = P[1];
    return [0, , K, , , , get_all_keys, , , , , , name];
   }
   function Make_object_store(C){
    var
     include = function(_p1_){return Content_access(C, _p1_);}(C[1]),
     get = include[2],
     get_all = include[3],
     Cursor_with_value = include[6],
     open_cursor = include[7];
    function create_index(I){
     return function(t){
      var
       key_path = to_jv(I[3][1]),
       _p0_ = t.createIndex(_cL_(I[2]), key_path);
      return caml_call1(I[1], _p0_);};
    }
    function index(I){
     return function(t){
      var _pZ_ = t.index(_cL_(I[2]));
      return caml_call1(I[1], _pZ_);};
    }
    function put(v, key, t){
     if(key)
      var
       key$0 = key[1],
       _pV_ = caml_call1(C[1][2], key$0),
       args = [0, caml_call1(C[3], v), _pV_];
     else
      var args = [0, caml_call1(C[3], v)];
     var _pW_ = caml_js_meth_call(t, "put", args), _pX_ = C[1][3];
     return function(_pY_){return of_jv(_pX_, _pY_);}(_pW_);
    }
    return [0,
            C,
            ,
            get,
            get_all,
            ,
            ,
            Cursor_with_value,
            open_cursor,
            ,
            ,
            ,
            create_index,
            index,
            put];
   }
   function string_of_mode(param){
    switch(param){
      case 0:
       return _c9_;
      case 1:
       return _c__;
      default: return _c$_;
    }
   }
   function object_store(S){
    return function(t){
     var _pU_ = t.objectStore(_cL_(S[2][2]));
     return caml_call1(S[1], _pU_);};
   }
   function create_object_store(S){
    return function(opt, db){
     if(opt)
      var sth = opt[1], auto_increment = sth;
     else
      var auto_increment = 0;
     var
      opts = [0, [0, _da_, ! ! auto_increment], 0],
      key_path = to_jv(S[2][1][1]),
      opts$0 = [0, [0, _db_, key_path], opts],
      options = caml_js_object(of_list(opts$0));
     info([0, _dc_, [0, options, 0]]);
     var _pT_ = db.createObjectStore(_cL_(S[2][2]), options);
     return caml_call1(S[1], _pT_);};
   }
   function delete_object_store(t, name){
    t.deleteObjectStore(_cL_(name));
    return 0;
   }
   function transaction(stores, opt, t){
    if(opt) var sth = opt[1], mode = sth; else var mode = 0;
    var mode$0 = _cL_(string_of_mode(mode));
    function jv_of_store(S){return _cL_(S[2][2]);}
    return t.transaction(of_list$0(jv_of_store, stores), mode$0);
   }
   function object_store_names(t){
    return function(_pS_){return to_array(_cK_, _pS_);}(t["objectStoreNames"]);
   }
   function on_upgrade_needed(f, t){
    function f$0(ev){
     function _pP_(_pR_){return _pR_;}
     var req = function(_pQ_){return of_jv(_pP_, _pQ_);}(current_target(ev));
     return caml_call2(f, ev, req);
    }
    listen(0, upgrade_needed, f$0, t[1]);
    return t;
   }
   function open(name, version, t){
    if(version)
     var v = version[1], args = [0, name, string_of_int(v)];
    else
     var args = [0, name];
    function _pH_(_pO_, _pN_, _pM_){
     return caml_js_meth_call(_pO_, _pN_, _pM_);
    }
    function _pI_(_pL_){return _pL_;}
    return function(_pJ_){return of_jv(_pI_, _pJ_);}
            (function(_pK_){return _pH_(t, _dd_, _pK_);}(map$3(_cL_, args)));
   }
   function get_factory(opt, param){
    if(opt) var sth = opt[1], global$0 = sth; else var global$0 = global;
    return global$0["indexedDB"];
   }
   function _de_(_pF_){
    var _pG_ = Make_object_store(_pF_);
    return [0,
            _pG_[1],
            ,
            _pG_[7],
            ,
            _pG_[3],
            _pG_[4],
            ,
            ,
            _pG_[8],
            ,
            ,
            _pG_[12],
            _pG_[13],
            _pG_[14]];
   }
   function _df_(_pD_, _pC_, _pB_){
    var _pE_ = Make_index(_pD_, _pC_, _pB_);
    return [0, , _pE_[2], , , , , , _pE_[6], , , , _pE_[12]];
   }
   function symbol$1(_pA_, _pz_){return _pA_ === _pz_ ? 1 : 0;}
   function symbol$2(_py_, _px_){return _py_ < _px_ ? 1 : 0;}
   function symbol$3(_pw_, _pv_){return _pv_ < _pw_ ? 1 : 0;}
   function symbol$4(_pu_, _pt_){return _pt_ <= _pu_ ? 1 : 0;}
   function reverse_in_place(a){
    var len = a.length - 1;
    if(symbol$3(len, 0)){
     var _pp_ = (len - 1 | 0) / 2 | 0, _po_ = 0;
     if(_pp_ >= 0){
      var k = _po_;
      for(;;){
       var t = caml_check_bound(a, k)[1 + k], _pq_ = (len - 1 | 0) - k | 0;
       a[1 + k] = caml_check_bound(a, _pq_)[1 + _pq_];
       var _pr_ = (len - 1 | 0) - k | 0;
       caml_check_bound(a, _pr_)[1 + _pr_] = t;
       var _ps_ = k + 1 | 0;
       if(_pp_ === k) break;
       k = _ps_;
      }
     }
    }
    return;
   }
   function filter_map(f, a){
    function aux(acc, i){
     var acc$0 = acc, i$0 = i;
     for(;;){
      if(symbol$1(i$0, a.length - 1)){
       var a$0 = of_list(acc$0);
       reverse_in_place(a$0);
       return a$0;
      }
      var match = caml_call1(f, caml_check_bound(a, i$0)[1 + i$0]);
      if(match){
       var x = match[1], i$1 = i$0 + 1 | 0, acc$1 = [0, x, acc$0];
       acc$0 = acc$1;
       i$0 = i$1;
      }
      else{var i$2 = i$0 + 1 | 0; i$0 = i$2;}
     }
    }
    return aux(0, 0);
   }
   function filter(p, a){
    return filter_map(function(x){return caml_call1(p, x) ? [0, x] : 0;}, a);
   }
   function int_of_color(param){
    return 82908052 <= param
            ? 749039939
              <= param
              ? 756711075 <= param ? 2 : 6
              : 737308346 <= param ? 4 : 3
            : -588596599
              <= param
              ? 4100401 <= param ? 1 : 7
              : -605101559 <= param ? 5 : 0;
   }
   function code_of_style(param){
    if(typeof param === "number") return 737455525 <= param ? 1 : 0;
    if(15681 <= param[1]){var c = param[2]; return 30 + int_of_color(c) | 0;}
    var c$0 = param[2];
    return 40 + int_of_color(c$0) | 0;
   }
   function string_of_style(a){
    var _pn_ = code_of_style(a);
    return caml_call1(sprintf(_dg_), _pn_);
   }
   string_of_style(-101336657);
   function equal$0(a, b){return a === b ? 1 : 0;}
   function is_empty(param){return param ? 0 : 1;}
   function symbol$5(f, l){
    if(! l) return 0;
    var tl = l[2], x = l[1], x$0 = caml_call1(f, x), block = [0, x$0, 24029];
    map_dps(block, 1, f, tl);
    return block;
   }
   function map_dps(dst, offset, f, l){
    var dst$0 = dst, offset$0 = offset, l$0 = l;
    for(;;){
     if(! l$0){dst$0[1 + offset$0] = 0; return;}
     var
      tl = l$0[2],
      x = l$0[1],
      x$0 = caml_call1(f, x),
      dst$1 = [0, x$0, 24029];
     dst$0[1 + offset$0] = dst$1;
     dst$0 = dst$1;
     offset$0 = 1;
     l$0 = tl;
    }
   }
   function filter_map$0(f, l){
    function recurse(acc, l){
     var acc$0 = acc, l$0 = l;
     for(;;){
      if(! l$0) return rev(acc$0);
      var l$1 = l$0[2], x = l$0[1], match = caml_call1(f, x);
      if(match)
       var y = match[1], acc$1 = [0, y, acc$0];
      else
       var acc$1 = acc$0;
      acc$0 = acc$1;
      l$0 = l$1;
     }
    }
    return recurse(0, l);
   }
   function iteri(f, l){
    function aux(f, i, l){
     var i$0 = i, l$0 = l;
     for(;;){
      if(! l$0) return 0;
      var l$1 = l$0[2], x = l$0[1];
      caml_call2(f, i$0, x);
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      l$0 = l$1;
     }
    }
    return aux(f, 0, l);
   }
   function symbol$6(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function is_none$0(param){return param ? 0 : 1;}
   function iter$2(f, o){
    if(! o) return 0;
    var x = o[1];
    return caml_call1(f, x);
   }
   function value$0(x, default$0){
    if(! x) return default$0;
    var y = x[1];
    return y;
   }
   function get_exn_or(msg, param){
    if(! param) return invalid_arg(msg);
    var x = param[1];
    return x;
   }
   make_self_init(0);
   function symbol$7(f, e){
    if(0 === e[0]){var x = e[1]; return [0, caml_call1(f, x)];}
    var s = e[1];
    return [1, s];
   }
   function map_err(f, e){
    if(0 === e[0]) return e;
    var y = e[1];
    return [1, caml_call1(f, y)];
   }
   var Get_error = [248, _dh_, caml_fresh_oo_id(0)];
   function get_exn(param){
    if(0 !== param[0]) throw caml_maybe_attach_backtrace(Get_error, 1);
    var x = param[1];
    return x;
   }
   function flatten_l(l){
    function loop(acc, l){
     var acc$0 = acc, l$0 = l;
     for(;;){
      if(! l$0) return [0, rev(acc$0)];
      var match = l$0[1];
      if(0 !== match[0]){var e = match[1]; return [1, e];}
      var l$1 = l$0[2], x = match[1], acc$1 = [0, x, acc$0];
      acc$0 = acc$1;
      l$0 = l$1;
     }
    }
    return loop(0, l);
   }
   function symbol$8(e, f){return symbol$7(f, e);}
   function Make$0(O){
    var S = _N_(O), empty = S[1], add = S[4], elements = S[23];
    return [0,
            ,
            ,
            ,
            empty,
            ,
            ,
            add,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            elements];
   }
   function _di_(_pl_){
    var _pm_ = Make$0(_pl_);
    return [0,
            _pm_[4],
            ,
            ,
            _pm_[7],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _pm_[51]];
   }
   function length$2(_pk_){return caml_ml_string_length(_pk_);}
   function is_empty$0(s){return symbol$0(s, _dj_);}
   function kmp_pattern_length(p){return caml_ml_string_length(p[2]);}
   function get$2(dir){
    return dir
            ? function
             (s, i){
              return caml_string_get
                      (s, (caml_ml_string_length(s) - i | 0) - 1 | 0);
             }
            : function(_pj_, _pi_){return caml_string_get(_pj_, _pi_);};
   }
   function kmp_compile(dir, str){
    var len = length$2(str), get = get$2(dir);
    if(0 === len) return [0, [0], str];
    if(1 === len) return [0, [0, -1], str];
    var failure = caml_make_vect(len, 0);
    caml_check_bound(failure, 0)[1] = -1;
    var i = [0, 2], j = [0, 0];
    for(;;){
     if(! symbol$2(i[1], len)) return [0, failure, str];
     var match = j[1], _pd_ = get(str, j[1]);
     if(equal(get(str, i[1] - 1 | 0), _pd_)){
      j[1]++;
      var _pf_ = i[1], _pe_ = j[1];
      caml_check_bound(failure, _pf_)[1 + _pf_] = _pe_;
      i[1]++;
     }
     else if(0 === match){
      var _pg_ = i[1];
      caml_check_bound(failure, _pg_)[1 + _pg_] = 0;
      i[1]++;
     }
     else{
      if(! symbol$3(j[1], 0))
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dk_], 1);
      var _ph_ = j[1];
      j[1] = caml_check_bound(failure, _ph_)[1 + _ph_];
     }
    }
   }
   function kmp_compile$0(s){return kmp_compile(0, s);}
   function kmp_find(pattern, s, idx){
    var
     len = length$2(s),
     i = [0, idx],
     j = [0, 0],
     pat_len = kmp_pattern_length(pattern);
    for(;;){
     if(symbol$2(j[1], pat_len) && symbol$2(i[1] + j[1] | 0, len)){
      var
       c = caml_string_get(s, i[1] + j[1] | 0),
       expected = caml_string_get(pattern[2], j[1]);
      if(equal(c, expected))
       j[1]++;
      else{
       var
        _pc_ = j[1],
        fail_offset = caml_check_bound(pattern[1], _pc_)[1 + _pc_];
       if(symbol$4(fail_offset, 0)){
        if(! symbol$2(fail_offset, j[1]))
         throw caml_maybe_attach_backtrace([0, Assert_failure, _dl_], 1);
        i[1] = (i[1] + j[1] | 0) - fail_offset | 0;
        j[1] = fail_offset;
       }
       else{j[1] = 0; i[1]++;}
      }
      continue;
     }
     return symbol$1(j[1], pat_len) ? i[1] : -1;
    }
   }
   function compile(sub){
    return symbol$1(length$2(sub), 1)
            ? [0, caml_string_get(sub, 0)]
            : [1, kmp_compile$0(sub)];
   }
   function find$0(opt, pattern){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    return function(s){
     if(0 !== pattern[0]){
      var pattern$0 = pattern[1];
      return kmp_find(pattern$0, s, start);
     }
     var c = pattern[1];
     try{var _pa_ = index_from(s, start, c); return _pa_;}
     catch(_pb_){
      var _o$_ = caml_wrap_exception(_pb_);
      if(_o$_ === Not_found) return -1;
      throw caml_maybe_attach_backtrace(_o$_, 0);
     }};
   }
   function prefix$0(pre, s){
    var len = caml_ml_string_length(pre);
    if(symbol$3(len, caml_ml_string_length(s))) return 0;
    function check(i){
     var i$0 = i;
     for(;;){
      if(symbol$1(i$0, len)) return 1;
      if(caml_string_unsafe_get(s, i$0) !== caml_string_unsafe_get(pre, i$0))
       return 0;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    return check(0);
   }
   var Lex_error = [248, _dm_, caml_fresh_oo_id(0)];
   function lex_error(err){
    throw caml_maybe_attach_backtrace([0, Lex_error, err], 1);
   }
   function error_pos(lexbuf){
    var
     start = lexbuf[11],
     cnum = lexbuf[7] - start[3] | 0,
     enum$0 = lexbuf[6] - start[3] | 0;
    return [0, start[2], cnum, enum$0];
   }
   function string2num(s){
    try{var _o9_ = [3, caml_int_of_string(s)]; return _o9_;}
    catch(_o__){
     var _o8_ = caml_wrap_exception(_o__);
     if(_o8_[1] === Failure) return [2, s];
     throw caml_maybe_attach_backtrace(_o8_, 0);
    }
   }
   function update_pos(lexbuf){
    var pos = lexbuf[11];
    lexbuf[11] = [0, pos[1], pos[2] + 1 | 0, lexbuf[5], pos[4]];
    return;
   }
   function int_of_hexchar(c){
    if(65 <= c){
     if(97 <= c){
      if(103 > c) return (c - 97 | 0) + 10 | 0;
     }
     else if(71 > c) return (c - 65 | 0) + 10 | 0;
    }
    else if(9 >= c - 48 >>> 0) return c - 48 | 0;
    return lex_error(symbol_concat(_do_, symbol_concat(make$1(1, c), _dn_)));
   }
   function utf8_of_code(buf, idx, u){
    var i = [0, idx];
    function add_char(b, c){
     caml_bytes_unsafe_set(b, i[1], c);
     i[1] = i[1] + 1 | 0;
     return;
    }
    function max_used_bits(n, u){return 0 === (u >>> n | 0) ? 1 : 0;}
    if(max_used_bits(7, u))
     add_char(buf, of_int_exn(u));
    else if(max_used_bits(11, u)){
     add_char(buf, of_int_exn(192 | (u >>> 6 | 0) & 31));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(16, u)){
     add_char(buf, of_int_exn(224 | (u >>> 12 | 0) & 15));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(21, u)){
     add_char(buf, of_int_exn(240 | (u >>> 18 | 0) & 7));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(26, u)){
     add_char(buf, of_int_exn(248 | (u >>> 24 | 0) & 3));
     add_char(buf, of_int_exn(128 | (u >>> 18 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else{
     add_char(buf, of_int_exn(252 | (u >>> 30 | 0) & 1));
     add_char(buf, of_int_exn(128 | (u >>> 24 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 18 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    return i[1];
   }
   function utf8_of_surrogate_pair(buf, idx, high, low){
    var
     high$0 = high - 55296 | 0,
     low$0 = low - 56320 | 0,
     code = 65536 + (high$0 << 10 | low$0) | 0;
    return utf8_of_code(buf, idx, code);
   }
   function escaping_error(msg, s, c, off){
    var offs = string_of_int(off);
    if(c)
     var
      c$0 = c[1],
      cs = symbol_concat(_dq_, symbol_concat(make$1(1, c$0), _dp_));
    else
     var cs = _dt_;
    return lex_error
            (symbol_concat
              (msg,
               symbol_concat
                (_ds_,
                 symbol_concat
                  (offs, symbol_concat(cs, symbol_concat(_dr_, s))))));
   }
   function unescape_string(s){
    var
     l = caml_ml_string_length(s),
     s$0 = caml_create_bytes(l),
     j = [0, 0],
     u1 = [0, 0],
     u2 = [0, 0],
     state = [0, 748194550],
     _oZ_ = l - 1 | 0,
     _oY_ = 0;
    if(_oZ_ >= 0){
     var i = _oY_;
     for(;;){
      var _o0_ = state[1];
      a:
      if(308570827 <= _o0_)
       if(308570829 <= _o0_)
        if(748194550 <= _o0_)
         if(945120947 <= _o0_)
          if(117 === caml_string_get(s, i))
           state[1] = 308570827;
          else
           escaping_error(_dv_, s, [0, caml_string_get(s, i)], i);
         else{
          var c = caml_string_get(s, i);
          if(92 === c)
           state[1] = 258914209;
          else{caml_bytes_unsafe_set(s$0, j[1], c); j[1] = j[1] + 1 | 0;}
         }
        else if(308570830 <= _o0_){
         state[1] = 748194550;
         var _o2_ = int_of_hexchar(caml_string_get(s, i));
         u2[1] = u2[1] << 4 | _o2_;
         if(56320 <= u2[1] && 57343 >= u2[1]){
          j[1] = utf8_of_surrogate_pair(s$0, j[1], u1[1], u2[1]);
          break a;
         }
         escaping_error(_dw_, s, 0, i);
        }
        else{
         var _o3_ = int_of_hexchar(caml_string_get(s, i));
         u2[1] = u2[1] << 4 | _o3_;
         state[1] = 308570830;
        }
       else if(308570828 <= _o0_){
        var _o4_ = int_of_hexchar(caml_string_get(s, i));
        u2[1] = u2[1] << 4 | _o4_;
        state[1] = 308570829;
       }
       else{
        u2[1] = int_of_hexchar(caml_string_get(s, i));
        state[1] = 308570828;
       }
      else if(297481261 <= _o0_)
       if(297481263 <= _o0_)
        if(308569555 <= _o0_)
         if(92 === caml_string_get(s, i))
          state[1] = 945120947;
         else
          escaping_error(_dx_, s, [0, caml_string_get(s, i)], i);
        else{
         var _o5_ = int_of_hexchar(caml_string_get(s, i));
         u1[1] = u1[1] << 4 | _o5_;
         if(55296 <= u1[1] && 56319 >= u1[1]){state[1] = 308569555; break a;}
         j[1] = utf8_of_code(s$0, j[1], u1[1]);
         state[1] = 748194550;
        }
       else if(297481262 <= _o0_){
        var _o6_ = int_of_hexchar(caml_string_get(s, i));
        u1[1] = u1[1] << 4 | _o6_;
        state[1] = 297481263;
       }
       else{
        var _o7_ = int_of_hexchar(caml_string_get(s, i));
        u1[1] = u1[1] << 4 | _o7_;
        state[1] = 297481262;
       }
      else if(297481260 <= _o0_){
       u1[1] = int_of_hexchar(caml_string_get(s, i));
       state[1] = 297481261;
      }
      else{
       var match = caml_string_get(s, i);
       b:
       if(34 === match){
        caml_bytes_unsafe_set(s$0, j[1], 34);
        state[1] = 748194550;
        j[1] = j[1] + 1 | 0;
       }
       else{
        c:
        if(92 <= match){
         if(118 > match){
          switch(match - 92 | 0){
            case 0:
             caml_bytes_unsafe_set(s$0, j[1], 92);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 6:
             caml_bytes_unsafe_set(s$0, j[1], 8);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 10:
             caml_bytes_unsafe_set(s$0, j[1], 12);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 18:
             caml_bytes_unsafe_set(s$0, j[1], 10);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 22:
             caml_bytes_unsafe_set(s$0, j[1], 13);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 24:
             caml_bytes_unsafe_set(s$0, j[1], 9);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 25:
             state[1] = 297481260; break;
            default: break c;
          }
          break b;
         }
        }
        else if(47 === match){
         caml_bytes_unsafe_set(s$0, j[1], 47);
         state[1] = 748194550;
         j[1] = j[1] + 1 | 0;
         break b;
        }
        escaping_error(_dy_, s, [0, caml_string_get(s, i)], i);
       }
      }
      var _o1_ = i + 1 | 0;
      if(_oZ_ === i) break;
      i = _o1_;
     }
    }
    if(748194550 !== state[1]) escaping_error(_du_, s, 0, l);
    return j[1] !== l ? unsafe_to_string(sub(s$0, 0, j[1])) : s;
   }
   function engine(tbl, state, buf){
    var result = caml_lex_engine(tbl, state, buf);
    return result;
   }
   function Make$1(Compliance){
    function read$0(counter, lexbuf){
     var _oX_ = 0;
     if(counter >= 50)
      return caml_trampoline_return(ocaml_lex_read_rec, [0, lexbuf, _oX_]);
     var counter$0 = counter + 1 | 0;
     return ocaml_lex_read_rec(counter$0, lexbuf, _oX_);
    }
    function read(lexbuf){return caml_trampoline(read$0(0, lexbuf));}
    function ocaml_lex_read_rec(counter, lexbuf, ocaml_lex_state){
     var ocaml_lex_state$0 = ocaml_lex_state;
     for(;;){
      var
       ocaml_lex_state$1 = engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
      if(26 >= ocaml_lex_state$1 >>> 0)
       switch(ocaml_lex_state$1){
         case 0:
          return _dz_;
         case 1:
          return _dA_;
         case 2:
          return 2;
         case 3:
          return 0;
         case 4:
          return 1;
         case 5:
          return 9;
         case 6:
          return 10;
         case 7:
          return caml_call1(Compliance[5], 13)
                  ? 13
                  : lex_error
                    (symbol_concat(_dC_, symbol_concat(lexeme(lexbuf), _dB_)));
         case 8:
          return caml_call1(Compliance[5], 14)
                  ? 14
                  : lex_error
                    (symbol_concat(_dE_, symbol_concat(lexeme(lexbuf), _dD_)));
         case 9:
          return caml_call1(Compliance[6], 11)
                  ? 11
                  : lex_error
                    (symbol_concat(_dG_, symbol_concat(lexeme(lexbuf), _dF_)));
         case 10:
          return caml_call1(Compliance[6], 12)
                  ? 12
                  : lex_error
                    (symbol_concat(_dI_, symbol_concat(lexeme(lexbuf), _dH_)));
         case 11:
          return 7;
         case 12:
          return 8;
         case 13:
          return caml_call1(Compliance[2], 3);
         case 14:
          return caml_call1(Compliance[2], 5);
         case 15:
          return caml_call1(Compliance[2], 5);
         case 16:
          return caml_call1(Compliance[2], 4);
         case 17:
          var tok = string2num(lexeme(lexbuf));
          if(typeof tok !== "number")
           switch(tok[0]){
             case 2:
              return caml_call1(Compliance[4], tok);
             case 3:
              return caml_call1(Compliance[3], tok);
           }
          return tok;
         case 18:
          var _oW_ = [4, caml_float_of_string(lexeme(lexbuf))];
          return caml_call1(Compliance[2], _oW_);
         case 19:
          return _dJ_;
         case 20:
          var s = sub_lexeme(lexbuf, lexbuf[5] + 1 | 0, lexbuf[6] - 1 | 0);
          return [0, unescape_string(s)];
         case 21:
          return 6;
         case 22:
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$0 = counter + 1 | 0;
          return read$0(counter$0, lexbuf);
         case 23:
          update_pos(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$1 = counter + 1 | 0;
          return read$0(counter$1, lexbuf);
         case 24:
          var match = caml_call1(Compliance[7], 0);
          if(0 !== match[0]){var err = match[1]; return [5, err];}
          read_comment(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$2 = counter + 1 | 0;
          return read$0(counter$2, lexbuf);
         case 25:
          var match$0 = caml_call1(Compliance[7], 0);
          if(0 !== match$0[0]){var err$0 = match$0[1]; return [5, err$0];}
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$3 = counter + 1 | 0;
          return read$0(counter$3, lexbuf);
         default:
          return lex_error
                  (symbol_concat(_dL_, symbol_concat(lexeme(lexbuf), _dK_)));
       }
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state$0 = ocaml_lex_state$1;
     }
    }
    function read_comment$0(counter, lexbuf){
     var _oV_ = 88;
     if(counter >= 50)
      return caml_trampoline_return
              (ocaml_lex_read_comment_rec, [0, lexbuf, _oV_]);
     var counter$0 = counter + 1 | 0;
     return ocaml_lex_read_comment_rec(counter$0, lexbuf, _oV_);
    }
    function read_comment(lexbuf){
     return caml_trampoline(read_comment$0(0, lexbuf));
    }
    function ocaml_lex_read_comment_rec(counter, lexbuf, ocaml_lex_state){
     var ocaml_lex_state$0 = ocaml_lex_state;
     for(;;){
      var
       ocaml_lex_state$1 = engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
      if(3 >= ocaml_lex_state$1 >>> 0)
       switch(ocaml_lex_state$1){
         case 0:
          return;
         case 1:
          update_pos(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read_comment$0, [0, lexbuf]);
          var counter$0 = counter + 1 | 0;
          return read_comment$0(counter$0, lexbuf);
         case 2:
          return lex_error(_dM_);
         default:
          if(counter >= 50)
           return caml_trampoline_return(read_comment$0, [0, lexbuf]);
          var counter$1 = counter + 1 | 0;
          return read_comment$0(counter$1, lexbuf);
       }
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state$0 = ocaml_lex_state$1;
     }
    }
    return [0, read];
   }
   var Json_error_info = [248, _dN_, caml_fresh_oo_id(0)];
   function create_from_lexbuf(lexbuf, emsg){
    var
     match = error_pos(lexbuf),
     echar = match[3],
     schar = match[2],
     eline = match[1];
    return [0, eline, schar, echar, emsg];
   }
   function log2(n){return 1 < n ? 1 + log2(n >> 1) | 0 : 0;}
   function bits$0(n){return log2(n) + 1 | 0;}
   var max_json_int = 53 < bits$0(max_int) ? 2097151 : max_int;
   function string_of_float_json(f){
    var is_int = (f | 0) == f ? 1 : 0;
    if(is_int && Math.abs(f) <= max_json_int){
     var int_value = f | 0;
     return symbol_concat(string_of_int(int_value), _dO_);
    }
    var
     s = caml_format_float("%.16g", f),
     s$0 = caml_float_of_string(s) == f ? s : caml_format_float("%.17g", f);
    if(! contains(s$0, 46) && ! contains(s$0, 101))
     return symbol_concat(s$0, _dP_);
    return s$0;
   }
   function token_error(tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var err = _dQ_; break;
       case 1:
        var err = _dR_; break;
       case 2:
        var err = _dS_; break;
       case 3:
        var err = _dT_; break;
       case 4:
        var err = _dU_; break;
       case 5:
        var err = _dV_; break;
       case 6:
        var err = _dW_; break;
       case 7:
        var err = _dX_; break;
       case 8:
        var err = _dY_; break;
       case 9:
        var err = _dZ_; break;
       case 10:
        var err = _d0_; break;
       case 11:
        var err = _d1_; break;
       case 12:
        var err = _d2_; break;
       case 13:
        var err = _d3_; break;
       default: var err = _d4_;
     }
    else
     switch(tok[0]){
       case 0:
        var s = tok[1], err = symbol_concat(_d6_, symbol_concat(s, _d5_));
        break;
       case 1:
        var s$0 = tok[1], err = s$0; break;
       case 2:
        var s$1 = tok[1], err = symbol_concat(_d8_, symbol_concat(s$1, _d7_));
        break;
       case 3:
        var
         i = tok[1],
         err = symbol_concat(_d__, symbol_concat(string_of_int(i), _d9_));
        break;
       case 4:
        var
         f = tok[1],
         err = symbol_concat(_ea_, symbol_concat(string_of_float(f), _d$_));
        break;
       case 5:
        var s$2 = tok[1], err = symbol_concat(_ec_, symbol_concat(s$2, _eb_));
        break;
       default:
        var
         b = tok[1],
         _oU_ = b ? _ee_ : _eg_,
         err = symbol_concat(_ef_, symbol_concat(_oU_, _ed_));
     }
    return [0, 148000204, err];
   }
   function Make$2(Compliance){
    var Parse_error = [248, _eh_, caml_fresh_oo_id(0)];
    function json_value(reader){
     function token_value(tok){
      if(typeof tok === "number")
       switch(tok){
         case 0:
          return object_value_start(0);
         case 2:
          return Compliance[12];
         case 3:
          return caml_call1(Compliance[9], -625979624);
         case 4:
          return caml_call1(Compliance[9], 3900603);
         case 5:
          return caml_call1(Compliance[9], 874173192);
         case 6:
          throw caml_maybe_attach_backtrace([0, Parse_error, 3456156], 1);
         case 9:
          return array_value_start(0);
         case 11:
          return variant_value_start(0);
         case 13:
          return tuple_value_start(0);
       }
      else
       switch(tok[0]){
         case 0:
          var s = tok[1]; return caml_call1(Compliance[13], s);
         case 2:
          var s$0 = tok[1]; return caml_call1(Compliance[11], s$0);
         case 3:
          var i = tok[1]; return caml_call1(Compliance[10], i);
         case 4:
          var f = tok[1]; return caml_call1(Compliance[9], [0, 365180284, f]);
         case 6:
          var b = tok[1]; return caml_call1(Compliance[14], b);
       }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function value(param){return token_value(caml_call1(reader, 0));}
     function array_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 10 === tok)
       return caml_call1(Compliance[16], 0);
      return array_values_start(tok, 0);
     }
     function array_values_start(tok, acc){
      var v = token_value(tok), tok$0 = caml_call1(reader, 0);
      if(typeof tok$0 === "number"){
       if(7 === tok$0) return array_values([0, v, acc]);
       if(10 === tok$0){
        var _oT_ = rev([0, v, acc]);
        return caml_call1(Compliance[16], _oT_);
       }
      }
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, token_error(tok$0)], 1);
     }
     function array_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(7 === tok){var acc$1 = [0, v, acc$0]; acc$0 = acc$1; continue;}
        if(10 === tok){
         var _oS_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[16], _oS_);
        }
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function object_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 1 === tok)
       return caml_call1(Compliance[15], 0);
      return object_values_start(tok, 0);
     }
     function object_values_start(tok, acc){
      var v = colon_value(tok, 0), tok$0 = caml_call1(reader, 0);
      if(typeof tok$0 === "number"){
       if(1 === tok$0){
        var _oR_ = rev([0, v, acc]);
        return caml_call1(Compliance[15], _oR_);
       }
       if(7 === tok$0) return object_values([0, v, acc]);
      }
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, token_error(tok$0)], 1);
     }
     function object_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = key_colon_value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(1 === tok){
         var _oQ_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[15], _oQ_);
        }
        if(7 === tok){var acc$1 = [0, v, acc$0]; acc$0 = acc$1; continue;}
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function colon_value(v, param){
      if(typeof v !== "number" && 0 === v[0]){
       var k = v[1], tok = caml_call1(reader, 0);
       if(typeof tok === "number" && 8 === tok) return [0, k, value(0)];
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(v)], 1);
     }
     function key_colon_value(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok !== "number" && 0 === tok[0]){
       var k = tok[1], tok$0 = caml_call1(reader, 0);
       if(typeof tok$0 === "number" && 8 === tok$0) return [0, k, value(0)];
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok$0)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function tuple_value_start(param){
      var v1 = value(0), tok = caml_call1(reader, 0);
      if(typeof tok === "number"){
       if(7 === tok){
        var v2 = value(0), tok$0 = caml_call1(reader, 0);
        if(typeof tok$0 === "number"){
         if(7 === tok$0) return tuple_values([0, v2, [0, v1, 0]]);
         if(14 <= tok$0)
          return caml_call1(Compliance[17], [0, v1, [0, v2, 0]]);
        }
        throw caml_maybe_attach_backtrace
               ([0, Parse_error, token_error(tok$0)], 1);
       }
       if(14 <= tok)
        throw caml_maybe_attach_backtrace([0, Parse_error, _ei_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function tuple_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(7 === tok){var acc$1 = [0, v, acc$0]; acc$0 = acc$1; continue;}
        if(14 <= tok){
         var _oP_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[17], _oP_);
        }
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function variant_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number"){
       if(12 === tok)
        throw caml_maybe_attach_backtrace([0, Parse_error, _ej_], 1);
      }
      else if(0 === tok[0]){
       var k = tok[1], tok$0 = caml_call1(reader, 0);
       if(typeof tok$0 === "number"){
        if(8 === tok$0) return variant_end(k, [0, value(0)]);
        if(12 === tok$0) return caml_call2(Compliance[18], k, 0);
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok$0)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function variant_end(k, v){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 12 === tok)
       return caml_call2(Compliance[18], k, v);
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     try{var tok = caml_call1(reader, 0);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Parse_error && 3456156 === exn[2]) return 0;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     if(typeof tok === "number" && 6 === tok) return 0;
     return [0, token_value(tok)];
    }
    function decode(reader){
     try{var res = json_value(reader);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Parse_error){
       var match = exn[2];
       if(typeof match === "number") return _ek_;
       var err = match[2];
       return [1, err];
      }
      if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err$0 = exn[2];
      return [1, err$0];
     }
     return [0, res];
    }
    return [0, Compliance, decode];
   }
   function nibble_to_hex(i){
    var _oO_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
    return char_of_int(_oO_);
   }
   function add_hex_byte(add_char, i){
    caml_call1(add_char, nibble_to_hex((i >>> 4 | 0) & 15));
    return caml_call1(add_char, nibble_to_hex(i & 15));
   }
   function escape(add_char, add_string, s){
    var l = caml_ml_string_length(s), _oM_ = l - 1 | 0, _oL_ = 0;
    if(_oM_ >= 0){
     var i = _oL_;
     for(;;){
      var c = caml_string_get(s, i);
      a:
      if(92 === c)
       caml_call1(add_string, _el_);
      else{
       b:
       {
        c:
        {
         if(35 > c){
          if(8 > c) break b;
          switch(c - 8 | 0){
            case 0:
             caml_call1(add_string, _en_); break;
            case 1:
             caml_call1(add_string, _eo_); break;
            case 2:
             caml_call1(add_string, _ep_); break;
            case 4:
             caml_call1(add_string, _eq_); break;
            case 5:
             caml_call1(add_string, _er_); break;
            case 26:
             caml_call1(add_string, _es_); break;
            case 24:
            case 25:
             break c;
            default: break b;
          }
          break a;
         }
         if(127 === c) break b;
        }
        caml_call1(add_char, caml_string_get(s, i));
        break a;
       }
       caml_call1(add_string, _em_);
       add_hex_byte(add_char, c);
      }
      var _oN_ = i + 1 | 0;
      if(_oM_ === i) break;
      i = _oN_;
     }
    }
    return;
   }
   function Make$3(Compliance){
    function to_json_string(s){
     var buf = create$1(100);
     function add_char$0(_oK_){return add_char(buf, _oK_);}
     function add_string$0(_oJ_){return add_string(buf, _oJ_);}
     function add_quote_string(s){
      add_char$0(34);
      escape(add_char$0, add_string$0, s);
      return add_char$0(34);
     }
     add_quote_string(s);
     return contents(buf);
    }
    function pp_list(sep, ppx, out, l){
     function pp_sep(out, param){
      return caml_call1(fprintf$0(out)(_et_), sep);
     }
     return pp_print_list([0, pp_sep], ppx, out, l);
    }
    function format(out, json){
     if(typeof json === "number") return pp_print_string(out, _eu_);
     var _oA_ = json[1];
     if(726928360 <= _oA_){
      if(737456202 === _oA_){var b = json[2]; return pp_print_bool(out, b);}
      if(928231259 > _oA_){
       if(848054398 <= _oA_){
        var l$0 = json[2];
        return l$0
                ? caml_call2
                  (fprintf$0(out)(_ez_),
                   function(_oH_, _oI_){
                    return pp_list(_ey_, format, _oH_, _oI_);
                   },
                   l$0)
                : pp_print_string(out, _eA_);
       }
       var l$1 = json[2];
       return 0 === l$1
               ? pp_print_string(out, _eB_)
               : caml_call2
                 (fprintf$0(out)(_eD_),
                  function(_oF_, _oG_){
                   return pp_list(_eC_, format, _oF_, _oG_);
                  },
                  l$1);
      }
      if(963043957 <= _oA_){
       var l = json[2];
       return l
               ? caml_call2
                 (fprintf$0(out)(_ew_),
                  function(_oD_, _oE_){
                   return pp_list(_ev_, format_field, _oD_, _oE_);
                  },
                  l)
               : pp_print_string(out, _ex_);
      }
     }
     else{
      if(3654863 === _oA_){
       var i = json[2];
       return pp_print_string(out, string_of_int(i));
      }
      if(365180284 <= _oA_){
       if(708012133 > _oA_){
        var f = json[2], s$2 = caml_call1(Compliance[8], f);
        return pp_print_string(out, s$2);
       }
       var _oB_ = json[2], match = _oB_[2], s$0 = _oB_[1];
       if(match){
        var json$0 = match[1], s$1 = to_json_string(s$0);
        return caml_call3(fprintf$0(out)(_eE_), s$1, format, json$0);
       }
       var _oC_ = to_json_string(s$0);
       return caml_call1(fprintf$0(out)(_eF_), _oC_);
      }
      if(-752863768 > _oA_){
       var s$3 = json[2];
       return pp_print_string(out, to_json_string(s$3));
      }
     }
     var s = json[2];
     return pp_print_string(out, s);
    }
    function format_field(out, param){
     var json = param[2], name = param[1], _oz_ = to_json_string(name);
     return caml_call3(fprintf$0(out)(_eG_), _oz_, format, json);
    }
    function pretty_print(out, json){
     return caml_call2(fprintf$0(out)(_eH_), format, json);
    }
    function pretty_print_to_string(json){
     return caml_call2(asprintf(_eI_), pretty_print, json);
    }
    function pretty_print_to_channel(oc, json){
     var fmt = formatter_of_out_channel(oc);
     return caml_call2(fprintf$0(fmt)(_eJ_), pretty_print, json);
    }
    return [0,
            ,
            ,
            ,
            ,
            pretty_print,
            pretty_print_to_string,
            pretty_print_to_channel];
   }
   function _eK_(_ox_){
    var _oy_ = Make$3(_ox_);
    return [0, _oy_[5], _oy_[6], _oy_[7]];
   }
   function error$2(msg, json){
    throw caml_maybe_attach_backtrace([0, Failure, msg], 1);
   }
   function Strict(M){
    function to_assoc(json){
     if(typeof json !== "number" && 963043957 === json[1]){var obj = json[2]; return obj;}
     return error$2(_eL_, json);
    }
    function to_string(json){
     if(typeof json !== "number" && -976970511 === json[1]){var s = json[2]; return s;}
     return error$2(_eM_, json);
    }
    return [0, , , , to_assoc, , , to_string];
   }
   function null$1(param){return 870828711;}
   var
    M = [0, null$1],
    _eN_ = Strict(M),
    to_assoc = _eN_[4],
    to_string$2 = _eN_[7];
   function token_to_string(tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        return _eO_;
       case 1:
        return _eP_;
       case 2:
        return _eQ_;
       case 3:
        return _eR_;
       case 4:
        return _eS_;
       case 5:
        return _eT_;
       case 6:
        return _eU_;
       case 7:
        return _eV_;
       case 8:
        return _eW_;
       case 9:
        return _eX_;
       case 10:
        return _eY_;
       case 11:
        return _eZ_;
       case 12:
        return _e0_;
       case 13:
        return _e1_;
       default: return _e2_;
     }
    switch(tok[0]){
      case 0:
       var s = tok[1]; return s;
      case 1:
       var err = tok[1]; return symbol_concat(_e4_, symbol_concat(err, _e3_));
      case 2:
       var s$0 = tok[1]; return s$0;
      case 3:
       var i = tok[1]; return string_of_int(i);
      case 4:
       var f = tok[1]; return string_of_float(f);
      case 5:
       var err$0 = tok[1]; return err$0;
      default: var b = tok[1]; return b ? _e5_ : _e6_;
    }
   }
   function Make$4(Lexxer, Parser){
    function read_json(lexbuf){
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     var match = caml_call1(Parser[2], reader);
     if(0 !== match[0]){var s = match[1]; return [1, s];}
     var match$0 = match[1];
     if(! match$0) return _e8_;
     var res = match$0[1];
     try{var tok = reader(0);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err = exn[2];
      return [1, err];
     }
     if(typeof tok === "number" && 6 === tok) return [0, res];
     return [1, symbol_concat(_e7_, token_to_string(tok))];
    }
    function read_json_error_info(lexbuf){
     var res = read_json(lexbuf);
     if(0 === res[0]) return res;
     var err = res[1], err_info = create_from_lexbuf(lexbuf, err);
     return [1, err_info];
    }
    function json_of_string_error_info(s){
     var lexbuf = from_string(0, s);
     return read_json_error_info(lexbuf);
    }
    function json_of_channel_error_info(inc){
     var lexbuf = from_channel(0, inc);
     return read_json_error_info(lexbuf);
    }
    function json_of_file_error_info(filename){
     try{
      var inc = open_in(filename), res = json_of_channel_error_info(inc);
      _i_(inc);
      return res;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Sys_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err = exn[2];
      return [1, [0, 0, 0, 0, err]];
     }
    }
    function json_of_lexbuf_error_info_comp(opt, lexbuf){
     if(opt) var sth = opt[1], stream = sth; else var stream = 0;
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     var match = caml_call1(Parser[2], reader);
     if(0 === match[0]){
      var match$0 = match[1];
      if(match$0){
       var res = match$0[1];
       a:
       if(stream)
        var _ot_ = [0, [0, res]];
       else{
        try{var tok = reader(0);}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
         var err = exn[2], _ov_ = [1, err], _ot_ = _ov_;
         break a;
        }
        b:
        {
         if(typeof tok === "number" && 6 === tok){var _ow_ = [0, [0, res]]; break b;}
         var _ow_ = [1, symbol_concat(_e9_, token_to_string(tok))];
        }
        var _ot_ = _ow_;
       }
       var _ou_ = _ot_;
      }
      else
       var _ou_ = stream ? _e__ : _e$_;
      var res$0 = _ou_;
     }
     else
      var s$0 = match[1], res$0 = [1, s$0];
     if(0 === res$0[0]){var res$1 = res$0[1]; return [0, res$1];}
     var s = res$0[1], err_info = create_from_lexbuf(lexbuf, s);
     return [1, err_info];
    }
    function read_json_stream_error_info(fin, lexbuf){
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     function f(i){
      var match = caml_call1(Parser[2], reader);
      if(0 !== match[0]){
       var err = match[1];
       caml_call1(fin, 0);
       var err_info = create_from_lexbuf(lexbuf, err);
       throw caml_maybe_attach_backtrace([0, Json_error_info, err_info], 1);
      }
      var match$0 = match[1];
      if(match$0){var res = match$0[1]; return [0, res];}
      caml_call1(fin, 0);
      return 0;
     }
     return from(f);
    }
    function stream_from_string_error_info(s){
     var lexbuf = from_string(0, s);
     return read_json_stream_error_info(function(param){return 0;}, lexbuf);
    }
    function stream_from_channel_error_info(opt, inc){
     if(opt)
      var sth = opt[1], fin = sth;
     else
      var fin = function(param){return 0;};
     var lexbuf = from_channel(0, inc);
     return read_json_stream_error_info(fin, lexbuf);
    }
    function stream_from_file_error_info(filename){
     var inc = open_in(filename);
     return stream_from_channel_error_info
             ([0, function(param){return _i_(inc);}], inc);
    }
    function stream_from_lexbuf_error_info(lexbuf){
     return read_json_stream_error_info(function(param){return 0;}, lexbuf);
    }
    return [0,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            json_of_string_error_info,
            json_of_file_error_info,
            json_of_channel_error_info,
            ,
            ,
            json_of_lexbuf_error_info_comp,
            ,
            ,
            ,
            ,
            ,
            stream_from_string_error_info,
            stream_from_channel_error_info,
            stream_from_file_error_info,
            ,
            stream_from_lexbuf_error_info];
   }
   function Make$5(Compliance){
    function nibble_to_hex(i){
     var _os_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
     return char_of_int(_os_);
    }
    function add_hex_byte(oc, i){
     _j_(oc, nibble_to_hex((i >>> 4 | 0) & 15));
     return _j_(oc, nibble_to_hex(i & 15));
    }
    function escape(oc, s){
     function add_char(_or_){return _j_(oc, _or_);}
     function add_string(_oq_){return output_string(oc, _oq_);}
     var l = caml_ml_string_length(s), _oo_ = l - 1 | 0, _on_ = 0;
     if(_oo_ >= 0){
      var i = _on_;
      for(;;){
       var c = caml_string_get(s, i);
       a:
       if(92 === c)
        add_string(_fa_);
       else{
        b:
        {
         c:
         {
          if(35 > c){
           if(8 > c) break b;
           switch(c - 8 | 0){
             case 0:
              add_string(_fc_); break;
             case 1:
              add_string(_fd_); break;
             case 2:
              add_string(_fe_); break;
             case 4:
              add_string(_ff_); break;
             case 5:
              add_string(_fg_); break;
             case 26:
              add_string(_fh_); break;
             case 24:
             case 25:
              break c;
             default: break b;
           }
           break a;
          }
          if(127 === c) break b;
         }
         add_char(caml_string_get(s, i));
         break a;
        }
        add_string(_fb_);
        add_hex_byte(oc, c);
       }
       var _op_ = i + 1 | 0;
       if(_oo_ === i) break;
       i = _op_;
      }
     }
     return;
    }
    function json_to_channel_fmt(oc, json, eol, incr, psep){
     function add_char(_om_){return _j_(oc, _om_);}
     function add_string(_ol_){return output_string(oc, _ol_);}
     function add_quote_string(s){
      add_char(34);
      escape(oc, s);
      return add_char(34);
     }
     function add_int(i){return add_string(string_of_int(i));}
     function add_float(f){return add_string(caml_call1(Compliance[8], f));}
     var psep$0 = symbol_concat(_fi_, psep);
     function fmt(off, value){
      if(typeof value === "number") return add_string(_fj_);
      var _ok_ = value[1];
      if(708012133 <= _ok_){
       if(737456202 > _ok_){
        if(726928360 <= _ok_){
         var t = value[2], ldr$1 = make$1(off, 32);
         add_char(40);
         add_string(eol);
         json_list(off + incr | 0, t);
         add_string(eol);
         add_string(ldr$1);
         return add_char(41);
        }
        var v = value[2], ldr$2 = make$1(off, 32);
        add_char(60);
        add_string(eol);
        variant(off + incr | 0, v);
        add_string(eol);
        add_string(ldr$2);
        return add_char(62);
       }
       if(928231259 <= _ok_){
        if(963043957 <= _ok_){
         var o = value[2], ldr = make$1(off, 32);
         add_char(123);
         add_string(eol);
         json_assoc(off + incr | 0, o);
         add_string(eol);
         add_string(ldr);
         return add_char(125);
        }
        var s = value[2];
        return add_string(s);
       }
       if(848054398 <= _ok_){
        var l = value[2], ldr$0 = make$1(off, 32);
        add_char(91);
        add_string(eol);
        json_list(off + incr | 0, l);
        add_string(eol);
        add_string(ldr$0);
        return add_char(93);
       }
       var b = value[2];
       return add_string(string_of_bool(b));
      }
      if(-752863768 === _ok_){var s$0 = value[2]; return add_string(s$0);}
      if(3654863 <= _ok_){
       if(365180284 <= _ok_){var f = value[2]; return add_float(f);}
       var i = value[2];
       return add_int(i);
      }
      if(-375152890 <= _ok_){var s$1 = value[2]; return add_string(s$1);}
      var s$2 = value[2];
      return add_quote_string(s$2);
     }
     function json_assoc(off, o){
      var
       ldr = make$1(off, 32),
       sep = [0, ldr],
       newsep = symbol_concat(_fk_, symbol_concat(eol, ldr));
      return iter
              (function(v){
                add_string(sep[1]);
                sep[1] = newsep;
                return pair(off, v);
               },
               o);
     }
     function pair(off, param){
      var v = param[2], k = param[1];
      add_quote_string(k);
      add_string(psep$0);
      return fmt(off, v);
     }
     function json_list(off, l){
      var
       ldr = make$1(off, 32),
       sep = [0, ldr],
       newsep = symbol_concat(_fl_, symbol_concat(eol, ldr));
      return iter
              (function(v){
                add_string(sep[1]);
                sep[1] = newsep;
                return fmt(off, v);
               },
               l);
     }
     function variant(off, param){
      var j = param[2], k = param[1];
      add_quote_string(k);
      if(! j) return;
      var j$0 = j[1];
      add_string(psep$0);
      return fmt(off + incr | 0, j$0);
     }
     fmt(0, json);
     return add_string(eol);
    }
    function json_to_channel(_od_){
     function _oe_(_og_, _oh_, _oi_, _oj_){
      return json_to_channel_fmt(_od_, _og_, _oh_, _oi_, _oj_);
     }
     return function(_of_){return _oe_(_of_, _fn_, 0, _fm_);};
    }
    function json_to_file_exn(file, json){
     var oc = open_out(file);
     try{json_to_channel(oc)(json); close_out(oc); return;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      close_out(oc);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    return [0, , , , , , , , , json_to_file_exn, , json_to_channel];
   }
   function Make$6(Compliance){
    function nibble_to_hex(i){
     var _oc_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
     return char_of_int(_oc_);
    }
    function add_hex_byte(buf, i){
     add_char(buf, nibble_to_hex((i >>> 4 | 0) & 15));
     return add_char(buf, nibble_to_hex(i & 15));
    }
    function escape(buf, s){
     function add_char$0(_ob_){return add_char(buf, _ob_);}
     function add_string$0(_oa_){return add_string(buf, _oa_);}
     var l = caml_ml_string_length(s), _n__ = l - 1 | 0, _n9_ = 0;
     if(_n__ >= 0){
      var i = _n9_;
      for(;;){
       var c = caml_string_get(s, i);
       a:
       if(92 === c)
        add_string$0(_fo_);
       else{
        b:
        {
         c:
         {
          if(35 > c){
           if(8 > c) break b;
           switch(c - 8 | 0){
             case 0:
              add_string$0(_fq_); break;
             case 1:
              add_string$0(_fr_); break;
             case 2:
              add_string$0(_fs_); break;
             case 4:
              add_string$0(_ft_); break;
             case 5:
              add_string$0(_fu_); break;
             case 26:
              add_string$0(_fv_); break;
             case 24:
             case 25:
              break c;
             default: break b;
           }
           break a;
          }
          if(127 === c) break b;
         }
         add_char$0(caml_string_get(s, i));
         break a;
        }
        add_string$0(_fp_);
        add_hex_byte(buf, c);
       }
       var _n$_ = i + 1 | 0;
       if(_n__ === i) break;
       i = _n$_;
      }
     }
     return;
    }
    function json_to_buffer(buf, json){
     function add_char$0(_n8_){return add_char(buf, _n8_);}
     function add_string$0(_n7_){return add_string(buf, _n7_);}
     function add_quote_string(s){
      add_char$0(34);
      escape(buf, s);
      return add_char$0(34);
     }
     function add_int(i){return add_string$0(string_of_int(i));}
     function add_float(f){return add_string$0(caml_call1(Compliance[8], f));}
     function fmt(value){
      if(typeof value === "number") return add_string$0(_fw_);
      var _n6_ = value[1];
      if(708012133 <= _n6_){
       if(737456202 > _n6_){
        if(726928360 <= _n6_){
         var t = value[2];
         add_char$0(40);
         json_list(t);
         return add_char$0(41);
        }
        var v = value[2];
        add_char$0(60);
        variant(v);
        return add_char$0(62);
       }
       if(928231259 <= _n6_){
        if(963043957 <= _n6_){
         var o = value[2];
         add_char$0(123);
         json_assoc(o);
         return add_char$0(125);
        }
        var s = value[2];
        return add_string$0(s);
       }
       if(848054398 <= _n6_){
        var l = value[2];
        add_char$0(91);
        json_list(l);
        return add_char$0(93);
       }
       var b = value[2];
       return add_string$0(string_of_bool(b));
      }
      if(-752863768 === _n6_){var s$0 = value[2]; return add_string$0(s$0);}
      if(3654863 <= _n6_){
       if(365180284 <= _n6_){var f = value[2]; return add_float(f);}
       var i = value[2];
       return add_int(i);
      }
      if(-375152890 <= _n6_){var s$1 = value[2]; return add_string$0(s$1);}
      var s$2 = value[2];
      return add_quote_string(s$2);
     }
     function json_assoc(o){
      var sep = [0, _fx_];
      return iter
              (function(v){
                add_string$0(sep[1]);
                sep[1] = _fy_;
                return pair(v);
               },
               o);
     }
     function pair(param){
      var v = param[2], k = param[1];
      add_quote_string(k);
      add_char$0(58);
      return fmt(v);
     }
     function json_list(l){
      var sep = [0, _fz_];
      return iter
              (function(v){
                add_string$0(sep[1]);
                sep[1] = _fA_;
                return fmt(v);
               },
               l);
     }
     function variant(param){
      var j = param[2], k = param[1];
      add_quote_string(k);
      if(! j) return;
      var j$0 = j[1];
      add_char$0(58);
      return fmt(j$0);
     }
     return fmt(json);
    }
    function json_to_string(json){
     var buf = create$1(100);
     json_to_buffer(buf, json);
     return contents(buf);
    }
    return [0, , , json_to_string, , , , , , , , json_to_buffer];
   }
   var Json_error = [248, _fB_, caml_fresh_oo_id(0)];
   function json_error(msg){
    throw caml_maybe_attach_backtrace([0, Json_error, msg], 1);
   }
   function Common_reader(Compliance){
    var
     Lexxer = Make$1(Compliance),
     Parser = Make$2(Compliance),
     include = function(_n5_){return Make$4(Lexxer, _n5_);}(Parser),
     json_of_string_error_info = include[15],
     json_of_file_error_info = include[16],
     json_of_channel_error_info = include[17],
     json_of_lexbuf_error_info_comp = include[20],
     stream_from_string_error_info = include[26],
     stream_from_channel_error_info = include[27],
     stream_from_file_error_info = include[28],
     stream_from_lexbuf_error_info = include[30],
     Internal_reader =
       [0,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        json_of_string_error_info,
        json_of_file_error_info,
        json_of_channel_error_info,
        ,
        ,
        json_of_lexbuf_error_info_comp,
        ,
        ,
        ,
        ,
        ,
        stream_from_string_error_info,
        stream_from_channel_error_info,
        stream_from_file_error_info,
        ,
        stream_from_lexbuf_error_info];
    function error_to_string(error_info, fname, lnum){
     if(lnum) var lnum$0 = lnum[1], lnum$1 = lnum$0; else var lnum$1 = 1;
     var
      _n1_ = error_info[4],
      _n2_ = error_info[3],
      _n3_ = error_info[2],
      _n4_ = (lnum$1 + error_info[1] | 0) - 1 | 0;
     if(fname)
      var
       name = fname[1],
       fname$0 = symbol_concat(_fD_, symbol_concat(name, _fC_));
     else
      var fname$0 = _fF_;
     var loc = caml_call4(sprintf(_fE_), fname$0, _n4_, _n3_, _n2_);
     return symbol_concat(loc, _n1_);
    }
    function apply_and_handle_errors(f, a, fname, lnum){
     var match = caml_call1(f, a);
     if(0 === match[0]){var json = match[1]; return json;}
     var error_info = match[1];
     return json_error(error_to_string(error_info, fname, lnum));
    }
    function from_string(param, fname, lnum, s){
     return apply_and_handle_errors(Internal_reader[17], s, fname, lnum);
    }
    return [0, , , , from_string];
   }
   function Common_writer(Compliance){
    var
     _nW_ = Make$6(Compliance),
     to_string = _nW_[3],
     to_buffer = _nW_[11],
     _nX_ = Make$5(Compliance),
     to_file = _nX_[9],
     to_channel = _nX_[11],
     include = _eK_(Compliance),
     pretty_print = include[1],
     pretty_print_to_string = include[2],
     pretty_print_to_channel = include[3],
     Internal_writer =
       [0,
        ,
        ,
        to_string,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        to_buffer,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        to_file,
        ,
        to_channel,
        ,
        ,
        ,
        pretty_print,
        pretty_print_to_string,
        pretty_print_to_channel];
    function to_standard(json){
     function map(node){
      if(typeof node === "number") return 870828711;
      var _n0_ = node[1];
      if(708012133 > _n0_){
       if(-752863768 === _n0_){
        var v$1 = node[2];
        return [0, -976970511, v$1];
       }
       if(3654863 <= _n0_) return 365180284 <= _n0_ ? node : node;
       if(-375152890 > _n0_) return node;
       var s = node[2];
       return 1 < caml_ml_string_length(s) >>> 0
               ? [0,
                 -976970511,
                 sub$0(s, 1, caml_ml_string_length(s) - 2 | 0)]
               : [0, -976970511, s];
      }
      if(737456202 > _n0_){
       if(726928360 <= _n0_){
        var tpl = node[2];
        return [0, 848054398, map$1(map, tpl)];
       }
       var match = node[2], jopt = match[2], name = match[1];
       if(! jopt) return [0, -976970511, name];
       var v$0 = jopt[1];
       return [0, 848054398, [0, [0, -976970511, name], [0, map(v$0), 0]]];
      }
      if(928231259 > _n0_){
       if(848054398 > _n0_) return node;
       var l = node[2];
       return [0, 848054398, map$1(map, l)];
      }
      if(963043957 <= _n0_){
       var a = node[2];
       return [0,
               963043957,
               map$1
                (function(param){
                  var v = param[2], id = param[1];
                  return [0, id, map(v)];
                 },
                 a)];
      }
      var v = node[2];
      return [0, 365180284, caml_float_of_string(v)];
     }
     return map(json);
    }
    function to_string$0(param, _nY_, opt, json){
     if(opt) var sth = opt[1], std = sth; else var std = 0;
     if(! std) return Internal_writer[3].call(null, json);
     var _nZ_ = to_standard(json);
     return Internal_writer[3].call(null, _nZ_);
    }
    return [0, , , to_string$0];
   }
   function lex_string(s){return unescape_string(s);}
   function lex_number(token){return token;}
   function lex_integer(token){return token;}
   function lex_largeint(param){return _fG_;}
   function lex_variant(param){return 0;}
   function lex_tuple(param){return 0;}
   function comment_check(param){return _fH_;}
   function number_to_string(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _fI_ : _fJ_
            : 4 <= match ? _fK_ : string_of_float_json(f);
   }
   function largeint(s){return [0, 365180284, caml_float_of_string(s)];}
   function integer(i){return [0, 3654863, i];}
   var null$2 = 870828711;
   function string$0(s){return [0, -976970511, s];}
   function bool(b){return [0, 737456202, b];}
   function assoc(a){return [0, 963043957, a];}
   function list(l){return [0, 848054398, l];}
   function tuple(l){
    throw caml_maybe_attach_backtrace([0, Failure, _fL_], 1);
   }
   function variant(l){
    throw caml_maybe_attach_backtrace([0, Failure, _fM_], 1);
   }
   function number(param){
    if(typeof param === "number")
     return 3900603 === param
             ? [0, 365180284, NaN]
             : 874173192
               <= param
               ? [0, 365180284, Infinity]
               : [0, 365180284, -Infinity];
    if(928231259 <= param[1])
     throw caml_maybe_attach_backtrace([0, Failure, _fN_], 1);
    var f = param[2];
    return [0, 365180284, f];
   }
   function array_start(param){return 14610;}
   function array_end(param){return 14596;}
   function object_start(param){return 17732;}
   function object_end(param){return 17718;}
   function tuple_start(param){
    throw caml_maybe_attach_backtrace([0, Failure, _fO_], 1);
   }
   function tuple_end(param){
    throw caml_maybe_attach_backtrace([0, Failure, _fP_], 1);
   }
   function variant_start(param){
    throw caml_maybe_attach_backtrace([0, Failure, _fQ_], 1);
   }
   function variant_end(param){
    throw caml_maybe_attach_backtrace([0, Failure, _fR_], 1);
   }
   function name(s){return [0, 869834347, s];}
   Common_reader
    ([0,
      lex_string,
      lex_number,
      lex_integer,
      lex_largeint,
      lex_tuple,
      lex_variant,
      comment_check,
      number_to_string,
      number,
      integer,
      largeint,
      null$2,
      string$0,
      bool,
      assoc,
      list,
      tuple,
      variant,
      [0,
       number,
       integer,
       largeint,
       null$2,
       string$0,
       bool,
       array_start,
       array_end,
       object_start,
       object_end,
       tuple_start,
       tuple_end,
       variant_start,
       variant_end,
       name]]);
   Common_writer
    ([0,
      lex_string,
      lex_number,
      lex_integer,
      lex_largeint,
      lex_tuple,
      lex_variant,
      comment_check,
      number_to_string,
      number,
      integer,
      largeint,
      null$2,
      string$0,
      bool,
      assoc,
      list,
      tuple,
      variant,
      [0,
       number,
       integer,
       largeint,
       null$2,
       string$0,
       bool,
       array_start,
       array_end,
       object_start,
       object_end,
       tuple_start,
       tuple_end,
       variant_start,
       variant_end,
       name]]);
   function lex_string$0(s){return unescape_string(s);}
   function lex_number$0(token){return token;}
   function lex_integer$0(token){return token;}
   function lex_largeint$0(token){return token;}
   function lex_variant$0(param){return 1;}
   function lex_tuple$0(param){return 1;}
   function comment_check$0(param){return _fS_;}
   function number_to_string$0(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _fT_ : _fU_
            : 4 <= match ? _fV_ : string_of_float_json(f);
   }
   function largeint$0(s){return [0, -752863768, s];}
   function integer$0(i){return [0, 3654863, i];}
   var null$3 = 870828711;
   function string$1(s){return [0, -976970511, s];}
   function bool$0(b){return [0, 737456202, b];}
   function assoc$0(a){return [0, 963043957, a];}
   function list$0(l){return [0, 848054398, l];}
   function tuple$0(l){return [0, 726928360, l];}
   function variant$0(k, v){return [0, 708012133, [0, k, v]];}
   function number$0(param){
    if(typeof param === "number")
     return 3900603 === param
             ? [0, 365180284, NaN]
             : 874173192
               <= param
               ? [0, 365180284, Infinity]
               : [0, 365180284, -Infinity];
    if(928231259 <= param[1])
     throw caml_maybe_attach_backtrace([0, Failure, _fW_], 1);
    var f = param[2];
    return [0, 365180284, f];
   }
   function array_start$0(param){return 14610;}
   function array_end$0(param){return 14596;}
   function object_start$0(param){return 17732;}
   function object_end$0(param){return 17718;}
   function tuple_start$0(param){return 18847;}
   function tuple_end$0(param){return 18833;}
   function variant_start$0(param){return 19293;}
   function variant_end$0(param){return 19279;}
   function name$0(s){return [0, 869834347, s];}
   var
    from_string$0 =
      Common_reader
        ([0,
          lex_string$0,
          lex_number$0,
          lex_integer$0,
          lex_largeint$0,
          lex_tuple$0,
          lex_variant$0,
          comment_check$0,
          number_to_string$0,
          number$0,
          integer$0,
          largeint$0,
          null$3,
          string$1,
          bool$0,
          assoc$0,
          list$0,
          tuple$0,
          variant$0,
          [0,
           number$0,
           integer$0,
           largeint$0,
           null$3,
           string$1,
           bool$0,
           array_start$0,
           array_end$0,
           object_start$0,
           object_end$0,
           tuple_start$0,
           tuple_end$0,
           variant_start$0,
           variant_end$0,
           name$0]])
       [4],
    include =
      Common_writer
       ([0,
         lex_string$0,
         lex_number$0,
         lex_integer$0,
         lex_largeint$0,
         lex_tuple$0,
         lex_variant$0,
         comment_check$0,
         number_to_string$0,
         number$0,
         integer$0,
         largeint$0,
         null$3,
         string$1,
         bool$0,
         assoc$0,
         list$0,
         tuple$0,
         variant$0,
         [0,
          number$0,
          integer$0,
          largeint$0,
          null$3,
          string$1,
          bool$0,
          array_start$0,
          array_end$0,
          object_start$0,
          object_end$0,
          tuple_start$0,
          tuple_end$0,
          variant_start$0,
          variant_end$0,
          name$0]]),
    to_string$3 = include[3];
   function lex_string$1(s){
    return symbol_concat(_fY_, symbol_concat(s, _fX_));
   }
   function lex_number$1(token){return token;}
   function lex_integer$1(token){return token;}
   function lex_largeint$1(token){return token;}
   function lex_variant$1(param){return 1;}
   function lex_tuple$1(param){return 1;}
   function comment_check$1(param){return _fZ_;}
   function number_to_string$1(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _f0_ : _f1_
            : 4 <= match ? _f2_ : string_of_float_json(f);
   }
   function largeint$1(s){return [0, -752863768, s];}
   function integer$1(i){return [0, -752863768, string_of_int(i)];}
   var null$4 = 870828711;
   function string$2(s){return [0, -375152890, s];}
   function bool$1(b){return [0, 737456202, b];}
   function assoc$1(a){return [0, 963043957, a];}
   function list$1(l){return [0, 848054398, l];}
   function tuple$1(l){return [0, 726928360, l];}
   function variant$1(k, v){return [0, 708012133, [0, k, v]];}
   function number$1(param){
    if(typeof param === "number")
     return 3900603 === param ? _f3_ : 874173192 <= param ? _f4_ : _f5_;
    if(928231259 <= param[1]){var f = param[2]; return [0, 928231259, f];}
    var f$0 = param[2];
    return [0, 928231259, string_of_float(f$0)];
   }
   function array_start$1(param){return 14610;}
   function array_end$1(param){return 14596;}
   function object_start$1(param){return 17732;}
   function object_end$1(param){return 17718;}
   function tuple_start$1(param){return 18847;}
   function tuple_end$1(param){return 18833;}
   function variant_start$1(param){return 19293;}
   function variant_end$1(param){return 19279;}
   function name$1(s){return [0, 869834347, s];}
   Common_reader
    ([0,
      lex_string$1,
      lex_number$1,
      lex_integer$1,
      lex_largeint$1,
      lex_tuple$1,
      lex_variant$1,
      comment_check$1,
      number_to_string$1,
      number$1,
      integer$1,
      largeint$1,
      null$4,
      string$2,
      bool$1,
      assoc$1,
      list$1,
      tuple$1,
      variant$1,
      [0,
       number$1,
       integer$1,
       largeint$1,
       null$4,
       string$2,
       bool$1,
       array_start$1,
       array_end$1,
       object_start$1,
       object_end$1,
       tuple_start$1,
       tuple_end$1,
       variant_start$1,
       variant_end$1,
       name$1]]);
   Common_writer
    ([0,
      lex_string$1,
      lex_number$1,
      lex_integer$1,
      lex_largeint$1,
      lex_tuple$1,
      lex_variant$1,
      comment_check$1,
      number_to_string$1,
      number$1,
      integer$1,
      largeint$1,
      null$4,
      string$2,
      bool$1,
      assoc$1,
      list$1,
      tuple$1,
      variant$1,
      [0,
       number$1,
       integer$1,
       largeint$1,
       null$4,
       string$2,
       bool$1,
       array_start$1,
       array_end$1,
       object_start$1,
       object_end$1,
       tuple_start$1,
       tuple_end$1,
       variant_start$1,
       variant_end$1,
       name$1]]);
   function rand(s, param){return bits(s);}
   make_self_init(0);
   function v4_ocaml_random_uuid(rand){
    var
     r0 = caml_call1(rand, 0),
     r1 = caml_call1(rand, 0),
     r2 = caml_call1(rand, 0),
     r3 = caml_call1(rand, 0),
     r4 = caml_call1(rand, 0),
     u = caml_create_bytes(16),
     _mq_ = 0;
    function _mr_(_nV_, _nU_, _nT_){caml_bytes_set(_nV_, _nU_, _nT_); return;}
    (function(_nS_){return _mr_(u, _mq_, _nS_);}(r0 & 255));
    var _ms_ = 1;
    function _mt_(_nR_, _nQ_, _nP_){caml_bytes_set(_nR_, _nQ_, _nP_); return;}
    (function(_nO_){return _mt_(u, _ms_, _nO_);}((r0 >>> 8 | 0) & 255));
    var _mu_ = 2;
    function _mv_(_nN_, _nM_, _nL_){caml_bytes_set(_nN_, _nM_, _nL_); return;}
    (function(_nK_){return _mv_(u, _mu_, _nK_);}((r0 >>> 16 | 0) & 255));
    var _mw_ = 3;
    function _mx_(_nJ_, _nI_, _nH_){caml_bytes_set(_nJ_, _nI_, _nH_); return;}
    (function(_nG_){return _mx_(u, _mw_, _nG_);}(r1 & 255));
    var _my_ = 4;
    function _mz_(_nF_, _nE_, _nD_){caml_bytes_set(_nF_, _nE_, _nD_); return;}
    (function(_nC_){return _mz_(u, _my_, _nC_);}((r1 >>> 8 | 0) & 255));
    var _mA_ = 5;
    function _mB_(_nB_, _nA_, _nz_){caml_bytes_set(_nB_, _nA_, _nz_); return;}
    (function(_ny_){return _mB_(u, _mA_, _ny_);}((r1 >>> 16 | 0) & 255));
    var _mC_ = 6;
    function _mD_(_nx_, _nw_, _nv_){caml_bytes_set(_nx_, _nw_, _nv_); return;}
    (function(_nu_){return _mD_(u, _mC_, _nu_);}(64 | (r1 >>> 24 | 0) & 15));
    var _mE_ = 7;
    function _mF_(_nt_, _ns_, _nr_){caml_bytes_set(_nt_, _ns_, _nr_); return;}
    (function(_nq_){return _mF_(u, _mE_, _nq_);}(r2 & 255));
    var _mG_ = 8;
    function _mH_(_np_, _no_, _nn_){caml_bytes_set(_np_, _no_, _nn_); return;}
    (function(_nm_){return _mH_(u, _mG_, _nm_);}(128 | (r2 >>> 24 | 0) & 63));
    var _mI_ = 9;
    function _mJ_(_nl_, _nk_, _nj_){caml_bytes_set(_nl_, _nk_, _nj_); return;}
    (function(_ni_){return _mJ_(u, _mI_, _ni_);}((r2 >>> 8 | 0) & 255));
    var _mK_ = 10;
    function _mL_(_nh_, _ng_, _nf_){caml_bytes_set(_nh_, _ng_, _nf_); return;}
    (function(_ne_){return _mL_(u, _mK_, _ne_);}((r2 >>> 16 | 0) & 255));
    var _mM_ = 11;
    function _mN_(_nd_, _nc_, _nb_){caml_bytes_set(_nd_, _nc_, _nb_); return;}
    (function(_na_){return _mN_(u, _mM_, _na_);}(r3 & 255));
    var _mO_ = 12;
    function _mP_(_m$_, _m__, _m9_){caml_bytes_set(_m$_, _m__, _m9_); return;}
    (function(_m8_){return _mP_(u, _mO_, _m8_);}((r3 >>> 8 | 0) & 255));
    var _mQ_ = 13;
    function _mR_(_m7_, _m6_, _m5_){caml_bytes_set(_m7_, _m6_, _m5_); return;}
    (function(_m4_){return _mR_(u, _mQ_, _m4_);}((r3 >>> 16 | 0) & 255));
    var _mS_ = 14;
    function _mT_(_m3_, _m2_, _m1_){caml_bytes_set(_m3_, _m2_, _m1_); return;}
    (function(_m0_){return _mT_(u, _mS_, _m0_);}(r4 & 255));
    var _mU_ = 15;
    function _mV_(_mZ_, _mY_, _mX_){caml_bytes_set(_mZ_, _mY_, _mX_); return;}
    (function(_mW_){return _mV_(u, _mU_, _mW_);}((r4 >>> 8 | 0) & 255));
    return unsafe_to_string(u);
   }
   function v4_gen(seed){
    function rand$0(_mp_){return rand(seed, _mp_);}
    return function(param){return v4_ocaml_random_uuid(rand$0);};
   }
   var Set = _di_([0, compare$0]);
   function to_jstr$1(t){return encode(t);}
   function of_jstr$0(jstr){
    var match = decode(jstr);
    if(0 === match[0]){var v = match[1]; return [0, v];}
    var err = match[1];
    error([0, err, 0]);
    return _f6_;
   }
   var random_state = get_state(0);
   function new_uuid_v4(param){return v4_gen(random_state)(0);}
   function yojson_of_bool(b){return [0, 737456202, b];}
   function yojson_of_string(str){return [0, -976970511, str];}
   function yojson_of_int(n){return [0, 3654863, n];}
   function yojson_of_option(yojson_of_a, param){
    if(! param) return 870828711;
    var x = param[1];
    return caml_call1(yojson_of_a, x);
   }
   function yojson_of_list(yojson_of_a, lst){
    return [0, 848054398, rev(rev_map(yojson_of_a, lst))];
   }
   var
    Of_yojson_error = [248, _f7_, caml_fresh_oo_id(0)],
    record_check_extra_fields = [0, 1];
   function of_yojson_error(what, yojson){
    throw caml_maybe_attach_backtrace
           ([0, Of_yojson_error, [0, Failure, what], yojson], 1);
   }
   function bool_of_yojson(yojson){
    if(typeof yojson !== "number" && 737456202 === yojson[1]){var v = yojson[2]; return v;}
    return of_yojson_error(_f8_, yojson);
   }
   function string_of_yojson(yojson){
    if(typeof yojson !== "number" && -976970511 === yojson[1]){var str = yojson[2]; return str;}
    return of_yojson_error(_f9_, yojson);
   }
   function int_of_yojson(yojson){
    if(typeof yojson !== "number" && 3654863 === yojson[1]){var v = yojson[2]; return v;}
    return of_yojson_error(_f__, yojson);
   }
   function option_of_yojson(a_of_yojson, yojson){
    return 870828711 === yojson ? 0 : [0, caml_call1(a_of_yojson, yojson)];
   }
   function list_of_yojson(a_of_yojson, yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var lst = yojson[2], rev_lst = rev_map(a_of_yojson, lst);
     return rev(rev_lst);
    }
    return of_yojson_error(_f$_, yojson);
   }
   function stag_no_args(loc, yojson){
    return of_yojson_error(symbol_concat(loc, _ga_), yojson);
   }
   function nested_list_invalid_sum(loc, yojson){
    return of_yojson_error(symbol_concat(loc, _gb_), yojson);
   }
   function empty_list_invalid_sum(loc, yojson){
    return of_yojson_error(symbol_concat(loc, _gc_), yojson);
   }
   function unexpected_stag(loc, yojson){
    return of_yojson_error(symbol_concat(loc, _gd_), yojson);
   }
   function record_superfluous_fields(what, loc, rev_fld_names, yojson){
    var
     fld_names_str = concat(_ge_, rev(rev_fld_names)),
     msg = caml_call3(sprintf(_gf_), loc, what, fld_names_str);
    return of_yojson_error(msg, yojson);
   }
   function record_duplicate_fields(loc, rev_fld_names, yojson){
    return record_superfluous_fields(_gg_, loc, rev_fld_names, yojson);
   }
   function record_extra_fields(loc, rev_fld_names, yojson){
    return record_superfluous_fields(_gh_, loc, rev_fld_names, yojson);
   }
   function record_get_undefined_loop(fields, param){
    var fields$0 = fields, param$0 = param;
    for(;;){
     if(! param$0) return concat(_gi_, rev(fields$0));
     var _mo_ = param$0[1];
     if(_mo_[1]){
      var rest = param$0[2], field = _mo_[2], fields$1 = [0, field, fields$0];
      fields$0 = fields$1;
      param$0 = rest;
     }
     else{var rest$0 = param$0[2]; param$0 = rest$0;}
    }
   }
   function record_undefined_elements(loc, yojson, lst){
    var
     undefined$0 = record_get_undefined_loop(0, lst),
     msg = caml_call2(sprintf(_gj_), loc, undefined$0);
    return of_yojson_error(msg, yojson);
   }
   function record_list_instead_atom(loc, yojson){
    var msg = symbol_concat(loc, _gk_);
    return of_yojson_error(msg, yojson);
   }
   function symbol$9(x){return x[1];}
   function jstr_of_method(param){return param ? "POST" : "GET";}
   function order_of_yojson(yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var _mk_ = yojson[2];
     if(! _mk_) return empty_list_invalid_sum(tp_loc, yojson);
     var _ml_ = _mk_[1];
     if(typeof _ml_ !== "number"){
      var _mm_ = _ml_[1];
      if(-976970511 === _mm_){
       var _mn_ = _ml_[2];
       if(_mn_ === cst_Ascending)
        return _mk_[2] ? stag_no_args(tp_loc, yojson) : 0;
       if(_mn_ === cst_Descending)
        return _mk_[2] ? stag_no_args(tp_loc, yojson) : 1;
      }
      else if(848054398 === _mm_)
       return nested_list_invalid_sum(tp_loc, yojson);
     }
    }
    return unexpected_stag(tp_loc, yojson);
   }
   function yojson_of_order(param){return param ? _gl_ : _gm_;}
   function sort_of_yojson(yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var _mg_ = yojson[2];
     if(! _mg_) return empty_list_invalid_sum(tp_loc$0, yojson);
     var _mh_ = _mg_[1];
     if(typeof _mh_ !== "number"){
      var _mi_ = _mh_[1];
      if(-976970511 === _mi_){
       var
        _mj_ = _mh_[2],
        switch$0 = caml_string_compare(_mj_, cst_DatePlayed);
       if(0 <= switch$0){
        if(0 >= switch$0) return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 7;
        if(_mj_ === cst_PlayCount)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 8;
        if(_mj_ === cst_PremiereDate)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 9;
        if(_mj_ === cst_ProductionYear)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 10;
        if(_mj_ === cst_Random)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 12;
        if(_mj_ === cst_Revenue)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 13;
        if(_mj_ === cst_Runtime)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 14;
        if(_mj_ === cst_SortName)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 11;
       }
       else{
        if(_mj_ === cst_Album)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 0;
        if(_mj_ === cst_AlbumArtist)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 1;
        if(_mj_ === cst_Artist)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 2;
        if(_mj_ === cst_Budget)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 3;
        if(_mj_ === cst_CommunityRating)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 4;
        if(_mj_ === cst_CriticRating)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 5;
        if(_mj_ === cst_DateCreated)
         return _mg_[2] ? stag_no_args(tp_loc$0, yojson) : 6;
       }
      }
      else if(848054398 === _mi_)
       return nested_list_invalid_sum(tp_loc$0, yojson);
     }
    }
    return unexpected_stag(tp_loc$0, yojson);
   }
   function yojson_of_sort(param){
    switch(param){
      case 0:
       return _gn_;
      case 1:
       return _go_;
      case 2:
       return _gp_;
      case 3:
       return _gq_;
      case 4:
       return _gr_;
      case 5:
       return _gs_;
      case 6:
       return _gt_;
      case 7:
       return _gu_;
      case 8:
       return _gv_;
      case 9:
       return _gw_;
      case 10:
       return _gx_;
      case 11:
       return _gy_;
      case 12:
       return _gz_;
      case 13:
       return _gA_;
      default: return _gB_;
    }
   }
   function image_blur_hash_of_yojson(y){
    var assoc = to_assoc(y);
    return map$1
            (function(param){
              var v = param[2], key = param[1];
              return [0, key, to_string$2(v)];
             },
             assoc);
   }
   function yojson_of_image_blur_hash(i){
    var
     assoc =
       map$1
        (function(param){
          var v = param[2], key = param[1];
          return [0, key, [0, -976970511, v]];
         },
         i);
    return [0, 963043957, assoc];
   }
   function image_blur_hashes_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      primary_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name === cst_Primary)
           if(symbol$9(primary_field))
            duplicates[1] = [0, field_name, symbol$9(duplicates)];
           else{
            var fvalue = image_blur_hash_of_yojson(field_yojson);
            primary_field[1] = [0, fvalue];
           }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$1, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$1, symbol$9(extra), yojson);
     var primary_value = symbol$9(primary_field);
     return [0, primary_value];
    }
    return record_list_instead_atom(tp_loc$1, yojson);
   }
   function yojson_of_image_blur_hashes(param){
    var v_primary = param[1], bnds = 0;
    if(v_primary)
     var
      v = v_primary[1],
      arg = yojson_of_image_blur_hash(v),
      bnd = [0, _gC_, arg],
      bnds$0 = [0, bnd, bnds];
    else
     var bnds$0 = bnds;
    return [0, 963043957, bnds$0];
   }
   function type_of_yojson(yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var _mc_ = yojson[2];
     if(! _mc_) return empty_list_invalid_sum(tp_loc$2, yojson);
     var _md_ = _mc_[1];
     if(typeof _md_ !== "number"){
      var _me_ = _md_[1];
      if(-976970511 === _me_){
       var
        _mf_ = _md_[2],
        switch$0 = caml_string_compare(_mf_, cst_MusicGenre);
       if(0 <= switch$0){
        if(0 >= switch$0)
         return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 18;
        var switch$1 = caml_string_compare(_mf_, cst_Series);
        if(0 <= switch$1){
         if(0 >= switch$1)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 28;
         if(_mf_ === cst_Studio)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 29;
         if(_mf_ === cst_Trailer)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 30;
         if(_mf_ === cst_TvChannel)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 31;
         if(_mf_ === cst_TvProgram)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 32;
         if(_mf_ === cst_UserRootFolder)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 33;
         if(_mf_ === cst_UserView)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 34;
         if(_mf_ === cst_Video)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 35;
         if(_mf_ === cst_Year)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 36;
        }
        else{
         if(_mf_ === cst_MusicVideo)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 19;
         if(_mf_ === cst_Person)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 20;
         if(_mf_ === cst_Photo)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 21;
         if(_mf_ === cst_PhotoAlbum)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 22;
         if(_mf_ === cst_Playlist)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 23;
         if(_mf_ === cst_PlaylistsFolder)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 24;
         if(_mf_ === cst_Program)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 25;
         if(_mf_ === cst_Recording)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 26;
         if(_mf_ === cst_Season)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 27;
        }
       }
       else{
        var switch$2 = caml_string_compare(_mf_, cst_Episode);
        if(0 <= switch$2){
         if(0 >= switch$2)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 9;
         if(_mf_ === cst_Folder)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 10;
         if(_mf_ === cst_Genre)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 11;
         if(_mf_ === cst_LiveTvChannel)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 12;
         if(_mf_ === cst_LiveTvProgram)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 13;
         if(_mf_ === cst_ManualPlaylistsFolder)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 14;
         if(_mf_ === cst_Movie)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 15;
         if(_mf_ === cst_MusicAlbum)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 16;
         if(_mf_ === cst_MusicArtist)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 17;
        }
        else{
         if(_mf_ === cst_AggregateFolder)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 0;
         if(_mf_ === cst_Audio)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 1;
         if(_mf_ === cst_AudioBook)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 2;
         if(_mf_ === cst_BasePluginFolder)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 3;
         if(_mf_ === cst_Book)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 4;
         if(_mf_ === cst_BoxSet)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 5;
         if(_mf_ === cst_Channel)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 6;
         if(_mf_ === cst_ChannelFolderItem)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 7;
         if(_mf_ === cst_CollectionFolder)
          return _mc_[2] ? stag_no_args(tp_loc$2, yojson) : 8;
        }
       }
      }
      else if(848054398 === _me_)
       return nested_list_invalid_sum(tp_loc$2, yojson);
     }
    }
    return unexpected_stag(tp_loc$2, yojson);
   }
   function yojson_of_type(param){
    switch(param){
      case 0:
       return _gD_;
      case 1:
       return _gE_;
      case 2:
       return _gF_;
      case 3:
       return _gG_;
      case 4:
       return _gH_;
      case 5:
       return _gI_;
      case 6:
       return _gJ_;
      case 7:
       return _gK_;
      case 8:
       return _gL_;
      case 9:
       return _gM_;
      case 10:
       return _gN_;
      case 11:
       return _gO_;
      case 12:
       return _gP_;
      case 13:
       return _gQ_;
      case 14:
       return _gR_;
      case 15:
       return _gS_;
      case 16:
       return _gT_;
      case 17:
       return _gU_;
      case 18:
       return _gV_;
      case 19:
       return _gW_;
      case 20:
       return _gX_;
      case 21:
       return _gY_;
      case 22:
       return _gZ_;
      case 23:
       return _g0_;
      case 24:
       return _g1_;
      case 25:
       return _g2_;
      case 26:
       return _g3_;
      case 27:
       return _g4_;
      case 28:
       return _g5_;
      case 29:
       return _g6_;
      case 30:
       return _g7_;
      case 31:
       return _g8_;
      case 32:
       return _g9_;
      case 33:
       return _g__;
      case 34:
       return _g$_;
      case 35:
       return _ha_;
      default: return _hb_;
    }
   }
   function field_of_yojson(yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var _l__ = yojson[2];
     if(! _l__) return empty_list_invalid_sum(tp_loc$3, yojson);
     var _l$_ = _l__[1];
     if(typeof _l$_ !== "number"){
      var _ma_ = _l$_[1];
      if(-976970511 === _ma_){
       var
        _mb_ = _l$_[2],
        switch$0 = caml_string_compare(_mb_, cst_MediaStreams);
       if(0 <= switch$0){
        if(0 >= switch$0)
         return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 30;
        var
         switch$1 = caml_string_compare(_mb_, cst_SeriesPresentationUniqueKe);
        if(0 <= switch$1){
         if(0 >= switch$1)
          return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 46;
         var switch$2 = caml_string_compare(_mb_, cst_Studios);
         if(0 <= switch$2){
          if(0 >= switch$2)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 54;
          if(_mb_ === cst_SyncInfo)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 55;
          if(_mb_ === cst_Taglines)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 56;
          if(_mb_ === cst_Tags)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 57;
          if(_mb_ === cst_ThemeSongIds)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 58;
          if(_mb_ === cst_ThemeVideoIds)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 59;
          if(_mb_ === cst_Width)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 60;
         }
         else{
          if(_mb_ === cst_SeriesPrimaryImage)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 47;
          if(_mb_ === cst_SeriesStudio)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 48;
          if(_mb_ === cst_ServiceName)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 49;
          if(_mb_ === cst_Settings)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 50;
          if(_mb_ === cst_SortName)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 51;
          if(_mb_ === cst_SpecialEpisodeNumbers)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 52;
          if(_mb_ === cst_SpecialFeatureCount)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 53;
         }
        }
        else{
         var
          switch$3 = caml_string_compare(_mb_, cst_PrimaryImageAspectRatio);
         if(0 <= switch$3){
          if(0 >= switch$3)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 38;
          if(_mb_ === cst_ProductionLocations)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 39;
          if(_mb_ === cst_ProviderIds)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 40;
          if(_mb_ === cst_RecursiveItemCount)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 41;
          if(_mb_ === cst_RefreshState)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 42;
          if(_mb_ === cst_RemoteTrailers)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 43;
          if(_mb_ === cst_ScreenshotImageTags)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 44;
          if(_mb_ === cst_SeasonUserData)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 45;
         }
         else{
          if(_mb_ === cst_OriginalTitle)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 31;
          if(_mb_ === cst_Overview)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 32;
          if(_mb_ === cst_ParentId)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 33;
          if(_mb_ === cst_Path)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 34;
          if(_mb_ === cst_People)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 35;
          if(_mb_ === cst_PlayAccess)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 36;
          if(_mb_ === cst_PresentationUniqueKey)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 37;
         }
        }
       }
       else{
        var
         switch$4 = caml_string_compare(_mb_, cst_EnableMediaSourceDisplay);
        if(0 <= switch$4){
         if(0 >= switch$4)
          return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 15;
         var switch$5 = caml_string_compare(_mb_, cst_HomePageUrl);
         if(0 <= switch$5){
          if(0 >= switch$5)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 23;
          if(_mb_ === cst_InheritedParentalRatingVal)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 24;
          if(_mb_ === cst_IsHD)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 25;
          if(_mb_ === cst_ItemCounts)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 26;
          if(_mb_ === cst_LocalTrailerCount)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 27;
          if(_mb_ === cst_MediaSourceCount)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 28;
          if(_mb_ === cst_MediaSources)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 29;
         }
         else{
          if(_mb_ === cst_Etag)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 16;
          if(_mb_ === cst_ExternalEtag)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 17;
          if(_mb_ === cst_ExternalSeriesId)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 18;
          if(_mb_ === cst_ExternalUrls)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 19;
          if(_mb_ === cst_ExtraIds)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 20;
          if(_mb_ === cst_Genres)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 21;
          if(_mb_ === cst_Height)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 22;
         }
        }
        else{
         var switch$6 = caml_string_compare(_mb_, cst_ChildCount);
         if(0 <= switch$6){
          if(0 >= switch$6)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 7;
          if(_mb_ === cst_CumulativeRunTimeTicks)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 8;
          if(_mb_ === cst_CustomRating)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 9;
          if(_mb_ === cst_DateCreated)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 10;
          if(_mb_ === cst_DateLastMediaAdded)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 11;
          if(_mb_ === cst_DateLastRefreshed)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 12;
          if(_mb_ === cst_DateLastSaved)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 13;
          if(_mb_ === cst_DisplayPreferencesId)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 14;
         }
         else{
          if(_mb_ === cst_AirTime)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 0;
          if(_mb_ === cst_BasicSyncInfo)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 1;
          if(_mb_ === cst_CanDelete)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 2;
          if(_mb_ === cst_CanDownload)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 3;
          if(_mb_ === cst_ChannelImage)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 4;
          if(_mb_ === cst_ChannelInfo)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 5;
          if(_mb_ === cst_Chapters)
           return _l__[2] ? stag_no_args(tp_loc$3, yojson) : 6;
         }
        }
       }
      }
      else if(848054398 === _ma_)
       return nested_list_invalid_sum(tp_loc$3, yojson);
     }
    }
    return unexpected_stag(tp_loc$3, yojson);
   }
   function yojson_of_field(param){
    var _l9_ = param;
    if(31 <= _l9_)
     switch(_l9_){
       case 31:
        return _hH_;
       case 32:
        return _hI_;
       case 33:
        return _hJ_;
       case 34:
        return _hK_;
       case 35:
        return _hL_;
       case 36:
        return _hM_;
       case 37:
        return _hN_;
       case 38:
        return _hO_;
       case 39:
        return _hP_;
       case 40:
        return _hQ_;
       case 41:
        return _hR_;
       case 42:
        return _hS_;
       case 43:
        return _hT_;
       case 44:
        return _hU_;
       case 45:
        return _hV_;
       case 46:
        return _hW_;
       case 47:
        return _hX_;
       case 48:
        return _hY_;
       case 49:
        return _hZ_;
       case 50:
        return _h0_;
       case 51:
        return _h1_;
       case 52:
        return _h2_;
       case 53:
        return _h3_;
       case 54:
        return _h4_;
       case 55:
        return _h5_;
       case 56:
        return _h6_;
       case 57:
        return _h7_;
       case 58:
        return _h8_;
       case 59:
        return _h9_;
       default: return _h__;
     }
    switch(_l9_){
      case 0:
       return _hc_;
      case 1:
       return _hd_;
      case 2:
       return _he_;
      case 3:
       return _hf_;
      case 4:
       return _hg_;
      case 5:
       return _hh_;
      case 6:
       return _hi_;
      case 7:
       return _hj_;
      case 8:
       return _hk_;
      case 9:
       return _hl_;
      case 10:
       return _hm_;
      case 11:
       return _hn_;
      case 12:
       return _ho_;
      case 13:
       return _hp_;
      case 14:
       return _hq_;
      case 15:
       return _hr_;
      case 16:
       return _hs_;
      case 17:
       return _ht_;
      case 18:
       return _hu_;
      case 19:
       return _hv_;
      case 20:
       return _hw_;
      case 21:
       return _hx_;
      case 22:
       return _hy_;
      case 23:
       return _hz_;
      case 24:
       return _hA_;
      case 25:
       return _hB_;
      case 26:
       return _hC_;
      case 27:
       return _hD_;
      case 28:
       return _hE_;
      case 29:
       return _hF_;
      default: return _hG_;
    }
   }
   function type_str_of_yojson(j){
    var s = to_string$2(j);
    return type_of_yojson([0, 848054398, [0, [0, -976970511, s], 0]]);
   }
   function yojson_of_type_str(ts){
    var match = yojson_of_type(ts);
    if(typeof match !== "number" && 848054398 === match[1]){
     var _l8_ = match[2];
     if(_l8_ && ! _l8_[2]){var json = _l8_[1]; return json;}
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _h$_], 1);
   }
   function t_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      name_field = [0, 0],
      sort_name_field = [0, 0],
      id_field = [0, 0],
      path_field = [0, 0],
      album_id_field = [0, 0],
      parent_id_field = [0, 0],
      server_id_field = [0, 0],
      image_blur_hashes_field = [0, 0],
      type_field = [0, 0],
      collection_type_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1],
           switch$0 = caml_string_compare(field_name, cst_ParentId);
          a:
          b:
          {
           if(0 <= switch$0)
            if(0 < switch$0)
             if(field_name !== cst_Path)
              if(field_name !== cst_ServerId)
               if(field_name !== cst_SortName){
                if(field_name !== cst_Type) break b;
                if(symbol$9(type_field))
                 duplicates[1] = [0, field_name, symbol$9(duplicates)];
                else{
                 var fvalue = type_str_of_yojson(field_yojson);
                 type_field[1] = [0, fvalue];
                }
               }
               else if(symbol$9(sort_name_field))
                duplicates[1] = [0, field_name, symbol$9(duplicates)];
               else{
                var fvalue$0 = string_of_yojson(field_yojson);
                sort_name_field[1] = [0, fvalue$0];
               }
              else if(symbol$9(server_id_field))
               duplicates[1] = [0, field_name, symbol$9(duplicates)];
              else{
               var fvalue$1 = string_of_yojson(field_yojson);
               server_id_field[1] = [0, fvalue$1];
              }
             else if(symbol$9(path_field))
              duplicates[1] = [0, field_name, symbol$9(duplicates)];
             else{
              var fvalue$2 = string_of_yojson(field_yojson);
              path_field[1] = [0, fvalue$2];
             }
            else if(symbol$9(parent_id_field))
             duplicates[1] = [0, field_name, symbol$9(duplicates)];
            else{
             var fvalue$3 = option_of_yojson(string_of_yojson, field_yojson);
             parent_id_field[1] = [0, fvalue$3];
            }
           else if(field_name !== cst_AlbumId)
            if(field_name !== cst_CollectionType)
             if(field_name !== cst_Id)
              if(field_name !== cst_ImageBlurHashes){
               if(field_name !== cst_Name) break b;
               if(symbol$9(name_field))
                duplicates[1] = [0, field_name, symbol$9(duplicates)];
               else{
                var fvalue$4 = string_of_yojson(field_yojson);
                name_field[1] = [0, fvalue$4];
               }
              }
              else if(symbol$9(image_blur_hashes_field))
               duplicates[1] = [0, field_name, symbol$9(duplicates)];
              else{
               var fvalue$5 = image_blur_hashes_of_yojson(field_yojson);
               image_blur_hashes_field[1] = [0, fvalue$5];
              }
             else if(symbol$9(id_field))
              duplicates[1] = [0, field_name, symbol$9(duplicates)];
             else{
              var fvalue$6 = string_of_yojson(field_yojson);
              id_field[1] = [0, fvalue$6];
             }
            else if(symbol$9(collection_type_field))
             duplicates[1] = [0, field_name, symbol$9(duplicates)];
            else{
             var fvalue$7 = option_of_yojson(string_of_yojson, field_yojson);
             collection_type_field[1] = [0, fvalue$7];
            }
           else if(symbol$9(album_id_field))
            duplicates[1] = [0, field_name, symbol$9(duplicates)];
           else{
            var fvalue$8 = string_of_yojson(field_yojson);
            album_id_field[1] = [0, fvalue$8];
           }
           break a;
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$4, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$4, symbol$9(extra), yojson);
     var
      match = symbol$9(name_field),
      sort_name_value = symbol$9(sort_name_field),
      match$0 = symbol$9(id_field),
      path_value = symbol$9(path_field),
      album_id_value = symbol$9(album_id_field),
      parent_id_value = symbol$9(parent_id_field),
      match$1 = symbol$9(server_id_field),
      match$2 = symbol$9(image_blur_hashes_field),
      match$3 = symbol$9(type_field),
      collection_type_value = symbol$9(collection_type_field);
     if(match && match$0 && match$1 && match$2 && match$3){
      var
       type_value = match$3[1],
       image_blur_hashes_value = match$2[1],
       server_id_value = match$1[1],
       id_value = match$0[1],
       name_value = match[1];
      if(collection_type_value)
       var v = collection_type_value[1], v$0 = v;
      else
       var v$0 = 0;
      return [0,
              name_value,
              sort_name_value,
              id_value,
              path_value,
              album_id_value,
              parent_id_value,
              server_id_value,
              image_blur_hashes_value,
              type_value,
              v$0];
     }
     var
      _l4_ = [0, [0, 0 === symbol$9(type_field) ? 1 : 0, _ia_], 0],
      _l5_ =
        [0, [0, 0 === symbol$9(image_blur_hashes_field) ? 1 : 0, _ib_], _l4_],
      _l6_ = [0, [0, 0 === symbol$9(server_id_field) ? 1 : 0, _ic_], _l5_],
      _l7_ = [0, [0, 0 === symbol$9(id_field) ? 1 : 0, _id_], _l6_];
     return record_undefined_elements
             (tp_loc$4,
              yojson,
              [0, [0, 0 === symbol$9(name_field) ? 1 : 0, _ie_], _l7_]);
    }
    return record_list_instead_atom(tp_loc$4, yojson);
   }
   function yojson_of_t(param){
    var
     v_collection_type = param[10],
     v_type = param[9],
     v_image_blur_hashes = param[8],
     v_server_id = param[7],
     v_parent_id = param[6],
     v_album_id = param[5],
     v_path = param[4],
     v_id = param[3],
     v_sort_name = param[2],
     v_name = param[1],
     bnds = 0;
    if(0 === v_collection_type)
     var bnds$0 = bnds;
    else
     var
      arg$8 =
        function(_l3_){return yojson_of_option(yojson_of_string, _l3_);}
         (v_collection_type),
      bnd$3 = [0, _io_, arg$8],
      bnds$0 = [0, bnd$3, bnds];
    var
     arg = yojson_of_type_str(v_type),
     bnds$1 = [0, [0, _if_, arg], bnds$0],
     arg$0 = yojson_of_image_blur_hashes(v_image_blur_hashes),
     bnds$2 = [0, [0, _ig_, arg$0], bnds$1],
     arg$1 = yojson_of_string(v_server_id),
     bnds$3 = [0, [0, _ih_, arg$1], bnds$2];
    if(v_parent_id)
     var
      v = v_parent_id[1],
      arg$2 = yojson_of_option(yojson_of_string, v),
      bnd = [0, _ii_, arg$2],
      bnds$4 = [0, bnd, bnds$3];
    else
     var bnds$4 = bnds$3;
    if(v_album_id)
     var
      v$0 = v_album_id[1],
      arg$3 = yojson_of_string(v$0),
      bnd$0 = [0, _ij_, arg$3],
      bnds$5 = [0, bnd$0, bnds$4];
    else
     var bnds$5 = bnds$4;
    if(v_path)
     var
      v$1 = v_path[1],
      arg$4 = yojson_of_string(v$1),
      bnd$1 = [0, _ik_, arg$4],
      bnds$6 = [0, bnd$1, bnds$5];
    else
     var bnds$6 = bnds$5;
    var
     arg$5 = yojson_of_string(v_id),
     bnds$7 = [0, [0, _il_, arg$5], bnds$6];
    if(v_sort_name)
     var
      v$2 = v_sort_name[1],
      arg$6 = yojson_of_string(v$2),
      bnd$2 = [0, _im_, arg$6],
      bnds$8 = [0, bnd$2, bnds$7];
    else
     var bnds$8 = bnds$7;
    var
     arg$7 = yojson_of_string(v_name),
     bnds$9 = [0, [0, _in_, arg$7], bnds$8];
    return [0, 963043957, bnds$9];
   }
   function params_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      ids_field = [0, 0],
      parent_id_field = [0, 0],
      user_id_field = [0, 0],
      fields_field = [0, 0],
      include_item_types_field = [0, 0],
      start_index_field = [0, 0],
      limit_field = [0, 0],
      sort_order_field = [0, 0],
      sort_by_field = [0, 0],
      recursive_field = [0, 0],
      enable_user_data_field = [0, 0],
      enable_images_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1],
           switch$0 = caml_string_compare(field_name, cst_parentId);
          a:
          {
           b:
           {
            if(0 <= switch$0)
             if(0 < switch$0)
              if(field_name !== cst_recursive)
               if(field_name !== cst_sortBy)
                if(field_name !== cst_sortOrder)
                 if(field_name !== cst_startIndex){
                  if(field_name !== cst_userId) break b;
                  if(symbol$9(user_id_field))
                   duplicates[1] = [0, field_name, symbol$9(duplicates)];
                  else{
                   var fvalue = string_of_yojson(field_yojson);
                   user_id_field[1] = [0, fvalue];
                  }
                 }
                 else if(symbol$9(start_index_field))
                  duplicates[1] = [0, field_name, symbol$9(duplicates)];
                 else{
                  var fvalue$0 = int_of_yojson(field_yojson);
                  start_index_field[1] = [0, fvalue$0];
                 }
                else if(symbol$9(sort_order_field))
                 duplicates[1] = [0, field_name, symbol$9(duplicates)];
                else{
                 var fvalue$1 = order_of_yojson(field_yojson);
                 sort_order_field[1] = [0, fvalue$1];
                }
               else if(symbol$9(sort_by_field))
                duplicates[1] = [0, field_name, symbol$9(duplicates)];
               else{
                var fvalue$2 = list_of_yojson(sort_of_yojson, field_yojson);
                sort_by_field[1] = [0, fvalue$2];
               }
              else if(symbol$9(recursive_field))
               duplicates[1] = [0, field_name, symbol$9(duplicates)];
              else{
               var fvalue$3 = bool_of_yojson(field_yojson);
               recursive_field[1] = [0, fvalue$3];
              }
             else if(symbol$9(parent_id_field))
              duplicates[1] = [0, field_name, symbol$9(duplicates)];
             else{
              var fvalue$4 = string_of_yojson(field_yojson);
              parent_id_field[1] = [0, fvalue$4];
             }
            else if(field_name !== cst_enableImages)
             if(field_name !== cst_enableUserData)
              if(field_name !== cst_fields)
               if(field_name !== cst_ids)
                if(field_name !== cst_includeItemTypes){
                 if(field_name !== cst_limit) break b;
                 if(symbol$9(limit_field))
                  duplicates[1] = [0, field_name, symbol$9(duplicates)];
                 else{
                  var fvalue$5 = int_of_yojson(field_yojson);
                  limit_field[1] = [0, fvalue$5];
                 }
                }
                else if(symbol$9(include_item_types_field))
                 duplicates[1] = [0, field_name, symbol$9(duplicates)];
                else{
                 var fvalue$6 = list_of_yojson(type_of_yojson, field_yojson);
                 include_item_types_field[1] = [0, fvalue$6];
                }
               else if(symbol$9(ids_field))
                duplicates[1] = [0, field_name, symbol$9(duplicates)];
               else{
                var fvalue$7 = list_of_yojson(string_of_yojson, field_yojson);
                ids_field[1] = [0, fvalue$7];
               }
              else if(symbol$9(fields_field))
               duplicates[1] = [0, field_name, symbol$9(duplicates)];
              else{
               var fvalue$8 = list_of_yojson(field_of_yojson, field_yojson);
               fields_field[1] = [0, fvalue$8];
              }
             else if(symbol$9(enable_user_data_field))
              duplicates[1] = [0, field_name, symbol$9(duplicates)];
             else{
              var fvalue$9 = bool_of_yojson(field_yojson);
              enable_user_data_field[1] = [0, fvalue$9];
             }
            else if(symbol$9(enable_images_field))
             duplicates[1] = [0, field_name, symbol$9(duplicates)];
            else{
             var fvalue$10 = bool_of_yojson(field_yojson);
             enable_images_field[1] = [0, fvalue$10];
            }
            break a;
           }
           if(symbol$9(record_check_extra_fields))
            extra[1] = [0, field_name, symbol$9(extra)];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$5, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$5, symbol$9(extra), yojson);
     var
      ids_value = symbol$9(ids_field),
      parent_id_value = symbol$9(parent_id_field),
      match = symbol$9(user_id_field),
      match$0 = symbol$9(fields_field),
      match$1 = symbol$9(include_item_types_field),
      start_index_value = symbol$9(start_index_field),
      limit_value = symbol$9(limit_field),
      sort_order_value = symbol$9(sort_order_field),
      match$2 = symbol$9(sort_by_field),
      match$3 = symbol$9(recursive_field),
      match$4 = symbol$9(enable_user_data_field),
      match$5 = symbol$9(enable_images_field);
     if
      (match && match$0 && match$1 && match$2 && match$3 && match$4 && match$5){
      var
       enable_images_value = match$5[1],
       enable_user_data_value = match$4[1],
       recursive_value = match$3[1],
       sort_by_value = match$2[1],
       include_item_types_value = match$1[1],
       fields_value = match$0[1],
       user_id_value = match[1];
      if(ids_value) var v = ids_value[1], v$0 = v; else var v$0 = 0;
      return [0,
              v$0,
              parent_id_value,
              user_id_value,
              fields_value,
              include_item_types_value,
              start_index_value,
              limit_value,
              sort_order_value,
              sort_by_value,
              recursive_value,
              enable_user_data_value,
              enable_images_value];
     }
     var
      _lX_ = [0, [0, 0 === symbol$9(enable_images_field) ? 1 : 0, _ip_], 0],
      _lY_ =
        [0, [0, 0 === symbol$9(enable_user_data_field) ? 1 : 0, _iq_], _lX_],
      _lZ_ = [0, [0, 0 === symbol$9(recursive_field) ? 1 : 0, _ir_], _lY_],
      _l0_ = [0, [0, 0 === symbol$9(sort_by_field) ? 1 : 0, _is_], _lZ_],
      _l1_ =
        [0, [0, 0 === symbol$9(include_item_types_field) ? 1 : 0, _it_], _l0_],
      _l2_ = [0, [0, 0 === symbol$9(fields_field) ? 1 : 0, _iu_], _l1_];
     return record_undefined_elements
             (tp_loc$5,
              yojson,
              [0, [0, 0 === symbol$9(user_id_field) ? 1 : 0, _iv_], _l2_]);
    }
    return record_list_instead_atom(tp_loc$5, yojson);
   }
   function yojson_of_params(param){
    var
     v_enable_images = param[12],
     v_enable_user_data = param[11],
     v_recursive = param[10],
     v_sort_by = param[9],
     v_sort_order = param[8],
     v_limit = param[7],
     v_start_index = param[6],
     v_include_item_types = param[5],
     v_fields = param[4],
     v_user_id = param[3],
     v_parent_id = param[2],
     v_ids = param[1],
     arg = yojson_of_bool(v_enable_images),
     bnds = [0, [0, _iw_, arg], 0],
     arg$0 = yojson_of_bool(v_enable_user_data),
     bnds$0 = [0, [0, _ix_, arg$0], bnds],
     arg$1 = yojson_of_bool(v_recursive),
     bnds$1 = [0, [0, _iy_, arg$1], bnds$0],
     arg$2 = yojson_of_list(yojson_of_sort, v_sort_by),
     bnds$2 = [0, [0, _iz_, arg$2], bnds$1];
    if(v_sort_order)
     var
      v = v_sort_order[1],
      arg$3 = yojson_of_order(v),
      bnd = [0, _iA_, arg$3],
      bnds$3 = [0, bnd, bnds$2];
    else
     var bnds$3 = bnds$2;
    if(v_limit)
     var
      v$0 = v_limit[1],
      arg$4 = yojson_of_int(v$0),
      bnd$0 = [0, _iB_, arg$4],
      bnds$4 = [0, bnd$0, bnds$3];
    else
     var bnds$4 = bnds$3;
    if(v_start_index)
     var
      v$1 = v_start_index[1],
      arg$5 = yojson_of_int(v$1),
      bnd$1 = [0, _iC_, arg$5],
      bnds$5 = [0, bnd$1, bnds$4];
    else
     var bnds$5 = bnds$4;
    var
     arg$6 = yojson_of_list(yojson_of_type, v_include_item_types),
     bnds$6 = [0, [0, _iD_, arg$6], bnds$5],
     arg$7 = yojson_of_list(yojson_of_field, v_fields),
     bnds$7 = [0, [0, _iE_, arg$7], bnds$6],
     arg$8 = yojson_of_string(v_user_id),
     bnds$8 = [0, [0, _iF_, arg$8], bnds$7];
    if(v_parent_id)
     var
      v$2 = v_parent_id[1],
      arg$9 = yojson_of_string(v$2),
      bnd$2 = [0, _iG_, arg$9],
      bnds$9 = [0, bnd$2, bnds$8];
    else
     var bnds$9 = bnds$8;
    if(0 === v_ids)
     var bnds$10 = bnds$9;
    else
     var
      arg$10 =
        function(_lW_){return yojson_of_list(yojson_of_string, _lW_);}(v_ids),
      bnd$3 = [0, _iH_, arg$10],
      bnds$10 = [0, bnd$3, bnds$9];
    return [0, 963043957, bnds$10];
   }
   function response_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      items_field = [0, 0],
      total_record_count_field = [0, 0],
      start_index_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_Items)
           if(field_name !== cst_StartIndex){
            if(field_name === cst_TotalRecordCount)
             if(symbol$9(total_record_count_field))
              duplicates[1] = [0, field_name, symbol$9(duplicates)];
             else{
              var fvalue = int_of_yojson(field_yojson);
              total_record_count_field[1] = [0, fvalue];
             }
           }
           else if(symbol$9(start_index_field))
            duplicates[1] = [0, field_name, symbol$9(duplicates)];
           else{
            var fvalue$0 = int_of_yojson(field_yojson);
            start_index_field[1] = [0, fvalue$0];
           }
          else if(symbol$9(items_field))
           duplicates[1] = [0, field_name, symbol$9(duplicates)];
          else{
           var fvalue$1 = list_of_yojson(t_of_yojson, field_yojson);
           items_field[1] = [0, fvalue$1];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$6, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$6, symbol$9(extra), yojson);
     var
      match = symbol$9(items_field),
      match$0 = symbol$9(total_record_count_field),
      match$1 = symbol$9(start_index_field);
     if(match && match$0 && match$1){
      var
       start_index_value = match$1[1],
       total_record_count_value = match$0[1],
       items_value = match[1];
      return [0, items_value, total_record_count_value, start_index_value];
     }
     var
      _lU_ = [0, [0, 0 === symbol$9(start_index_field) ? 1 : 0, _iI_], 0],
      _lV_ =
        [0, [0, 0 === symbol$9(total_record_count_field) ? 1 : 0, _iJ_], _lU_];
     return record_undefined_elements
             (tp_loc$6,
              yojson,
              [0, [0, 0 === symbol$9(items_field) ? 1 : 0, _iK_], _lV_]);
    }
    return record_list_instead_atom(tp_loc$6, yojson);
   }
   function yojson_of_response(param){
    var
     v_start_index = param[3],
     v_total_record_count = param[2],
     v_items = param[1],
     arg = yojson_of_int(v_start_index),
     bnds = [0, [0, _iL_, arg], 0],
     arg$0 = yojson_of_int(v_total_record_count),
     bnds$0 = [0, [0, _iM_, arg$0], bnds],
     arg$1 = yojson_of_list(yojson_of_t, v_items),
     bnds$1 = [0, [0, _iN_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   var method = 0;
   function endpoint(param){return _iO_;}
   function params_of_yojson$0(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      include_external_content_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_includeExternalContent){
           if(symbol$9(record_check_extra_fields))
            extra[1] = [0, field_name, symbol$9(extra)];
          }
          else if(symbol$9(include_external_content_field))
           duplicates[1] = [0, field_name, symbol$9(duplicates)];
          else{
           var fvalue = bool_of_yojson(field_yojson);
           include_external_content_field[1] = [0, fvalue];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$7, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$7, symbol$9(extra), yojson);
     var match = symbol$9(include_external_content_field);
     if(! match)
      return record_undefined_elements
              (tp_loc$7,
               yojson,
               [0,
                [0,
                 0 === symbol$9(include_external_content_field) ? 1 : 0,
                 _iP_],
                0]);
     var include_external_content_value = match[1];
     return [0, include_external_content_value];
    }
    return record_list_instead_atom(tp_loc$7, yojson);
   }
   function yojson_of_params$0(param){
    var
     v_include_external_content = param[1],
     arg = yojson_of_bool(v_include_external_content),
     bnds = [0, [0, _iQ_, arg], 0];
    return [0, 963043957, bnds];
   }
   function response_of_yojson$0(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      items_field = [0, 0],
      total_record_count_field = [0, 0],
      start_index_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_Items)
           if(field_name !== cst_StartIndex){
            if(field_name === cst_TotalRecordCount)
             if(symbol$9(total_record_count_field))
              duplicates[1] = [0, field_name, symbol$9(duplicates)];
             else{
              var fvalue = int_of_yojson(field_yojson);
              total_record_count_field[1] = [0, fvalue];
             }
           }
           else if(symbol$9(start_index_field))
            duplicates[1] = [0, field_name, symbol$9(duplicates)];
           else{
            var fvalue$0 = int_of_yojson(field_yojson);
            start_index_field[1] = [0, fvalue$0];
           }
          else if(symbol$9(items_field))
           duplicates[1] = [0, field_name, symbol$9(duplicates)];
          else{
           var fvalue$1 = list_of_yojson(t_of_yojson, field_yojson);
           items_field[1] = [0, fvalue$1];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$8, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$8, symbol$9(extra), yojson);
     var
      match = symbol$9(items_field),
      match$0 = symbol$9(total_record_count_field),
      match$1 = symbol$9(start_index_field);
     if(match && match$0 && match$1){
      var
       start_index_value = match$1[1],
       total_record_count_value = match$0[1],
       items_value = match[1];
      return [0, items_value, total_record_count_value, start_index_value];
     }
     var
      _lS_ = [0, [0, 0 === symbol$9(start_index_field) ? 1 : 0, _iR_], 0],
      _lT_ =
        [0, [0, 0 === symbol$9(total_record_count_field) ? 1 : 0, _iS_], _lS_];
     return record_undefined_elements
             (tp_loc$8,
              yojson,
              [0, [0, 0 === symbol$9(items_field) ? 1 : 0, _iT_], _lT_]);
    }
    return record_list_instead_atom(tp_loc$8, yojson);
   }
   function yojson_of_response$0(param){
    var
     v_start_index = param[3],
     v_total_record_count = param[2],
     v_items = param[1],
     arg = yojson_of_int(v_start_index),
     bnds = [0, [0, _iU_, arg], 0],
     arg$0 = yojson_of_int(v_total_record_count),
     bnds$0 = [0, [0, _iV_, arg$0], bnds],
     arg$1 = yojson_of_list(yojson_of_t, v_items),
     bnds$1 = [0, [0, _iW_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   function endpoint$0(pp){return [0, _iY_, [0, pp[1], _iX_]];}
   function virtual_folder_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      name_field = [0, 0],
      locations_field = [0, 0],
      item_id_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_ItemId)
           if(field_name !== cst_Locations){
            if(field_name === cst_Name)
             if(symbol$9(name_field))
              duplicates[1] = [0, field_name, symbol$9(duplicates)];
             else{
              var fvalue = string_of_yojson(field_yojson);
              name_field[1] = [0, fvalue];
             }
           }
           else if(symbol$9(locations_field))
            duplicates[1] = [0, field_name, symbol$9(duplicates)];
           else{
            var fvalue$0 = list_of_yojson(string_of_yojson, field_yojson);
            locations_field[1] = [0, fvalue$0];
           }
          else if(symbol$9(item_id_field))
           duplicates[1] = [0, field_name, symbol$9(duplicates)];
          else{
           var fvalue$1 = string_of_yojson(field_yojson);
           item_id_field[1] = [0, fvalue$1];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$9, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$9, symbol$9(extra), yojson);
     var
      match = symbol$9(name_field),
      match$0 = symbol$9(locations_field),
      match$1 = symbol$9(item_id_field);
     if(match && match$0 && match$1){
      var
       item_id_value = match$1[1],
       locations_value = match$0[1],
       name_value = match[1];
      return [0, name_value, locations_value, item_id_value];
     }
     var
      _lQ_ = [0, [0, 0 === symbol$9(item_id_field) ? 1 : 0, _iZ_], 0],
      _lR_ = [0, [0, 0 === symbol$9(locations_field) ? 1 : 0, _i0_], _lQ_];
     return record_undefined_elements
             (tp_loc$9,
              yojson,
              [0, [0, 0 === symbol$9(name_field) ? 1 : 0, _i1_], _lR_]);
    }
    return record_list_instead_atom(tp_loc$9, yojson);
   }
   function yojson_of_virtual_folder(param){
    var
     v_item_id = param[3],
     v_locations = param[2],
     v_name = param[1],
     arg = yojson_of_string(v_item_id),
     bnds = [0, [0, _i2_, arg], 0],
     arg$0 = yojson_of_list(yojson_of_string, v_locations),
     bnds$0 = [0, [0, _i3_, arg$0], bnds],
     arg$1 = yojson_of_string(v_name),
     bnds$1 = [0, [0, _i4_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   var session_uuid = [0, 0];
   function set_session_uuid(s){session_uuid[1] = [0, s]; return;}
   function authorization(token, param){
    if(token)
     var t = token[1], token$0 = caml_call1(sprintf(_i5_), t);
    else
     var token$0 = _i8_;
    var session_uuid$0 = value(session_uuid[1], _i6_);
    return caml_call2(sprintf(_i7_), session_uuid$0, token$0);
   }
   function request$1(base_url, token, headers, Q){
    return function(params, path_params){
     var
      base_uri = v$0(0, caml_jsstring_of_string(base_url)),
      base_path_segments = get_ok(path_segments(base_uri)),
      endpoint_path_segments =
        map$1
         (function(_lP_){return caml_jsstring_of_string(_lP_);},
          caml_call1(Q[6], path_params)),
      path_segments$0 =
        caml_equal(base_path_segments, [0, empty, 0])
         ? endpoint_path_segments
         : flatten([0, base_path_segments, [0, endpoint_path_segments, 0]]),
      uri = with_path_segments(base_uri, path_segments$0),
      uri$0 = get_ok(uri),
      authorization$0 = authorization(token, 0),
      headers$0 =
        of_assoc
         (headers,
          [0,
           [0, "content-type", "text/json"],
           [0,
            [0,
             "X-Emby-Authorization",
             caml_jsstring_of_string(authorization$0)],
            0]]),
      method = jstr_of_method(Q[5]);
     if(Q[5])
      var
       body =
         of_jstr
          (caml_jsstring_of_string
            (to_string$3(0, 0, 0, caml_call1(Q[1], params)))),
       url = to_jstr$0(uri$0),
       url$0 = url,
       init =
         init$1
          ([0, body],
           0,
           0,
           [0, headers$0],
           0,
           0,
           [0, method],
           0,
           0,
           0,
           0,
           0,
           0);
     else
      var
       params$0 =
         of_obj
          (get_ok
            (decode
              (caml_jsstring_of_string
                (to_string$3(0, 0, 0, caml_call1(Q[1], params)))))),
       uri_with_params = with_query_params(uri$0, params$0),
       url$1 = to_jstr$0(uri_with_params),
       init$0 =
         init$1(0, 0, 0, [0, headers$0], 0, 0, [0, method], 0, 0, 0, 0, 0, 0),
       url$0 = url$1,
       init = init$0;
     return let$1
             (request$0(v$1([0, init], url$0)),
              function(res){
               return let$2
                       (text(res),
                        function(json){
                         var
                          yojson =
                            from_string$0(0, 0, 0, caml_string_of_jsstring(json));
                         try{var _lO_ = caml_call1(Q[4], yojson); return _lO_;}
                         catch(e$0){
                          var e = caml_wrap_exception(e$0);
                          log([0, _i9_, [0, json, 0]]);
                          log([0, e, 0]);
                          throw caml_maybe_attach_backtrace(e, 0);
                         }
                        });
              });};
   }
   var method$0 = 0;
   function get_token(t){return t[2][2];}
   function query(t){
    var token = get_token(t), base_url = t[1], _lL_ = [0, token];
    return function(_lM_, _lN_){
     return request$1(base_url, _lL_, _lM_, _lN_);};
   }
   function tag_of(obj){
    return is_block(obj) ? [0, caml_obj_tag(obj)] : [1, obj];
   }
   function Make$7(Q){
    function Start_client(P){
     var
      futures = create$2(0, 64),
      listeners = create$2(0, 64),
      worker = create$6(0, caml_jsstring_of_string(P[1]));
     function on_message(ev){
      symbol$8
       (of_jstr$0(data(ev)),
        function(message){
         if(0 === message[0]){
          var
           match = message[1],
           data = match[2],
           uuid = match[1],
           f = find(futures, uuid);
          remove(futures, uuid);
          return caml_call1(f, data);
         }
         var match$0 = message[1], v = match$0[2], e = match$0[1];
         function _lJ_(f){return caml_call1(f, v);}
         return function(_lK_){return iter(_lJ_, _lK_);}
                 (find_all(listeners, tag_of(e)));
        });
      return 0;
     }
     var _lH_ = 0;
     (function(_lI_){return listen(_lH_, message, on_message, _lI_);}(worker));
     return;
    }
    function dispatch_event(e, v){return post(0, to_jstr$1([1, [0, e, v]]));}
    function Make_worker(W){
     var W$0 = caml_call1(W, [0]);
     function on_message(ev){
      symbol$8
       (of_jstr$0(data(ev)),
        function(param){
         var data = param[2], uuid = param[1];
         return let$2
                 (caml_call1(W$0[1], data),
                  function(result){
                   var data = to_jstr$1(result);
                   return post(0, to_jstr$1([0, [0, uuid, data]]));
                  });
        });
      return 0;
     }
     listen(0, message, on_message, global);
     return;
    }
    return [0, Start_client, dispatch_event, Make_worker];
   }
   function _i__(_lD_){
    var _lE_ = Make$7(_lD_), _lF_ = _lE_[3];
    return [0, , _lE_[2], function(_lG_){_lF_(_lG_); return;}];
   }
   function apply(t, size, i){
    if(typeof t === "number") return 2 <= t ? (size - 1 | 0) - i | 0 : i;
    var a = t[1];
    return caml_check_bound(a, i)[1 + i];
   }
   function t_to_jv(encoder, t){
    return get_exn
            (decode
              (caml_jsstring_of_string
                (to_string$3(0, 0, 0, caml_call1(encoder, t)))));
   }
   function jv_to_t(decoder, j){
    var json = encode(j);
    return [0,
            caml_call1
             (decoder, from_string$0(0, 0, 0, caml_string_of_jsstring(json)))];
   }
   function t_of_yojson$0(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      id_field = [0, 0],
      item_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_id)
           if(field_name !== cst_item){
            if(symbol$9(record_check_extra_fields))
             extra[1] = [0, field_name, symbol$9(extra)];
           }
           else if(symbol$9(item_field))
            duplicates[1] = [0, field_name, symbol$9(duplicates)];
           else{
            var fvalue = option_of_yojson(string_of_yojson, field_yojson);
            item_field[1] = [0, fvalue];
           }
          else if(symbol$9(id_field))
           duplicates[1] = [0, field_name, symbol$9(duplicates)];
          else{
           var fvalue$0 = int_of_yojson(field_yojson);
           id_field[1] = [0, fvalue$0];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$10, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$10, symbol$9(extra), yojson);
     var match = symbol$9(id_field), match$0 = symbol$9(item_field);
     if(match && match$0){
      var item_value = match$0[1], id_value = match[1];
      return [0, id_value, item_value];
     }
     var _lC_ = [0, [0, 0 === symbol$9(item_field) ? 1 : 0, _i$_], 0];
     return record_undefined_elements
             (tp_loc$10,
              yojson,
              [0, [0, 0 === symbol$9(id_field) ? 1 : 0, _ja_], _lC_]);
    }
    return record_list_instead_atom(tp_loc$10, yojson);
   }
   function yojson_of_t$0(param){
    var
     v_item = param[2],
     v_id = param[1],
     arg = yojson_of_option(yojson_of_string, v_item),
     bnds = [0, [0, _jb_, arg], 0],
     arg$0 = yojson_of_int(v_id),
     bnds$0 = [0, [0, _jc_, arg$0], bnds];
    return [0, 963043957, bnds$0];
   }
   function to_jv$1(k){return k;}
   function of_jv$0(j){return j;}
   function to_jv$2(t){return t_to_jv(yojson_of_t$0, t);}
   function of_jv$1(j){return get_exn(jv_to_t(t_of_yojson$0, j));}
   function get_key(t){return t[1];}
   function sorts_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      date_added_field = [0, 0],
      views_field = [0, 0],
      sort_name_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_date_added)
           if(field_name !== cst_sort_name)
            if(field_name !== cst_views){
             if(symbol$9(record_check_extra_fields))
              extra[1] = [0, field_name, symbol$9(extra)];
            }
            else if(symbol$9(views_field))
             duplicates[1] = [0, field_name, symbol$9(duplicates)];
            else{
             var fvalue = list_of_yojson(string_of_yojson, field_yojson);
             views_field[1] = [0, fvalue];
            }
           else if(symbol$9(sort_name_field))
            duplicates[1] = [0, field_name, symbol$9(duplicates)];
           else{
            var fvalue$0 = string_of_yojson(field_yojson);
            sort_name_field[1] = [0, fvalue$0];
           }
          else if(symbol$9(date_added_field))
           duplicates[1] = [0, field_name, symbol$9(duplicates)];
          else{
           var fvalue$1 = int_of_yojson(field_yojson);
           date_added_field[1] = [0, fvalue$1];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$11, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$11, symbol$9(extra), yojson);
     var
      match = symbol$9(date_added_field),
      match$0 = symbol$9(views_field),
      match$1 = symbol$9(sort_name_field);
     if(match && match$0 && match$1){
      var
       sort_name_value = match$1[1],
       views_value = match$0[1],
       date_added_value = match[1];
      return [0, date_added_value, views_value, sort_name_value];
     }
     var
      _lA_ = [0, [0, 0 === symbol$9(sort_name_field) ? 1 : 0, _jd_], 0],
      _lB_ = [0, [0, 0 === symbol$9(views_field) ? 1 : 0, _je_], _lA_];
     return record_undefined_elements
             (tp_loc$11,
              yojson,
              [0, [0, 0 === symbol$9(date_added_field) ? 1 : 0, _jf_], _lB_]);
    }
    return record_list_instead_atom(tp_loc$11, yojson);
   }
   function yojson_of_sorts(param){
    var
     v_sort_name = param[3],
     v_views = param[2],
     v_date_added = param[1],
     arg = yojson_of_string(v_sort_name),
     bnds = [0, [0, _jg_, arg], 0],
     arg$0 = yojson_of_list(yojson_of_string, v_views),
     bnds$0 = [0, [0, _jh_, arg$0], bnds],
     arg$1 = yojson_of_int(v_date_added),
     bnds$1 = [0, [0, _ji_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   function t_of_yojson$1(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      sorts_field = [0, 0],
      item_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_item)
           if(field_name !== cst_sorts){
            if(symbol$9(record_check_extra_fields))
             extra[1] = [0, field_name, symbol$9(extra)];
           }
           else if(symbol$9(sorts_field))
            duplicates[1] = [0, field_name, symbol$9(duplicates)];
           else{
            var fvalue = sorts_of_yojson(field_yojson);
            sorts_field[1] = [0, fvalue];
           }
          else if(symbol$9(item_field))
           duplicates[1] = [0, field_name, symbol$9(duplicates)];
          else{
           var fvalue$0 = t_of_yojson(field_yojson);
           item_field[1] = [0, fvalue$0];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$9(duplicates))
      return record_duplicate_fields(tp_loc$12, symbol$9(duplicates), yojson);
     if(symbol$9(extra))
      return record_extra_fields(tp_loc$12, symbol$9(extra), yojson);
     var match = symbol$9(sorts_field), match$0 = symbol$9(item_field);
     if(match && match$0){
      var item_value = match$0[1], sorts_value = match[1];
      return [0, sorts_value, item_value];
     }
     var _lz_ = [0, [0, 0 === symbol$9(item_field) ? 1 : 0, _jj_], 0];
     return record_undefined_elements
             (tp_loc$12,
              yojson,
              [0, [0, 0 === symbol$9(sorts_field) ? 1 : 0, _jk_], _lz_]);
    }
    return record_list_instead_atom(tp_loc$12, yojson);
   }
   function yojson_of_t$1(param){
    var
     v_item = param[2],
     v_sorts = param[1],
     arg = yojson_of_t(v_item),
     bnds = [0, [0, _jl_, arg], 0],
     arg$0 = yojson_of_sorts(v_sorts),
     bnds$0 = [0, [0, _jm_, arg$0], bnds];
    return [0, 963043957, bnds$0];
   }
   function to_jv$3(param){
    var
     views = param[3],
     sort_name = param[2],
     id = param[1],
     id$0 = _cL_(id),
     sort_name$0 = _cL_(sort_name),
     views$0 = of_list$0(_cL_, views);
    return caml_js_from_array([0, id$0, sort_name$0, views$0]);
   }
   function of_jv$2(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(3 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _jn_], 1);
    var
     id = match[1],
     sort_name = match[2],
     views = match[3],
     id$0 = _cK_(id),
     sort_name$0 = _cK_(sort_name),
     views$0 = to_list$0(_cK_, views);
    return [0, id$0, sort_name$0, views$0];
   }
   var path$1 = [1, [0, _jq_, _jp_, _jo_]];
   function to_jv$4(k){return k;}
   function of_jv$3(j){return j;}
   function to_jv$5(k){return _cL_(k);}
   function of_jv$4(j){return _cK_(j);}
   function to_jv$6(k){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _jr_], 1);
   }
   function of_jv$5(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(2 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _js_], 1);
    var type = match[1], views = match[2], _ly_ = to_list$0(_cK_, views);
    return [0, _cK_(type), _ly_];
   }
   var path$4 = [1, [0, _ju_, _jt_]];
   function to_jv$7(t){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _jv_], 1);
   }
   function of_jv$6(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(2 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _jw_], 1);
    var
     collection_type = match[1],
     sort_name = match[2],
     _lx_ = _cK_(sort_name);
    return [0, _cK_(collection_type), _lx_];
   }
   var path$5 = [1, [0, _jy_, _jx_]];
   function to_jv$8(t){return t_to_jv(yojson_of_t$1, t);}
   function of_jv$7(j){return get_exn(jv_to_t(t_of_yojson$1, j));}
   function get_key$0(t){return [0, t[2][3], t[1][3], t[1][2]];}
   function to_jv$9(k){return _cL_(k);}
   function of_jv$8(j){return _cK_(j);}
   function to_jv$10(t){return t_to_jv(yojson_of_virtual_folder, t);}
   function of_jv$9(j){return get_exn(jv_to_t(virtual_folder_of_yojson, j));}
   function get_key$1(t){return t[3];}
   var
    Orderred_items_store =
      _de_
       ([0, [0, path$0, to_jv$1, of_jv$0], name$2, to_jv$2, of_jv$1, get_key]),
    Items_store =
      _de_
       ([0,
         [0, path$1, to_jv$3, of_jv$2],
         name$3,
         to_jv$8,
         of_jv$7,
         get_key$0]),
    Virtual_folder_store =
      _de_
       ([0,
         [0, path$6, to_jv$9, of_jv$8],
         name$4,
         to_jv$10,
         of_jv$9,
         get_key$1]),
    _jz_ =
      [0, [0, path$1, to_jv$3, of_jv$2], name$3, to_jv$8, of_jv$7, get_key$0],
    _jA_ = [0, name$5];
   function _jB_(_lv_, _lw_){return _df_(_jA_, _lv_, _lw_);}
   var
    ItemsByDateAdded =
      function(_lu_){return _jB_(_jz_, _lu_);}([0, path$2, to_jv$4, of_jv$3]),
    _jC_ =
      [0, [0, path$1, to_jv$3, of_jv$2], name$3, to_jv$8, of_jv$7, get_key$0],
    _jD_ = [0, name$6];
   function _jE_(_ls_, _lt_){return _df_(_jD_, _ls_, _lt_);}
   var
    ItemsByViewAndKind =
      function(_lr_){return _jE_(_jC_, _lr_);}([0, path$4, to_jv$6, of_jv$5]),
    _jF_ =
      [0, [0, path$1, to_jv$3, of_jv$2], name$3, to_jv$8, of_jv$7, get_key$0],
    _jG_ = [0, name$7];
   function _jH_(_lp_, _lq_){return _df_(_jG_, _lp_, _lq_);}
   var
    ItemsById =
      function(_lo_){return _jH_(_jF_, _lo_);}([0, path$3, to_jv$5, of_jv$4]),
    _jI_ =
      [0, [0, path$1, to_jv$3, of_jv$2], name$3, to_jv$8, of_jv$7, get_key$0],
    _jJ_ = [0, name$8];
   function _jK_(_lm_, _ln_){return _df_(_jJ_, _lm_, _ln_);}
   var
    ItemsByTypeAndName =
      function(_ll_){return _jK_(_jI_, _ll_);}([0, path$5, to_jv$7, of_jv$6]),
    chunk_size = 500;
   function fetch_total_item_count(source){
    var
     _lk_ =
       [0,
        0,
        0,
        source[2][1][4],
        0,
        include_item_types,
        0,
        _jN_,
        _jM_,
        _jL_,
        1,
        0,
        0];
    return let$2
            (caml_call2
              (query(source)
                (0,
                 [0,
                  yojson_of_params,
                  params_of_yojson,
                  yojson_of_response,
                  response_of_yojson,
                  method,
                  endpoint]),
               _lk_,
               0),
             function(res){return res[2];});
   }
   function get_db_infos(idb){
    var
     match = create$5(0),
     set_infos = match[2],
     infos = match[1],
     transaction$0 =
       transaction
        ([0, [0, function(_lj_){return _lj_;}, Orderred_items_store[1]], 0],
         _jO_,
         idb),
     store =
       object_store
         ([0, function(_li_){return _li_;}, Orderred_items_store[1]])
        (transaction$0),
     req = Orderred_items_store[9].call(null, 0, _jP_, store),
     last_key = [0, 0];
    on_success
     (function(param, q){
       var match = result(q);
       if(! match) return set_infos([0, last_key[1], 0]);
       var cursor = match[1];
       if(is_none$0(last_key[1]))
        last_key[1] = Orderred_items_store[3][1].call(null, cursor);
       var match$0 = Orderred_items_store[3][5].call(null, cursor);
       if(match$0){
        var item = match$0[1];
        if(item[2]) return set_infos([0, last_key[1], [0, item]]);
       }
       return Orderred_items_store[3][4].call(null, 0, cursor);
      },
      req);
    return infos;
   }
   function is_db_consistent(param, last_source_item_key, db_sync_infos){
    var last_key = value$0(db_sync_infos[1], -1);
    return symbol$3(last_key, last_source_item_key) ? 0 : 1;
   }
   function check_status(source, idb){
    return bind$0
            (get_db_infos(idb),
             function(db_infos){
              return let$2
                      (fetch_total_item_count(source),
                       function(total_item_count){
                        var last_source_item_key = total_item_count - 1 | 0;
                        if
                         (! is_db_consistent(source, last_source_item_key, db_infos))
                         return 2;
                        var match = db_infos[1];
                        if(match){
                         var key = match[1], item = db_infos[2];
                         if(symbol$2(key, last_source_item_key)){
                          if(item)
                           var id = item[1][1], first_unfetched_key = id + 1 | 0;
                          else
                           var first_unfetched_key = 0;
                          return [0,
                                  key + 1 | 0,
                                  first_unfetched_key,
                                  last_source_item_key];
                         }
                         var item$0 = db_infos[2];
                         if(symbol$1(key, last_source_item_key)){
                          if(! item$0) return [1, 0, last_source_item_key];
                          var id$0 = item$0[1][1];
                          return symbol$1(id$0, key)
                                  ? 1
                                  : [1, id$0 + 1 | 0, last_source_item_key];
                         }
                        }
                        else if(! db_infos[2])
                         return [0, 0, 0, last_source_item_key];
                        return 2;
                       });
             });
   }
   function update_views(source, idb){
    var _le_ = [0, source[2][1][4]];
    return let$2
            (caml_call2
              (query(source)
                (0,
                 [0,
                  yojson_of_params$0,
                  params_of_yojson$0,
                  yojson_of_response$0,
                  response_of_yojson$0,
                  method$0,
                  endpoint$0]),
               _jR_,
               _le_),
             function(views){
              iter
               (function(item){
                 var
                  transaction$0 =
                    transaction
                     ([0,
                       [0, function(_lh_){return _lh_;}, Orderred_items_store[1]],
                       [0, [0, function(_lg_){return _lg_;}, Items_store[1]], 0]],
                      _jQ_,
                      idb),
                  s_items =
                    object_store
                      ([0, function(_lf_){return _lf_;}, Items_store[1]])
                     (transaction$0),
                  sort_name = value$0(item[2], item[1]);
                 Items_store[14].call
                  (null, [0, [0, -1, 0, sort_name], item], 0, s_items);
                 return 0;
                },
                views[1]);
              return views;
             });
   }
   function deduce_virtual_folders_from_vi(source, views){
    function parent_ids_of_view_children(param){
     var
      id = param[3],
      _ld_ = [0, 0, [0, id], source[2][1][4], _jS_, 0, 0, 0, 0, 0, 0, 0, 0];
     return let$2
             (caml_call2
               (query(source)
                 (0,
                  [0,
                   yojson_of_params,
                   params_of_yojson,
                   yojson_of_response,
                   response_of_yojson,
                   method,
                   endpoint]),
                _ld_,
                0),
              function(res){
               return fold_left
                       (function(set, param){
                         var parent_id = param[6];
                         if(parent_id){
                          var match = parent_id[1];
                          if(match){
                           var pid = match[1];
                           return Set[4].call(null, pid, set);
                          }
                         }
                         return set;
                        },
                        Set[1],
                        res[1]);
              });
    }
    function paths_of_parents(parents){
     var
      _lb_ = source[2][1][4],
      _lc_ =
        [0,
         Set[49].call(null, parents),
         0,
         _lb_,
         _jT_,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0];
     return let$2
             (caml_call2
               (query(source)
                 (0,
                  [0,
                   yojson_of_params,
                   params_of_yojson,
                   yojson_of_response,
                   response_of_yojson,
                   method,
                   endpoint]),
                _lc_,
                0),
              function(res){
               return filter_map$0
                       (function(param){
                         var path = param[4], id = param[3];
                         return symbol$6(function(path){return [0, id, path];}, path);
                        },
                        res[1]);
              });
    }
    return let$0
            (of_list$1
              (symbol$5
                (function(view){
                  var id = view[3];
                  return let$1
                          (parent_ids_of_view_children(view),
                           function(parents){
                            return let$2
                                    (paths_of_parents(parents),
                                     function(paths){return [0, id, paths];});
                           });
                 },
                 views[1])),
             function(result){return flatten_l(result);});
   }
   function views_of_path(vfolders, path){
    return filter_map$0
            (function(param){
              var locations = param[2], view_id = param[1];
              return exists
                       (function(param){
                         var pre = param[2];
                         return prefix$0(pre, path);
                        },
                        locations)
                      ? [0, view_id]
                      : 0;
             },
             vfolders);
   }
   function sync(opt, source){
    if(opt)
     var sth = opt[1], report = sth;
    else
     var report = function(param){return;};
    return function(idb){
     function make_placeholders(first, last){
      var
       transaction$0 =
         transaction
          ([0, [0, function(_la_){return _la_;}, Orderred_items_store[1]], 0],
           _jU_,
           idb),
       store =
         object_store
           ([0, function(_k$_){return _k$_;}, Orderred_items_store[1]])
          (transaction$0);
      if(last >= first){
       var i = first;
       for(;;){
        Orderred_items_store[14].call(null, [0, i, 0], 0, store);
        var _k__ = i + 1 | 0;
        if(last === i) break;
        i = _k__;
       }
      }
      return;
     }
     function fetch_missing_items(first, last){
      return let$1
              (update_views(source, idb),
               function(views){
                return let$1
                        (deduce_virtual_folders_from_vi(source, views),
                         function(vfolders){
                          info([0, _jX_, [0, first, [0, _jW_, [0, last, _jV_]]]]);
                          var
                           fetch_queue = create$0(0),
                           total = (last - first | 0) + 1 | 0;
                          function enqueue(start_index, todo){
                           var start_index$0 = start_index, todo$0 = todo;
                           for(;;){
                            var _k9_ = symbol$3(todo$0, 0);
                            if(! _k9_) return _k9_;
                            var
                             limit = min(todo$0, chunk_size),
                             req =
                               [0,
                                0,
                                0,
                                source[2][1][4],
                                _j0_,
                                include_item_types,
                                [0, start_index$0],
                                [0, limit],
                                _jZ_,
                                _jY_,
                                1,
                                0,
                                1];
                            add(req, fetch_queue);
                            var
                             todo$1 = todo$0 - limit | 0,
                             start_index$1 = start_index$0 + limit | 0;
                            start_index$0 = start_index$1;
                            todo$0 = todo$1;
                           }
                          }
                          enqueue(first, total);
                          var total_queries = length(fetch_queue);
                          function run_queue(opt, q){
                           if(opt)
                            var sth = opt[1], threads = sth;
                           else
                            var threads = 1;
                           if(! symbol$3(threads, 0))
                            throw caml_maybe_attach_backtrace
                                   ([0, Assert_failure, _j3_], 1);
                           function take_n(acc, n){
                            var acc$0 = acc, n$0 = n;
                            for(;;){
                             if(symbol$1(n$0, 0)) return rev(acc$0);
                             var match = take_opt(q);
                             if(! match) return rev(acc$0);
                             var
                              elt = match[1],
                              n$1 = n$0 - 1 | 0,
                              acc$1 = [0, elt, acc$0];
                             acc$0 = acc$1;
                             n$0 = n$1;
                            }
                           }
                           function f(req){
                            return let$2
                                    (caml_call2
                                      (query(source)
                                        (0,
                                         [0,
                                          yojson_of_params,
                                          params_of_yojson,
                                          yojson_of_response,
                                          response_of_yojson,
                                          method,
                                          endpoint]),
                                       req,
                                       0),
                                     function(param){
                                      var start_index = param[3], items = param[1];
                                      caml_call1
                                       (report, [0, [0, total_queries, length(fetch_queue)]]);
                                      function idb_put(start_index, items){
                                       var
                                        transaction$0 =
                                          transaction
                                           ([0,
                                             [0, function(_k8_){return _k8_;}, Orderred_items_store[1]],
                                             [0, [0, function(_k7_){return _k7_;}, Items_store[1]], 0]],
                                            _j1_,
                                            idb),
                                        s_list =
                                          object_store
                                            ([0, function(_k6_){return _k6_;}, Orderred_items_store[1]])
                                           (transaction$0),
                                        s_items =
                                          object_store
                                            ([0, function(_k5_){return _k5_;}, Items_store[1]])
                                           (transaction$0);
                                       return iteri
                                               (function(index, item){
                                                 var
                                                  path = item[4],
                                                  id = item[3],
                                                  index$0 = start_index + index | 0,
                                                  path$0 = value$0(path, _j2_),
                                                  views = views_of_path(vfolders, path$0),
                                                  sort_name = value$0(item[2], item[1]);
                                                 Orderred_items_store[14].call
                                                  (null, [0, index$0, [0, id]], 0, s_list);
                                                 Items_store[14].call
                                                  (null,
                                                   [0, [0, index$0, views, sort_name], item],
                                                   0,
                                                   s_items);
                                                 return 0;
                                                },
                                                items);
                                      }
                                      return idb_put(start_index, items);
                                     });
                           }
                           var reqs = take_n(0, threads);
                           return bind$0
                                   (of_list$1(symbol$5(f, reqs)),
                                    function(reqs){
                                     return is_empty(reqs) ? ok(0) : run_queue(0, q);
                                    });
                          }
                          return run_queue(0, fetch_queue);
                         });
               });
     }
     return function(param){
      if(typeof param === "number") return 2 === param ? ok(0) : ok(0);
      if(0 === param[0]){
       var
        last_source_item_key = param[3],
        first_unfetched_key = param[2],
        first_missing_key = param[1];
       make_placeholders(first_missing_key, last_source_item_key);
       return fetch_missing_items(first_unfetched_key, last_source_item_key);
      }
      var last_source_item_key$0 = param[2], first_unfetched_key$0 = param[1];
      return fetch_missing_items
              (first_unfetched_key$0, last_source_item_key$0);};};
   }
   function check_and_sync(report, source, idb){
    return let$1
            (check_status(source, idb),
             function(status){
              var
               initial = [0, status, initial_report[2]],
               report$0 =
                 symbol$6
                  (function(report){
                    caml_call1(report, initial);
                    return function(sync_progress){
                     return caml_call1(report, [0, initial[1], sync_progress]);};
                   },
                   report);
              return let$2
                      (caml_call1(sync(report$0, source)(idb), status),
                       function(param){
                        return iter$2
                                (function(report){return caml_call1(report, _j4_);}, report);
                       });
             });
   }
   var
    Queries = [0],
    include$0 = _i__(Queries),
    dispatch_event = include$0[2],
    Make_worker = include$0[3],
    get$3 = Items_store[5],
    index = Items_store[13];
   function on_upgrade_needed$0(e, q){
    var new_version$0 = new_version(e), old_version$0 = old_version(e);
    info([0, _j6_, [0, old_version$0, [0, _j5_, [0, new_version$0, 0]]]]);
    var db = result(q), stores = object_store_names(db);
    info(_j7_);
    iter$0(function(_k4_){return delete_object_store(db, _k4_);}, stores);
    var
     list =
       create_object_store
         ([0, function(_k3_){return _k3_;}, Orderred_items_store[1]])
        (_j8_, db),
     items =
       create_object_store([0, function(_k2_){return _k2_;}, Items_store[1]])
        (_j9_, db),
     virtual_folders =
       create_object_store
         ([0, function(_k1_){return _k1_;}, Virtual_folder_store[1]])
        (_j__, db),
     index_date_added =
       caml_call1
        (Items_store[12].call
          (null,
           [0,
            function(_k0_){return _k0_;},
            ItemsByDateAdded[12],
            ItemsByDateAdded[2]]),
         items);
    caml_call1
     (Items_store[12].call
       (null,
        [0,
         function(_kZ_){return _kZ_;},
         ItemsByTypeAndName[12],
         ItemsByTypeAndName[2]]),
      items);
    caml_call1
     (Items_store[12].call
       (null,
        [0,
         function(_kY_){return _kY_;},
         ItemsByViewAndKind[12],
         ItemsByViewAndKind[2]]),
      items);
    caml_call1
     (Items_store[12].call
       (null, [0, function(_kX_){return _kX_;}, ItemsById[12], ItemsById[2]]),
      items);
    return info
            ([0,
              _j$_,
              [0,
               list,
               [0, items, [0, index_date_added, [0, virtual_folders, 0]]]]]);
   }
   function with_idb(version, name, f){
    function f$0(ev, dbr){var db = result(dbr); return caml_call1(f, db);}
    (function(_kU_){return on_success(f$0, _kU_);}
      (function(_kV_){return on_upgrade_needed(on_upgrade_needed$0, _kV_);}
        (function(_kW_){return open(name, version, _kW_);}(get_factory(0, 0)))));
    return;
   }
   self_init(0);
   function map_error(f){
    return let$0
            (f,
             function(f){
              return map_err(function(jv){return [0, 16620, jv];}, f);
             });
   }
   function as_fut(q){return map_error(fut$0(q));}
   function fut_of_array(fs){
    function fut(p){return {fut: p};}
    function promise(f){return f[cst_fut];}
    var arr = of_array(promise, fs), all$0 = all(arr);
    function to_array$0(l){
     return resolve(to_array(function(_kT_){return _kT_;}, l));
    }
    return fut(bind(all$0, to_array$0));
   }
   function Worker(symbol){
    var view_memo = create$2(0, 64), last_view = [0, [0, -1, [0]]];
    function check_db(idb, source){
     var source$0 = source[2], server_id = source[1];
     function report(status){
      clear$1(view_memo);
      last_view[1] = [0, -1, [0]];
      return dispatch_event(0, [0, server_id, status]);
     }
     return check_and_sync([0, report], source$0, idb);
    }
    var match = create$5(0), set_idb = match[2], idb = match[1];
    (function(_kS_){return with_idb(_kb_, _ka_, _kS_);}
      (function(idb){set_idb([0, idb]); return 0;}));
    function read_only_store(param){
     return let$2
             (idb,
              function(idb){
               var
                _kP_ =
                  transaction
                   ([0, [0, function(_kR_){return _kR_;}, Items_store[1]], 0],
                    _kc_,
                    idb);
               return object_store
                        ([0, function(_kQ_){return _kQ_;}, Items_store[1]])
                       (_kP_);
              });
    }
    function get_view_keys(store, param){
     var
      filters = param[4],
      sort$0 = param[3],
      src_views = param[2],
      hash$0 = hash([0, src_views, sort$0, filters]);
     if(equal$0(last_view[1][1], hash$0)) return ok(last_view[1][2]);
     function _kG_(keys){
      a:
      {
       if(filters && ! filters[2]){
        var sub = filters[1][1];
        if(! is_empty$0(sub)){
         var
          sub$0 = lowercase_ascii$1(sub),
          _kN_ =
            filter
             (function(param){
               var
                sort_name = param[2],
                sort_name$0 = lowercase_ascii$1(sort_name),
                pattern = compile(caml_call1(sprintf(_kd_), sub$0));
               return symbol$4(find$0(0, pattern)(sort_name$0), 0);
              },
              keys),
          keys$0 = _kN_;
         break a;
        }
       }
       var keys$0 = keys;
      }
      if(sort$0)
       sort
        (function(param, _kO_){
          var snb = _kO_[2], sna = param[2];
          return compare$0(sna, snb);
         },
         keys$0);
      last_view[1] = [0, hash$0, keys$0];
      return keys$0;
     }
     try{var _kK_ = ok(find(view_memo, [0, src_views, sort$0])), _kJ_ = _kK_;}
     catch(_kL_){
      var _kH_ = caml_wrap_exception(_kL_);
      if(_kH_ !== Not_found) throw caml_maybe_attach_backtrace(_kH_, 0);
      var
       lower = of_array(_cL_, [0, _ke_]),
       upper = of_array(_cL_, [0, _kf_]),
       query = bound(lower, upper, _kh_, _kg_, 0),
       idx =
         caml_call1
          (index
            ([0,
              function(_kM_){return _kM_;},
              ItemsByViewAndKind[12],
              ItemsByViewAndKind[2]]),
           store),
       _kI_ =
         let$2
          (as_fut(ItemsByViewAndKind[8].call(null, [0, query], idx)),
           function(all_keys){
            if(src_views)
             var
              src_views$0 = src_views[1],
              keys =
                filter
                 (function(param){
                   var views = param[3];
                   return exists
                           (function(v){return memq(v, src_views$0);}, views);
                  },
                  all_keys);
            else
             var keys = all_keys;
            add$0(view_memo, [0, src_views, sort$0], keys);
            return keys;
           }),
       _kJ_ = _kI_;
     }
     return let$2(_kJ_, _kG_);
    }
    function on_query(q){
     switch(q[0]){
       case 0:
        var s = q[1]; set_session_uuid(s); return ok(0);
       case 1:
        var l = q[1];
        return let$1
                (idb,
                 function(idb){
                  return let$0
                          (check_db(idb, hd(l)),
                           function(res){
                            return map_err(function(jv){return [0, 16620, jv];}, res);
                           });
                 });
       case 2:
        return let$1
                (read_only_store(0),
                 function(store){
                  return let$2
                          (as_fut(Items_store[6].call(null, store)),
                           function(req){
                            return to_list(map$3(function(i){return i[2];}, req));
                           });
                 });
       case 3:
        return let$1
                (read_only_store(0),
                 function(store){
                  var
                   index$0 =
                     caml_call1
                      (index
                        ([0,
                          function(_kF_){return _kF_;},
                          ItemsByTypeAndName[12],
                          ItemsByTypeAndName[2]]),
                       store),
                   lower = of_array(_cL_, [0, _ki_]),
                   upper = of_array(_cL_, [0, _kj_]),
                   query = bound(lower, upper, _kl_, _kk_, 0);
                  return let$1
                          (as_fut
                            (ItemsByTypeAndName[8].call(null, [0, query], index$0)),
                           function(keys){
                            return let$0
                                    (of_list$1
                                      (symbol$5
                                        (function(k){return as_fut(get$3(k, store));},
                                         to_list(keys))),
                                     function(items){
                                      function _kC_(l){
                                       return symbol$5
                                               (function(_kE_){return get_exn_or(_km_, _kE_);}, l);
                                      }
                                      var
                                       items$0 =
                                         function(_kD_){return symbol$7(_kC_, _kD_);}
                                          (flatten_l(items));
                                      return items$0;
                                     });
                           });
                 });
       case 4:
        var server_id = q[1];
        return let$1
                (read_only_store(0),
                 function(store){
                  var
                   index$0 =
                     caml_call1
                      (index
                        ([0,
                          function(_kB_){return _kB_;},
                          ItemsByTypeAndName[12],
                          ItemsByTypeAndName[2]]),
                       store),
                   lower = of_array(_cL_, [0, _kn_]),
                   upper = of_array(_cL_, [0, _ko_]),
                   query = bound(lower, upper, _kq_, _kp_, 0);
                  return let$1
                          (as_fut
                            (ItemsByTypeAndName[8].call(null, [0, query], index$0)),
                           function(keys){
                            return let$0
                                    (of_list$1
                                      (symbol$5
                                        (function(k){return as_fut(get$3(k, store));},
                                         to_list(keys))),
                                     function(items){
                                      function _kx_(param){
                                       if(param){
                                        var item = param[1], server_id$0 = item[2][7];
                                        if(symbol$0(server_id$0, server_id)) return [0, item];
                                       }
                                       return 0;
                                      }
                                      function _ky_(_kA_){return filter_map$0(_kx_, _kA_);}
                                      var
                                       items$0 =
                                         function(_kz_){return symbol$7(_ky_, _kz_);}
                                          (flatten_l(items));
                                      return items$0;
                                     });
                           });
                 });
       case 5:
        var request = q[1], uuid = new_uuid_v4(0);
        return let$1
                (read_only_store(0),
                 function(store){
                  return let$2
                          (get_view_keys(store, request),
                           function(keys){
                            var item_count = keys.length - 1;
                            return [0, uuid, request, 0, item_count];
                           });
                 });
       default:
        var indexes = q[3], order = q[2], view = q[1];
        return let$1
                (read_only_store(0),
                 function(store){
                  return let$1
                          (get_view_keys(store, view[2]),
                           function(keys){
                            return let$0
                                    (fut_of_array
                                      (map$3
                                        (function(index){
                                          try{
                                           var
                                            index$0 = index + view[3] | 0,
                                            index$1 = apply(order, view[4], index$0),
                                            key = caml_check_bound(keys, index$1)[1 + index$1],
                                            _kv_ =
                                              let$0
                                               (fut$0(get$3(key, store)),
                                                function(result){
                                                 if(0 !== result[0]){
                                                  var err = result[1];
                                                  error([0, _kr_, [0, key, [0, err, 0]]]);
                                                  return 0;
                                                 }
                                                 var match = result[1];
                                                 if(! match) return 0;
                                                 var v = match[1];
                                                 return [0, v];
                                                });
                                           return _kv_;
                                          }
                                          catch(_kw_){return return$0(0);}
                                         },
                                         indexes)),
                                     function(results){return [0, results];});
                           });
                 });
     }
    }
    return [0, , , , , , , on_query];
   }
   Make_worker(function(_ku_){return [0, Worker(_ku_)[7]];});
   do_at_exit(0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,

// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=exe, use-js-string=true, version=5.8.2+5.8.2
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return 0;}
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) == 0);}
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_float_of_string(s){
    var res;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(s.length > 0 && res === res) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) return res;
    var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = parseInt(m[1] + m[2] + m3, 16),
      exponent = (m[5] | 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Infinity;
    if(/^-inf(inity)?$/i.test(s)) return - Infinity;
    caml_failwith("float_of_string");
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_ml_bytes_length(s){return s.l;}
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Uint8Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_get_current_callstack(){return [0];}
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      default: caml_convert_string_to_bytes(s);
      case 0:
       return s.c;
      case 4:
       return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c;
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F;
   }
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   var caml_callback = caml_call_gen;
   function caml_js_wrap_callback_strict(arity, f){
    return function(){
     var
      n = arguments.length,
      args = new Array(arity),
      len = Math.min(arguments.length, arity);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_lazy_make_forward(v){return [250, v];}
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c == 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_list_of_js_array(a){
    var l = 0;
    for(var i = a.length - 1; i >= 0; i--){var e = a[i]; l = [0, e, l];}
    return l;
   }
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
         d = ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070DB);
         b = ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
         a = ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
         c = ff(c, d, a, b, buffer[6], 17, 0xA8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xFD469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098D8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
         c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
         a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);
         b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xC040B340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
         b = gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
         a = gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
         b = gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
         d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
         c = gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
         a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
         d = gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
         a = hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771F681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
         a = hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
         c = hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
         b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
         d = hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
         c = hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881D05);
         a = hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
         d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
         b = hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xF4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
         c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
         b = ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
         c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
         d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
         c = ii(c, d, a, b, buffer[6], 15, 0xA3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
         a = ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
         d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
         b = ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
    return t;
   }
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   var caml_sys_fds = new Array(3);
   function caml_sys_close(fd){
    var file = caml_sys_fds[fd];
    if(file) file.close();
    delete caml_sys_fds[fd];
    return 0;
   }
   var caml_ml_channels = new Array();
   function caml_ml_channel_get(id){return caml_ml_channels[id];}
   function caml_ml_flush(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.opened){
     chan.opened = false;
     caml_sys_close(chan.fd);
     chan.fd = - 1;
     chan.buffer = new Uint8Array(0);
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_debug_info_status(){return 0;}
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length == 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     var
      nread =
        chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channel_get(chanid),
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channel_get(chanid);
    chan.name = name;
    return 0;
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_obj_make_forward(b, v){b[0] = 250; b[1] = v; return 0;}
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_build_symbols(symb){
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.symbols){
      if(! caml_global_data.symidx)
       caml_global_data.symidx = caml_build_symbols(caml_global_data.symbols);
      var nid = caml_global_data.symidx[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   var
    cst$1 = "",
    cst$13 = " ",
    cst_unfetched = " unfetched: ",
    cst$12 = '"',
    cst_Li = "%Li",
    cst_a = "%a",
    cst_d = "%d",
    cst_i = "%i",
    cst_li = "%li",
    cst_ni = "%ni",
    cst_s = "%s",
    cst_s_id = "%s--id",
    cst_s_Items_s_Images_Primary_w =
      "%s/Items/%s/Images/Primary?width=500&format=Jpg",
    cst_u = "%u",
    cst$8 = "'",
    cst_Program_not_linked_with_g_ =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst$10 = ",",
    cst$4 = ", ",
    cst_characters = ", characters ",
    cst_id = "--id",
    cst_Infinity = "-Infinity",
    cst = ".",
    cst_0 = ".0",
    cst_Images_Primary_width_500_f = "/Images/Primary?width=500&format=Jpg",
    cst_Items = "/Items/",
    cst_5rem = "5rem",
    cst$11 = ":",
    cst$5 = ": ",
    cst$7 = "<",
    cst_hov = "<hov>",
    cst_hv2 = "<hv2>",
    cst$6 = ">",
    cst_1_2 = "@;<1 -2>",
    cst_1_0 = "@;<1 0>",
    cst$3 = "@[",
    cst$2 = "@{",
    cst_AccessToken = "AccessToken",
    cst_AggregateFolder = "AggregateFolder",
    cst_AlbumId = "AlbumId",
    cst_Assert_failure = "Assert_failure",
    cst_Audio = "Audio",
    cst_AudioBook = "AudioBook",
    cst_BasePluginFolder = "BasePluginFolder",
    cst_Book = "Book",
    cst_BoxSet = "BoxSet",
    cst_Channel = "Channel",
    cst_ChannelFolderItem = "ChannelFolderItem",
    cst_CollectionFolder = "CollectionFolder",
    cst_CollectionType = "CollectionType",
    cst_Cover = "Cover",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Episode = "Episode",
    cst_Failure = "Failure",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Folder = "Folder",
    cst_Form_submitted = "Form submitted:",
    cst_Genre = "Genre",
    cst_Id = "Id",
    cst_ImageBlurHashes = "ImageBlurHashes",
    cst_Infinity$0 = "Infinity",
    cst_Invalid_argument = "Invalid_argument",
    cst_LiveTvChannel = "LiveTvChannel",
    cst_LiveTvProgram = "LiveTvProgram",
    cst_Lwd_seq_rank_node_is_marke = "Lwd_seq.rank: node is marked",
    cst_ManualPlaylistsFolder = "ManualPlaylistsFolder",
    cst_Map_bal = "Map.bal",
    cst_Match_failure = "Match_failure",
    cst_Movie = "Movie",
    cst_MusicAlbum = "MusicAlbum",
    cst_MusicArtist = "MusicArtist",
    cst_MusicGenre = "MusicGenre",
    cst_MusicVideo = "MusicVideo",
    cst_NaN = "NaN",
    cst_Name = "Name",
    cst_Not_found = "Not_found",
    cst_Nothing_playing = "Nothing playing",
    cst_Out_of_memory = "Out_of_memory",
    cst_ParentId = "ParentId",
    cst_Path = "Path",
    cst_Person = "Person",
    cst_Photo = "Photo",
    cst_PhotoAlbum = "PhotoAlbum",
    cst_Playlist = "Playlist",
    cst_PlaylistsFolder = "PlaylistsFolder",
    cst_Primary = "Primary",
    cst_Program = "Program",
    cst_Pw = "Pw",
    cst_Recording = "Recording",
    cst_Season = "Season",
    cst_Series = "Series",
    cst_ServerId = "ServerId",
    cst_ServerName = "ServerName",
    cst_Set_bal = "Set.bal",
    cst_SortName = "SortName",
    cst_Stack_overflow = "Stack_overflow",
    cst_Studio = "Studio",
    cst_Synchronized = "Synchronized",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Title = "Title",
    cst_Trailer = "Trailer",
    cst_TvChannel = "TvChannel",
    cst_TvProgram = "TvProgram",
    cst_Type = "Type",
    cst_Undefined_recursive_module = "Undefined_recursive_module",
    cst_User = "User",
    cst_UserRootFolder = "UserRootFolder",
    cst_UserView = "UserView",
    cst_Username = "Username",
    cst_Video = "Video",
    cst_Year = "Year",
    cst$9 = '\\"',
    cst$0 = "\\\\",
    cst_b = "\\b",
    cst_f = "\\f",
    cst_n = "\\n",
    cst_r = "\\r",
    cst_t = "\\t",
    cst_u00 = "\\u00",
    cst_append = "append",
    cst_asc = "asc",
    cst_background_image_url = "background-image: url(",
    cst_background_image_url_S = "background-image: url(%S)",
    cst_body = "body",
    cst_box = "box",
    cst_buffer_ml = "buffer.ml",
    cst_button = "button",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_checked = "checked",
    cst_classList = "classList",
    cst_click = "click",
    cst_console = "console",
    cst_date_added = "date_added",
    cst_desc = "desc",
    cst_documentElement = "documentElement",
    cst_duration = "duration",
    cst_em = "em",
    cst_empty_input = "empty input",
    cst_error = "error",
    cst_false = "false",
    cst_fut = "fut",
    cst_grid_column_1_1 = "grid-column:1/-1",
    cst_height = "height: ",
    cst_id$0 = "id",
    cst_input = "input",
    cst_item = "item",
    cst_item_Id = "item.Id",
    cst_junk_after_end_of_JSON_val = "junk after end of JSON value: ",
    cst_length = "length",
    cst_lib_db_stores_ml = "lib/db/stores.ml",
    cst_lwd_to_remove = "lwd-to-remove",
    cst_name = "name",
    cst_null = "null",
    cst_pathname = "pathname",
    cst_playbackRate = "playbackRate",
    cst_pouet = "pouet",
    cst_px = "px",
    cst_random = "random",
    cst_rem = "rem",
    cst_remove = "remove",
    cst_scroll = "scroll",
    cst_server_id = "server_id",
    cst_sort_name = "sort_name",
    cst_sorts = "sorts",
    cst_sorts_views = "sorts.views",
    cst_src = "src",
    cst_style = "style",
    cst_submit = "submit",
    cst_target = "target",
    cst_text = "text",
    cst_track_png = "track.png",
    cst_true = "true",
    cst_tuples_not_supported_in_yo =
      "tuples not supported in yojson basic mode",
    cst_type = "type",
    cst_unexpected_character = "unexpected character '",
    cst_value = "value",
    cst_variants_not_supported_in_ =
      "variants not supported in yojson basic mode",
    cst_vendor_lwd_lib_brr_lwd_elw = "vendor/lwd/lib/brr-lwd/elwd.ml",
    cst_vendor_lwd_lib_lwd_lwd_ml = "vendor/lwd/lib/lwd/lwd.ml",
    cst_vendor_lwd_lib_lwd_lwd_seq = "vendor/lwd/lib/lwd/lwd_seq.pp.ml",
    cst_vendor_lwd_lib_lwd_lwd_tab = "vendor/lwd/lib/lwd/lwd_table.ml",
    cst_views = "views",
    cst_window = "window";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var undef = undefined;
   caml_fs_init();
   var
    Out_of_memory = [248, cst_Out_of_memory, -1],
    Sys_error = [248, cst_Sys_error, -2],
    Failure = [248, cst_Failure, -3],
    Invalid_argument = [248, cst_Invalid_argument, -4],
    End_of_file = [248, cst_End_of_file, -5],
    Division_by_zero = [248, cst_Division_by_zero, -6],
    Not_found = [248, cst_Not_found, -7],
    Match_failure = [248, cst_Match_failure, -8],
    Stack_overflow = [248, cst_Stack_overflow, -9],
    Sys_blocked_io = [248, cst_Sys_blocked_io, -10],
    Assert_failure = [248, cst_Assert_failure, -11],
    Undefined_recursive_module = [248, cst_Undefined_recursive_module, -12],
    dummy_pos = [0, cst$1, 0, 0, -1],
    zero_pos = [0, cst$1, 1, 0, 0],
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, cst$5, [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    empty$2 = [0, 0],
    empty$3 = [0, 0],
    ocaml_lex_tables =
      [0,
       "\0\0\xe5\xff\x11\0\xe8\xff\x03\0\xea\xff~\0\0\0q\0\0\0\x01\0\x01\0\x02\0{\0\xf3\xff\xf4\xff\xf5\xff\xf6\xff\xf7\xff\xf8\xff\xf9\xff\xfa\xff\xfb\xff\xfc\xff\x01\0\x02\0\0\0\0\0\x02\0\xff\xff\0\0\0\0\x03\0\xfe\xff\x03\0\x01\0\x0b\0\xfd\xff\xef\xff\x03\0\n\0\x0b\0\x05\0\xf2\xff\x14\0\x13\x000\0L\0C\0?\0K\0T\0\xf1\xffU\0S\0O\0U\0K\0G\0S\0T\0]\0\xf0\xff_\0]\0Y\0_\0U\0Q\0\x01\0 \0\x9b\0\xba\0\xd1\0\xdb\0\xe5\0\xf0\0\xfa\0\x12\x01B\x01\xec\xff\xeb\xff^\x01u\x01\x9b\x01\xb2\x015\0\xe7\xffX\x01\xfc\xff\xfd\xff\xfe\xff\x0e\0\xff\xff",
       "\xff\xff\xff\xff\x1a\0\xff\xff\x16\0\xff\xff\x1a\0\x11\0\x11\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a\0\x1a\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\xff\xff\x12\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff",
       "\x01\0\0\0\xff\xff\0\0\xff\xff\0\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xffV\0\0\0Y\0\0\0\0\0\0\0\xff\xff\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x03\0\0\0\x04\0\x04\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x06\0\x04\0\0\0\0\0\0\0\0\0\x13\0\x12\0\0\0\n\0\x0f\0\r\0G\0\x02\0\x07\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\x0e\0W\0\x11\0]\0\x10\0\xff\xffV\0\0\0\0\0\0\0\0\0F\0\0\0\0\0\0\0\x0b\0;\0M\0\0\0M\0\t\0&\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0\0\0\x15\0\0\0\x14\0\0\0\0\0\0\0E\0\"\0\x1e\x002\0F\0\x19\0\x1d\0!\0\f\0<\0+\0\x1f\0$\0\x18\x005\x003\0&\0\x1b\0 \0\x1a\0\x1c\0#\0%\0,\0*\0-\0\x17\0.\0\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0G\0P\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\x07\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\x000\0F\x001\0+\0&\x004\x006\x007\x008\x009\0:\x004\0?\0=\0>\0(\0@\0A\0B\0C\0D\0>\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\0\0F\0\0\0\0\0\0\0N\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0)\0\0\0\0\0\0\0\0\0'\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0K\0\0\0K\0I\0\x05\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0I\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0O\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff[\0\0\0Q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0O\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0O\0\0\0\\\0\0\0O\0\0\0O\0R\0\0\0\0\0\0\0\0\0\0\0\0\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0N\0S\0S\0S\0S\0S\0S\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0\0\0T\0T\0T\0T\0T\0T\0U\0U\0U\0U\0U\0U\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0U\0U\0U\0U\0U\0U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x04\0\0\0\xff\xff\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\\\0\0\0V\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\0\0\n\0F\0\xff\xffF\0\0\0E\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\t\0\x18\0\x19\0'\0\x07\0\0\0\x1c\0 \0\0\0\n\0*\0\x1e\0#\0\0\0\x0b\0\f\0\"\0\x1a\0\x1f\0\0\0\x1b\0\x18\0$\0(\0)\0,\0\0\0-\0\0\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0.\0\b\0\x06\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0/\0\b\x000\x001\x002\x003\x005\x006\x007\x008\x009\0:\0;\0<\0=\0\r\0?\0@\0A\0B\0C\0D\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\b\0\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xffI\0H\0\0\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0H\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0N\0V\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0X\0\xff\xffO\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\xff\xffN\0\xff\xffX\0\xff\xffN\0\xff\xffN\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffR\0R\0R\0R\0R\0R\0R\0R\0R\0R\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0R\0R\0R\0R\0R\0R\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xffR\0R\0R\0R\0R\0R\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\xff\xffS\0S\0S\0S\0S\0S\0T\0T\0T\0T\0T\0T\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffX\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst$1,
       cst$1,
       cst$1,
       cst$1,
       cst$1,
       cst$1],
    tp_loc = "lib/data_source/jellyfin_api.ml.user",
    tp_loc$0 = "lib/data_source/jellyfin_api.ml.Authenticate_by_name.params",
    tp_loc$1 = "lib/data_source/jellyfin_api.ml.Authenticate_by_name.response",
    tp_loc$2 = "lib/data_source/jellyfin_api.ml.Item.image_blur_hashes",
    tp_loc$3 = "lib/data_source/jellyfin_api.ml.Item.type_",
    tp_loc$4 = "lib/data_source/jellyfin_api.ml.Item.t",
    tp_loc$5 = "lib/db/stores.ml.Items.sorts",
    tp_loc$6 = "lib/db/stores.ml.Items.t",
    path$1 = [0, "sorts.date_added"],
    path$2 = [0, cst_item_Id],
    name$6 = "items",
    initial_report = [0, 0, 0],
    strings =
      [0,
       [0, [0, 0, cst_click], "Cliquez sur le bouton !"],
       [0, [0, [0, 1, cst_click], "Click on the Button !"], 0]],
    url$0 = "./db_worker.bc.js",
    default$1 = [0, 0, 0, 0],
    album = cst$1,
    artist = cst$1;
   caml_register_global
    (11, Undefined_recursive_module, cst_Undefined_recursive_module);
   caml_register_global(10, Assert_failure, cst_Assert_failure);
   caml_register_global(9, Sys_blocked_io, cst_Sys_blocked_io);
   caml_register_global(8, Stack_overflow, cst_Stack_overflow);
   caml_register_global(7, Match_failure, cst_Match_failure);
   caml_register_global(6, Not_found, cst_Not_found);
   caml_register_global(5, Division_by_zero, cst_Division_by_zero);
   caml_register_global(4, End_of_file, cst_End_of_file);
   caml_register_global(3, Invalid_argument, cst_Invalid_argument);
   caml_register_global(2, Failure, cst_Failure);
   caml_register_global(1, Sys_error, cst_Sys_error);
   caml_register_global(0, Out_of_memory, cst_Out_of_memory);
   var
    _h_ = cst_input,
    _g_ = [0, 0, [0, 7, 0]],
    _f_ = "output_substring",
    _e_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _d_ = cst,
    _b_ = cst_true,
    _c_ = cst_false,
    _a_ = "char_of_int",
    _l_ = "CamlinternalLazy.Undefined",
    _m_ = "option is None",
    _n_ = "result is Error _",
    _p_ = cst$0,
    _q_ = "\\'",
    _r_ = cst_b,
    _s_ = cst_t,
    _t_ = cst_n,
    _u_ = cst_r,
    _o_ = "Char.chr",
    _w_ = "List.init",
    _v_ = "hd",
    _z_ = "String.blit / Bytes.blit_string",
    _y_ = "Bytes.blit",
    _x_ = "String.sub / Bytes.sub",
    _C_ = "String.contains_from / Bytes.contains_from",
    _B_ = cst$1,
    _A_ = "String.concat",
    _G_ = "Array.iter2: arrays must have the same length",
    _F_ = "Array.blit",
    _E_ = "Array.sub",
    _D_ = "Array.init",
    _H_ = "Lexing.lex_refill: cannot grow buffer",
    _M_ = "Set.remove_min_elt",
    _N_ = [0, 0, 0, 0],
    _O_ = [0, "set.ml", 570, 18],
    _I_ = cst_Set_bal,
    _J_ = cst_Set_bal,
    _K_ = cst_Set_bal,
    _L_ = cst_Set_bal,
    _V_ = "Map.remove_min_elt",
    _W_ = [0, 0, 0, 0],
    _X_ = [0, "map.ml", 400, 10],
    _Q_ = cst_Map_bal,
    _R_ = cst_Map_bal,
    _S_ = cst_Map_bal,
    _U_ = cst_Map_bal,
    _Z_ = "Stdlib.Stack.Empty",
    ___ = "Stdlib.Queue.Empty",
    _ad_ = "Buffer.add_substring/add_subbytes",
    _ac_ = "Buffer.add: cannot grow buffer",
    _ab_ = [0, cst_buffer_ml, 93, 2],
    _aa_ = [0, cst_buffer_ml, 94, 2],
    _$_ = "Buffer.sub",
    _am_ = "%c",
    _an_ = cst_s,
    _ao_ = cst_i,
    _ap_ = cst_li,
    _aq_ = cst_ni,
    _ar_ = cst_Li,
    _as_ = "%f",
    _at_ = "%B",
    _au_ = "%{",
    _av_ = "%}",
    _aw_ = "%(",
    _ax_ = "%)",
    _ay_ = cst_a,
    _az_ = "%t",
    _aA_ = "%?",
    _aB_ = "%r",
    _aC_ = "%_r",
    _aD_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _aO_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _aG_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _aP_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _aH_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _aQ_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _aI_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _aR_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _aJ_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _aS_ = [0, cst_camlinternalFormat_ml, 831, 30],
    _aK_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _aM_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _aE_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _aN_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _aF_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _aL_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _bN_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    _bO_ = "Printf: bad conversion %[",
    _bP_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _bQ_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _bR_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    _bS_ = "Printf: bad conversion %_",
    _bT_ = cst$2,
    _bU_ = cst$3,
    _bV_ = cst$2,
    _bW_ = cst$3,
    _bY_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _bX_ = [0, 0, 4],
    _bM_ = "nan",
    _bK_ = "neg_infinity",
    _bL_ = "infinity",
    _bJ_ = cst,
    _bI_ = [0, 103],
    _bw_ = "%+nd",
    _bx_ = "% nd",
    _bz_ = "%+ni",
    _bA_ = "% ni",
    _bB_ = "%nx",
    _bC_ = "%#nx",
    _bD_ = "%nX",
    _bE_ = "%#nX",
    _bF_ = "%no",
    _bG_ = "%#no",
    _bv_ = "%nd",
    _by_ = cst_ni,
    _bH_ = "%nu",
    _bj_ = "%+ld",
    _bk_ = "% ld",
    _bm_ = "%+li",
    _bn_ = "% li",
    _bo_ = "%lx",
    _bp_ = "%#lx",
    _bq_ = "%lX",
    _br_ = "%#lX",
    _bs_ = "%lo",
    _bt_ = "%#lo",
    _bi_ = "%ld",
    _bl_ = cst_li,
    _bu_ = "%lu",
    _a8_ = "%+Ld",
    _a9_ = "% Ld",
    _a$_ = "%+Li",
    _ba_ = "% Li",
    _bb_ = "%Lx",
    _bc_ = "%#Lx",
    _bd_ = "%LX",
    _be_ = "%#LX",
    _bf_ = "%Lo",
    _bg_ = "%#Lo",
    _a7_ = "%Ld",
    _a__ = cst_Li,
    _bh_ = "%Lu",
    _aV_ = "%+d",
    _aW_ = "% d",
    _aY_ = "%+i",
    _aZ_ = "% i",
    _a0_ = "%x",
    _a1_ = "%#x",
    _a2_ = "%X",
    _a3_ = "%#X",
    _a4_ = "%o",
    _a5_ = "%#o",
    _aU_ = cst_d,
    _aX_ = cst_i,
    _a6_ = cst_u,
    _ae_ = "@]",
    _af_ = "@}",
    _ag_ = "@?",
    _ah_ = "@\n",
    _ai_ = "@.",
    _aj_ = "@@",
    _ak_ = "@%",
    _al_ = "@",
    _aT_ = "CamlinternalFormat.Type_mismatch",
    _b2_ = cst$1,
    _b3_ = [0, [11, cst$4, [2, 0, [2, 0, 0]]], ", %s%s"],
    _co_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _cp_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"],
    _cn_ = "Fatal error: out of memory in uncaught exception handler",
    _cm_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _cj_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _ck_ =
      [0,
       [11, cst_Program_not_linked_with_g_, 0],
       cst_Program_not_linked_with_g_],
    _cb_ = "Raised at",
    _cc_ = "Re-raised at",
    _cd_ = "Raised by primitive operation at",
    _ce_ = "Called from",
    _cf_ = " (inlined)",
    _ch_ = cst$1,
    _cg_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _ci_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _b8_ = "Out of memory",
    _b9_ = "Stack overflow",
    _b__ = "Pattern matching failed",
    _b$_ = "Assertion failed",
    _ca_ = "Undefined recursive module",
    _b4_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _b5_ = cst$1,
    _b6_ = cst$1,
    _b7_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _b1_ = [0, [4, 0, 0, 0, 0], cst_d],
    _bZ_ = [0, [3, 0, 0], "%S"],
    _b0_ = "_",
    _cl_ =
      [0,
       cst$1,
       "(Cannot print locations:\n bytecode executable program file not found)",
       "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
       "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
       "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"],
    _cs_ = "Fun.Finally_raised: ",
    _cr_ = "Stdlib.Fun.Finally_raised",
    _cu_ = "Random.int",
    _ct_ = "x",
    _cv_ =
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
    _cA_ = "Hashtbl: unsupported hash table format",
    _cy_ = cst$1,
    _cT_ = [3, 0, 3],
    _cU_ = cst,
    _cQ_ = cst$6,
    _cR_ = "<\/",
    _cS_ = cst$1,
    _cN_ = cst$6,
    _cO_ = cst$7,
    _cP_ = cst$1,
    _cM_ = "\n",
    _cI_ = cst$1,
    _cJ_ = cst$1,
    _cK_ = cst$1,
    _cL_ = cst$1,
    _cH_ = [0, cst$1],
    _cD_ = cst$1,
    _cE_ = cst$1,
    _cF_ = cst$1,
    _cG_ = cst$1,
    _cC_ = [0, cst$1, 0, cst$1],
    _cB_ = "Stdlib.Format.String_tag",
    _cV_ = "Jsoo_runtime.Error.Exn",
    _cW_ = "jsError",
    _cY_ = [0, "src/fut.ml", 34, 25],
    _c8_ = "debug",
    _c7_ = "warn",
    _c6_ = cst_error,
    _c5_ = "log",
    _c3_ = "scrollTop",
    _c1_ = "search",
    _c0_ = [0, 1],
    _cZ_ = cst_pathname,
    _c9_ = "isSecureContext",
    _c__ = "cache",
    _c$_ = "credentials",
    _da_ = "headers",
    _db_ = "integrity",
    _dc_ = "keepalive",
    _dd_ = "method",
    _de_ = "mode",
    _df_ = "redirect",
    _dg_ = "referrer",
    _dh_ = "referrerPolicy",
    _dj_ = "content-box",
    _dk_ = "border-box",
    _dl_ = "device-pixel-content-box",
    _dn_ = cst_duration,
    _do_ = cst_playbackRate,
    _dp_ = "position",
    _dm_ = "Set metadata",
    _ds_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 157, 10],
    _du_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 179, 10],
    _dw_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 191, 10],
    _dy_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 218, 17],
    _dD_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 367, 16],
    _dE_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 368, 18],
    _dF_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 372, 15],
    _dG_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 377, 15],
    _dH_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 383, 15],
    _dI_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 386, 10],
    _dJ_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 362, 16],
    _dK_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 517, 12],
    _dL_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 459, 14],
    _dR_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 686, 27],
    _dQ_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 651, 27],
    _dO_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 560, 16],
    _dM_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 550, 23],
    _dN_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 544, 14],
    _dC_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 334, 9],
    _dB_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 309, 9],
    _dA_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 305, 9],
    _dz_ =
      [0,
       [11,
        "Lwd: unsafe mutation (variable invalidated during evaluation) at\n",
        [15, 0]],
       "Lwd: unsafe mutation (variable invalidated during evaluation) at\n%a"],
    _dx_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 199, 14],
    _dv_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 186, 14],
    _dt_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 169, 14],
    _dr_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 152, 14],
    _dP_ = "Lwd.Release_failure",
    _dT_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 64, 12],
    _d1_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 205, 18],
    _d0_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 218, 9],
    _d3_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 224, 18],
    _d2_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 237, 9],
    _d4_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 240, 21],
    _d5_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 250, 21],
    _d6_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 260, 21],
    _d7_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 296, 14],
    _el_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 553, 18],
    _em_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 557, 12],
    _en_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 546, 14],
    _ek_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 538, 21],
    _ej_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 531, 14],
    _ei_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 523, 14],
    _eh_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 492, 29],
    _eg_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 499, 29],
    _ef_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 462, 21],
    _eb_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 420, 10],
    _ec_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 423, 15],
    _ed_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 435, 10],
    _ee_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 457, 2],
    _d__ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 371, 24],
    _d$_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 391, 16],
    _ea_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 394, 2],
    _d9_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 315, 18],
    _d8_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 317, 9],
    _dZ_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 193, 4],
    _dY_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 199, 21],
    _dW_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 174, 4],
    _dX_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 177, 14],
    _dV_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 113, 14],
    _dU_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 82, 21],
    _dS_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 32, 14],
    _eF_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 571, 12],
    _et_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 321, 37],
    _eu_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 322, 37],
    _ew_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 346, 10],
    _ex_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 357, 42],
    _ev_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 337, 37],
    _ez_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 375, 10],
    _eA_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 383, 42],
    _ey_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 338, 37],
    _eC_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 425, 16],
    _eE_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 513, 50],
    _eD_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 480, 6],
    _eB_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 395, 14],
    _eq_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 174, 57],
    _er_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 182, 57],
    _es_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 238, 11],
    _eo_ = cst_Lwd_seq_rank_node_is_marke,
    _ep_ = cst_Lwd_seq_rank_node_is_marke,
    _eJ_ = [0, cst_vendor_lwd_lib_brr_lwd_elw, 233, 16],
    _eI_ = [0, cst_vendor_lwd_lib_brr_lwd_elw, 201, 16],
    _eH_ = [0, 0, 0],
    _eG_ = [0, 0, 0],
    _eK_ = cst$4,
    _e7_ = cst$1,
    _e6_ = cst$1,
    _eW_ = [0, [0, 15681, -937474657], 0],
    _eX_ = [0, [0, 15681, 82908052], [0, 737455525, 0]],
    _eY_ = [0, [0, 15681, -588596599], [0, 737455525, 0]],
    _eZ_ = [0, [0, 15681, 4100401], [0, 737455525, 0]],
    _e0_ = [0, [0, 15681, -605101559], [0, 737455525, 0]],
    _e1_ = [0, [0, 15681, 756711075], [0, 737455525, 0]],
    _e2_ = [0, [0, 15681, 749039939], [0, 737455525, 0]],
    _e3_ = [0, [0, 15681, 737308346], [0, 737455525, 0]],
    _e4_ = [0, [0, 15681, -937474657], [0, 737455525, 0]],
    _eN_ = [0, [0, 15681, 82908052], 0],
    _eO_ = [0, [0, 15681, -588596599], 0],
    _eP_ = [0, -101336657, 0],
    _eQ_ = [0, [0, 15681, 4100401], 0],
    _eR_ = [0, [0, 15681, -605101559], 0],
    _eS_ = [0, [0, 15681, 756711075], 0],
    _eT_ = [0, [0, 15681, 749039939], 0],
    _eU_ = [0, 737455525, 0],
    _eV_ = [0, [0, 15681, 737308346], 0],
    _eL_ = [0, [11, "\x1b[", [4, 0, 0, 0, [12, 109, 0]]], "\x1b[%dm"],
    _eM_ = "CCFormat.ANSI_codes.No_such_style",
    _e8_ = "CCFormat.Style",
    _e9_ = "CCResult.Get_error",
    _fa_ = "CCFQueue.Empty",
    _fk_ = "expected low surrogate escape sequence (u)",
    _fl_ = "invalid low surrogate for code point beyond U+FFFF'",
    _fm_ = "expected low surrogate escape char (\\)",
    _fn_ = "invalid escape in string",
    _fj_ = "end of string in escape sequence",
    _fe_ = "' ",
    _ff_ = " '",
    _fi_ = cst$1,
    _fg_ = cst$5,
    _fh_ = " at offset ",
    _fc_ = cst$8,
    _fd_ = "invalid hex char in unicode escape: '",
    _fb_ = "Jsonxt__Lexxer_utils.Lex_error",
    _fo_ = [6, 1],
    _fp_ = [6, 0],
    _fq_ = cst$8,
    _fr_ = cst_unexpected_character,
    _fs_ = cst$8,
    _ft_ = cst_unexpected_character,
    _fu_ = cst$8,
    _fv_ = cst_unexpected_character,
    _fw_ = cst$8,
    _fx_ = cst_unexpected_character,
    _fy_ = [0, cst$1],
    _fz_ = cst$8,
    _fA_ = cst_unexpected_character,
    _fB_ = "unexpected EOF in comment",
    _fC_ = "Jsonxt__Error_info.Json_error_info",
    _fD_ = cst_0,
    _fE_ = cst_0,
    _fF_ = "unexpected '{'",
    _fG_ = "unexpected '}'",
    _fH_ = "unexpected null value",
    _fI_ = "unexpected negative infinity",
    _fJ_ = "unexpected Not-a-Number",
    _fK_ = "unexpected infinity",
    _fL_ = "unexpected end-of-input",
    _fM_ = "unexpected ','",
    _fN_ = "unexpected ':'",
    _fO_ = "unexpected '['",
    _fP_ = "unexpected ']'",
    _fQ_ = "unexpected '<'",
    _fR_ = "unexpected '>'",
    _fS_ = "unexpected '('",
    _fT_ = "unexpected ')'",
    _fU_ = cst$8,
    _fV_ = "unexpected string '",
    _fW_ = cst$8,
    _fX_ = "unexpected large integer '",
    _fY_ = cst$8,
    _fZ_ = "unexpected integer '",
    _f0_ = cst$8,
    _f1_ = "unexpected float '",
    _f2_ = cst$8,
    _f3_ = "compliance error '",
    _f4_ = cst$8,
    _f5_ = cst_true,
    _f7_ = cst_false,
    _f6_ = "unexpected boolean '",
    _f$_ = [1, "Unexpected end-of-input"],
    _f9_ = [0, 148000204, "tuple must have at least 2 elements"],
    _f__ = [0, 148000204, "variant must have at least a string"],
    _f8_ = "Jsonxt__Parser.Make(Compliance).Parse_error",
    _gc_ = cst_b,
    _gd_ = cst_t,
    _ge_ = cst_n,
    _gf_ = cst_f,
    _gg_ = cst_r,
    _gh_ = cst$9,
    _ga_ = cst$0,
    _gb_ = cst_u00,
    _gj_ = cst_null,
    _gk_ = cst$10,
    _gl_ =
      [0,
       [12,
        123,
        [17,
         [0, cst_1_0, 1, 0],
         [15, [17, [0, cst_1_2, 1, -2], [12, 125, 0]]]]],
       "{@;<1 0>%a@;<1 -2>}"],
    _gm_ = "{}",
    _gn_ = cst$10,
    _go_ =
      [0,
       [12,
        91,
        [17,
         [0, cst_1_0, 1, 0],
         [18,
          [1, [0, [11, cst_hov, 0], cst_hov]],
          [15, [17, 0, [17, [0, cst_1_2, 1, -2], [12, 93, 0]]]]]]],
       "[@;<1 0>@[<hov>%a@]@;<1 -2>]"],
    _gp_ = "[]",
    _gq_ = "()",
    _gr_ = cst$10,
    _gs_ =
      [0,
       [12,
        40,
        [17, [0, "@,", 0, 0], [15, [17, [0, "@;<0 -2>", 0, -2], [12, 41, 0]]]]],
       "(@,%a@;<0 -2>)"],
    _gt_ =
      [0,
       [12,
        60,
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [2, 0, [11, cst$5, [15, [17, 0, [12, 62, 0]]]]]]],
       "<@[<hv2>%s: %a@]>"],
    _gu_ = [0, [12, 60, [2, 0, [12, 62, 0]]], "<%s>"],
    _gv_ =
      [0,
       [18,
        [1, [0, [11, cst_hv2, 0], cst_hv2]],
        [2, 0, [11, cst$5, [15, [17, 0, 0]]]]],
       "@[<hv2>%s: %a@]"],
    _gy_ = [0, [15, [17, 2, 0]], "%a@?"],
    _gx_ = [0, [15, 0], cst_a],
    _gw_ =
      [0,
       [18, [1, [0, [11, cst_hv2, 0], cst_hv2]], [15, [17, 0, 0]]],
       "@[<hv2>%a@]"],
    _gi_ = [0, [2, 0, [17, [0, "@ ", 1, 0], 0]], "%s@ "],
    _gB_ = "Expected `String",
    _gA_ = "Expected `Assoc",
    _gD_ = "{",
    _gE_ = "}",
    _gF_ = "Null",
    _gG_ = cst_Infinity,
    _gH_ = "NAN",
    _gI_ = cst_Infinity$0,
    _gJ_ = "end-of-file",
    _gK_ = cst$10,
    _gL_ = cst$11,
    _gM_ = "[",
    _gN_ = "]",
    _gO_ = cst$7,
    _gP_ = cst$6,
    _gQ_ = "(",
    _gR_ = ")",
    _gS_ = cst$8,
    _gT_ = "input error '",
    _gU_ = cst_true,
    _gV_ = cst_false,
    _gY_ = cst_junk_after_end_of_JSON_val,
    _gZ_ = [0, 0],
    _g0_ = [1, cst_empty_input],
    _gW_ = cst_junk_after_end_of_JSON_val,
    _gX_ = [1, cst_empty_input],
    _hb_ = cst$1,
    _hc_ = cst$1,
    _g__ = cst_null,
    _g$_ = cst$10,
    _ha_ = cst$10,
    _g9_ = cst$11,
    _g3_ = cst_b,
    _g4_ = cst_t,
    _g5_ = cst_n,
    _g6_ = cst_f,
    _g7_ = cst_r,
    _g8_ = cst$9,
    _g1_ = cst$0,
    _g2_ = cst_u00,
    _hl_ = cst_null,
    _hn_ = cst$10,
    _hm_ = cst$1,
    _hp_ = cst$10,
    _ho_ = cst$1,
    _hf_ = cst_b,
    _hg_ = cst_t,
    _hh_ = cst_n,
    _hi_ = cst_f,
    _hj_ = cst_r,
    _hk_ = cst$9,
    _hd_ = cst$0,
    _he_ = cst_u00,
    _hT_ = [0, 928231259, cst_Infinity$0],
    _hU_ = [0, 928231259, cst_Infinity],
    _hS_ = [0, 928231259, cst_NaN],
    _hR_ = cst_NaN,
    _hP_ = cst_Infinity,
    _hQ_ = cst_Infinity$0,
    _hO_ = [0, 0],
    _hM_ = cst$12,
    _hN_ = cst$12,
    _hL_ = "floatlit not supported in yojson safe mode",
    _hK_ = cst_NaN,
    _hI_ = cst_Infinity,
    _hJ_ = cst_Infinity$0,
    _hH_ = [0, 0],
    _hG_ = cst_variants_not_supported_in_,
    _hF_ = cst_variants_not_supported_in_,
    _hE_ = cst_tuples_not_supported_in_yo,
    _hD_ = cst_tuples_not_supported_in_yo,
    _hC_ = "floatlit not supported in yojson basic mode",
    _hB_ = cst_variants_not_supported_in_,
    _hA_ = cst_tuples_not_supported_in_yo,
    _hz_ = cst_NaN,
    _hx_ = cst_Infinity,
    _hy_ = cst_Infinity$0,
    _hw_ = [0, 0],
    _hv_ = [5, "Integer out of bounds"],
    _hr_ = ", line",
    _hs_ = "File ",
    _hu_ = "Line",
    _ht_ =
      [0,
       [2,
        0,
        [12,
         32,
         [4,
          0,
          0,
          0,
          [11,
           " chars ",
           [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, cst$5, 0]]]]]]]],
       "%s %d chars %d-%d: "],
    _hq_ = "Jsonxt__Yojson.Json_error",
    _hV_ = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
    _hW_ = [1, [0, 3854881, "Failed to unmarshal data"]],
    _hX_ = "TODO not implemented",
    _h4_ = "not implemented",
    _h1_ = [0, [8, [0, 0, 0], 0, 0, [11, cst_px, 0]], "%fpx"],
    _h2_ = [0, [8, [0, 0, 0], 0, 0, [11, cst_rem, 0]], "%frem"],
    _h3_ = [0, [8, [0, 0, 0], 0, 0, [11, cst_em, 0]], "%fem"],
    _hY_ = cst_px,
    _hZ_ = cst_rem,
    _h0_ = cst_em,
    _h5_ = [0, 80, [0, "lwdui-controlled-scroll-wrapper"]],
    _h6_ = [0, 80, "lwdui-controlled-scroll-controls"],
    _h7_ = "Show playing",
    _ia_ = [0, [11, cst_height, [2, 0, 0]], "height: %s"],
    _h$_ = cst$13,
    _h8_ = [0, cst$13],
    _h9_ = "grid-template-columns",
    _h__ = [0, [2, 0, [11, cst$5, [2, 0, [12, 59, 0]]]], "%s: %s;"],
    _ib_ = [1, 4.],
    _ie_ = [0, 80, "row"],
    _ic_ =
      [0,
       [11, "height: calc(", [2, 0, [11, " * ", [4, 3, 0, 0, [11, ");", 0]]]]],
       "height: calc(%s * %i);"],
    _id_ =
      [0,
       [11, cst_height, [2, 0, [11, " !important;", 0]]],
       "height: %s !important;"],
    _if_ = [0, "lwdui-lazy-table", 0],
    _ig_ = [0, 80, [0, "lwdui-lazy-table-wrapper"]],
    _ii_ = [1, -358247754],
    _ih_ =
      [0,
       [11, "Multiple persitent var are using the key ", [2, 0, 0]],
       "Multiple persitent var are using the key %s"],
    _il_ = cst_submit,
    _ik_ = "password",
    _ij_ = cst_text,
    _io_ = [0, 80, cst_text],
    _im_ = [0, [2, 0, [11, cst_id, 0]], cst_s_id],
    _in_ = [0, [2, 0, 0], cst_s],
    _iq_ = [0, 80, cst_text],
    _ip_ = [0, [2, 0, [11, cst_id, 0]], cst_s_id],
    _it_ = [0, 80, "checkbox"],
    _ir_ =
      [0,
       [2, 0, [12, 45, [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, [11, "-id", 0]]]]]],
       "%s-%i-%i-id"],
    _is_ =
      [0,
       [2, 0, [12, 45, [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]]],
       "%s-%i-%i"],
    _iu_ = [0, 80, cst_button],
    _iy_ = "list_of_yojson: list needed",
    _ix_ = "int_of_yojson: integer needed",
    _iw_ = "string_of_yojson: string needed",
    _iv_ = "Ppx_yojson_conv_lib__Yojson_conv.Of_yojson_error",
    _iH_ = cst$13,
    _iJ_ = "_of_yojson: list instead of atom for record expected",
    _iI_ =
      [0,
       [2,
        0,
        [11,
         "_of_yojson: the following record elements were undefined: ",
         [2, 0, 0]]],
       "%s_of_yojson: the following record elements were undefined: %s"],
    _iG_ = "extra fields",
    _iF_ = "duplicate fields",
    _iD_ = cst$13,
    _iE_ =
      [0,
       [2, 0, [11, "_of_yojson: ", [2, 0, [11, cst$5, [2, 0, 0]]]]],
       "%s_of_yojson: %s: %s"],
    _iC_ = "_of_yojson: unexpected variant constructor",
    _iB_ = "_of_yojson: expected a variant type, saw an empty list",
    _iA_ = "_of_yojson: expected a variant type, saw a nested list",
    _iz_ = "_of_yojson: this constructor does not take arguments",
    _jW_ = "An error occured while decoding response: ",
    _jS_ = [0, [11, ", Token=", [3, 0, 0]], ", Token=%S"],
    _jV_ = cst$1,
    _jT_ = cst$1,
    _jU_ =
      [0,
       [11,
        'MediaBrowser Client="Ocamix", Device="Firefox", DeviceId="',
        [2, 0, [11, '", Version="0.1"', [2, 0, 0]]]],
       'MediaBrowser Client="Ocamix", Device="Firefox", DeviceId="%s", Version="0.1"%s'],
    _jR_ = cst_CollectionType,
    _jI_ = cst_Type,
    _jJ_ = cst_ImageBlurHashes,
    _jK_ = cst_ServerId,
    _jL_ = cst_ParentId,
    _jM_ = cst_AlbumId,
    _jN_ = cst_Path,
    _jO_ = cst_Id,
    _jP_ = cst_SortName,
    _jQ_ = cst_Name,
    _jD_ = "type_",
    _jE_ = "image_blur_hashes",
    _jF_ = cst_server_id,
    _jG_ = cst_id$0,
    _jH_ = cst_name,
    _jC_ = [0, "lib/data_source/jellyfin_api.ml", 193, 64],
    _i3_ = [0, 848054398, [0, [0, -976970511, cst_AggregateFolder], 0]],
    _i4_ = [0, 848054398, [0, [0, -976970511, cst_Audio], 0]],
    _i5_ = [0, 848054398, [0, [0, -976970511, cst_AudioBook], 0]],
    _i6_ = [0, 848054398, [0, [0, -976970511, cst_BasePluginFolder], 0]],
    _i7_ = [0, 848054398, [0, [0, -976970511, cst_Book], 0]],
    _i8_ = [0, 848054398, [0, [0, -976970511, cst_BoxSet], 0]],
    _i9_ = [0, 848054398, [0, [0, -976970511, cst_Channel], 0]],
    _i__ = [0, 848054398, [0, [0, -976970511, cst_ChannelFolderItem], 0]],
    _i$_ = [0, 848054398, [0, [0, -976970511, cst_CollectionFolder], 0]],
    _ja_ = [0, 848054398, [0, [0, -976970511, cst_Episode], 0]],
    _jb_ = [0, 848054398, [0, [0, -976970511, cst_Folder], 0]],
    _jc_ = [0, 848054398, [0, [0, -976970511, cst_Genre], 0]],
    _jd_ = [0, 848054398, [0, [0, -976970511, cst_LiveTvChannel], 0]],
    _je_ = [0, 848054398, [0, [0, -976970511, cst_LiveTvProgram], 0]],
    _jf_ = [0, 848054398, [0, [0, -976970511, cst_ManualPlaylistsFolder], 0]],
    _jg_ = [0, 848054398, [0, [0, -976970511, cst_Movie], 0]],
    _jh_ = [0, 848054398, [0, [0, -976970511, cst_MusicAlbum], 0]],
    _ji_ = [0, 848054398, [0, [0, -976970511, cst_MusicArtist], 0]],
    _jj_ = [0, 848054398, [0, [0, -976970511, cst_MusicGenre], 0]],
    _jk_ = [0, 848054398, [0, [0, -976970511, cst_MusicVideo], 0]],
    _jl_ = [0, 848054398, [0, [0, -976970511, cst_Person], 0]],
    _jm_ = [0, 848054398, [0, [0, -976970511, cst_Photo], 0]],
    _jn_ = [0, 848054398, [0, [0, -976970511, cst_PhotoAlbum], 0]],
    _jo_ = [0, 848054398, [0, [0, -976970511, cst_Playlist], 0]],
    _jp_ = [0, 848054398, [0, [0, -976970511, cst_PlaylistsFolder], 0]],
    _jq_ = [0, 848054398, [0, [0, -976970511, cst_Program], 0]],
    _jr_ = [0, 848054398, [0, [0, -976970511, cst_Recording], 0]],
    _js_ = [0, 848054398, [0, [0, -976970511, cst_Season], 0]],
    _jt_ = [0, 848054398, [0, [0, -976970511, cst_Series], 0]],
    _ju_ = [0, 848054398, [0, [0, -976970511, cst_Studio], 0]],
    _jv_ = [0, 848054398, [0, [0, -976970511, cst_Trailer], 0]],
    _jw_ = [0, 848054398, [0, [0, -976970511, cst_TvChannel], 0]],
    _jx_ = [0, 848054398, [0, [0, -976970511, cst_TvProgram], 0]],
    _jy_ = [0, 848054398, [0, [0, -976970511, cst_UserRootFolder], 0]],
    _jz_ = [0, 848054398, [0, [0, -976970511, cst_UserView], 0]],
    _jA_ = [0, 848054398, [0, [0, -976970511, cst_Video], 0]],
    _jB_ = [0, 848054398, [0, [0, -976970511, cst_Year], 0]],
    _i2_ = cst_Primary,
    _i1_ = [0, "Users", [0, "AuthenticateByName", 0]],
    _iY_ = cst_ServerId,
    _iZ_ = cst_AccessToken,
    _i0_ = cst_User,
    _iV_ = cst_server_id,
    _iW_ = "access_token",
    _iX_ = "user",
    _iT_ = cst_Pw,
    _iU_ = cst_Username,
    _iR_ = "pw",
    _iS_ = "username",
    _iN_ = cst_Id,
    _iO_ = cst_ServerName,
    _iP_ = cst_ServerId,
    _iQ_ = cst_Name,
    _iK_ = cst_id$0,
    _iL_ = cst_server_id,
    _iM_ = cst_name,
    _kf_ = [0, cst_lib_db_stores_ml, 116, 13],
    _ke_ = [0, cst_lib_db_stores_ml, 107, 19],
    _kb_ = [0, cst_lib_db_stores_ml, 99, 13],
    _ka_ = [0, cst_lib_db_stores_ml, 93, 19],
    _j8_ = [0, cst_lib_db_stores_ml, 66, 13],
    _j6_ = cst_item,
    _j7_ = cst_sorts,
    _j4_ = cst_item,
    _j5_ = cst_sorts,
    _j1_ = cst_sort_name,
    _j2_ = cst_views,
    _j3_ = cst_date_added,
    _jY_ = cst_sort_name,
    _jZ_ = cst_views,
    _j0_ = cst_date_added,
    _j9_ = [0, cst_sorts_views],
    _j__ = [0, "item.Name"],
    _j$_ = [0, cst_item_Id],
    _kc_ = [0, cst_sorts_views],
    _kd_ = [0, "item.Type"],
    _kg_ = [0, "sorts.sort_name"],
    _kh_ = [0, "item.CollectionType"],
    _kw_ = [0, [2, 0, [15, 0]], "%s%a"],
    _kv_ =
      [0,
       [12, 40, [4, 3, 0, 0, [12, 47, [4, 3, 0, 0, [12, 41, 0]]]]],
       "(%i/%i)"],
    _kq_ = "Unknown",
    _kr_ = cst_Synchronized,
    _ks_ = "Inconsistent",
    _kt_ =
      [0,
       [11,
        "New items: last: ",
        [4,
         3,
         0,
         0,
         [11,
          " missing: ",
          [4, 3, 0, 0, [11, cst_unfetched, [4, 3, 0, 0, 0]]]]]],
       "New items: last: %i missing: %i unfetched: %i"],
    _ku_ =
      [0,
       [11,
        "Partial: last: ",
        [4, 3, 0, 0, [11, cst_unfetched, [4, 3, 0, 0, 0]]]],
       "Partial: last: %i unfetched: %i"],
    _kA_ = "Start offset:",
    _kB_ = "Item count:",
    _kC_ = "ERROR",
    _kz_ = [0, [11, "Server ", [2, 0, [11, cst$5, [15, 0]]]], "Server %s: %a"],
    _ky_ = cst$1,
    _kS_ = "GOT L=",
    _kR_ = [0, "NEW REF", 0],
    _kQ_ = cst_Synchronized,
    _kO_ =
      [0,
       [11, "Sync in progress: ", [4, 3, 0, 0, [12, 47, [4, 3, 0, 0, 0]]]],
       "Sync in progress: %i/%i"],
    _kP_ = "Desynchronized",
    _kK_ = cst_Form_submitted,
    _kN_ = cst_Form_submitted,
    _kL_ = cst_Form_submitted,
    _kM_ = cst$1,
    _kD_ = "ui_servers",
    _kE_ = [0, "https://demo.jellyfin.org/stable"],
    _kF_ = [0, 1],
    _kG_ = [0, "demo"],
    _kH_ = [0, 1],
    _kI_ = [0, 0],
    _kJ_ = [0, 80, "Connect"],
    _k7_ = cst_Nothing_playing,
    _k2_ =
      [0,
       [2,
        0,
        [11, cst_Items, [2, 0, [11, cst_Images_Primary_width_500_f, 0]]]],
       cst_s_Items_s_Images_Primary_w],
    _k4_ = cst_track_png,
    _k3_ =
      [0,
       [11, cst_background_image_url, [3, 0, [12, 41, 0]]],
       cst_background_image_url_S],
    _k0_ =
      "A playback error happened. This is probably due to a codec unsupported by the browser.",
    _k1_ = [0, 80, "NEXT"],
    _k5_ = [0, 80, "now-playing-cover"],
    _k6_ = [0, 80, "now-playing-details"],
    _k8_ = [0, 80, cst_box],
    _k9_ = [0, 80, "now-playing-display"],
    _k__ = [0, 80, "player-wrapper"],
    _k$_ = [0, 80, cst_box],
    _kW_ = "Now playing:",
    _kX_ =
      [0,
       [2,
        0,
        [11, cst_Items, [2, 0, [11, cst_Images_Primary_width_500_f, 0]]]],
       cst_s_Items_s_Images_Primary_w],
    _kY_ = "image/jpeg",
    _kZ_ = "500x500",
    _kV_ =
      [0,
       [2,
        0,
        [11,
         "/Audio/",
         [2,
          0,
          [11,
           "/universal?api_key=",
           [2,
            0,
            [11,
             "&audioCodec=aac&container=opus,mp3,aac,m4a,m4b,flac,wav,ogg&transcodingContainer=ts&transcodingProtocol=hls",
             0]]]]]],
       "%s/Audio/%s/universal?api_key=%s&audioCodec=aac&container=opus,mp3,aac,m4a,m4b,flac,wav,ogg&transcodingContainer=ts&transcodingProtocol=hls"],
    _lb_ = [0, "off", 0],
    _lc_ = [0, "on", 0],
    _la_ = [0, cst_button, 0],
    _ld_ = [0, "draggable-table", 0],
    _lp_ = "|>",
    _lo_ =
      [0,
       [2, 0, [11, cst_Items, [2, 0, [11, "/Images/Primary?width=50", 0]]]],
       "%s/Items/%s/Images/Primary?width=50"],
    _ln_ = "server-error.png",
    _lq_ = [2, 4.],
    _le_ = cst_Title,
    _lf_ = "1fr",
    _lg_ = cst_Title,
    _lh_ = cst_Cover,
    _li_ = cst_5rem,
    _lj_ = cst_Cover,
    _lk_ = "#",
    _ll_ = cst_5rem,
    _lm_ = "Order",
    _lM_ = "Persist ?",
    _lG_ =
      [0,
       [2,
        0,
        [11,
         cst_Items,
         [2, 0, [11, "/Images/Primary?width=800&format=Jpg", 0]]]],
       "%s/Items/%s/Images/Primary?width=800&format=Jpg"],
    _lI_ = cst_track_png,
    _lH_ =
      [0,
       [11, cst_background_image_url, [3, 0, [12, 41, 0]]],
       cst_background_image_url_S],
    _lF_ = cst_Nothing_playing,
    _lD_ = '""',
    _lE_ = "Updating main view:",
    _lt_ = cst_click,
    _lr_ = "session_uuid",
    _ls_ = "toto1",
    _lv_ = "Welcome to OCAMIX",
    _lx_ = [0, cst_pouet, 0, 0],
    _ly_ =
      [0, [0, cst_date_added, "Date added"], [0, [0, cst_name, cst_Name], 0]],
    _lz_ = [0, "view-sort", cst_date_added, 0],
    _lA_ =
      [0,
       [0, cst_asc, "Asc"],
       [0, [0, cst_desc, "Desc"], [0, [0, cst_random, "Random"], 0]]],
    _lB_ = [0, "view-order", cst_desc, 0],
    _lC_ = cst_pouet,
    _lL_ = [0, "main-layout"];
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   function make(v){return [0, v];}
   function get(r){return r[1];}
   function compare_and_set(r, seen, v){
    var cur = r[1];
    return cur === seen ? (r[1] = v, 1) : 0;
   }
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lnot(x){return x ^ -1;}
   var max_int = 2147483647;
   function symbol_concat(s1, s2){return s1 + s2;}
   function char_of_int(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(_a_);
   }
   function string_of_bool(b){return b ? _b_ : _c_;}
   function string_of_int(n){return "" + n;}
   function valid_float_lexem(s){
    var l = caml_ml_string_length(s);
    function loop(i){
     var i$0 = i;
     for(;;){
      if(l <= i$0) return symbol_concat(s, _d_);
      var match = caml_string_get(s, i$0);
      a:
      {
       if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
       return s;
      }
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    return loop(0);
   }
   function string_of_float(f){
    return valid_float_lexem(caml_format_float("%.12g", f));
   }
   function symbol(l1, l2){
    if(! l1) return l2;
    var tl = l1[2], hd = l1[1];
    return [0, hd, symbol(tl, l2)];
   }
   caml_ml_open_descriptor_in(0);
   var
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2);
   function open_out_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_out(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_out(name){return open_out_gen(_e_, 438, name);}
   function flush_all(param){
    function iter(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var l = param$0[2], a = param$0[1];
      try{caml_ml_flush(a);}
      catch(_z$_){
       var _z__ = caml_wrap_exception(_z$_);
       if(_z__[1] !== Sys_error) throw caml_maybe_attach_backtrace(_z__, 0);
      }
      param$0 = l;
     }
    }
    return iter(caml_ml_out_channels_list(0));
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function output_substring(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
     return caml_ml_output(oc, s, ofs, len);
    return invalid_arg(_f_);
   }
   function close_out(oc){
    caml_ml_flush(oc);
    caml_ml_close_channel(oc);
    return;
   }
   function open_in_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_in(name){return open_in_gen(_g_, 0, name);}
   function input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_input(ic, s, ofs, len);
    return invalid_arg(_h_);
   }
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   var exit_function = make(flush_all);
   function at_exit(f){
    for(;;){
     var f_yet_to_run = make(1), old_exit = get(exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
         if(compare_and_set(f_yet_to_run$0, 1, 0)) caml_call1(f, 0);
         return caml_call1(old_exit$0, 0);
        },
      success = compare_and_set(exit_function, old_exit, new_exit),
      _z9_ = 1 - success;
     if(! _z9_) return _z9_;
    }
   }
   function do_at_exit(param){return caml_call1(get(exit_function), 0);}
   caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   function _i_(_z8_){return caml_ml_close_channel(_z8_);}
   function _j_(_z7_, _z6_){return caml_ml_output_char(_z7_, _z6_);}
   function _k_(_z5_){return caml_ml_flush(_z5_);}
   var
    max_array_length = caml_sys_const_max_wosize(0),
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function is_block(a){return 1 - (typeof a === "number" ? 1 : 0);}
   var Undefined = [248, _l_, caml_fresh_oo_id(0)];
   function raise_undefined(param){
    throw caml_maybe_attach_backtrace(Undefined, 1);
   }
   function force_lazy_block(blk){
    var closure = blk[1];
    blk[1] = raise_undefined;
    try{
     var result = caml_call1(closure, 0);
     caml_obj_make_forward(blk, result);
     return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     blk[1] = function(param){throw caml_maybe_attach_backtrace(e, 0);};
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function from_val(v){
    var t = caml_obj_tag(v);
    if(t !== 250 && t !== 246 && t !== 253) return v;
    return caml_lazy_make_forward(v);
   }
   function value(o, default$0){
    if(! o) return default$0;
    var v = o[1];
    return v;
   }
   function get$0(param){
    if(! param) return invalid_arg(_m_);
    var v = param[1];
    return v;
   }
   function map(f, o){
    if(! o) return 0;
    var v = o[1];
    return [0, caml_call1(f, v)];
   }
   function iter(f, param){
    if(! param) return;
    var v = param[1];
    return caml_call1(f, v);
   }
   function is_some(param){return param ? 1 : 0;}
   function get_ok(param){
    if(0 !== param[0]) return invalid_arg(_n_);
    var v = param[1];
    return v;
   }
   function map$0(f, e){
    if(0 !== e[0]) return e;
    var v = e[1];
    return [0, caml_call1(f, v)];
   }
   function of_int_exn(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(_o_);
   }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c) return _p_;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){if(39 <= c) return _q_; break a;}
      if(14 > c)
       switch(c){
         case 8:
          return _r_;
         case 9:
          return _s_;
         case 10:
          return _t_;
         case 13:
          return _u_;
       }
     }
     var s = caml_create_bytes(4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s);
    }
    var s$0 = caml_create_bytes(1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0);
   }
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function length_aux(len, param){
    var len$0 = len, param$0 = param;
    for(;;){
     if(! param$0) return len$0;
     var l = param$0[2], len$1 = len$0 + 1 | 0;
     len$0 = len$1;
     param$0 = l;
    }
   }
   function length(l){return length_aux(0, l);}
   function cons(a, l){return [0, a, l];}
   function hd(param){
    if(! param) return failwith(_v_);
    var a = param[1];
    return a;
   }
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0;
     var l1$1 = l1$0[2], a = l1$0[1], l2$1 = [0, a, l2$0];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
   }
   function rev(l){return rev_append(l, 0);}
   function init_tailrec_aux(acc, i, n, f){
    var acc$0 = acc, i$0 = i;
    for(;;){
     if(n <= i$0) return acc$0;
     var i$1 = i$0 + 1 | 0, acc$1 = [0, caml_call1(f, i$0), acc$0];
     acc$0 = acc$1;
     i$0 = i$1;
    }
   }
   function init_aux(i, n, f){
    if(n <= i) return 0;
    var r = caml_call1(f, i);
    return [0, r, init_aux(i + 1 | 0, n, f)];
   }
   function init(len, f){
    return 0 <= len
            ? 50
              < len
              ? rev(init_tailrec_aux(0, 0, len, f))
              : init_aux(0, len, f)
            : invalid_arg(_w_);
   }
   function flatten(param){
    if(! param) return 0;
    var r = param[2], l = param[1];
    return symbol(l, flatten(r));
   }
   function map$1(f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call1(f, a);
    return [0, r, map$1(f, l)];
   }
   function rev_map(f, l){
    function rmap_f(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return accu$0;
      var
       l = param$0[2],
       a = param$0[1],
       accu$1 = [0, caml_call1(f, a), accu$0];
      accu$0 = accu$1;
      param$0 = l;
     }
    }
    return rmap_f(0, l);
   }
   function iter$0(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     caml_call1(f, a);
     param$0 = l;
    }
   }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
    for(;;){
     if(! l$0) return accu$0;
     var l$1 = l$0[2], a = l$0[1], accu$1 = caml_call2(f, accu$0, a);
     accu$0 = accu$1;
     l$0 = l$1;
    }
   }
   function for_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 1;
     var l = param$0[2], a = param$0[1], _z4_ = caml_call1(p, a);
     if(! _z4_) return _z4_;
     param$0 = l;
    }
   }
   function assoc_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return [0, b];
     param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return b;
     param$0 = l;
    }
   }
   function find_all(p){
    function find(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return rev(accu$0);
      var l = param$0[2], x = param$0[1];
      if(caml_call1(p, x)){
       var accu$1 = [0, x, accu$0];
       accu$0 = accu$1;
       param$0 = l;
      }
      else
       param$0 = l;
     }
    }
    var _z2_ = 0;
    return function(_z3_){return find(_z2_, _z3_);};
   }
   function filter_map(f){
    function aux(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return rev(accu$0);
      var l = param$0[2], x = param$0[1], match = caml_call1(f, x);
      if(match){
       var v = match[1], accu$1 = [0, v, accu$0];
       accu$0 = accu$1;
       param$0 = l;
      }
      else
       param$0 = l;
     }
    }
    var _z0_ = 0;
    return function(_z1_){return aux(_z0_, _z1_);};
   }
   function partition(p, l){
    function part(yes, no, param){
     var yes$0 = yes, no$0 = no, param$0 = param;
     for(;;){
      if(! param$0){var _zZ_ = rev(no$0); return [0, rev(yes$0), _zZ_];}
      var l = param$0[2], x = param$0[1];
      if(caml_call1(p, x)){
       var yes$1 = [0, x, yes$0];
       yes$0 = yes$1;
       param$0 = l;
      }
      else{var no$1 = [0, x, no$0]; no$0 = no$1; param$0 = l;}
     }
    }
    return part(0, 0, l);
   }
   function sort_uniq(cmp, l){
    function rev_merge(l1, l2, accu){
     var l1$0 = l1, l2$0 = l2, accu$0 = accu;
     for(;;){
      if(! l1$0) return rev_append(l2$0, accu$0);
      if(! l2$0) return rev_append(l1$0, accu$0);
      var
       t2 = l2$0[2],
       h2 = l2$0[1],
       t1 = l1$0[2],
       h1 = l1$0[1],
       c = caml_call2(cmp, h1, h2);
      if(0 === c){
       var accu$1 = [0, h1, accu$0];
       l1$0 = t1;
       l2$0 = t2;
       accu$0 = accu$1;
      }
      else if(0 <= c){
       var accu$2 = [0, h2, accu$0];
       l2$0 = t2;
       accu$0 = accu$2;
      }
      else{var accu$3 = [0, h1, accu$0]; l1$0 = t1; accu$0 = accu$3;}
     }
    }
    function rev_merge_rev(l1, l2, accu){
     var l1$0 = l1, l2$0 = l2, accu$0 = accu;
     for(;;){
      if(! l1$0) return rev_append(l2$0, accu$0);
      if(! l2$0) return rev_append(l1$0, accu$0);
      var
       t2 = l2$0[2],
       h2 = l2$0[1],
       t1 = l1$0[2],
       h1 = l1$0[1],
       c = caml_call2(cmp, h1, h2);
      if(0 === c){
       var accu$1 = [0, h1, accu$0];
       l1$0 = t1;
       l2$0 = t2;
       accu$0 = accu$1;
      }
      else if(0 < c){
       var accu$2 = [0, h1, accu$0];
       l1$0 = t1;
       accu$0 = accu$2;
      }
      else{var accu$3 = [0, h2, accu$0]; l2$0 = t2; accu$0 = accu$3;}
     }
    }
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c = caml_call2(cmp, x1, x2),
         s =
           0 === c
            ? [0, x1, 0]
            : 0 <= c ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _zT_ = l[2];
      if(_zT_){
       var match$2 = _zT_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _zT_[1],
         x1$0 = l[1],
         c$0 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$0)
         var
          c$1 = caml_call2(cmp, x2$0, x3),
          _zU_ =
            0 === c$1
             ? [0, x2$0, 0]
             : 0 <= c$1 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]],
          s$0 = _zU_;
        else if(0 <= c$0){
         var c$2 = caml_call2(cmp, x1$0, x3);
         if(0 === c$2)
          var _zV_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$2)
          var
           c$3 = caml_call2(cmp, x2$0, x3),
           _zW_ =
             0 === c$3
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$3
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]],
           _zV_ = _zW_;
         else
          var _zV_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         var s$0 = _zV_;
        }
        else{
         var c$4 = caml_call2(cmp, x2$0, x3);
         if(0 === c$4)
          var _zX_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$4)
          var
           c$5 = caml_call2(cmp, x1$0, x3),
           _zY_ =
             0 === c$5
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$5
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]],
           _zX_ = _zY_;
         else
          var _zX_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _zX_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2),
      tl$0 = match$1[2],
      s2 = match$1[1];
     return [0, rev_merge_rev(s1, s2, 0), tl$0];
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c = caml_call2(cmp, x1, x2),
         s =
           0 === c
            ? [0, x1, 0]
            : 0 < c ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _zN_ = l[2];
      if(_zN_){
       var match$2 = _zN_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _zN_[1],
         x1$0 = l[1],
         c$0 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$0)
         var
          c$1 = caml_call2(cmp, x2$0, x3),
          _zO_ =
            0 === c$1
             ? [0, x2$0, 0]
             : 0 < c$1 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]],
          s$0 = _zO_;
        else if(0 < c$0){
         var c$2 = caml_call2(cmp, x2$0, x3);
         if(0 === c$2)
          var _zP_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$2)
          var _zP_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
          var
           c$3 = caml_call2(cmp, x1$0, x3),
           _zQ_ =
             0 === c$3
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$3
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
           _zP_ = _zQ_;
         var s$0 = _zP_;
        }
        else{
         var c$4 = caml_call2(cmp, x1$0, x3);
         if(0 === c$4)
          var _zR_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$4)
          var _zR_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
          var
           c$5 = caml_call2(cmp, x2$0, x3),
           _zS_ =
             0 === c$5
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$5
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]],
           _zR_ = _zS_;
         var s$0 = _zR_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2),
      tl$0 = match$1[2],
      s2 = match$1[1];
     return [0, rev_merge(s1, s2, 0), tl$0];
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function compare(_zM_, _zL_){return caml_int_compare(_zM_, _zL_);}
   function min(x, y){return x <= y ? x : y;}
   function max$0(x, y){return y <= x ? x : y;}
   function to_string(x){return "" + x;}
   function make$0(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   var empty = caml_create_bytes(0);
   function copy(s){
    var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
   }
   function of_string(s){return copy(caml_bytes_of_string(s));}
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return invalid_arg(_x_);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2){caml_blit_bytes(s1, ofs1, s2, ofs2, len); return;}
    return invalid_arg(_y_);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2){caml_blit_string(s1, ofs1, s2, ofs2, len); return;}
    return invalid_arg(_z_);
   }
   function is_space(param){
    var _zK_ = param - 9 | 0;
    a:
    {
     if(4 < _zK_ >>> 0){if(23 !== _zK_) break a;} else if(2 === _zK_) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    var len = caml_ml_bytes_length(s), i = [0, 0];
    for(;;){
     if(i[1] >= len) break;
     if(! is_space(caml_bytes_unsafe_get(s, i[1]))) break;
     i[1]++;
    }
    var j = [0, len - 1 | 0];
    for(;;){
     if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s, j[1]))){j[1]--; continue;}
     return i[1] <= j[1] ? sub(s, i[1], (j[1] - i[1] | 0) + 1 | 0) : empty;
    }
   }
   function escaped$0(s){
    var n = [0, 0], _zD_ = caml_ml_bytes_length(s) - 1 | 0, _zC_ = 0;
    if(_zD_ >= 0){
     var i$0 = _zC_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _zH_ = match - 34 | 0;
          if(58 < _zH_ >>> 0){
           if(93 <= _zH_) break c;
          }
          else if(56 < _zH_ - 1 >>> 0) break b;
          var _zI_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _zI_ = 4;
        break a;
       }
       var _zI_ = 2;
      }
      n[1] = n[1] + _zI_ | 0;
      var _zJ_ = i$0 + 1 | 0;
      if(_zD_ === i$0) break;
      i$0 = _zJ_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s)) return copy(s);
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var _zF_ = caml_ml_bytes_length(s) - 1 | 0, _zE_ = 0;
    if(_zF_ >= 0){
     var i = _zE_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _zG_ = i + 1 | 0;
      if(_zF_ === i) break;
      i = _zG_;
     }
    }
    return s$0;
   }
   function map$2(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _zA_ = l - 1 | 0, _zz_ = 0;
    if(_zA_ >= 0){
     var i = _zz_;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(s, i)));
      var _zB_ = i + 1 | 0;
      if(_zA_ === i) break;
      i = _zB_;
     }
    }
    return r;
   }
   function uppercase_ascii$0(s){return map$2(uppercase_ascii, s);}
   function unsafe_of_string(_zy_){return caml_bytes_of_string(_zy_);}
   function unsafe_to_string(_zx_){return caml_string_of_bytes(_zx_);}
   function make$1(n, c){return unsafe_to_string(make$0(n, c));}
   function sub$0(s, ofs, len){
    return unsafe_to_string(sub(unsafe_of_string(s), ofs, len));
   }
   function ensure_ge(x, y){return y <= x ? x : invalid_arg(_A_);}
   function sum_lengths(acc, seplen, param){
    var acc$0 = acc, param$0 = param;
    for(;;){
     if(! param$0) return acc$0;
     var hd = param$0[1];
     if(! param$0[2]) return caml_ml_string_length(hd) + acc$0 | 0;
     var
      tl = param$0[2],
      acc$1 =
        ensure_ge((caml_ml_string_length(hd) + seplen | 0) + acc$0 | 0, acc$0);
     acc$0 = acc$1;
     param$0 = tl;
    }
   }
   function unsafe_blits(dst, pos, sep, seplen, param){
    var pos$0 = pos, param$0 = param;
    for(;;){
     if(! param$0) return dst;
     var hd = param$0[1];
     if(! param$0[2]){
      caml_blit_string(hd, 0, dst, pos$0, caml_ml_string_length(hd));
      return dst;
     }
     var tl = param$0[2];
     caml_blit_string(hd, 0, dst, pos$0, caml_ml_string_length(hd));
     caml_blit_string
      (sep, 0, dst, pos$0 + caml_ml_string_length(hd) | 0, seplen);
     var pos$1 = (pos$0 + caml_ml_string_length(hd) | 0) + seplen | 0;
     pos$0 = pos$1;
     param$0 = tl;
    }
   }
   function concat(sep, l){
    if(! l) return _B_;
    var seplen = caml_ml_string_length(sep);
    return unsafe_to_string
            (unsafe_blits
              (caml_create_bytes(sum_lengths(0, seplen, l)),
               0,
               sep,
               seplen,
               l));
   }
   function is_space$0(param){
    var _zw_ = param - 9 | 0;
    a:
    {
     if(4 < _zw_ >>> 0){if(23 !== _zw_) break a;} else if(2 === _zw_) break a;
     return 1;
    }
    return 0;
   }
   function trim$0(s){
    if(s == cst$1) return s;
    if
     (!
      is_space$0(caml_string_unsafe_get(s, 0))
      &&
       !
       is_space$0(caml_string_unsafe_get(s, caml_ml_string_length(s) - 1 | 0)))
     return s;
    return unsafe_to_string(trim(unsafe_of_string(s)));
   }
   function escaped$1(s){
    function escape_if_needed(s, n, i){
     var i$0 = i;
     for(;;){
      if(n <= i$0) return s;
      var _zv_ = caml_string_unsafe_get(s, i$0) - 32 | 0;
      a:
      {
       if(59 < _zv_ >>> 0){
        if(33 < _zv_ - 61 >>> 0) break a;
       }
       else if(2 === _zv_) break a;
       var i$1 = i$0 + 1 | 0;
       i$0 = i$1;
       continue;
      }
      return unsafe_to_string(escaped$0(unsafe_of_string(s)));
     }
    }
    return escape_if_needed(s, caml_ml_string_length(s), 0);
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
   }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _zt_ = 1; return _zt_;}
     catch(_zu_){
      var _zs_ = caml_wrap_exception(_zu_);
      if(_zs_ === Not_found) return 0;
      throw caml_maybe_attach_backtrace(_zs_, 0);
     }
    return invalid_arg(_C_);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function uppercase_ascii$1(s){
    return unsafe_to_string(uppercase_ascii$0(unsafe_of_string(s)));
   }
   function compare$0(x, y){return caml_string_compare(x, y);}
   function symbol$0(_zr_, _zq_){return _zr_ == _zq_ ? 1 : 0;}
   function init$0(l, f){
    if(0 === l) return [0];
    if(0 > l) return invalid_arg(_D_);
    var res = caml_make_vect(l, caml_call1(f, 0)), _zo_ = l - 1 | 0, _zn_ = 1;
    if(_zo_ >= 1){
     var i = _zn_;
     for(;;){
      res[1 + i] = caml_call1(f, i);
      var _zp_ = i + 1 | 0;
      if(_zo_ === i) break;
      i = _zp_;
     }
    }
    return res;
   }
   function sub$1(a, ofs, len){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return caml_array_sub(a, ofs, len);
    return invalid_arg(_E_);
   }
   function blit$0(a1, ofs1, a2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2){
     caml_array_blit(a1, ofs1, a2, ofs2, len);
     return;
    }
    return invalid_arg(_F_);
   }
   function iter2(f, a, b){
    if(a.length - 1 !== b.length - 1) return invalid_arg(_G_);
    var _zl_ = a.length - 2 | 0, _zk_ = 0;
    if(_zl_ >= 0){
     var i = _zk_;
     for(;;){
      caml_call2(f, a[1 + i], b[1 + i]);
      var _zm_ = i + 1 | 0;
      if(_zl_ === i) break;
      i = _zm_;
     }
    }
    return 0;
   }
   function to_list(a){
    function tolist(i, res){
     var i$0 = i, res$0 = res;
     for(;;){
      if(0 > i$0) return res$0;
      var res$1 = [0, a[1 + i$0], res$0], i$1 = i$0 - 1 | 0;
      i$0 = i$1;
      res$0 = res$1;
     }
    }
    return tolist(a.length - 2 | 0, 0);
   }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var t = param$0[2], accu$1 = accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = t;
    }
   }
   function of_list(l){
    if(! l) return [0];
    var tl = l[2], hd = l[1], a = caml_make_vect(list_length(0, l), hd);
    function fill(i, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return a;
      var tl = param$0[2], hd = param$0[1];
      a[1 + i$0] = hd;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param$0 = tl;
     }
    }
    return fill(1, tl);
   }
   function fold_right(f, a, x){
    var r = [0, x], _zi_ = a.length - 2 | 0;
    if(_zi_ >= 0){
     var i = _zi_;
     for(;;){
      r[1] = caml_call2(f, a[1 + i], r[1]);
      var _zj_ = i - 1 | 0;
      if(0 === i) break;
      i = _zj_;
     }
    }
    return r[1];
   }
   function lex_refill(read_fun, aux_buffer, lexbuf){
    var
     read = caml_call2(read_fun, aux_buffer, caml_ml_bytes_length(aux_buffer)),
     n = 0 < read ? read : (lexbuf[9] = 1, 0);
    if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0)){
     if
      (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
       <= caml_ml_bytes_length(lexbuf[2]))
      blit(lexbuf[2], lexbuf[5], lexbuf[2], 0, lexbuf[3] - lexbuf[5] | 0);
     else{
      var
       newlen =
         min(2 * caml_ml_bytes_length(lexbuf[2]) | 0, max_string_length);
      if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0)) failwith(_H_);
      var newbuf = caml_create_bytes(newlen);
      blit(lexbuf[2], lexbuf[5], newbuf, 0, lexbuf[3] - lexbuf[5] | 0);
      lexbuf[2] = newbuf;
     }
     var s = lexbuf[5];
     lexbuf[4] = lexbuf[4] + s | 0;
     lexbuf[6] = lexbuf[6] - s | 0;
     lexbuf[5] = 0;
     lexbuf[7] = lexbuf[7] - s | 0;
     lexbuf[3] = lexbuf[3] - s | 0;
     var t = lexbuf[10], _zg_ = t.length - 2 | 0, _zf_ = 0;
     if(_zg_ >= 0){
      var i = _zf_;
      for(;;){
       var v = caml_check_bound(t, i)[1 + i];
       if(0 <= v) caml_check_bound(t, i)[1 + i] = v - s | 0;
       var _zh_ = i + 1 | 0;
       if(_zg_ === i) break;
       i = _zh_;
      }
     }
    }
    blit(aux_buffer, 0, lexbuf[2], lexbuf[3], n);
    lexbuf[3] = lexbuf[3] + n | 0;
    return 0;
   }
   function from_function(opt, f){
    if(opt)
     var sth = opt[1], with_positions = sth;
    else
     var with_positions = 1;
    var
     _zb_ = with_positions ? zero_pos : dummy_pos,
     _zc_ = with_positions ? zero_pos : dummy_pos,
     _zd_ = caml_create_bytes(512);
    return [0,
            function(_ze_){return lex_refill(f, _zd_, _ze_);},
            caml_create_bytes(1024),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            [0],
            _zc_,
            _zb_];
   }
   function from_channel(with_positions, ic){
    return from_function
            (with_positions, function(buf, n){return input(ic, buf, 0, n);});
   }
   function from_string(opt, s){
    if(opt)
     var sth = opt[1], with_positions = sth;
    else
     var with_positions = 1;
    var
     _y$_ = with_positions ? zero_pos : dummy_pos,
     _za_ = with_positions ? zero_pos : dummy_pos;
    return [0,
            function(lexbuf){lexbuf[9] = 1; return 0;},
            of_string(s),
            caml_ml_string_length(s),
            0,
            0,
            0,
            0,
            0,
            1,
            [0],
            _za_,
            _y$_];
   }
   function lexeme(lexbuf){
    var len = lexbuf[6] - lexbuf[5] | 0;
    return sub_string(lexbuf[2], lexbuf[5], len);
   }
   function sub_lexeme(lexbuf, i1, i2){
    var len = i2 - i1 | 0;
    return sub_string(lexbuf[2], i1, len);
   }
   function Make(Ord){
    function height(param){if(! param) return 0; var h = param[4]; return h;}
    function create(l, v, r){
     if(l) var h = l[4], hl = h; else var hl = 0;
     if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
     var _y__ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
     return [0, l, v, r, _y__];
    }
    function bal(l, v, r){
     if(l) var h = l[4], hl = h; else var hl = 0;
     if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
     if((hr + 2 | 0) < hl){
      if(! l) return invalid_arg(_J_);
      var lr = l[3], lv = l[2], ll = l[1], _y5_ = height(lr);
      if(_y5_ <= height(ll)) return create(ll, lv, create(lr, v, r));
      if(! lr) return invalid_arg(_I_);
      var lrr = lr[3], lrv = lr[2], lrl = lr[1], _y6_ = create(lrr, v, r);
      return create(create(ll, lv, lrl), lrv, _y6_);
     }
     if((hl + 2 | 0) >= hr){
      var _y9_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
      return [0, l, v, r, _y9_];
     }
     if(! r) return invalid_arg(_L_);
     var rr = r[3], rv = r[2], rl = r[1], _y7_ = height(rl);
     if(_y7_ <= height(rr)) return create(create(l, v, rl), rv, rr);
     if(! rl) return invalid_arg(_K_);
     var rlr = rl[3], rlv = rl[2], rll = rl[1], _y8_ = create(rlr, rv, rr);
     return create(create(l, v, rll), rlv, _y8_);
    }
    function add(x, t){
     if(! t) return [0, 0, x, 0, 1];
     var r = t[3], v = t[2], l = t[1], c = caml_call2(Ord[1], x, v);
     if(0 === c) return t;
     if(0 <= c){var rr = add(x, r); return r === rr ? t : bal(l, v, rr);}
     var ll = add(x, l);
     return l === ll ? t : bal(ll, v, r);
    }
    function singleton(x){return [0, 0, x, 0, 1];}
    function add_min_element(x, param){
     if(! param) return singleton(x);
     var r = param[3], v = param[2], l = param[1];
     return bal(add_min_element(x, l), v, r);
    }
    function add_max_element(x, param){
     if(! param) return singleton(x);
     var r = param[3], v = param[2], l = param[1];
     return bal(l, v, add_max_element(x, r));
    }
    function join(l, v, r){
     if(! l) return add_min_element(v, r);
     if(! r) return add_max_element(v, l);
     var
      rh = r[4],
      rr = r[3],
      rv = r[2],
      rl = r[1],
      lh = l[4],
      lr = l[3],
      lv = l[2],
      ll = l[1];
     return (rh + 2 | 0) < lh
             ? bal(ll, lv, join(lr, v, r))
             : (lh
               + 2
               | 0)
               < rh
               ? bal(join(l, v, rl), rv, rr)
               : create(l, v, r);
    }
    function min_elt(param){
     var param$0 = param;
     for(;;){
      if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
      var l = param$0[1];
      if(! l){var v = param$0[2]; return v;}
      param$0 = l;
     }
    }
    function remove_min_elt(param){
     if(! param) return invalid_arg(_M_);
     var l = param[1];
     if(l){
      var r = param[3], v = param[2];
      return bal(remove_min_elt(l), v, r);
     }
     var r$0 = param[3];
     return r$0;
    }
    function merge(t1, t2){
     if(! t1) return t2;
     if(! t2) return t1;
     var _y4_ = remove_min_elt(t2);
     return bal(t1, min_elt(t2), _y4_);
    }
    function concat(t1, t2){
     if(! t1) return t2;
     if(! t2) return t1;
     var _y3_ = remove_min_elt(t2);
     return join(t1, min_elt(t2), _y3_);
    }
    function split(x, param){
     if(! param) return _N_;
     var
      r = param[3],
      v = param[2],
      l = param[1],
      c = caml_call2(Ord[1], x, v);
     if(0 === c) return [0, l, 1, r];
     if(0 <= c){
      var match = split(x, r), rr = match[3], pres = match[2], lr = match[1];
      return [0, join(l, v, lr), pres, rr];
     }
     var
      match$0 = split(x, l),
      rl = match$0[3],
      pres$0 = match$0[2],
      ll = match$0[1];
     return [0, ll, pres$0, join(rl, v, r)];
    }
    var empty = 0;
    function is_empty(param){return param ? 0 : 1;}
    function remove(x, t){
     if(! t) return 0;
     var r = t[3], v = t[2], l = t[1], c = caml_call2(Ord[1], x, v);
     if(0 === c) return merge(l, r);
     if(0 <= c){var rr = remove(x, r); return r === rr ? t : bal(l, v, rr);}
     var ll = remove(x, l);
     return l === ll ? t : bal(ll, v, r);
    }
    function union(s1, s2){
     if(! s1) return s2;
     if(! s2) return s1;
     var
      h2 = s2[4],
      r2 = s2[3],
      v2 = s2[2],
      l2 = s2[1],
      h1 = s1[4],
      r1 = s1[3],
      v1 = s1[2],
      l1 = s1[1];
     if(h2 <= h1){
      if(1 === h2) return add(v2, s1);
      var
       match = split(v1, s2),
       r2$0 = match[3],
       l2$0 = match[1],
       _y1_ = union(r1, r2$0);
      return join(union(l1, l2$0), v1, _y1_);
     }
     if(1 === h1) return add(v1, s2);
     var
      match$0 = split(v2, s1),
      r1$0 = match$0[3],
      l1$0 = match$0[1],
      _y2_ = union(r1$0, r2);
     return join(union(l1$0, l2), v2, _y2_);
    }
    function inter(s1, s2){
     if(! s1) return 0;
     if(! s2) return 0;
     var
      r1 = s1[3],
      v1 = s1[2],
      l1 = s1[1],
      _yY_ = split(v1, s2),
      l2 = _yY_[1];
     if(_yY_[2]){
      var r2 = _yY_[3], _yZ_ = inter(r1, r2);
      return join(inter(l1, l2), v1, _yZ_);
     }
     var r2$0 = _yY_[3], _y0_ = inter(r1, r2$0);
     return concat(inter(l1, l2), _y0_);
    }
    function diff(s1, s2){
     if(! s1) return 0;
     if(! s2) return s1;
     var
      r1 = s1[3],
      v1 = s1[2],
      l1 = s1[1],
      _yV_ = split(v1, s2),
      l2 = _yV_[1];
     if(_yV_[2]){
      var r2 = _yV_[3], _yW_ = diff(r1, r2);
      return concat(diff(l1, l2), _yW_);
     }
     var r2$0 = _yV_[3], _yX_ = diff(r1, r2$0);
     return join(diff(l1, l2), v1, _yX_);
    }
    function cons_enum(s, e){
     var s$0 = s, e$0 = e;
     for(;;){
      if(! s$0) return e$0;
      var r = s$0[3], v = s$0[2], l = s$0[1], e$1 = [0, v, r, e$0];
      s$0 = l;
      e$0 = e$1;
     }
    }
    function compare_aux(e1, e2){
     var e1$0 = e1, e2$0 = e2;
     for(;;){
      if(! e1$0) return e2$0 ? -1 : 0;
      if(! e2$0) return 1;
      var
       e2$1 = e2$0[3],
       r2 = e2$0[2],
       v2 = e2$0[1],
       e1$1 = e1$0[3],
       r1 = e1$0[2],
       v1 = e1$0[1],
       c = caml_call2(Ord[1], v1, v2);
      if(0 !== c) return c;
      var e2$2 = cons_enum(r2, e2$1), e1$2 = cons_enum(r1, e1$1);
      e1$0 = e1$2;
      e2$0 = e2$2;
     }
    }
    function compare(s1, s2){
     var _yU_ = cons_enum(s2, 0);
     return compare_aux(cons_enum(s1, 0), _yU_);
    }
    function equal(s1, s2){return 0 === compare(s1, s2) ? 1 : 0;}
    function subset(s1, s2){
     var s1$0 = s1, s2$0 = s2;
     for(;;){
      if(! s1$0) return 1;
      if(! s2$0) return 0;
      var
       r2 = s2$0[3],
       v2 = s2$0[2],
       l2 = s2$0[1],
       r1 = s1$0[3],
       v1 = s1$0[2],
       l1 = s1$0[1],
       c = caml_call2(Ord[1], v1, v2);
      if(0 === c){
       var _yR_ = subset(l1, l2);
       if(! _yR_) return _yR_;
       s1$0 = r1;
       s2$0 = r2;
      }
      else if(0 <= c){
       var _yS_ = subset([0, 0, v1, r1, 0], r2);
       if(! _yS_) return _yS_;
       s1$0 = l1;
      }
      else{
       var _yT_ = subset([0, l1, v1, 0, 0], l2);
       if(! _yT_) return _yT_;
       s1$0 = r1;
      }
     }
    }
    function iter(f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var r = param$0[3], v = param$0[2], l = param$0[1];
      iter(f, l);
      caml_call1(f, v);
      param$0 = r;
     }
    }
    function fold(f, s, accu){
     var s$0 = s, accu$0 = accu;
     for(;;){
      if(! s$0) return accu$0;
      var
       r = s$0[3],
       v = s$0[2],
       l = s$0[1],
       accu$1 = caml_call2(f, v, fold(f, l, accu$0));
      s$0 = r;
      accu$0 = accu$1;
     }
    }
    function cardinal(param){
     if(! param) return;
     var r = param[3], l = param[1];
     cardinal(r);
     cardinal(l);
     return;
    }
    function elements_aux(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return accu$0;
      var
       r = param$0[3],
       v = param$0[2],
       l = param$0[1],
       accu$1 = [0, v, elements_aux(accu$0, r)];
      accu$0 = accu$1;
      param$0 = l;
     }
    }
    function elements(s){return elements_aux(0, s);}
    function find_last_opt_aux(v0, f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var r = param$0[3], v0$0 = param$0[2], l = param$0[1];
      param$0 = caml_call1(f, v0$0) ? r : l;
     }
    }
    function find_last_opt(f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var r = param$0[3], v = param$0[2], l = param$0[1];
      if(caml_call1(f, v)) return find_last_opt_aux(v, f, r);
      param$0 = l;
     }
    }
    function of_sorted_list(l){
     function sub(n, l){
      if(3 >= n >>> 0)
       switch(n){
         case 0:
          return [0, 0, l];
         case 1:
          if(l){var l$3 = l[2], x0 = l[1]; return [0, [0, 0, x0, 0, 1], l$3];}
          break;
         case 2:
          if(l){
           var match$1 = l[2];
           if(match$1){
            var l$4 = match$1[2], x1 = match$1[1], x0$0 = l[1];
            return [0, [0, [0, 0, x0$0, 0, 1], x1, 0, 2], l$4];
           }
          }
          break;
         default:
          if(l){
           var _yQ_ = l[2];
           if(_yQ_){
            var match$2 = _yQ_[2];
            if(match$2){
             var
              l$5 = match$2[2],
              x2 = match$2[1],
              x1$0 = _yQ_[1],
              x0$1 = l[1];
             return [0,
                     [0, [0, 0, x0$1, 0, 1], x1$0, [0, 0, x2, 0, 1], 2],
                     l$5];
            }
           }
          }
       }
      var nl = n / 2 | 0, match = sub(nl, l), l$0 = match[2], left = match[1];
      if(! l$0)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
      var
       l$1 = l$0[2],
       mid = l$0[1],
       match$0 = sub((n - nl | 0) - 1 | 0, l$1),
       l$2 = match$0[2],
       right = match$0[1];
      return [0, create(left, mid, right), l$2];
     }
     return sub(length(l), l)[1];
    }
    function of_list(l){
     if(! l) return empty;
     var _yM_ = l[2], x0 = l[1];
     if(! _yM_) return singleton(x0);
     var _yN_ = _yM_[2], x1 = _yM_[1];
     if(! _yN_) return add(x1, singleton(x0));
     var _yO_ = _yN_[2], x2 = _yN_[1];
     if(! _yO_) return add(x2, add(x1, singleton(x0)));
     var _yP_ = _yO_[2], x3 = _yO_[1];
     if(! _yP_) return add(x3, add(x2, add(x1, singleton(x0))));
     if(_yP_[2]) return of_sorted_list(sort_uniq(Ord[1], l));
     var x4 = _yP_[1];
     return add(x4, add(x3, add(x2, add(x1, singleton(x0)))));
    }
    return [0,
            ,
            ,
            ,
            add,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            empty,
            is_empty,
            ,
            remove,
            union,
            inter,
            ,
            ,
            diff,
            ,
            ,
            compare,
            equal,
            subset,
            iter,
            fold,
            ,
            ,
            ,
            ,
            cardinal,
            ,
            elements,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            find_last_opt,
            ,
            ,
            ,
            ,
            ,
            ,
            of_list];
   }
   function _P_(_yK_){
    var _yL_ = Make(_yK_);
    return [0,
            _yL_[17],
            _yL_[18],
            ,
            _yL_[4],
            ,
            _yL_[20],
            _yL_[21],
            _yL_[22],
            ,
            _yL_[25],
            _yL_[28],
            _yL_[29],
            _yL_[30],
            _yL_[31],
            ,
            _yL_[32],
            ,
            ,
            ,
            ,
            ,
            _yL_[37],
            _yL_[39],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _yL_[50],
            _yL_[57]];
   }
   function Make$0(Ord){
    function height(param){if(! param) return 0; var h = param[5]; return h;}
    function create(l, x, d, r){
     var
      hl = height(l),
      hr = height(r),
      _yJ_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
     return [0, l, x, d, r, _yJ_];
    }
    function singleton(x, d){return [0, 0, x, d, 0, 1];}
    function bal(l, x, d, r){
     if(l) var h = l[5], hl = h; else var hl = 0;
     if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
     if((hr + 2 | 0) < hl){
      if(! l) return invalid_arg(_R_);
      var lr = l[4], ld = l[3], lv = l[2], ll = l[1], _yE_ = height(lr);
      if(_yE_ <= height(ll)) return create(ll, lv, ld, create(lr, x, d, r));
      if(! lr) return invalid_arg(_Q_);
      var
       lrr = lr[4],
       lrd = lr[3],
       lrv = lr[2],
       lrl = lr[1],
       _yF_ = create(lrr, x, d, r);
      return create(create(ll, lv, ld, lrl), lrv, lrd, _yF_);
     }
     if((hl + 2 | 0) >= hr){
      var _yI_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
      return [0, l, x, d, r, _yI_];
     }
     if(! r) return invalid_arg(_U_);
     var rr = r[4], rd = r[3], rv = r[2], rl = r[1], _yG_ = height(rl);
     if(_yG_ <= height(rr)) return create(create(l, x, d, rl), rv, rd, rr);
     if(! rl) return invalid_arg(_S_);
     var
      rlr = rl[4],
      rld = rl[3],
      rlv = rl[2],
      rll = rl[1],
      _yH_ = create(rlr, rv, rd, rr);
     return create(create(l, x, d, rll), rlv, rld, _yH_);
    }
    function add(x, data, m){
     if(! m) return [0, 0, x, data, 0, 1];
     var
      h = m[5],
      r = m[4],
      d = m[3],
      v = m[2],
      l = m[1],
      c = caml_call2(Ord[1], x, v);
     if(0 === c) return d === data ? m : [0, l, x, data, r, h];
     if(0 <= c){
      var rr = add(x, data, r);
      return r === rr ? m : bal(l, v, d, rr);
     }
     var ll = add(x, data, l);
     return l === ll ? m : bal(ll, v, d, r);
    }
    function find(x, param){
     var param$0 = param;
     for(;;){
      if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
      var
       r = param$0[4],
       d = param$0[3],
       v = param$0[2],
       l = param$0[1],
       c = caml_call2(Ord[1], x, v);
      if(0 === c) return d;
      var r$0 = 0 <= c ? r : l;
      param$0 = r$0;
     }
    }
    function find_opt(x, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var
       r = param$0[4],
       d = param$0[3],
       v = param$0[2],
       l = param$0[1],
       c = caml_call2(Ord[1], x, v);
      if(0 === c) return [0, d];
      var r$0 = 0 <= c ? r : l;
      param$0 = r$0;
     }
    }
    function mem(x, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var
       r = param$0[4],
       v = param$0[2],
       l = param$0[1],
       c = caml_call2(Ord[1], x, v),
       _yD_ = 0 === c ? 1 : 0;
      if(_yD_) return _yD_;
      var r$0 = 0 <= c ? r : l;
      param$0 = r$0;
     }
    }
    function min_binding(param){
     var param$0 = param;
     for(;;){
      if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
      var l = param$0[1];
      if(! l){var d = param$0[3], v = param$0[2]; return [0, v, d];}
      param$0 = l;
     }
    }
    function remove_min_binding(param){
     if(! param) return invalid_arg(_V_);
     var l = param[1];
     if(l){
      var r = param[4], d = param[3], v = param[2];
      return bal(remove_min_binding(l), v, d, r);
     }
     var r$0 = param[4];
     return r$0;
    }
    function _yt_(t1, t2){
     if(! t1) return t2;
     if(! t2) return t1;
     var match = min_binding(t2), d = match[2], x = match[1];
     return bal(t1, x, d, remove_min_binding(t2));
    }
    function remove(x, m){
     if(! m) return 0;
     var r = m[4], d = m[3], v = m[2], l = m[1], c = caml_call2(Ord[1], x, v);
     if(0 === c) return _yt_(l, r);
     if(0 <= c){
      var rr = remove(x, r);
      return r === rr ? m : bal(l, v, d, rr);
     }
     var ll = remove(x, l);
     return l === ll ? m : bal(ll, v, d, r);
    }
    function iter(f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var r = param$0[4], d = param$0[3], v = param$0[2], l = param$0[1];
      iter(f, l);
      caml_call2(f, v, d);
      param$0 = r;
     }
    }
    function fold(f, m, accu){
     var m$0 = m, accu$0 = accu;
     for(;;){
      if(! m$0) return accu$0;
      var
       r = m$0[4],
       d = m$0[3],
       v = m$0[2],
       l = m$0[1],
       accu$1 = caml_call3(f, v, d, fold(f, l, accu$0));
      m$0 = r;
      accu$0 = accu$1;
     }
    }
    function for_all(p, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 1;
      var
       r = param$0[4],
       d = param$0[3],
       v = param$0[2],
       l = param$0[1],
       _yA_ = caml_call2(p, v, d);
      if(_yA_){
       var _yB_ = for_all(p, l);
       if(_yB_){param$0 = r; continue;}
       var _yC_ = _yB_;
      }
      else
       var _yC_ = _yA_;
      return _yC_;
     }
    }
    function add_min_binding(k, x, param){
     if(! param) return singleton(k, x);
     var r = param[4], d = param[3], v = param[2], l = param[1];
     return bal(add_min_binding(k, x, l), v, d, r);
    }
    function add_max_binding(k, x, param){
     if(! param) return singleton(k, x);
     var r = param[4], d = param[3], v = param[2], l = param[1];
     return bal(l, v, d, add_max_binding(k, x, r));
    }
    function join(l, v, d, r){
     if(! l) return add_min_binding(v, d, r);
     if(! r) return add_max_binding(v, d, l);
     var
      rh = r[5],
      rr = r[4],
      rd = r[3],
      rv = r[2],
      rl = r[1],
      lh = l[5],
      lr = l[4],
      ld = l[3],
      lv = l[2],
      ll = l[1];
     return (rh + 2 | 0) < lh
             ? bal(ll, lv, ld, join(lr, v, d, r))
             : (lh
               + 2
               | 0)
               < rh
               ? bal(join(l, v, d, rl), rv, rd, rr)
               : create(l, v, d, r);
    }
    function concat(t1, t2){
     if(! t1) return t2;
     if(! t2) return t1;
     var match = min_binding(t2), d = match[2], x = match[1];
     return join(t1, x, d, remove_min_binding(t2));
    }
    function concat_or_join(t1, v, d, t2){
     if(! d) return concat(t1, t2);
     var d$0 = d[1];
     return join(t1, v, d$0, t2);
    }
    function split(x, param){
     if(! param) return _W_;
     var
      r = param[4],
      d = param[3],
      v = param[2],
      l = param[1],
      c = caml_call2(Ord[1], x, v);
     if(0 === c) return [0, l, [0, d], r];
     if(0 <= c){
      var match = split(x, r), rr = match[3], pres = match[2], lr = match[1];
      return [0, join(l, v, d, lr), pres, rr];
     }
     var
      match$0 = split(x, l),
      rl = match$0[3],
      pres$0 = match$0[2],
      ll = match$0[1];
     return [0, ll, pres$0, join(rl, v, d, r)];
    }
    function merge(f, s1, s2){
     if(s1){
      var h1 = s1[5], r1 = s1[4], d1 = s1[3], v1 = s1[2], l1 = s1[1];
      if(height(s2) <= h1){
       var
        match = split(v1, s2),
        r2 = match[3],
        d2 = match[2],
        l2 = match[1],
        _yw_ = merge(f, r1, r2),
        _yx_ = caml_call3(f, v1, [0, d1], d2);
       return concat_or_join(merge(f, l1, l2), v1, _yx_, _yw_);
      }
     }
     else if(! s2) return 0;
     if(! s2) throw caml_maybe_attach_backtrace([0, Assert_failure, _X_], 1);
     var
      r2$0 = s2[4],
      d2$0 = s2[3],
      v2 = s2[2],
      l2$0 = s2[1],
      match$0 = split(v2, s1),
      r1$0 = match$0[3],
      d1$0 = match$0[2],
      l1$0 = match$0[1],
      _yy_ = merge(f, r1$0, r2$0),
      _yz_ = caml_call3(f, v2, d1$0, [0, d2$0]);
     return concat_or_join(merge(f, l1$0, l2$0), v2, _yz_, _yy_);
    }
    function cons_enum(m, e){
     var m$0 = m, e$0 = e;
     for(;;){
      if(! m$0) return e$0;
      var
       r = m$0[4],
       d = m$0[3],
       v = m$0[2],
       l = m$0[1],
       e$1 = [0, v, d, r, e$0];
      m$0 = l;
      e$0 = e$1;
     }
    }
    function compare(cmp, m1, m2){
     function compare_aux(e1, e2){
      var e1$0 = e1, e2$0 = e2;
      for(;;){
       if(! e1$0){if(e2$0) return; return;}
       if(! e2$0) return;
       var
        e2$1 = e2$0[4],
        r2 = e2$0[3],
        d2 = e2$0[2],
        v2 = e2$0[1],
        e1$1 = e1$0[4],
        r1 = e1$0[3],
        d1 = e1$0[2],
        v1 = e1$0[1],
        c = caml_call2(Ord[1], v1, v2);
       if(0 !== c) return c;
       var c$0 = caml_call2(cmp, d1, d2);
       if(0 !== c$0) return c$0;
       var e2$2 = cons_enum(r2, e2$1), e1$2 = cons_enum(r1, e1$1);
       e1$0 = e1$2;
       e2$0 = e2$2;
      }
     }
     var _yv_ = cons_enum(m2, 0);
     return compare_aux(cons_enum(m1, 0), _yv_);
    }
    function equal(cmp, m1, m2){
     function equal_aux(e1, e2){
      var e1$0 = e1, e2$0 = e2;
      for(;;){
       if(! e1$0){if(e2$0) return; return;}
       if(! e2$0) return;
       var
        e2$1 = e2$0[4],
        r2 = e2$0[3],
        d2 = e2$0[2],
        v2 = e2$0[1],
        e1$1 = e1$0[4],
        r1 = e1$0[3],
        d1 = e1$0[2],
        v1 = e1$0[1];
       if(0 === caml_call2(Ord[1], v1, v2) && caml_call2(cmp, d1, d2)){
        var e2$2 = cons_enum(r2, e2$1), e1$2 = cons_enum(r1, e1$1);
        e1$0 = e1$2;
        e2$0 = e2$2;
        continue;
       }
       return;
      }
     }
     var _yu_ = cons_enum(m2, 0);
     return equal_aux(cons_enum(m1, 0), _yu_);
    }
    function cardinal(param){
     if(! param) return;
     var r = param[4], l = param[1];
     cardinal(r);
     cardinal(l);
     return;
    }
    return [0,
            ,
            ,
            ,
            ,
            0,
            ,
            add,
            find,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            find_opt,
            mem,
            ,
            ,
            ,
            ,
            ,
            remove,
            ,
            iter,
            ,
            ,
            fold,
            for_all,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            merge,
            ,
            ,
            ,
            ,
            ,
            compare,
            equal,
            cardinal];
   }
   function _Y_(_yr_){
    var _ys_ = Make$0(_yr_);
    return [0,
            _ys_[5],
            ,
            _ys_[18],
            _ys_[7],
            ,
            ,
            _ys_[24],
            _ys_[38],
            ,
            _ys_[44],
            _ys_[45],
            _ys_[26],
            _ys_[29],
            _ys_[30],
            ,
            ,
            ,
            ,
            _ys_[46],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _ys_[8],
            _ys_[17]];
   }
   var Empty = [248, _Z_, caml_fresh_oo_id(0)];
   function create(param){return [0, 0, 0];}
   function clear(s){s[1] = 0; s[2] = 0; return;}
   function push(x, s){s[1] = [0, x, s[1]]; s[2] = s[2] + 1 | 0; return 0;}
   function pop(s){
    var match = s[1];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var tl = match[2];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return;
   }
   function pop_opt(s){
    var match = s[1];
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return [0, hd];
   }
   function top(s){
    if(s[1]) return;
    throw caml_maybe_attach_backtrace(Empty, 1);
   }
   function top_opt(s){
    var match = s[1];
    if(! match) return 0;
    var hd = match[1];
    return [0, hd];
   }
   function iter$1(f, s){return iter$0(f, s[1]);}
   var Empty$0 = [248, ___, caml_fresh_oo_id(0)];
   function create$0(param){return [0, 0, 0, 0];}
   function clear$0(q){q[1] = 0; q[2] = 0; q[3] = 0; return;}
   function add(x, q){
    var cell = [0, x, 0], match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
   }
   function peek_opt(q){
    var match = q[2];
    if(! match) return 0;
    var content = match[1];
    return [0, content];
   }
   function take(q){
    var _yq_ = q[2];
    if(! _yq_) throw caml_maybe_attach_backtrace(Empty$0, 1);
    var content = _yq_[1];
    if(_yq_[2]){
     var next = _yq_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return content;
    }
    clear$0(q);
    return content;
   }
   function take_opt(q){
    var _yp_ = q[2];
    if(! _yp_) return 0;
    var content = _yp_[1];
    if(_yp_[2]){
     var next = _yp_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return [0, content];
    }
    clear$0(q);
    return [0, content];
   }
   function is_empty(q){return 0 === q[1] ? 1 : 0;}
   function from(f){return [0, [0, 0, [3, [0, 0, f]]]];}
   function create$1(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = max_string_length < n$0 ? max_string_length : n$0,
     s = caml_create_bytes(n$1);
    return [0, s, 0, n$1, s];
   }
   function contents(b){return sub_string(b[1], 0, b[2]);}
   function sub$2(b, ofs, len){
    if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
     return sub_string(b[1], ofs, len);
    return invalid_arg(_$_);
   }
   function length$0(b){return b[2];}
   function reset(b){
    b[2] = 0;
    b[1] = b[4];
    b[3] = caml_ml_bytes_length(b[1]);
    return;
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[3], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(max_string_length < new_len[1])
     if((old_pos + more | 0) <= max_string_length)
      new_len[1] = max_string_length;
     else
      failwith(_ac_);
    var new_buffer = caml_create_bytes(new_len[1]);
    blit(b[1], 0, new_buffer, 0, b[2]);
    b[1] = new_buffer;
    b[3] = new_len[1];
    if((b[2] + more | 0) > b[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ab_], 1);
    if((old_pos + more | 0) <= b[3]) return;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _aa_], 1);
   }
   function add_char(b, c){
    var pos = b[2];
    if(b[3] <= pos) resize(b, 1);
    caml_bytes_unsafe_set(b[1], pos, c);
    b[2] = pos + 1 | 0;
    return 0;
   }
   function add_substring(b, s, offset, len){
    var _ym_ = offset < 0 ? 1 : 0;
    if(_ym_)
     var _yn_ = _ym_;
    else
     var
      _yo_ = len < 0 ? 1 : 0,
      _yn_ = _yo_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_yn_) invalid_arg(_ad_);
    var new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, offset, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_string(b, s){
    var len = caml_ml_string_length(s), new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, 0, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var len = caml_ml_bytes_length(buf[2]), min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len = max$0(len * 2 | 0, min_len),
      new_str = caml_create_bytes(new_len);
     blit(buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
    return;
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    blit_string(s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return;
   }
   function buffer_contents(buf){return sub_string(buf[2], 0, buf[1]);}
   function char_of_fconv(opt, fconv){
    if(opt) var sth = opt[1], cF = sth; else var cF = 70;
    switch(fconv[2]){
      case 0:
       return 102;
      case 1:
       return 101;
      case 2:
       return 69;
      case 3:
       return 103;
      case 4:
       return 71;
      case 5:
       return cF;
      case 6:
       return 104;
      case 7:
       return 72;
      default: return 70;
    }
   }
   function bprint_fconv_flag(buf, fconv){
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) return buffer_add_char(buf, 35);
    return;
   }
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return _ae_;
       case 1:
        return _af_;
       case 2:
        return _ag_;
       case 3:
        return _ah_;
       case 4:
        return _ai_;
       case 5:
        return _aj_;
       default: return _ak_;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default:
       var c = formatting_lit[1]; return symbol_concat(_al_, make$1(1, c));
    }
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, _am_);
        fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, _an_);
        fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, _ao_);
        fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, _ap_);
        fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, _aq_);
        fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, _ar_);
        fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, _as_);
        fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, _at_);
        fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, _au_);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, _av_);
        fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, _aw_);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, _ax_);
        fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, _ay_);
        fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, _az_);
        fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, _aA_);
        fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, _aB_);
        fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, _aC_);
        fmtty$0 = fmtty$15;
     }
    }
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param === "number")
     return [0,
             function(param){return;},
             function(param){return;},
             function(param){return;},
             function(param){return;}];
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match = fmtty_rel_det(rest),
        de = match[4],
        ed = match[3],
        af = match[2],
        fa = match[1];
       return [0,
               function(param){fa(0); return;},
               function(param){af(0); return;},
               ed,
               de];
      case 1:
       var
        rest$0 = param[1],
        match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        ed$0 = match$0[3],
        af$0 = match$0[2],
        fa$0 = match$0[1];
       return [0,
               function(param){fa$0(0); return;},
               function(param){af$0(0); return;},
               ed$0,
               de$0];
      case 2:
       var
        rest$1 = param[1],
        match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        ed$1 = match$1[3],
        af$1 = match$1[2],
        fa$1 = match$1[1];
       return [0,
               function(param){fa$1(0); return;},
               function(param){af$1(0); return;},
               ed$1,
               de$1];
      case 3:
       var
        rest$2 = param[1],
        match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        ed$2 = match$2[3],
        af$2 = match$2[2],
        fa$2 = match$2[1];
       return [0,
               function(param){fa$2(0); return;},
               function(param){af$2(0); return;},
               ed$2,
               de$2];
      case 4:
       var
        rest$3 = param[1],
        match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        ed$3 = match$3[3],
        af$3 = match$3[2],
        fa$3 = match$3[1];
       return [0,
               function(param){fa$3(0); return;},
               function(param){af$3(0); return;},
               ed$3,
               de$3];
      case 5:
       var
        rest$4 = param[1],
        match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        ed$4 = match$4[3],
        af$4 = match$4[2],
        fa$4 = match$4[1];
       return [0,
               function(param){fa$4(0); return;},
               function(param){af$4(0); return;},
               ed$4,
               de$4];
      case 6:
       var
        rest$5 = param[1],
        match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        ed$5 = match$5[3],
        af$5 = match$5[2],
        fa$5 = match$5[1];
       return [0,
               function(param){fa$5(0); return;},
               function(param){af$5(0); return;},
               ed$5,
               de$5];
      case 7:
       var
        rest$6 = param[1],
        match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        ed$6 = match$6[3],
        af$6 = match$6[2],
        fa$6 = match$6[1];
       return [0,
               function(param){fa$6(0); return;},
               function(param){af$6(0); return;},
               ed$6,
               de$6];
      case 8:
       var
        rest$7 = param[2],
        match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        ed$7 = match$7[3],
        af$7 = match$7[2],
        fa$7 = match$7[1];
       return [0,
               function(param){fa$7(0); return;},
               function(param){af$7(0); return;},
               ed$7,
               de$7];
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        ed$8 = match$8[3],
        af$8 = match$8[2],
        fa$8 = match$8[1],
        ty = trans(symm(ty1), ty2),
        match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        dj = match$9[3],
        ga = match$9[2],
        ag = match$9[1];
       return [0,
               function(param){fa$8(0); ag(0); return;},
               function(param){ga(0); af$8(0); return;},
               function(param){ed$8(0); dj(0); return;},
               function(param){jd(0); de$8(0); return;}];
      case 10:
       var
        rest$9 = param[1],
        match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        ed$9 = match$10[3],
        af$9 = match$10[2],
        fa$9 = match$10[1];
       return [0,
               function(param){fa$9(0); return;},
               function(param){af$9(0); return;},
               ed$9,
               de$9];
      case 11:
       var
        rest$10 = param[1],
        match$11 = fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        ed$10 = match$11[3],
        af$10 = match$11[2],
        fa$10 = match$11[1];
       return [0,
               function(param){fa$10(0); return;},
               function(param){af$10(0); return;},
               ed$10,
               de$10];
      case 12:
       var
        rest$11 = param[1],
        match$12 = fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        ed$11 = match$12[3],
        af$11 = match$12[2],
        fa$11 = match$12[1];
       return [0,
               function(param){fa$11(0); return;},
               function(param){af$11(0); return;},
               ed$11,
               de$11];
      case 13:
       var
        rest$12 = param[1],
        match$13 = fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        ed$12 = match$13[3],
        af$12 = match$13[2],
        fa$12 = match$13[1];
       return [0,
               function(param){fa$12(0); return;},
               function(param){af$12(0); return;},
               function(param){ed$12(0); return;},
               function(param){de$12(0); return;}];
      default:
       var
        rest$13 = param[1],
        match$14 = fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        ed$13 = match$14[3],
        af$13 = match$14[2],
        fa$13 = match$14[1];
       return [0,
               function(param){fa$13(0); return;},
               function(param){af$13(0); return;},
               function(param){ed$13(0); return;},
               function(param){de$13(0); return;}];
    }
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _yl_ = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), _yl_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aM_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aN_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aO_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aP_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aQ_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aR_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aS_], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aL_], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, _aD_], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aF_], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _aE_], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _aK_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aJ_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _aI_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _aH_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _aG_], 1);
   }
   var Type_mismatch = [248, _aT_, caml_fresh_oo_id(0)];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_format(fmt, fmtty){
    var _yk_ = type_format_gen(fmt, fmtty);
    if(typeof _yk_[2] !== "number")
     throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    var fmt$0 = _yk_[1];
    return fmt$0;
   }
   function type_format_gen(fmt, fmtty){
    if(typeof fmt === "number") return [0, 0, fmtty];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty$0 = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$1 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$1];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$2 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$3 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$4 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$5 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$6 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$7 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$8 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$9 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$9];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty),
        fmtty$10 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$10];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty),
        fmtty$11 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$11];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty),
        fmtty$12 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$12];
      case 13:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[2],
         sub_fmtty = fmtty[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$13 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$13];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[3],
         sub_fmtty1 = fmtty[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _yj_ = [0, erase_rel(sub_fmtty1)];
        if(caml_notequal([0, erase_rel(sub_fmtty$1)], _yj_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 = type_format_gen(fmt_rest$13, erase_rel(fmtty_rest$10)),
         fmtty$14 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$14];
       }
       break;
      case 15:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$15 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$15];
       }
       break;
      case 16:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$16 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$16];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty),
        fmtty$17 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$17];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       return type_formatting_gen(formatting_gen, fmt_rest$17, fmtty);
      case 19:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$13 = fmtty[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$18 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$18];
       }
       break;
      case 20:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$14 = fmtty[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$19 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$19];
       }
       break;
      case 21:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$15 = fmtty[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$20 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$20];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       return type_ignored_param(ign, rest, fmtty);
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_formatting_gen(formatting_gen, fmt0, fmtty0){
    if(0 === formatting_gen[0]){
     var
      match = formatting_gen[1],
      str = match[2],
      fmt1 = match[1],
      match$0 = type_format_gen(fmt1, fmtty0),
      fmtty2 = match$0[2],
      fmt2 = match$0[1],
      match$1 = type_format_gen(fmt0, fmtty2),
      fmtty3 = match$1[2],
      fmt3 = match$1[1];
     return [0, [18, [0, [0, fmt2, str]], fmt3], fmtty3];
    }
    var
     match$2 = formatting_gen[1],
     str$0 = match$2[2],
     fmt1$0 = match$2[1],
     match$3 = type_format_gen(fmt1$0, fmtty0),
     fmtty2$0 = match$3[2],
     fmt2$0 = match$3[1],
     match$4 = type_format_gen(fmt0, fmtty2$0),
     fmtty3$0 = match$4[2],
     fmt3$0 = match$4[1];
    return [0, [18, [1, [0, fmt2$0, str$0]], fmt3$0], fmtty3$0];
   }
   function type_ignored_param(ign, fmt, fmtty){
    if(typeof ign !== "number")
     switch(ign[0]){
       case 0:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 1:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 2:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 3:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 4:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 5:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 6:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 7:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 8:
        var sub_fmtty = ign[2], pad_opt = ign[1];
        return type_ignored_param_one([8, pad_opt, sub_fmtty], fmt, fmtty);
       case 9:
        var
         sub_fmtty$0 = ign[2],
         pad_opt$0 = ign[1],
         _yi_ = type_ignored_format_substituti(sub_fmtty$0, fmt, fmtty),
         match$0 = _yi_[2],
         fmtty$1 = match$0[2],
         fmt$1 = match$0[1],
         sub_fmtty$1 = _yi_[1];
        return [0, [23, [9, pad_opt$0, sub_fmtty$1], fmt$1], fmtty$1];
       case 10:
        return type_ignored_param_one(ign, fmt, fmtty);
       default: return type_ignored_param_one(ign, fmt, fmtty);
     }
    switch(ign){
      case 0:
       return type_ignored_param_one(ign, fmt, fmtty);
      case 1:
       return type_ignored_param_one(ign, fmt, fmtty);
      case 2:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         match = type_format_gen(fmt, fmtty_rest),
         fmtty$0 = match[2],
         fmt$0 = match[1];
        return [0, [23, 2, fmt$0], fmtty$0];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      default: return type_ignored_param_one(ign, fmt, fmtty);
    }
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _yg_ = [0, erase_rel(sub1_fmtty)];
        if(caml_notequal([0, erase_rel(sub1_fmtty$0)], _yg_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _yh_ = [0, erase_rel(sub2_fmtty$1)];
        if(caml_notequal([0, erase_rel(sub2_fmtty$2)], _yh_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (erase_rel(sub_fmtty_rest$17), fmt, fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function recast(fmt, fmtty){
    return type_format(fmt, erase_rel(symm(fmtty)));
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = abs(width);
    if(width$0 <= len) return str;
    var _yf_ = 2 === padty$0 ? 48 : 32, res = make$0(width$0, _yf_);
    switch(padty$0){
      case 0:
       blit_string(str, 0, res, 0, len); break;
      case 1:
       blit_string(str, 0, res, width$0 - len | 0, len); break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        blit_string(str, 1, res, (width$0 - len | 0) + 1 | 0, len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        blit_string(str, 2, res, (width$0 - len | 0) + 2 | 0, len - 2 | 0);
        break;
       }
       blit_string(str, 0, res, width$0 - len | 0, len);
    }
    return unsafe_to_string(res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = abs(prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
            if
             (120 !== caml_string_get(str, 1)
              && 88 !== caml_string_get(str, 1))
             break c;
            var res$1 = make$0(prec$0 + 2 | 0, 48);
            caml_bytes_set(res$1, 1, caml_string_get(str, 1));
            blit_string
             (str, 2, res$1, (prec$0 - len | 0) + 4 | 0, len - 2 | 0);
            return unsafe_to_string(res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = make$0(prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       blit_string(str, 1, res$0, (prec$0 - len | 0) + 2 | 0, len - 1 | 0);
       return unsafe_to_string(res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = make$0(prec$0, 48);
      blit_string(str, 0, res, prec$0 - len | 0, len);
      return unsafe_to_string(res);
     }
    }
    return str;
   }
   function string_to_caml_string(str){
    var
     str$0 = escaped$1(str),
     l = caml_ml_string_length(str$0),
     res = make$0(l + 2 | 0, 34);
    caml_blit_string(str$0, 0, res, 1, l);
    return unsafe_to_string(res);
   }
   function format_of_iconv(param){
    switch(param){
      case 1:
       return _aV_;
      case 2:
       return _aW_;
      case 4:
       return _aY_;
      case 5:
       return _aZ_;
      case 6:
       return _a0_;
      case 7:
       return _a1_;
      case 8:
       return _a2_;
      case 9:
       return _a3_;
      case 10:
       return _a4_;
      case 11:
       return _a5_;
      case 0:
      case 13:
       return _aU_;
      case 3:
      case 14:
       return _aX_;
      default: return _a6_;
    }
   }
   function format_of_iconvL(param){
    switch(param){
      case 1:
       return _a8_;
      case 2:
       return _a9_;
      case 4:
       return _a$_;
      case 5:
       return _ba_;
      case 6:
       return _bb_;
      case 7:
       return _bc_;
      case 8:
       return _bd_;
      case 9:
       return _be_;
      case 10:
       return _bf_;
      case 11:
       return _bg_;
      case 0:
      case 13:
       return _a7_;
      case 3:
      case 14:
       return _a__;
      default: return _bh_;
    }
   }
   function format_of_iconvl(param){
    switch(param){
      case 1:
       return _bj_;
      case 2:
       return _bk_;
      case 4:
       return _bm_;
      case 5:
       return _bn_;
      case 6:
       return _bo_;
      case 7:
       return _bp_;
      case 8:
       return _bq_;
      case 9:
       return _br_;
      case 10:
       return _bs_;
      case 11:
       return _bt_;
      case 0:
      case 13:
       return _bi_;
      case 3:
      case 14:
       return _bl_;
      default: return _bu_;
    }
   }
   function format_of_iconvn(param){
    switch(param){
      case 1:
       return _bw_;
      case 2:
       return _bx_;
      case 4:
       return _bz_;
      case 5:
       return _bA_;
      case 6:
       return _bB_;
      case 7:
       return _bC_;
      case 8:
       return _bD_;
      case 9:
       return _bE_;
      case 10:
       return _bF_;
      case 11:
       return _bG_;
      case 0:
      case 13:
       return _bv_;
      case 3:
      case 14:
       return _by_;
      default: return _bH_;
    }
   }
   function format_of_fconv(fconv, prec){
    var
     prec$0 = abs(prec),
     symb = char_of_fconv(_bI_, fconv),
     buf = buffer_create(16);
    buffer_add_char(buf, 37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, to_string(prec$0));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _ya_ = caml_ml_string_length(s) - 1 | 0, _x$_ = 0;
    if(_ya_ >= 0){
     var i$0 = _x$_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _ye_ = i$0 + 1 | 0;
      if(_ya_ === i$0) break;
      i$0 = _ye_;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++; return;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _yc_ = caml_ml_string_length(s) - 1 | 0,
     _yb_ = 0;
    if(_yc_ >= 0){
     var i = _yb_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1]--; put(c);}
      var _yd_ = i + 1 | 0;
      if(_yc_ === i) break;
      i = _yd_;
     }
    }
    return unsafe_to_string(buf);
   }
   function convert_int(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconv(iconv), n));
   }
   function convert_int32(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconvl(iconv), n));
   }
   function convert_nativeint(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconvn(iconv), n));
   }
   function convert_int64(iconv, n){
    return transform_int_alt
            (iconv, caml_int64_format(format_of_iconvL(iconv), n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return caml_hexstring_of_float(x, prec, sign);
    }
    function add_dot_if_needed(str){
     var len = caml_ml_string_length(str);
     function is_valid(i){
      var i$0 = i;
      for(;;){
       if(i$0 === len) return 0;
       var _x__ = caml_string_get(str, i$0) - 46 | 0;
       a:
       {
        if(23 < _x__ >>> 0){
         if(55 === _x__) break a;
        }
        else if(21 < _x__ - 1 >>> 0) break a;
        var i$1 = i$0 + 1 | 0;
        i$0 = i$1;
        continue;
       }
       return 1;
      }
     }
     return is_valid(0) ? str : symbol_concat(str, _bJ_);
    }
    function caml_special_val(str){
     var match = caml_classify_float(x);
     return 3 === match ? x < 0. ? _bK_ : _bL_ : 4 <= match ? _bM_ : str;
    }
    switch(fconv[2]){
      case 5:
       var str = caml_format_float(format_of_fconv(fconv, prec), x);
       return caml_special_val(add_dot_if_needed(str));
      case 6:
       return hex(0);
      case 7:
       return uppercase_ascii$1(hex(0));
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function format_caml_char(c){
    var
     str = escaped(c),
     l = caml_ml_string_length(str),
     res = make$0(l + 2 | 0, 39);
    caml_blit_string(str, 0, res, 1, l);
    return unsafe_to_string(res);
   }
   function string_of_fmtty(fmtty){
    var buf = buffer_create(16);
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var new_acc = [4, acc$0, format_caml_char(c)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        return make_float_padding_precision
                (k$0, acc$0, rest$7, pad$5, prec$3, fconv);
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, string_of_bool);
       case 10:
        var rest$9 = fmt$0[1], acc$1 = [7, acc$0];
        acc$0 = acc$1;
        fmt$0 = rest$9;
        break;
       case 11:
        var rest$10 = fmt$0[2], str = fmt$0[1], acc$2 = [2, acc$0, str];
        acc$0 = acc$2;
        fmt$0 = rest$10;
        break;
       case 12:
        var rest$11 = fmt$0[2], chr = fmt$0[1], acc$3 = [3, acc$0, chr];
        acc$0 = acc$3;
        fmt$0 = rest$11;
        break;
       case 13:
        var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
         ty = string_of_fmtty(sub_fmtty);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1];
         return make_printf
                 (k$0, acc$0, concat_fmt(recast(fmt, fmtty), rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit];
        acc$0 = acc$4;
        fmt$0 = rest$16;
        break;
       case 18:
        var _x8_ = fmt$0[1];
        if(0 === _x8_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _x8_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){return make_printf(k, [1, acc, [0, kacc]], rest);};
         k$0 = k$1;
         acc$0 = 0;
         fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _x8_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){return make_printf(k, [1, acc, [1, kacc]], rest);};
         k$0 = k$2;
         acc$0 = 0;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bN_], 1);
       case 20:
        var rest$19 = fmt$0[3], new_acc = [8, acc$0, _bO_];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (make_ignored_param, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
        return make_ignored_param(counter$1, k$0, acc$0, ign, rest$22);
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _x9_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _x9_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _x9_);
     }
    }
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param(counter, k, acc, ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
        return make_invalid_arg(counter$0, k, acc, fmt);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
        return make_invalid_arg(counter$1, k, acc, fmt);
       case 2:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bP_], 1);
       default:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
        return make_invalid_arg(counter$2, k, acc, fmt);
     }
    switch(ign[0]){
      case 0:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
       return make_invalid_arg(counter$3, k, acc, fmt);
      case 1:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
       return make_invalid_arg(counter$4, k, acc, fmt);
      case 2:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
       return make_invalid_arg(counter$5, k, acc, fmt);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
       return make_invalid_arg(counter$6, k, acc, fmt);
      case 4:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
       return make_invalid_arg(counter$7, k, acc, fmt);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
       return make_invalid_arg(counter$8, k, acc, fmt);
      case 6:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
       return make_invalid_arg(counter$9, k, acc, fmt);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
       return make_invalid_arg(counter$10, k, acc, fmt);
      case 8:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
       return make_invalid_arg(counter$11, k, acc, fmt);
      case 9:
       var fmtty = ign[2];
       if(counter >= 50)
        return caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
       return make_from_fmtty$0(counter$14, k, acc, fmtty, fmt);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
       return make_invalid_arg(counter$12, k, acc, fmt);
      default:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
       return make_invalid_arg(counter$13, k, acc, fmt);
    }
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty(k, acc, concat_fmtty(ty, rest$8), fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _x7_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bQ_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bR_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _x6_ = [8, acc, _bS_];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _x6_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _x6_, fmt);
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_float_padding_precision(k, acc, fmt, pad, prec, fconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = convert_float(fconv, p, x);
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var
                 str = convert_float(fconv, default_float_precision(fconv), x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = convert_float(fconv, p, x);
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_padding(padty, w, convert_float(fconv, p, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var
                 str = convert_float(fconv, default_float_precision(fconv), x),
                 str$0 = fix_padding(padty, w, str);
                return make_printf(k, [4, acc, str$0], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var str = fix_padding(padty$0, w, convert_float(fconv, p, x));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var
                str = convert_float(fconv, default_float_precision(fconv), x),
                str$0 = fix_padding(padty$0, w, str);
               return make_printf(k, [4, acc, str$0], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _x5_ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _x5_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _x5_, rest);
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return output_string(o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         output_string(o, _bT_);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         output_acc(o, p$0);
         output_string(o, _bU_);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1]; output_acc(o, p$4); return _k_(o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return output_string(o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return _j_(o, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return add_string(b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         strput_acc(b, p$0);
         add_string(b, _bV_);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         strput_acc(b, p$0);
         add_string(b, _bW_);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        return add_string(b, caml_call1(f, 0));
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return add_string(b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        return add_char(b, c);
     }
    }
   }
   function failwith_message(param){
    var fmt = param[1], buf = create$1(256);
    function k(acc){strput_acc(buf, acc); return failwith(contents(buf));}
    return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
    if(str == cst$1) return _bX_;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
     return caml_call1(failwith_message(_bY_), str);
    }
    function parse_spaces(i){
     var i$0 = i;
     for(;;){
      if(i$0 === len) return i$0;
      var match = caml_string_get(str, i$0);
      if(9 !== match && 32 !== match) return i$0;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    function parse_lword(i, j){
     var j$0 = j;
     for(;;){
      if(j$0 === len) return j$0;
      if(25 < caml_string_get(str, j$0) - 97 >>> 0) return j$0;
      var j$1 = j$0 + 1 | 0;
      j$0 = j$1;
     }
    }
    function parse_int(i, j){
     var j$0 = j;
     for(;;){
      if(j$0 === len) return j$0;
      var match = caml_string_get(str, j$0);
      a:
      {
       if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
       return j$0;
      }
      var j$1 = j$0 + 1 | 0;
      j$0 = j$1;
     }
    }
    var
     wstart = parse_spaces(0),
     wend = parse_lword(wstart, wstart),
     box_name = sub$0(str, wstart, wend - wstart | 0),
     nstart = parse_spaces(wend),
     nend = parse_int(nstart, nstart);
    if(nstart === nend)
     var indent = 0;
    else
     try{
      var
       _x3_ = caml_int_of_string(sub$0(str, nstart, nend - nstart | 0)),
       indent = _x3_;
     }
     catch(_x4_){
      var _x1_ = caml_wrap_exception(_x4_);
      if(_x1_[1] !== Failure) throw caml_maybe_attach_backtrace(_x1_, 0);
      var _x2_ = invalid_box(0), indent = _x2_;
     }
    var exp_end = parse_spaces(nend);
    if(exp_end !== len) invalid_box(0);
    a:
    {
     if(box_name !== cst$1 && box_name !== "b"){
      if(box_name === "h"){var box_type = 0; break a;}
      if(box_name === "hov"){var box_type = 3; break a;}
      if(box_name === "hv"){var box_type = 2; break a;}
      if(box_name !== "v"){var box_type = invalid_box(0); break a;}
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
    return [0, indent, box_type];
   }
   function kfprintf(k, o, param){
    var fmt = param[1];
    return make_printf
            (function(acc){output_acc(o, acc); return caml_call1(k, o);},
             0,
             fmt);
   }
   function fprintf(oc, fmt){
    return kfprintf(function(_x0_){return 0;}, oc, fmt);
   }
   function eprintf(fmt){return fprintf(stderr, fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = create$1(64);
     strput_acc(buf, acc);
     return caml_call1(k, contents(buf));
    }
    return make_printf(k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var printers = make(0);
   function field(x, i){
    var f = x[1 + i];
    return is_block(f)
            ? caml_obj_tag
               (f)
              === 252
              ? caml_call1(sprintf(_bZ_), f)
              : caml_obj_tag(f) === 253 ? string_of_float(f) : _b0_
            : caml_call1(sprintf(_b1_), f);
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return _b2_;
    var _xY_ = other_fields(x, i + 1 | 0), _xZ_ = field(x, i);
    return caml_call2(sprintf(_b3_), _xZ_, _xY_);
   }
   function fields(x){
    var match = x.length - 1;
    if(2 >= match >>> 0)
     switch(match){
       case 0:
        return _b5_;
       case 1:
        return _b6_;
       default:
        var _xX_ = field(x, 1); return caml_call1(sprintf(_b7_), _xX_);
     }
    var _xV_ = other_fields(x, 2), _xW_ = field(x, 1);
    return caml_call2(sprintf(_b4_), _xW_, _xV_);
   }
   function use_printers(x){
    function conv(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var tl = param$0[2], hd = param$0[1];
      a:
      {
       try{var val = caml_call1(hd, x);}catch(_xU_){break a;}
       if(val){var s = val[1]; return [0, s];}
      }
      param$0 = tl;
     }
    }
    return conv(get(printers));
   }
   function to_string_default(x){
    if(x === Out_of_memory) return _b8_;
    if(x === Stack_overflow) return _b9_;
    if(x[1] === Match_failure){
     var match = x[2], char$0 = match[3], line = match[2], file = match[1];
     return caml_call5
             (sprintf(locfmt), file, line, char$0, char$0 + 5 | 0, _b__);
    }
    if(x[1] === Assert_failure){
     var
      match$0 = x[2],
      char$1 = match$0[3],
      line$0 = match$0[2],
      file$0 = match$0[1];
     return caml_call5
             (sprintf(locfmt), file$0, line$0, char$1, char$1 + 6 | 0, _b$_);
    }
    if(x[1] === Undefined_recursive_module){
     var
      match$1 = x[2],
      char$2 = match$1[3],
      line$1 = match$1[2],
      file$1 = match$1[1];
     return caml_call5
             (sprintf(locfmt), file$1, line$1, char$2, char$2 + 6 | 0, _ca_);
    }
    if(0 !== caml_obj_tag(x)) return x[1];
    var constructor = x[1][1];
    return symbol_concat(constructor, fields(x));
   }
   function to_string$0(e){
    var match = use_printers(e);
    if(! match) return to_string_default(e);
    var s = match[1];
    return s;
   }
   function convert_raw_backtrace(bt){
    var _xT_ = [0, caml_convert_raw_backtrace(bt)];
    return _xT_;
   }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
     return is_raise ? 0 === pos ? _cb_ : _cc_ : 0 === pos ? _cd_ : _ce_;
    }
    if(0 === slot[0]){
     var
      _xL_ = slot[5],
      _xM_ = slot[4],
      _xN_ = slot[3],
      _xO_ = slot[6] ? _cf_ : _ch_,
      _xP_ = slot[2],
      _xQ_ = slot[7],
      _xR_ = info(slot[1]);
     return [0,
             caml_call7
              (sprintf(_cg_), _xR_, _xQ_, _xP_, _xO_, _xN_, _xM_, _xL_)];
    }
    if(slot[1]) return 0;
    var _xS_ = info(0);
    return [0, caml_call1(sprintf(_ci_), _xS_)];
   }
   function print_exception_backtrace(outchan, backtrace){
    if(! backtrace) return fprintf(outchan, _ck_);
    var a = backtrace[1], _xJ_ = a.length - 2 | 0, _xI_ = 0;
    if(_xJ_ >= 0){
     var i = _xI_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){var str = match[1]; caml_call1(fprintf(outchan, _cj_), str);}
      var _xK_ = i + 1 | 0;
      if(_xJ_ === i) break;
      i = _xK_;
     }
    }
    return 0;
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    return print_exception_backtrace
            (outchan, convert_raw_backtrace(raw_backtrace));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = get(printers),
      new_printers = [0, fn, old_printers],
      success = compare_and_set(printers, old_printers, new_printers),
      _xH_ = 1 - success;
     if(! _xH_) return _xH_;
    }
   }
   var errors = _cl_.slice();
   function default_uncaught_exception_han(exn, raw_backtrace){
    var _xF_ = to_string$0(exn);
    caml_call1(eprintf(_cm_), _xF_);
    print_raw_backtrace(stderr, raw_backtrace);
    var status = caml_ml_debug_info_status(0);
    if(status < 0){
     var _xG_ = abs(status);
     prerr_endline(caml_check_bound(errors, _xG_)[1 + _xG_]);
    }
    return _k_(stderr);
   }
   var empty_backtrace = [0];
   function try_get_raw_backtrace(param){
    var _xE_ = caml_get_exception_raw_backtrace(0);
    return _xE_;
   }
   function handle_uncaught_exception(exn, debugger_in_use){
    try{
     var
      raw_backtrace =
        debugger_in_use ? empty_backtrace : try_get_raw_backtrace(0);
     try{do_at_exit(0);}catch(_xD_){}
     try{
      var
       _xB_ = default_uncaught_exception_han(exn, raw_backtrace),
       _xA_ = _xB_;
     }
     catch(exn$1){
      var
       exn$0 = caml_wrap_exception(exn$1),
       raw_backtrace$0 = try_get_raw_backtrace(0),
       _xy_ = to_string$0(exn);
      caml_call1(eprintf(_co_), _xy_);
      print_raw_backtrace(stderr, raw_backtrace);
      var _xz_ = to_string$0(exn$0);
      caml_call1(eprintf(_cp_), _xz_);
      print_raw_backtrace(stderr, raw_backtrace$0);
      var _xA_ = _k_(stderr);
     }
     return _xA_;
    }
    catch(_xC_){
     var _xx_ = caml_wrap_exception(_xC_);
     if(_xx_ === Out_of_memory) return prerr_endline(_cn_);
     throw caml_maybe_attach_backtrace(_xx_, 0);
    }
   }
   function handle_uncaught_exception$0(exn, debugger_in_use){
    try{
     var _xv_ = handle_uncaught_exception(exn, debugger_in_use);
     return _xv_;
    }
    catch(_xw_){return 0;}
   }
   caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception$0);
   function _cq_(_xu_){return caml_get_exception_raw_backtrace(_xu_);}
   var Finally_raised = [248, _cr_, caml_fresh_oo_id(0)];
   register_printer
    (function(param){
      if(param[1] !== Finally_raised) return 0;
      var exn = param[2];
      return [0, symbol_concat(_cs_, to_string$0(exn))];
     });
   function string(str){
    return caml_md5_string(str, 0, caml_ml_string_length(str));
   }
   function new_state(param){return [0, caml_make_vect(55, 0), 0];}
   function assign(st1, st2){
    blit$0(st2[1], 0, st1[1], 0, 55);
    st1[2] = st2[2];
    return;
   }
   function full_init(s, seed){
    function combine(accu, x){
     return string(symbol_concat(accu, to_string(x)));
    }
    function extract(d){
     var
      _xr_ = caml_string_get(d, 3) << 24,
      _xs_ = caml_string_get(d, 2) << 16,
      _xt_ = caml_string_get(d, 1) << 8;
     return ((caml_string_get(d, 0) + _xt_ | 0) + _xs_ | 0) + _xr_ | 0;
    }
    var
     seed$0 = 0 === seed.length - 1 ? [0, 0] : seed,
     l = seed$0.length - 1,
     i$0 = 0;
    for(;;){
     caml_check_bound(s[1], i$0)[1 + i$0] = i$0;
     var _xq_ = i$0 + 1 | 0;
     if(54 === i$0) break;
     i$0 = _xq_;
    }
    var accu = [0, _ct_], _xl_ = 54 + max$0(55, l) | 0, _xk_ = 0;
    if(_xl_ >= 0){
     var i = _xk_;
     for(;;){
      var
       j = i % 55 | 0,
       k = caml_mod(i, l),
       _xm_ = caml_check_bound(seed$0, k)[1 + k];
      accu[1] = combine(accu[1], _xm_);
      var
       _xn_ = extract(accu[1]),
       _xo_ = (caml_check_bound(s[1], j)[1 + j] ^ _xn_) & 1073741823;
      caml_check_bound(s[1], j)[1 + j] = _xo_;
      var _xp_ = i + 1 | 0;
      if(_xl_ === i) break;
      i = _xp_;
     }
    }
    s[2] = 0;
    return;
   }
   function make$2(seed){
    var result = new_state(0);
    full_init(result, seed);
    return result;
   }
   function make_self_init(param){return make$2(caml_sys_random_seed(0));}
   function copy$0(s){
    var result = new_state(0);
    assign(result, s);
    return result;
   }
   function bits(s){
    s[2] = (s[2] + 1 | 0) % 55 | 0;
    var
     _xh_ = s[2],
     curval = caml_check_bound(s[1], _xh_)[1 + _xh_],
     _xi_ = (s[2] + 24 | 0) % 55 | 0,
     newval =
       caml_check_bound(s[1], _xi_)[1 + _xi_]
       + (curval ^ (curval >>> 25 | 0) & 31)
       | 0,
     newval30 = newval & 1073741823,
     _xj_ = s[2];
    caml_check_bound(s[1], _xj_)[1 + _xj_] = newval30;
    return newval30;
   }
   function intaux(s, n){
    for(;;){
     var r = bits(s), v = caml_mod(r, n);
     if(((1073741823 - n | 0) + 1 | 0) >= (r - v | 0)) return v;
    }
   }
   function int$0(s, bound){
    if(1073741823 >= bound && 0 < bound) return intaux(s, bound);
    return invalid_arg(_cu_);
   }
   var default$0 = [0, _cv_.slice(), 0];
   function int$1(bound){return int$0(default$0, bound);}
   function get_state(param){return copy$0(default$0);}
   function ongoing_traversal(h){
    var _xf_ = h.length - 1 < 4 ? 1 : 0, _xg_ = _xf_ || (h[4] < 0 ? 1 : 0);
    return _xg_;
   }
   try{var _lO_ = caml_sys_getenv("OCAMLRUNPARAM"), params = _lO_;}
   catch(_xd_){
    var _cw_ = caml_wrap_exception(_xd_);
    if(_cw_ !== Not_found) throw caml_maybe_attach_backtrace(_cw_, 0);
    try{var _lN_ = caml_sys_getenv("CAMLRUNPARAM"), _cz_ = _lN_;}
    catch(_xe_){
     var _cx_ = caml_wrap_exception(_xe_);
     if(_cx_ !== Not_found) throw caml_maybe_attach_backtrace(_cx_, 0);
     var _cz_ = _cy_;
    }
    var params = _cz_;
   }
   var
    randomized_default = contains(params, 82),
    prng = [246, function(_xc_){return make_self_init(0);}];
   function power_2_above(x, n){
    var x$0 = x;
    for(;;){
     if(n <= x$0) return x$0;
     if(max_array_length < (x$0 * 2 | 0)) return x$0;
     var x$1 = x$0 * 2 | 0;
     x$0 = x$1;
    }
   }
   function create$2(opt, initial_size){
    if(opt)
     var sth = opt[1], random = sth;
    else
     var random = randomized_default;
    var s = power_2_above(16, initial_size);
    if(random)
     var
      _xa_ = caml_obj_tag(prng),
      _xb_ =
        250 === _xa_ ? prng[1] : 246 === _xa_ ? force_lazy_block(prng) : prng,
      seed = bits(_xb_);
    else
     var seed = 0;
    return [0, 0, caml_make_vect(s, 0), seed, s];
   }
   function insert_all_buckets(indexfun, inplace, odata, ndata){
    var nsize = ndata.length - 1, ndata_tail = caml_make_vect(nsize, 0);
    function insert_bucket(cell){
     var cell$0 = cell;
     for(;;){
      if(! cell$0) return;
      var
       key = cell$0[1],
       data = cell$0[2],
       next = cell$0[3],
       cell$1 = inplace ? cell$0 : [0, key, data, 0],
       nidx = caml_call1(indexfun, key),
       match = caml_check_bound(ndata_tail, nidx)[1 + nidx];
      if(match)
       match[3] = cell$1;
      else
       caml_check_bound(ndata, nidx)[1 + nidx] = cell$1;
      caml_check_bound(ndata_tail, nidx)[1 + nidx] = cell$1;
      cell$0 = next;
     }
    }
    var _w7_ = odata.length - 2 | 0, _w6_ = 0;
    if(_w7_ >= 0){
     var i$0 = _w6_;
     for(;;){
      insert_bucket(caml_check_bound(odata, i$0)[1 + i$0]);
      var _w$_ = i$0 + 1 | 0;
      if(_w7_ === i$0) break;
      i$0 = _w$_;
     }
    }
    if(inplace){
     var _w9_ = nsize - 1 | 0, _w8_ = 0;
     if(_w9_ >= 0){
      var i = _w8_;
      for(;;){
       var match = caml_check_bound(ndata_tail, i)[1 + i];
       if(match) match[3] = 0;
       var _w__ = i + 1 | 0;
       if(_w9_ === i) break;
       i = _w__;
      }
     }
    }
    return;
   }
   function resize$0(indexfun, h){
    var
     odata = h[2],
     osize = odata.length - 1,
     nsize = osize * 2 | 0,
     _w5_ = nsize < max_array_length ? 1 : 0;
    if(! _w5_) return _w5_;
    var ndata = caml_make_vect(nsize, 0), inplace = 1 - ongoing_traversal(h);
    h[2] = ndata;
    return insert_all_buckets(caml_call1(indexfun, h), inplace, odata, ndata);
   }
   function key_index(h, key){
    return 4 <= h.length - 1
            ? caml_hash(10, 100, h[3], key) & (h[2].length - 2 | 0)
            : invalid_arg(_cA_);
   }
   function add$0(h, key, data){
    var
     i = key_index(h, key),
     bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
    caml_check_bound(h[2], i)[1 + i] = bucket;
    h[1] = h[1] + 1 | 0;
    var _w4_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
    return _w4_ ? resize$0(key_index, h) : _w4_;
   }
   function remove_bucket(h, i, key, prec, c){
    var prec$1 = prec, prec$0 = c;
    for(;;){
     if(! prec$0) return;
     var k = prec$0[1], next = prec$0[3];
     if(0 === caml_compare(k, key)){
      h[1] = h[1] - 1 | 0;
      if(prec$1){prec$1[3] = next; return;}
      caml_check_bound(h[2], i)[1 + i] = next;
      return;
     }
     prec$1 = prec$0;
     prec$0 = next;
    }
   }
   function remove(h, key){
    var i = key_index(h, key);
    return remove_bucket(h, i, key, 0, caml_check_bound(h[2], i)[1 + i]);
   }
   function find_rec(key, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     var k = param$0[1], data = param$0[2], next = param$0[3];
     if(0 === caml_compare(key, k)) return data;
     param$0 = next;
    }
   }
   function find(h, key){
    var
     _w3_ = key_index(h, key),
     match = caml_check_bound(h[2], _w3_)[1 + _w3_];
    if(! match) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return d1;
    if(! next1) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return d2;
    if(! next2) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    return 0 === caml_compare(key, k3) ? d3 : find_rec(key, next3);
   }
   function find_all$0(h, key){
    function find_in_bucket(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var k = param$0[1], data = param$0[2], next = param$0[3];
      if(0 === caml_compare(k, key)) return [0, data, find_in_bucket(next)];
      param$0 = next;
     }
    }
    var _w2_ = key_index(h, key);
    return find_in_bucket(caml_check_bound(h[2], _w2_)[1 + _w2_]);
   }
   function replace_bucket(key, data, param){
    var slot = param;
    for(;;){
     if(! slot) return 1;
     var k = slot[1], next = slot[3];
     if(0 === caml_compare(k, key)){slot[1] = key; slot[2] = data; return 0;}
     slot = next;
    }
   }
   function replace(h, key, data){
    var i = key_index(h, key), l = caml_check_bound(h[2], i)[1 + i];
    if(replace_bucket(key, data, l)){
     caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
     h[1] = h[1] + 1 | 0;
     if(h[2].length - 1 << 1 < h[1]) return resize$0(key_index, h);
    }
    return;
   }
   function mem(h, key){
    function mem_in_bucket(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var
       k = param$0[1],
       next = param$0[3],
       _w1_ = 0 === caml_compare(k, key) ? 1 : 0;
      if(_w1_) return _w1_;
      param$0 = next;
     }
    }
    var _w0_ = key_index(h, key);
    return mem_in_bucket(caml_check_bound(h[2], _w0_)[1 + _w0_]);
   }
   function id(x){return x;}
   var zero = 0, unknown = -1;
   function is_known(n){return 0 <= n ? 1 : 0;}
   var String_tag = [248, _cB_, caml_fresh_oo_id(0)];
   function pp_enqueue(state, token){
    state[13] = state[13] + token[3] | 0;
    return add(token, state[28]);
   }
   function pp_clear_queue(state){
    state[12] = 1;
    state[13] = 1;
    return clear$0(state[28]);
   }
   var pp_infinity = 1000000010;
   function pp_output_string(state, s){
    return caml_call3(state[17], s, 0, caml_ml_string_length(s));
   }
   function pp_output_newline(state){return caml_call1(state[19], 0);}
   function pp_output_spaces(state, n){return caml_call1(state[20], n);}
   function pp_output_indent(state, n){return caml_call1(state[21], n);}
   function format_pp_text(state, size, text){
    state[9] = state[9] - size | 0;
    pp_output_string(state, text);
    state[11] = 0;
    return;
   }
   function format_string(state, s){
    var _wZ_ = s !== cst$1 ? 1 : 0;
    return _wZ_ ? format_pp_text(state, caml_ml_string_length(s), s) : _wZ_;
   }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
    format_string(state, before);
    pp_output_newline(state);
    state[11] = 1;
    var
     indent = (state[6] - width | 0) + offset | 0,
     real_indent = min(state[8], indent);
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
    pp_output_indent(state, state[10]);
    return format_string(state, after);
   }
   function break_line(state, width){
    return break_new_line(state, _cC_, width);
   }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
    format_string(state, before);
    state[9] = state[9] - width | 0;
    pp_output_spaces(state, width);
    return format_string(state, after);
   }
   function pp_force_break_line(state){
    var match = top_opt(state[2]);
    if(! match) return pp_output_newline(state);
    var
     match$0 = match[1],
     width = match$0[2],
     box_type = match$0[1],
     _wY_ = state[9] < width ? 1 : 0;
    if(! _wY_) return _wY_;
    if(3 < box_type - 1 >>> 0) return;
    return break_line(state, width);
   }
   function pp_skip_token(state){
    var match = take_opt(state[28]);
    if(! match) return;
    var match$0 = match[1], size = match$0[1], length = match$0[3];
    state[12] = state[12] - length | 0;
    var _wX_ = id(size);
    state[9] = state[9] + _wX_ | 0;
    return;
   }
   function format_pp_token(state, size, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        var match = top_opt(state[3]);
        if(! match) return;
        var
         tabs = match[1][1],
         add_tab =
           function(n, ls){
            if(! ls) return [0, n, 0];
            var l = ls[2], x = ls[1];
            return caml_lessthan(n, x) ? [0, n, ls] : [0, x, add_tab(n, l)];
           };
        tabs[1] = add_tab(state[6] - state[9] | 0, tabs[1]);
        return;
       case 1:
        pop_opt(state[2]); return;
       case 2:
        pop_opt(state[3]); return;
       case 3:
        var match$0 = top_opt(state[2]);
        if(! match$0) return pp_output_newline(state);
        var width = match$0[1][2];
        return break_line(state, width);
       case 4:
        var _wW_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
        return _wW_ ? pp_skip_token(state) : _wW_;
       default:
        var match$1 = pop_opt(state[5]);
        if(! match$1) return;
        var tag_name = match$1[1], marker = caml_call1(state[25], tag_name);
        return pp_output_string(state, marker);
     }
    switch(param[0]){
      case 0:
       var s = param[1]; return format_pp_text(state, size, s);
      case 1:
       var
        breaks = param[2],
        fits = param[1],
        off = breaks[2],
        before = breaks[1],
        match$2 = top_opt(state[2]);
       if(! match$2) return;
       var match$3 = match$2[1], width$0 = match$3[2], box_type = match$3[1];
       switch(box_type){
         case 0:
          return break_same_line(state, fits);
         case 1:
          return break_new_line(state, breaks, width$0);
         case 2:
          return break_new_line(state, breaks, width$0);
         case 3:
          return state[9] < (size + caml_ml_string_length(before) | 0)
                  ? break_new_line(state, breaks, width$0)
                  : break_same_line(state, fits);
         case 4:
          return state[11]
                  ? break_same_line(state, fits)
                  : state
                     [9]
                    < (size + caml_ml_string_length(before) | 0)
                    ? break_new_line(state, breaks, width$0)
                    : ((state
                       [6]
                      - width$0
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ? break_new_line(state, breaks, width$0)
                      : break_same_line(state, fits);
         default: return break_same_line(state, fits);
       }
      case 2:
       var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
        match$4 = top_opt(state[3]);
       if(! match$4) return;
       var tabs$0 = match$4[1][1], match$5 = tabs$0[1];
       if(match$5)
        var
         first = match$5[1],
         find =
           function(param){
            var param$0 = param;
            for(;;){
             if(! param$0) return first;
             var tail = param$0[2], head = param$0[1];
             if(insertion_point <= head) return head;
             param$0 = tail;
            }
           },
         tab = find(tabs$0[1]);
       else
        var tab = insertion_point;
       var offset = tab - insertion_point | 0;
       return 0 <= offset
               ? break_same_line(state, [0, _cE_, offset + n | 0, _cD_])
               : break_new_line
                 (state, [0, _cG_, tab + off$0 | 0, _cF_], state[6]);
      case 3:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0) pp_force_break_line(state);
       var
        width$1 = state[9] - off$1 | 0,
        box_type$0 = 1 === ty ? 1 : state[9] < size ? ty : 5;
       return push([0, box_type$0, width$1], state[2]);
      case 4:
       var tbox = param[1]; return push(tbox, state[3]);
      default:
       var
        tag_name$0 = param[1],
        marker$0 = caml_call1(state[24], tag_name$0);
       pp_output_string(state, marker$0);
       return push(tag_name$0, state[5]);
    }
   }
   function advance_left(state){
    for(;;){
     var match = peek_opt(state[28]);
     if(! match) return 0;
     var
      match$0 = match[1],
      size = match$0[1],
      length = match$0[3],
      token = match$0[2],
      pending_count = state[13] - state[12] | 0,
      _wU_ = is_known(size),
      _wV_ = _wU_ || (state[9] <= pending_count ? 1 : 0);
     if(! _wV_) return _wV_;
     take(state[28]);
     var size$0 = is_known(size) ? id(size) : pp_infinity;
     format_pp_token(state, size$0, token);
     state[12] = length + state[12] | 0;
    }
   }
   function enqueue_advance(state, tok){
    pp_enqueue(state, tok);
    return advance_left(state);
   }
   function enqueue_string_as(state, size, s){
    return enqueue_advance(state, [0, size, [0, s], id(size)]);
   }
   function enqueue_string(state, s){
    return enqueue_string_as(state, id(caml_ml_string_length(s)), s);
   }
   function initialize_scan_stack(stack){
    clear(stack);
    var queue_elem = [0, unknown, _cH_, 0];
    return push([0, -1, queue_elem], stack);
   }
   function set_size(state, ty){
    var match = top_opt(state[1]);
    if(! match) return;
    var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
     size = id(queue_elem[1]);
    if(left_total < state[12]) return initialize_scan_stack(state[1]);
    var _wT_ = queue_elem[2];
    if(typeof _wT_ !== "number")
     switch(_wT_[0]){
       case 3:
        if(1 - ty){
         queue_elem[1] = id(state[13] + size | 0);
         pop_opt(state[1]);
        }
        return;
       case 1:
       case 2:
        if(ty){queue_elem[1] = id(state[13] + size | 0); pop_opt(state[1]);}
        return;
     }
    return;
   }
   function scan_push(state, b, token){
    pp_enqueue(state, token);
    if(b) set_size(state, 1);
    var elem = [0, state[13], token];
    return push(elem, state[1]);
   }
   function pp_open_box_gen(state, indent, br_ty){
    state[14] = state[14] + 1 | 0;
    if(state[14] < state[15]){
     var size = id(- state[13] | 0), elem = [0, size, [3, indent, br_ty], 0];
     return scan_push(state, 0, elem);
    }
    var _wS_ = state[14] === state[15] ? 1 : 0;
    return _wS_ ? enqueue_string(state, state[16]) : _wS_;
   }
   function pp_open_sys_box(state){return pp_open_box_gen(state, 0, 3);}
   function pp_close_box(state, param){
    var _wQ_ = 1 < state[14] ? 1 : 0;
    if(_wQ_){
     if(state[14] < state[15]){
      pp_enqueue(state, [0, zero, 1, 0]);
      set_size(state, 1);
      set_size(state, 0);
     }
     state[14] = state[14] - 1 | 0;
     var _wR_ = 0;
    }
    else
     var _wR_ = _wQ_;
    return _wR_;
   }
   function pp_open_stag(state, tag_name){
    if(state[22]){push(tag_name, state[4]); caml_call1(state[26], tag_name);}
    var _wP_ = state[23];
    if(! _wP_) return _wP_;
    var token = [5, tag_name];
    return pp_enqueue(state, [0, zero, token, 0]);
   }
   function pp_close_stag(state, param){
    if(state[23]) pp_enqueue(state, [0, zero, 5, 0]);
    var _wN_ = state[22];
    if(_wN_){
     var match = pop_opt(state[4]);
     if(match){
      var tag_name = match[1];
      return caml_call1(state[27], tag_name);
     }
     var _wO_ = 0;
    }
    else
     var _wO_ = _wN_;
    return _wO_;
   }
   function pp_close_tag(state, param){return pp_close_stag(state, 0);}
   function pp_set_mark_tags(state, b){state[23] = b; return;}
   function pp_get_formatter_stag_function(state, param){
    return [0, state[24], state[25], state[26], state[27]];
   }
   function pp_set_formatter_stag_function(state, param){
    var pct = param[4], pot = param[3], mct = param[2], mot = param[1];
    state[24] = mot;
    state[25] = mct;
    state[26] = pot;
    state[27] = pct;
    return;
   }
   function pp_rinit(state){
    pp_clear_queue(state);
    initialize_scan_stack(state[1]);
    clear(state[2]);
    clear(state[3]);
    clear(state[4]);
    clear(state[5]);
    state[10] = 0;
    state[14] = 0;
    state[9] = state[6];
    return pp_open_sys_box(state);
   }
   function clear_tag_stack(state){
    return iter$1(function(param){return pp_close_tag(state, 0);}, state[4]);
   }
   function pp_flush_queue(state, b){
    clear_tag_stack(state);
    for(;;){
     if(1 >= state[14]){
      state[13] = pp_infinity;
      advance_left(state);
      if(b) pp_output_newline(state);
      return pp_rinit(state);
     }
     pp_close_box(state, 0);
    }
   }
   function pp_print_as_size(state, size, s){
    var _wM_ = state[14] < state[15] ? 1 : 0;
    return _wM_ ? enqueue_string_as(state, size, s) : _wM_;
   }
   function pp_print_as(state, isize, s){
    return pp_print_as_size(state, id(isize), s);
   }
   function pp_print_string(state, s){
    return pp_print_as(state, caml_ml_string_length(s), s);
   }
   function pp_print_bool(state, b){
    return pp_print_string(state, string_of_bool(b));
   }
   function pp_print_char(state, c){
    return pp_print_as(state, 1, make$1(1, c));
   }
   function pp_print_newline(state, param){
    pp_flush_queue(state, 1);
    return caml_call1(state[18], 0);
   }
   function pp_print_flush(state, param){
    pp_flush_queue(state, 0);
    return caml_call1(state[18], 0);
   }
   function pp_force_newline(state, param){
    var _wL_ = state[14] < state[15] ? 1 : 0;
    return _wL_ ? enqueue_advance(state, [0, zero, 3, 0]) : _wL_;
   }
   function pp_print_custom_break(state, fits, breaks){
    var
     after = fits[3],
     width = fits[2],
     before = fits[1],
     _wK_ = state[14] < state[15] ? 1 : 0;
    if(! _wK_) return _wK_;
    var
     size = id(- state[13] | 0),
     token = [1, fits, breaks],
     length =
       (caml_ml_string_length(before) + width | 0)
       + caml_ml_string_length(after)
       | 0,
     elem = [0, size, token, length];
    return scan_push(state, 1, elem);
   }
   function pp_print_break(state, width, offset){
    return pp_print_custom_break
            (state, [0, _cL_, width, _cK_], [0, _cJ_, offset, _cI_]);
   }
   function pp_print_cut(state, param){return pp_print_break(state, 0, 0);}
   function display_newline(state, param){
    return caml_call3(state[17], _cM_, 0, 1);
   }
   var blank_line = make$1(80, 32);
   function display_blanks(state, n){
    var n$0 = n;
    for(;;){
     var _wJ_ = 0 < n$0 ? 1 : 0;
     if(! _wJ_) return _wJ_;
     if(80 >= n$0) return caml_call3(state[17], blank_line, 0, n$0);
     caml_call3(state[17], blank_line, 0, 80);
     var n$1 = n$0 - 80 | 0;
     n$0 = n$1;
    }
   }
   function default_pp_mark_open_tag(param){
    if(param[1] !== String_tag) return _cP_;
    var s = param[2];
    return symbol_concat(_cO_, symbol_concat(s, _cN_));
   }
   function default_pp_mark_close_tag(param){
    if(param[1] !== String_tag) return _cS_;
    var s = param[2];
    return symbol_concat(_cR_, symbol_concat(s, _cQ_));
   }
   function default_pp_print_open_tag(_wI_){return 0;}
   function default_pp_print_close_tag(_wH_){return 0;}
   function pp_make_formatter(f, g, h, i, j){
    var pp_queue = create$0(0), sys_tok = [0, unknown, _cT_, 0];
    add(sys_tok, pp_queue);
    var scan_stack = create(0);
    initialize_scan_stack(scan_stack);
    push([0, 1, sys_tok], scan_stack);
    var pp_margin = 78, _wE_ = create(0), _wF_ = create(0), _wG_ = create(0);
    return [0,
            scan_stack,
            create(0),
            _wG_,
            _wF_,
            _wE_,
            pp_margin,
            10,
            68,
            pp_margin,
            0,
            1,
            1,
            1,
            1,
            max_int,
            _cU_,
            f,
            g,
            h,
            i,
            j,
            0,
            0,
            default_pp_mark_open_tag,
            default_pp_mark_close_tag,
            default_pp_print_open_tag,
            default_pp_print_close_tag,
            pp_queue];
   }
   function make_formatter(output, flush){
    var
     ppf =
       pp_make_formatter
        (output,
         flush,
         function(_wD_){return 0;},
         function(_wC_){return 0;},
         function(_wB_){return 0;});
    ppf[19] = function(_wA_){return display_newline(ppf, _wA_);};
    ppf[20] = function(_wz_){return display_blanks(ppf, _wz_);};
    ppf[21] = function(_wy_){return display_blanks(ppf, _wy_);};
    return ppf;
   }
   function formatter_of_out_channel(oc){
    return make_formatter
            (function(_wv_, _ww_, _wx_){
              return output_substring(oc, _wv_, _ww_, _wx_);
             },
             function(param){return _k_(oc);});
   }
   function formatter_of_buffer(b){
    return make_formatter
            (function(_ws_, _wt_, _wu_){
              return add_substring(b, _ws_, _wt_, _wu_);
             },
             function(_wr_){return 0;});
   }
   var pp_buffer_size = 512;
   function pp_make_buffer(param){return create$1(pp_buffer_size);}
   var
    stdbuf = pp_make_buffer(0),
    std_formatter = formatter_of_out_channel(stdout),
    err_formatter = formatter_of_out_channel(stderr);
   formatter_of_buffer(stdbuf);
   function flush_buffer_formatter(buf, ppf){
    pp_flush_queue(ppf, 0);
    var s = contents(buf);
    reset(buf);
    return s;
   }
   function pp_print_list(opt, pp_v, ppf, param){
    var opt$0 = opt, param$0 = param;
    for(;;){
     if(opt$0)
      var sth = opt$0[1], pp_sep = sth;
     else
      var pp_sep = pp_print_cut;
     if(! param$0) return 0;
     var v = param$0[1];
     if(! param$0[2]) return caml_call2(pp_v, ppf, v);
     var vs = param$0[2];
     caml_call2(pp_v, ppf, v);
     caml_call2(pp_sep, ppf, 0);
     var opt$1 = [0, pp_sep];
     opt$0 = opt$1;
     param$0 = vs;
    }
   }
   function pp_print_option(opt, pp_v, ppf, param){
    if(opt)
     var sth = opt[1], none = sth;
    else
     var none = function(param, _wq_){return 0;};
    if(! param) return caml_call2(none, ppf, 0);
    var v = param[1];
    return caml_call2(pp_v, ppf, v);
   }
   function compute_tag(output, tag_acc){
    var buf = create$1(16), ppf = formatter_of_buffer(buf);
    caml_call2(output, ppf, tag_acc);
    pp_print_flush(ppf, 0);
    var len = length$0(buf);
    return 2 <= len ? sub$2(buf, 1, len - 2 | 0) : contents(buf);
   }
   function output_formatting_lit(ppf, fmting_lit){
    if(typeof fmting_lit === "number")
     switch(fmting_lit){
       case 0:
        return pp_close_box(ppf, 0);
       case 1:
        return pp_close_tag(ppf, 0);
       case 2:
        return pp_print_flush(ppf, 0);
       case 3:
        return pp_force_newline(ppf, 0);
       case 4:
        return pp_print_newline(ppf, 0);
       case 5:
        return pp_print_char(ppf, 64);
       default: return pp_print_char(ppf, 37);
     }
    switch(fmting_lit[0]){
      case 0:
       var offset = fmting_lit[3], width = fmting_lit[2];
       return pp_print_break(ppf, width, offset);
      case 1:
       return 0;
      default:
       var c = fmting_lit[1];
       pp_print_char(ppf, 64);
       return pp_print_char(ppf, c);
    }
   }
   function output_acc$0(ppf, acc){
    if(typeof acc === "number") return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
          output_acc$0(ppf, p);
          return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
           output_acc$0(ppf, p$0);
           return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(output_acc$0, acc$0)]);
          }
          var acc$1 = match[1];
          output_acc$0(ppf, p$0);
          var
           match$0 = open_box_of_string(compute_tag(output_acc$0, acc$1)),
           bty = match$0[2],
           indent = match$0[1];
          return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _wh_ = acc[1];
          if(typeof _wh_ !== "number" && 0 === _wh_[0]){
           var _wi_ = _wh_[2];
           if(typeof _wi_ !== "number" && 1 === _wi_[0]){
            var s$0 = acc[2], size = _wi_[2], p$2 = _wh_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _wh_;
          break a;
         case 3:
          var _wj_ = acc[1];
          if(typeof _wj_ !== "number" && 0 === _wj_[0]){
           var _wk_ = _wj_[2];
           if(typeof _wk_ !== "number" && 1 === _wk_[0]){
            var c$0 = acc[2], size$0 = _wk_[2], p$4 = _wj_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _wj_;
          break c;
         case 4:
          var _wm_ = acc[1];
          if(typeof _wm_ !== "number" && 0 === _wm_[0]){
           var _wn_ = _wm_[2];
           if(typeof _wn_ !== "number" && 1 === _wn_[0]){
            var s$0 = acc[2], size = _wn_[2], p$2 = _wm_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _wm_;
          break a;
         case 5:
          var _wo_ = acc[1];
          if(typeof _wo_ !== "number" && 0 === _wo_[0]){
           var _wp_ = _wo_[2];
           if(typeof _wp_ !== "number" && 1 === _wp_[0]){
            var c$0 = acc[2], size$0 = _wp_[2], p$4 = _wo_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _wo_;
          break c;
         case 6:
          var f$0 = acc[2], p$5 = acc[1];
          output_acc$0(ppf, p$5);
          return caml_call1(f$0, ppf);
         case 7:
          var p$6 = acc[1];
          output_acc$0(ppf, p$6);
          return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$7 = acc[1];
          output_acc$0(ppf, p$7);
          return invalid_arg(msg);
       }
       output_acc$0(ppf, p$4);
       var _wl_ = make$1(1, c$0);
       return pp_print_as_size(ppf, id(size$0), _wl_);
      }
      output_acc$0(ppf, p$3);
      return pp_print_char(ppf, c);
     }
     output_acc$0(ppf, p$2);
     return pp_print_as_size(ppf, id(size), s$0);
    }
    output_acc$0(ppf, p$1);
    return pp_print_string(ppf, s);
   }
   function kfprintf$0(k, ppf, param){
    var fmt = param[1];
    return make_printf
            (function(acc){output_acc$0(ppf, acc); return caml_call1(k, ppf);},
             0,
             fmt);
   }
   function fprintf$0(ppf){
    function _we_(_wg_){return 0;}
    return function(_wf_){return kfprintf$0(_we_, ppf, _wf_);};
   }
   function kasprintf(k, param){
    var fmt = param[1], b = pp_make_buffer(0), ppf = formatter_of_buffer(b);
    function k$0(acc){
     output_acc$0(ppf, acc);
     return caml_call1(k, flush_buffer_formatter(b, ppf));
    }
    return make_printf(k$0, 0, fmt);
   }
   function asprintf(fmt){return kasprintf(id, fmt);}
   function flush_standard_formatters(param){
    pp_print_flush(std_formatter, 0);
    return pp_print_flush(err_formatter, 0);
   }
   at_exit(flush_standard_formatters);
   function register_exception(name, exn){
    var slot = caml_obj_tag(exn) === 248 ? exn : exn[1];
    caml_register_named_value(name, slot);
    return;
   }
   var Error = [248, _cV_, caml_fresh_oo_id(0)];
   register_exception(_cW_, [0, Error, [0]]);
   (function(exn){throw exn;});
   var jv_global = globalThis;
   function length$1(s){return s[cst_length];}
   function jstr_of_int(opt, i){
    if(opt) var sth = opt[1], base = sth; else var base = 10;
    return i.toString(base);
   }
   var empty$0 = cst$1;
   function append(s0, s1){return s0.concat(s1);}
   function concat$0(opt, ss){
    if(opt) var sth = opt[1], sep = sth; else var sep = empty$0;
    return caml_list_to_js_array(ss).join(sep);
   }
   function slice(opt, stop, s){
    if(opt) var sth = opt[1], start = sth; else var start = 0;
    if(stop)
     var stop$0 = stop[1], args = [0, start, stop$0];
    else
     var args = [0, start];
    return caml_js_meth_call(s, "slice", args);
   }
   function cuts(sep, s){return caml_list_of_js_array(s.split(sep));}
   function is_empty$0(s){return 0 === length$1(s) ? 1 : 0;}
   function starts_with(prefix, s){return s.startsWith(prefix) | 0;}
   function equal(_wd_, _wc_){return caml_equal(_wd_, _wc_);}
   jv_global["Number"];
   var null$0 = null, undefined$0 = undefined;
   function is_null(v){return v === null$0 ? 1 : 0;}
   function is_undefined(v){return v === undefined$0 ? 1 : 0;}
   function is_none(v){
    var _wb_ = is_null(v);
    return _wb_ ? _wb_ : is_undefined(v);
   }
   function is_some$0(v){return 1 - is_none(v);}
   function to_option(conv, v){
    return is_none(v) ? 0 : [0, caml_call1(conv, v)];
   }
   function of_option(none, conv, param){
    if(! param) return none;
    var v = param[1];
    return caml_call1(conv, v);
   }
   var global = globalThis;
   function set_if_some(o, p, param){
    if(! param) return;
    var v = param[1];
    o[p] = v;
    return;
   }
   var true$0 = true;
   function get$1(o, p){o[p]; return;}
   function set(o, p, b){o[p] = ! ! b; return;}
   function set_if_some$0(o, p, param){
    if(! param) return;
    var b = param[1];
    return set(o, p, b);
   }
   function get$2(o, p){return o[p];}
   function get$3(o, p){return o[p];}
   function set$0(o, p, b){o[p] = b; return;}
   function set_if_some$1(o, p, param){
    if(! param) return;
    var f = param[1];
    return set$0(o, p, f);
   }
   function to_string$1(_wa_){return caml_string_of_jsstring(_wa_);}
   function create$3(n){return new global["Array"](n);}
   function length$2(a){return a[cst_length];}
   function to_list$0(conv, v){
    var len = length$2(v);
    return init(len, function(i){return caml_call1(conv, v[i]);});
   }
   function of_list$0(conv, l){
    function loop(i, ja, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return ja;
      var vs = param$0[2], v = param$0[1];
      ja[i$0] = caml_call1(conv, v);
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param$0 = vs;
     }
    }
    return loop(0, create$3(0), l);
   }
   function v(name, msg){
    var e = new global["Error"](msg);
    if(! name) return e;
    var n = name[1];
    e[cst_name] = n;
    return e;
   }
   function throw$0(name, msg){
    var e = v(name, msg);
    return caml_call1(function(exn){throw exn;}, e);
   }
   var promise = global["Promise"];
   function create$4(f){
    function g(res, rej){
     return caml_call2
             (f, function(x){return res(x);}, function(x){return rej(x);});
    }
    return new promise(caml_js_wrap_callback_strict(2, g));
   }
   function resolve(v){return promise.resolve(v);}
   function await$0(p, k){p.then(caml_js_wrap_callback_strict(1, k)); return;}
   function bind(p, res){return p.then(caml_js_wrap_callback_strict(1, res));}
   function then(p, res, rej){
    return p.then
            (caml_js_wrap_callback_strict(1, res),
             caml_js_wrap_callback_strict(1, rej));
   }
   function call(o, m, args){
    return caml_js_meth_call(o, to_string$1(m), args);
   }
   function value$0(_v$_){return caml_string_of_jsstring(_v$_);}
   function _cX_(_v__){return caml_jsstring_of_string(_v__);}
   function fut(p){return {fut: p};}
   function promise$0(f){return f[cst_fut];}
   function create$5(param){
    function not_set(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _cY_], 1);
    }
    function is_set(param){return throw$0(0, "The future is already set");}
    var setter = [0, not_set];
    function set_setter(resolve, reject){setter[1] = resolve; return 0;}
    var p = create$4(set_setter);
    function set(v){caml_call1(setter[1], v); setter[1] = is_set; return 0;}
    return [0, fut(p), set];
   }
   function await$1(f, k){return await$0(promise$0(f), k);}
   function return$0(v){return fut(resolve(v));}
   function bind$0(f, fn){
    return fut
            (bind
              (promise$0(f),
               function(v){return promise$0(caml_call1(fn, v));}));
   }
   function map$3(fn, f){
    return bind$0(f, function(v){return return$0(caml_call1(fn, v));});
   }
   function ok(v){return return$0([0, v]);}
   function of_promise(ok, error, p){
    function ok$0(v){return resolve([0, caml_call1(ok, v)]);}
    function error$0(e){return resolve([1, caml_call1(error, e)]);}
    return fut(then(p, ok$0, error$0));
   }
   function of_promise$0(ok, v){
    return of_promise(ok, function(_v9_){return _v9_;}, v);
   }
   function let$0(f, fn){
    return function(_v8_){return bind$0(f, _v8_);}
            (function(e){
              if(0 !== e[0]) return return$0(e);
              var v = e[1];
              return caml_call1(fn, v);
             });
   }
   function let$1(f, fn){
    return map$3(function(_v7_){return map$0(fn, _v7_);}, f);
   }
   global["Event"];
   function target(e){return e[cst_target];}
   function stop_immediate_propagation(e){e.stopImmediatePropagation(); return;
   }
   function prevent_default(e){e.preventDefault(); return 0;}
   function listen(opt, type, f, t){
    if(opt) var sth = opt[1], opts = sth; else var opts = {};
    var f$0 = caml_js_wrap_callback_strict(1, f);
    function unlisten(param){
     t.removeEventListener(type, f$0, opts);
     return 0;
    }
    t.addEventListener(type, f$0, opts);
    return unlisten;
   }
   function unlisten(unlisten){return caml_call1(unlisten, 0);}
   var
    change = "change",
    click = cst_click,
    dom_content_loaded = "DOMContentLoaded",
    ended = "ended",
    error = cst_error,
    keyup = "keyup",
    play = "play",
    scroll = cst_scroll,
    wheel = "wheel";
   global["ArrayBuffer"];
   global["DataView"];
   global["Blob"];
   global["File"];
   var json = global["JSON"];
   function encode(v){return json.stringify(v);}
   function decode(s){
    try{var v = json.parse(s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   global["encodeURI"];
   global["decodeURI"];
   var
    encode_component = global["encodeURIComponent"],
    decode_component = global["decodeURIComponent"],
    url = global["URL"];
   function v$0(base, s){
    if(! base) return new url(s);
    var b = base[1];
    return new url(s, b);
   }
   var prefix = "/";
   function path(u){return get$3(u, _cZ_);}
   function path_segments(u){
    function decode_seg(s){return decode_component(s);}
    try{
     var
      p = path(u),
      p$0 = starts_with(prefix, p) ? slice(_c0_, 0, p) : p,
      _v6_ = [0, map$1(decode_seg, cuts(prefix, p$0))];
     return _v6_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   function with_path_segments(u, segs){
    function encode_seg(s){return append(prefix, encode_component(s));}
    try{
     var u$0 = new url(u), path = concat$0(0, map$1(encode_seg, segs));
     u$0[cst_pathname] = path;
     var _v5_ = [0, u$0];
     return _v5_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
   }
   var usp = global["URLSearchParams"];
   function to_jstr(p){return p.toString();}
   function of_obj(o){return new usp(o);}
   function with_query_params(u, ps){
    var u$0 = new url(u);
    set$0(u$0, _c1_, to_jstr(ps));
    return u$0;
   }
   function to_jstr$0(u){return u.toString();}
   function v$1(n, v){return [0, n, v];}
   var void$0 = [0, empty$0, empty$0];
   function if$0(b, at){return b ? at : void$0;}
   function true$1(n){return [0, n, empty$0];}
   function int$2(n, i){return [0, n, jstr_of_int(0, i)];}
   function to_pair(_v4_){return _v4_;}
   var
    checked = cst_checked,
    class$0 = "class",
    for$0 = "for",
    id$0 = cst_id$0,
    name = cst_name,
    placeholder = "placeholder",
    required = "required",
    selected = "selected",
    src = cst_src,
    style = cst_style,
    type = cst_type,
    value$1 = cst_value,
    width = "width",
    checked$0 = true$1(checked);
   function class$1(s){return v$1(class$0, s);}
   function for$1(s){return v$1(for$0, s);}
   function id$1(s){return v$1(id$0, s);}
   var required$0 = true$1(required), selected$0 = true$1(selected);
   function src$0(s){return v$1(src, s);}
   function style$0(s){return v$1(style, s);}
   function type$0(s){return v$1(type, s);}
   function value$2(s){return v$1(value$1, s);}
   function width$0(i){return int$2(width, i);}
   var global_document = global["document"];
   function document(e){return e["ownerDocument"];}
   if(! is_none(global_document)) global_document[cst_documentElement];
   function _c2_(e, n){e.appendChild(n); return 0;}
   function set_atts(e, ss, param){
    var ss$0 = ss, param$0 = param;
    for(;;){
     if(! param$0){
      if(0 !== ss$0){
       var v$0 = concat$0([0, ";"], rev(ss$0));
       e.setAttribute(cst_style, v$0);
      }
      return;
     }
     var at = param$0[2], match = param$0[1], v = match[2], a = match[1];
     if(is_empty$0(a))
      param$0 = at;
     else if(equal(a, style)){
      var ss$1 = [0, v, ss$0];
      ss$0 = ss$1;
      param$0 = at;
     }
     else if(equal(a, class$0)){
      if(1 - is_empty$0(v)) e[cst_classList].add(v);
      param$0 = at;
     }
     else{e.setAttribute(a, v); param$0 = at;}
    }
   }
   function v$2(opt, _v2_, name, cs){
    if(opt) var sth = opt[1], d = sth; else var d = global_document;
    if(_v2_) var sth$0 = _v2_[1], at = sth$0; else var at = 0;
    var e = d.createElement(name);
    set_atts(e, 0, at);
    iter$0(function(_v3_){return _c2_(e, _v3_);}, cs);
    return e;
   }
   function txt(opt, s){
    if(opt) var sth = opt[1], d = sth; else var d = global_document;
    return d.createTextNode(_cX_(s));
   }
   function append_children(e, l){
    caml_js_meth_call(e, cst_append, of_list(l));
    return;
   }
   function set_at(a, v, e){
    if(is_empty$0(a)) return 0;
    if(v){var v$0 = v[1]; e.setAttribute(a, v$0); return 0;}
    e.removeAttribute(a);
    return 0;
   }
   function jv_to_float(f){return is_undefined(f) ? 0. : f;}
   function float$0(n){
    return [0, n, jv_to_float, function(_v1_){return _v1_;}];
   }
   function prop(p, e){var _v0_ = e[p[1]]; return caml_call1(p[2], _v0_);}
   function set_class(c, b, e){
    return b ? (e[cst_classList].add(c), 0) : (e[cst_classList].remove(c), 0);
   }
   function computed_style(opt, p, e){
    if(opt) var sth = opt[1], w = sth; else var w = global[cst_window];
    var style = w.getComputedStyle(e), v = style[p];
    return is_none(v) ? empty$0 : v;
   }
   function scroll_y(e){return get$2(e, _c3_);}
   function scroll_into_view(opt, e){
    if(opt) var sth = opt[1], align_v = sth; else var align_v = 389604418;
    var align = 389604418 <= align_v ? 1 : 0;
    e.scrollIntoView(! ! align);
    return 0;
   }
   var
    audio = "audio",
    button = cst_button,
    div = "div",
    form = "form",
    h1 = "h1",
    img = "img",
    input$0 = cst_input,
    label = "label",
    option = "option",
    select = "select",
    span = "span";
   function cons$0(name, d, at, cs){return v$2(d, at, name, cs);}
   function audio$0(_vX_, _vY_, _vZ_){return cons$0(audio, _vX_, _vY_, _vZ_);}
   function div$0(_vU_, _vV_, _vW_){return cons$0(div, _vU_, _vV_, _vW_);}
   function h1$0(_vR_, _vS_, _vT_){return cons$0(h1, _vR_, _vS_, _vT_);}
   function span$0(_vO_, _vP_, _vQ_){return cons$0(span, _vO_, _vP_, _vQ_);}
   function root(d){return d[cst_documentElement];}
   function body(d){
    var b = d[cst_body];
    return is_some$0(b)
            ? b
            : throw$0
              (0,
               "Document body is null. Try to defer your script execution.");
   }
   function active_el(d){
    return to_option(function(_vN_){return _vN_;}, d["activeElement"]);
   }
   function call$0(c, meth, args){caml_js_meth_call(c, meth, args); return;}
   var _c4_ = global[cst_console];
   function msg_to_jv_array(msg){
    function loop(a, i, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return a;
      var vs = param$0[2], v = param$0[1];
      a[i$0] = v;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param$0 = vs;
     }
    }
    return caml_js_to_array(loop(create$3(0), 0, msg));
   }
   function log(msg){return call$0(_c4_, _c5_, msg_to_jv_array(msg));}
   function error$0(msg){return call$0(_c4_, _c6_, msg_to_jv_array(msg));}
   function warn(msg){return call$0(_c4_, _c7_, msg_to_jv_array(msg));}
   function debug(msg){return call$0(_c4_, _c8_, msg_to_jv_array(msg));}
   function as_target(w){return w;}
   function now_ms(p){return p.now();}
   global[cst_console];
   var
    navigator = global["navigator"],
    performance = global["performance"],
    window = global[cst_window];
   get$1(global, _c9_);
   function set_timeout(ms, f){
    return global.setTimeout(caml_js_wrap_callback_strict(1, f), ms);
   }
   function stop_timer(tid){global.clearTimeout(tid); return;}
   function request_animation_frame(f){
    global.requestAnimationFrame(caml_js_wrap_callback_strict(1, f));
    return;
   }
   global["ClipboardItem"];
   global["FormData"];
   function of_jstr(_vM_){return _vM_;}
   function text(r){
    return of_promise$0(function(_vL_){return _vL_;}, r.text());
   }
   var headers = global["Headers"];
   function of_assoc(init, l){
    if(init) var h = init[1], args = [0, h]; else var args = [0];
    var hs = caml_js_new(headers, args);
    function add(hs, param){
     var v = param[2], k = param[1];
     hs.append(k, v);
     return 0;
    }
    iter$0(function(_vK_){return add(hs, _vK_);}, l);
    return hs;
   }
   function init$1
   (body,
    cache,
    credentials,
    headers,
    integrity,
    keepalive,
    method,
    mode,
    redirect,
    referrer,
    referrer_policy,
    signal,
    param){
    var o = {};
    o[cst_body] = of_option(undefined$0, function(_vJ_){return _vJ_;}, body);
    set_if_some$1(o, _c__, cache);
    set_if_some$1(o, _c$_, credentials);
    set_if_some(o, _da_, map(function(_vI_){return _vI_;}, headers));
    set_if_some$1(o, _db_, integrity);
    set_if_some$0(o, _dc_, keepalive);
    set_if_some$1(o, _dd_, method);
    set_if_some$1(o, _de_, mode);
    set_if_some$1(o, _df_, redirect);
    set_if_some$1(o, _dg_, referrer);
    set_if_some$1(o, _dh_, referrer_policy);
    o["signal"] = of_option(undefined$0, function(_vH_){return _vH_;}, signal);
    return o;
   }
   var request = global["Request"];
   function v$3(opt, url){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    return new request(url, init);
   }
   global["Response"];
   var fetch = global["fetch"];
   function request$0(r){
    function _vE_(_vG_){return _vG_;}
    return function(_vF_){return of_promise$0(_vE_, _vF_);}(fetch(r));
   }
   global["MediaStream"];
   global["MediaRecorder"];
   global["MessageChannel"];
   global["BroadcastChannel"];
   var message = "message";
   function data(e){return e["data"];}
   global["Notification"];
   function local(w){return w["localStorage"];}
   function get_item(s, k){
    function _vB_(_vD_){return _vD_;}
    return function(_vC_){return to_option(_vB_, _vC_);}(s.getItem(k));
   }
   function set_item(s, k, v){
    try{s.setItem(k, v); return;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Error) return;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   global["WebSocket"];
   var worker = global["Worker"];
   function create$6(opt, uri){
    if(opt) var sth = opt[1], opts = sth; else var opts = undefined$0;
    return new worker(uri, opts);
   }
   function post(opts, w, v){
    if(opts) var o = opts[1], opts$0 = o; else var opts$0 = undefined$0;
    w.postMessage(v, opts$0);
    return;
   }
   global["SharedWorker"];
   function post$0(opts, v){
    if(opts) var o = opts[1], opts$0 = o; else var opts$0 = undefined$0;
    global.postMessage(v, opts$0);
    return 0;
   }
   global["clients"];
   global["registration"];
   global["serviceWorker"];
   function height(t){return t["height"];}
   function _di_(_vA_){return _vA_;}
   function content_rect(t){return _di_(t["contentRect"]);}
   function target$0(t){return t[cst_target];}
   function string_of_box(param){
    switch(param){
      case 0:
       return _dj_;
      case 1:
       return _dk_;
      default: return _dl_;
    }
   }
   function observe(t, box, target){
    if(box)
     var
      b = box[1],
      box$0 = {box: _cX_(string_of_box(b))},
      args = [0, target, box$0];
    else
     var args = [0, target];
    caml_js_meth_call(t, "observe", args);
    return 0;
   }
   function create$7(callback){
    function callback$0(entries, observer){
     var entries$0 = to_list$0(function(_vz_){return _vz_;}, entries);
     return caml_call2(callback, entries$0, observer);
    }
    return new global["ResizeObserver"](callback$0);
   }
   function of_navigator(n){return n["mediaSession"];}
   function img_to_jv(img){
    var _vx_ = _cX_(img[3]), _vy_ = _cX_(img[2]);
    return {src: _cX_(img[1]), sizes: _vy_, type: _vx_};
   }
   function to_jv(t){
    var
     artwork = of_list$0(img_to_jv, t[4]),
     _vv_ = _cX_(t[3]),
     _vw_ = _cX_(t[2]);
    return {title: _cX_(t[1]), artist: _vw_, album: _vv_, artwork: artwork};
   }
   function set_metadata(t, v){
    log([0, _dm_, [0, to_jv(v), 0]]);
    var _vu_ = to_jv(v), metadata = new global["MediaMetadata"](_vu_);
    t["metadata"] = metadata;
    return;
   }
   var next_track = "nexttrack", previous_track = "previoustrack";
   function set_action_handler(t, action, f){
    var callback = caml_js_wrap_callback_strict(1, f);
    t.setActionHandler(action, callback);
    return;
   }
   function set_position_state(duration, playback_rate, position, t){
    function maybe_float(name, v){
     return map(function(v){return [0, name, v];}, v);
    }
    var
     duration$0 = maybe_float(_dn_, duration),
     playback_rate$0 = maybe_float(_do_, playback_rate),
     position$0 = maybe_float(_dp_, position),
     state_dict =
       filter_map(function(_vt_){return _vt_;})
        ([0, duration$0, [0, playback_rate$0, [0, position$0, 0]]]),
     args = state_dict ? [0, caml_js_object(of_list(state_dict))] : [0];
    caml_js_meth_call(t, "setPositionState", args);
    return 0;
   }
   function _dq_(_vs_, _vr_, _vq_){return;}
   var submit = cst_submit, pattern = "pattern";
   function persist(t){
    function _vn_(_vp_){return _vp_ | 0;}
    return function(_vo_){return of_promise$0(_vn_, _vo_);}(t.persist());
   }
   function manager(n){return n["storage"];}
   function any(_vm_){return _vm_;}
   function return$1(x){return [0, x];}
   function pure(x){return [0, x];}
   function is_pure(x){
    if(0 !== x[0]) return 0;
    var x$0 = x[1];
    return [0, x$0];
   }
   var dummy = [0, any(0)];
   function operator(desc){return [1, 0, 0, 0, desc];}
   function func(x, f){
    if(0 !== x[0]) return operator([0, x, f]);
    var vx = x[1];
    return [0, caml_call1(f, vx)];
   }
   function map2(x, y, f){
    if(0 === x[0]){
     var vx = x[1];
     if(0 === y[0]){var vy = y[1]; return [0, caml_call2(f, vx, vy)];}
    }
    return operator([1, x, y, f]);
   }
   function pair(x, y){
    if(0 === x[0]){
     var vx = x[1];
     if(0 === y[0]){var vy = y[1]; return [0, [0, vx, vy]];}
    }
    return operator([2, x, y]);
   }
   function join(child){
    if(0 !== child[0]) return operator([4, child, 0]);
    var v = child[1];
    return v;
   }
   function bind$1(x, f){return join(func(x, f));}
   function add_idx(obj, idx, param){
    switch(param[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dr_], 1);
      case 1:
       param[3] = [0, idx, obj, param[3]]; return;
      default: param[2] = [0, idx, obj, param[2]]; return;
    }
   }
   function rem_idx_rec(obj, self){
    if(! self)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ds_], 1);
    if(self[2] === obj) return [0, self[1], self[3]];
    var match = rem_idx_rec(obj, self[3]), result = match[2], idx = match[1];
    self[3] = result;
    return [0, idx, self];
   }
   function rem_idx(obj, param){
    switch(param[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dt_], 1);
      case 1:
       var
        match = rem_idx_rec(obj, param[3]),
        trace_idx = match[2],
        idx = match[1];
       param[3] = trace_idx;
       return idx;
      default:
       var
        match$0 = rem_idx_rec(obj, param[2]),
        trace_idx$0 = match$0[2],
        idx$0 = match$0[1];
       param[2] = trace_idx$0;
       return idx$0;
    }
   }
   function mov_idx_rec(obj, oldidx, newidx, param){
    var t = param;
    for(;;){
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _du_], 1);
     if(t[1] === oldidx && t[2] === obj){t[1] = newidx; return;}
     t = t[3];
    }
   }
   function mov_idx(obj, oldidx, newidx, param){
    switch(param[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dv_], 1);
      case 1:
       return mov_idx_rec(obj, oldidx, newidx, param[3]);
      default: return mov_idx_rec(obj, oldidx, newidx, param[2]);
    }
   }
   function get_idx_rec(obj, param){
    var t = param;
    for(;;){
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _dw_], 1);
     if(t[2] === obj) return t[1];
     t = t[3];
    }
   }
   function get_idx(obj, param){
    switch(param[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dx_], 1);
      case 1:
       return get_idx_rec(obj, param[3]);
      default: return get_idx_rec(obj, param[2]);
    }
   }
   function invalidate_node$0(counter, status, sensitivity, node){
    switch(node[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dy_], 1);
      case 1:
       var _vg_ = node[1];
       if(typeof _vg_ === "number" && ! _vg_){
        if(! sensitivity) return;
        if(status[1]) return;
        status[1] = 1;
        return;
       }
       var _vh_ = node[4];
       if(7 === _vh_[0]){
        var _vk_ = _vh_[2];
        if(1 === _vk_[0]){
         var _vl_ = _vk_[1];
         if(typeof _vl_ === "number"){
          if(! _vl_ && sensitivity){
           if(status[1]) return;
           status[1] = 1;
           return;
          }
         }
         else if(sensitivity) return;
        }
       }
       var _vi_ = node[1];
       a:
       {
        if(typeof _vi_ === "number" && _vi_){var sensitivity$0 = 1; break a;}
        var sensitivity$0 = sensitivity;
       }
       node[1] = 0;
       var _vj_ = node[2];
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_trace, [0, status, sensitivity$0, _vj_]);
       var counter$0 = counter + 1 | 0;
       return invalidate_trace(counter$0, status, sensitivity$0, _vj_);
      default:
       var value = node[1];
       node[1] = 0;
       if(typeof value === "number"){
        if(! value) return;
        status[1] = 2;
        return;
       }
       var x = value[1];
       if(sensitivity) status[1] = 2;
       return caml_call1(node[3], x);
    }
   }
   function invalidate_node(status, sensitivity, node){
    return caml_trampoline(invalidate_node$0(0, status, sensitivity, node));
   }
   function invalidate_trace(counter, status, sensitivity, t){
    if(typeof t === "number") return;
    switch(t[0]){
      case 0:
       var x = t[1];
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_node$0, [0, status, sensitivity, x]);
       var counter$0 = counter + 1 | 0;
       return invalidate_node$0(counter$0, status, sensitivity, x);
      case 1:
       var y = t[2], x$0 = t[1];
       invalidate_node(status, sensitivity, x$0);
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_node$0, [0, status, sensitivity, y]);
       var counter$1 = counter + 1 | 0;
       return invalidate_node$0(counter$1, status, sensitivity, y);
      case 2:
       var z = t[3], y$0 = t[2], x$1 = t[1];
       invalidate_node(status, sensitivity, x$1);
       invalidate_node(status, sensitivity, y$0);
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_node$0, [0, status, sensitivity, z]);
       var counter$2 = counter + 1 | 0;
       return invalidate_node$0(counter$2, status, sensitivity, z);
      case 3:
       var w = t[4], z$0 = t[3], y$1 = t[2], x$2 = t[1];
       invalidate_node(status, sensitivity, x$2);
       invalidate_node(status, sensitivity, y$1);
       invalidate_node(status, sensitivity, z$0);
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_node$0, [0, status, sensitivity, w]);
       var counter$3 = counter + 1 | 0;
       return invalidate_node$0(counter$3, status, sensitivity, w);
      default:
       var active = t[1];
       t[1] = 0;
       var _ve_ = active - 1 | 0, _vd_ = 0;
       if(_ve_ >= 0){
        var i = _vd_;
        for(;;){
         invalidate_node
          (status, sensitivity, caml_check_bound(t[3], i)[1 + i]);
         var _vf_ = i + 1 | 0;
         if(_ve_ === i) break;
         i = _vf_;
        }
       }
       return;
    }
   }
   function default_unsafe_mutation_logger(param){
    var callstack = caml_get_current_callstack(20);
    return caml_call2(fprintf(stderr, _dz_), print_raw_backtrace, callstack);
   }
   function do_invalidate(sensitivity, node){
    var status = [0, 0];
    invalidate_node(status, sensitivity, node);
    var unsafe = 2 <= status[1] ? 1 : 0;
    return unsafe ? default_unsafe_mutation_logger(0) : unsafe;
   }
   function var$0(x){return operator([5, x]);}
   function get$4(x){return x;}
   function symbol$1(vx, x){
    if(1 === vx[0]){
     var match = vx[4];
     if(5 === match[0]){match[1] = x; return do_invalidate(0, vx);}
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dA_], 1);
   }
   function peek(param){
    if(1 === param[0]){
     var match = param[4];
     if(5 === match[0]) return match[1];
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dB_], 1);
   }
   function update(f, v){return symbol$1(v, caml_call1(f, peek(v)));}
   function prim(acquire, release){return operator([6, acquire, release]);}
   function get_prim(x){return x;}
   function invalidate(x){
    if(1 === x[0]){
     var value = x[1], p = x[4];
     if(6 === p[0]){
      if(typeof value === "number") return value ? do_invalidate(1, x) : 0;
      var v = value[1];
      do_invalidate(0, x);
      return caml_call2(p[2], x, v);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dC_], 1);
   }
   function sub_release(failures, origin, self){
    var failures$0 = failures, origin$1 = origin, origin$0 = self;
    for(;;)
     switch(origin$0[0]){
       case 0:
        return failures$0;
       case 1:
        var trace = origin$0[2];
        if(typeof trace === "number")
         throw caml_maybe_attach_backtrace([0, Assert_failure, _dD_], 1);
        switch(trace[0]){
          case 0:
           var x = trace[1];
           if(x !== origin$1)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _dE_], 1);
           var trace$0 = 0;
           break;
          case 1:
           var y = trace[2], x$4 = trace[1];
           if(x$4 === origin$1)
            var _u9_ = [0, y];
           else{
            if(y !== origin$1)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dF_], 1);
            var _u9_ = [0, x$4];
           }
           var trace$0 = _u9_;
           break;
          case 2:
           var z = trace[3], y$0 = trace[2], x$5 = trace[1];
           if(x$5 === origin$1)
            var _u__ = [1, y$0, z];
           else if(y$0 === origin$1)
            var _u__ = [1, x$5, z];
           else{
            if(z !== origin$1)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dG_], 1);
            var _u__ = [1, x$5, y$0];
           }
           var trace$0 = _u__;
           break;
          case 3:
           var w = trace[4], z$0 = trace[3], y$1 = trace[2], x$6 = trace[1];
           if(x$6 === origin$1)
            var _u$_ = [2, y$1, z$0, w];
           else if(y$1 === origin$1)
            var _u$_ = [2, x$6, z$0, w];
           else if(z$0 === origin$1)
            var _u$_ = [2, x$6, y$1, w];
           else{
            if(w !== origin$1)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dH_], 1);
            var _u$_ = [2, x$6, y$1, z$0];
           }
           var trace$0 = _u$_;
           break;
          default:
           var revidx = rem_idx(origin$0, origin$1);
           if(caml_check_bound(trace[3], revidx)[1 + revidx] !== origin$1)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _dI_], 1);
           var count = trace[2] - 1 | 0;
           trace[2] = count;
           if(revidx < count){
            var obj = caml_check_bound(trace[3], count)[1 + count];
            caml_check_bound(trace[3], revidx)[1 + revidx] = obj;
            caml_check_bound(trace[3], count)[1 + count] = dummy;
            mov_idx(origin$0, count, revidx, obj);
           }
           else
            caml_check_bound(trace[3], revidx)[1 + revidx] = dummy;
           if(count < trace[1]) trace[1] = count;
           if(4 === count){
            var
             a = caml_check_bound(trace[3], 0)[1],
             b = caml_check_bound(trace[3], 1)[2],
             c = caml_check_bound(trace[3], 2)[3],
             d = caml_check_bound(trace[3], 3)[4];
            rem_idx(origin$0, a);
            rem_idx(origin$0, b);
            rem_idx(origin$0, c);
            rem_idx(origin$0, d);
            var _va_ = [3, a, b, c, d];
           }
           else{
            var len = trace[3].length - 1;
            if(count <= (len >>> 2 | 0))
             var
              _vb_ = sub$1(trace[3], 0, len >>> 1 | 0),
              _vc_ = [4, trace[1], trace[2], _vb_];
            else
             var _vc_ = trace;
            var _va_ = _vc_;
           }
           var trace$0 = _va_;
        }
        origin$0[2] = trace$0;
        if(typeof trace$0 !== "number") return failures$0;
        var value = origin$0[1];
        origin$0[1] = 1;
        var t = origin$0[4];
        switch(t[0]){
          case 0:
           var self$0 = t[1]; origin$1 = origin$0; origin$0 = self$0; break;
          case 1:
           var
            self$1 = t[2],
            x$0 = t[1],
            failures$1 = sub_release(failures$0, origin$0, x$0);
           failures$0 = failures$1;
           origin$1 = origin$0;
           origin$0 = self$1;
           break;
          case 2:
           var
            self$2 = t[2],
            x$1 = t[1],
            failures$2 = sub_release(failures$0, origin$0, x$1);
           failures$0 = failures$2;
           origin$1 = origin$0;
           origin$0 = self$2;
           break;
          case 3:
           var
            self$3 = t[2],
            x$2 = t[1],
            failures$3 = sub_release(failures$0, origin$0, x$2);
           failures$0 = failures$3;
           origin$1 = origin$0;
           origin$0 = self$3;
           break;
          case 4:
           var
            child = t[1],
            intermediate = t[2],
            failures$4 = sub_release(failures$0, origin$0, child);
           if(! intermediate) return failures$4;
           var child$0 = intermediate[1];
           t[2] = 0;
           failures$0 = failures$4;
           origin$1 = origin$0;
           origin$0 = child$0;
           break;
          case 5:
           return failures$0;
          case 6:
           if(typeof value === "number") return failures$0;
           var x$3 = value[1];
           try{caml_call2(t[2], origin$0, x$3); return failures$0;}
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0), bt = _cq_(0);
            return [0, [0, exn, bt], failures$0];
           }
          default:
           var
            wrt = t[2],
            self$4 = t[1],
            failures$5 = sub_release(failures$0, origin$0, wrt);
           failures$0 = failures$5;
           origin$1 = origin$0;
           origin$0 = self$4;
        }
        break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dJ_], 1);
     }
   }
   function sub_acquire(origin, self){
    var origin$1 = origin, origin$0 = self;
    for(;;)
     switch(origin$0[0]){
       case 0:
        return;
       case 1:
        var
         acquire = typeof origin$0[2] === "number" ? 1 : 0,
         trace = origin$0[2];
        if(typeof trace === "number")
         var trace$0 = [0, origin$1];
        else
         switch(trace[0]){
           case 0:
            var x$2 = trace[1], trace$0 = [1, origin$1, x$2]; break;
           case 1:
            var y = trace[2], x$3 = trace[1], trace$0 = [2, origin$1, x$3, y];
            break;
           case 2:
            var
             z = trace[3],
             y$0 = trace[2],
             x$4 = trace[1],
             trace$0 = [3, origin$1, x$4, y$0, z];
            break;
           case 3:
            var
             w = trace[4],
             z$0 = trace[3],
             y$1 = trace[2],
             x$5 = trace[1],
             entries = [0, x$5, y$1, z$0, w, origin$1, dummy, dummy, dummy],
             i = 0;
            for(;;){
             add_idx(origin$0, i, caml_check_bound(entries, i)[1 + i]);
             var _u8_ = i + 1 | 0;
             if(4 === i) break;
             i = _u8_;
            }
            var trace$0 = [4, 5, 5, entries];
            break;
           default:
            var index = trace[2];
            if(index < trace[3].length - 1){
             trace[2] = trace[2] + 1 | 0;
             var trace$1 = trace, entries$0 = trace[3];
            }
            else{
             var entries$1 = caml_make_vect(index * 2 | 0, dummy);
             blit$0(trace[3], 0, entries$1, 0, index);
             var
              trace$1 = [4, trace[1], index + 1 | 0, entries$1],
              entries$0 = entries$1;
            }
            caml_check_bound(entries$0, index)[1 + index] = origin$1;
            add_idx(origin$0, index, origin$1);
            var trace$0 = trace$1;
         }
        origin$0[2] = trace$0;
        if(! acquire) return acquire;
        var match = origin$0[4];
        switch(match[0]){
          case 0:
           var self$0 = match[1];
           origin$1 = origin$0;
           origin$0 = self$0;
           break;
          case 1:
           var self$1 = match[2], x = match[1];
           sub_acquire(origin$0, x);
           origin$1 = origin$0;
           origin$0 = self$1;
           break;
          case 2:
           var self$2 = match[2], x$0 = match[1];
           sub_acquire(origin$0, x$0);
           origin$1 = origin$0;
           origin$0 = self$2;
           break;
          case 3:
           var self$3 = match[2], x$1 = match[1];
           sub_acquire(origin$0, x$1);
           origin$1 = origin$0;
           origin$0 = self$3;
           break;
          case 4:
           var child = match[1], intermediate = match[2];
           sub_acquire(origin$0, child);
           if(intermediate)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _dK_], 1);
           return;
          case 5:
           return;
          case 6:
           return;
          default:
           var self$4 = match[2], doc = match[1];
           sub_acquire(origin$0, doc);
           origin$1 = origin$0;
           origin$0 = self$4;
        }
        break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dL_], 1);
     }
   }
   function activate_tracing(self, origin, tn){
    if(typeof tn !== "number" && 4 === tn[0]){
     var idx = get_idx(self, origin), active = tn[1];
     if(active <= idx) tn[1] = active + 1 | 0;
     var _u7_ = active < idx ? 1 : 0;
     if(! _u7_) return _u7_;
     var old = caml_check_bound(tn[3], active)[1 + active];
     caml_check_bound(tn[3], idx)[1 + idx] = old;
     caml_check_bound(tn[3], active)[1 + active] = origin;
     mov_idx(self, active, idx, old);
     return mov_idx(self, idx, active, origin);
    }
    return;
   }
   function sub_is_damaged(param){
    switch(param[0]){
      case 0:
       return 0;
      case 1:
       var value = param[1];
       if(typeof value !== "number") return 0;
       if(value)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dM_], 1);
       return 1;
      default:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dN_], 1);
    }
   }
   function sub_sample(queue){
    function aux(origin, self){
     switch(self[0]){
       case 0:
        var x = self[1]; return x;
       case 1:
        var match = self[1];
        if(typeof match !== "number"){
         var value = match[1];
         activate_tracing(self, origin, self[2]);
         return value;
        }
        self[1] = 1;
        var x$0 = self[4];
        switch(x$0[0]){
          case 0:
           var
            f = x$0[2],
            x$1 = x$0[1],
            result = caml_call1(f, aux(self, x$1));
           break;
          case 1:
           var
            f$0 = x$0[3],
            y = x$0[2],
            x$2 = x$0[1],
            _u3_ = aux(self, y),
            result = caml_call2(f$0, aux(self, x$2), _u3_);
           break;
          case 2:
           var
            y$0 = x$0[2],
            x$3 = x$0[1],
            _u4_ = aux(self, y$0),
            result = [0, aux(self, x$3), _u4_];
           break;
          case 3:
           var
            x$4 = x$0[2],
            f$1 = x$0[1],
            _u5_ = aux(self, x$4),
            result = caml_call1(aux(self, f$1), _u5_);
           break;
          case 4:
           var intermediate = aux(self, x$0[1]), match$0 = x$0[2];
           if(match$0){
            var x$5 = match$0[1];
            if(x$5 !== intermediate){
             queue[1] = [0, self, x$5, queue[1]];
             x$0[2] = [0, intermediate];
             sub_acquire(self, intermediate);
            }
           }
           else{x$0[2] = [0, intermediate]; sub_acquire(self, intermediate);}
           var result = aux(self, intermediate);
           break;
          case 5:
           var result = x$0[1]; break;
          case 6:
           var result = caml_call1(x$0[1], self); break;
          default:
           var wrt = x$0[2], doc = x$0[1];
           aux(self, wrt);
           var result$0 = aux(self, doc);
           if(sub_is_damaged(wrt))
            var _u6_ = aux(origin, self);
           else{
            if(sub_is_damaged(doc)) do_invalidate(1, self);
            var _u6_ = result$0;
           }
           var result = _u6_;
        }
        var _u2_ = self[1];
        a:
        if(typeof _u2_ === "number" && _u2_){self[1] = [0, result]; break a;}
        activate_tracing(self, origin, self[2]);
        return result;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dO_], 1);
     }
    }
    return aux;
   }
   function observe$0(opt, child){
    if(opt)
     var sth = opt[1], on_invalidate = sth;
    else
     var on_invalidate = function(_u1_){return 0;};
    var root = [2, 0, 0, on_invalidate, 0, child];
    return root;
   }
   var Release_failure = [248, _dP_, caml_fresh_oo_id(0)];
   function raw_flush_release_queue(queue){
    function aux(failures, param){
     var failures$0 = failures, param$0 = param;
     for(;;){
      if(! param$0) return failures$0;
      var failures$1 = sub_release(failures$0, param$0[1], param$0[2]);
      failures$0 = failures$1;
      param$0 = param$0[3];
     }
    }
    return aux(0, queue);
   }
   function flush_release_queue(queue){
    var queue$0 = queue[1];
    queue[1] = 0;
    return raw_flush_release_queue(queue$0);
   }
   function sample(queue, self){
    if(2 !== self[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dQ_], 1);
    var match = self[1];
    if(typeof match !== "number"){var value$0 = match[1]; return value$0;}
    if(1 - self[4]){self[4] = 1; sub_acquire(self, self[5]);}
    self[1] = 1;
    var _uZ_ = self[5], value = sub_sample(queue)(self, _uZ_), _u0_ = self[1];
    a:
    if(typeof _u0_ === "number" && _u0_){self[1] = [0, value]; break a;}
    return value;
   }
   function set_on_invalidate(x, f){
    if(2 !== x[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dR_], 1);
    x[3] = f;
    return 0;
   }
   function flush_or_fail(main_exn, queue){
    var failures = flush_release_queue(queue);
    if(failures)
     throw caml_maybe_attach_backtrace
            ([0, Release_failure, main_exn, failures], 1);
    return;
   }
   function quick_sample(root){
    var queue = [0, 0];
    try{var result = sample(queue, root);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     flush_or_fail([0, exn], queue);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    flush_or_fail(0, queue);
    return result;
   }
   function symbol_bind(x, f){return bind$1(x, f);}
   function map_reduce(inj, param, items){
    var plus = param[2], zero = param[1];
    function cons_monoid(c, xs, v){
     var c$0 = c, xs$0 = xs, v$0 = v;
     for(;;){
      if(xs$0){
       var xs$1 = xs$0[2], match = xs$0[1], v$1 = match[2], c$1 = match[1];
       if(c$0 === c$1){
        var v$2 = caml_call2(plus, v$1, v$0), c$2 = c$0 + 1 | 0;
        c$0 = c$2;
        xs$0 = xs$1;
        v$0 = v$2;
        continue;
       }
      }
      return [0, [0, c$0, v$0], xs$0];
     }
    }
    function cons_monoid$0(xs, v){
     return cons_monoid(0, xs, caml_call1(inj, v));
    }
    var match = fold_left(cons_monoid$0, 0, items);
    if(! match) return zero;
    var xs = match[2], x = match[1][2];
    return fold_left
            (function(acc, param){
              var v = param[2];
              return caml_call2(plus, v, acc);
             },
             x,
             xs);
   }
   var not_origin = [0, 0], origin = [0, 0];
   function make$3(param){return [1, 0, 0, origin, 0];}
   function set_parent(parent, param){
    if(typeof param === "number") return;
    if(0 !== param[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dS_], 1);
    param[5] = parent;
    return;
   }
   function make_node(set, left, right, parent){
    if(set) var value = set[1], binding = [0, value, 1]; else var binding = 0;
    var node = [0, 0, left, binding, right, parent, 0];
    set_parent(node, left);
    set_parent(node, right);
    return node;
   }
   function raw_invalidate(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _dT_], 1);
     if(0 !== param$0[0]) return iter$0(invalidate, param$0[4]);
     if(0 === param$0[6]) return;
     param$0[6] = 0;
     param$0 = param$0[5];
    }
   }
   function append$0(set, parent){
    if(typeof parent !== "number" && 1 === parent[0]){
     raw_invalidate(parent);
     var node = make_node(set, parent[2], 0, parent);
     parent[2] = node;
     return node;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dU_], 1);
   }
   function get$5(param){
    if(typeof param !== "number" && 0 === param[0]){
     var match = param[3];
     if(match){var value = match[1]; return [0, value];}
    }
    return 0;
   }
   function invalidate_binding(param){
    if(! param) return;
    param[2] = 0;
    return;
   }
   function set_binding(x, t){
    if(typeof t !== "number"){
     if(0 !== t[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _dV_], 1);
     if(typeof t[5] !== "number"){
      raw_invalidate(t);
      invalidate_binding(t[3]);
      t[3] = x;
      return 0;
     }
    }
    return 0;
   }
   function symbol$2(t, value){return set_binding([0, value, 1], t);}
   function unset(t){return set_binding(0, t);}
   function size(node){
    if(typeof node === "number") return 0;
    if(0 !== node[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dX_], 1);
    if(0 === node[6])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dW_], 1);
    return node[6];
   }
   function smaller_ell(smin, smax){
    var
     _uX_ = smin < smax ? 1 : 0,
     _uY_ = _uX_ ? (smin & smax) << 1 < smax ? 1 : 0 : _uX_;
    return _uY_;
   }
   function disbalanced(smin, smax){return smaller_ell(smin, smax >>> 1 | 0);}
   function reparent(parent, oldchild, newchild){
    if(typeof parent !== "number"){
     if(0 !== parent[0]){
      if(parent[2] !== oldchild)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dZ_], 1);
      parent[2] = newchild;
      return;
     }
     if(parent[2] === oldchild){parent[2] = newchild; return;}
     if(parent[4] === oldchild){parent[4] = newchild; return;}
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dY_], 1);
   }
   function rot_left$0(counter, version, sn){
    if(typeof sn !== "number" && 0 === sn[0]){
     var rn = sn[4];
     if(typeof rn !== "number" && 1 !== rn[0]){
      var parent = sn[5], rl = rn[2];
      if(typeof rl === "number")
       var rl$0 = 0;
      else{
       if(0 !== rl[0])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _d1_], 1);
       rl[5] = sn;
       var rl$0 = rl;
      }
      rn[2] = sn;
      sn[4] = rl$0;
      sn[5] = rn;
      rn[5] = parent;
      reparent(parent, sn, rn);
      balance(version, sn);
      if(counter >= 50)
       return caml_trampoline_return(balance$0, [0, version, rn]);
      var counter$0 = counter + 1 | 0;
      return balance$0(counter$0, version, rn);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d0_], 1);
   }
   function rot_left(version, sn){
    return caml_trampoline(rot_left$0(0, version, sn));
   }
   function rot_right$0(counter, version, sn){
    if(typeof sn !== "number" && 0 === sn[0]){
     var ln = sn[2];
     if(typeof ln !== "number" && 1 !== ln[0]){
      var parent = sn[5], lr = ln[4];
      if(typeof lr === "number")
       var lr$0 = 0;
      else{
       if(0 !== lr[0])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _d3_], 1);
       lr[5] = sn;
       var lr$0 = lr;
      }
      ln[4] = sn;
      sn[2] = lr$0;
      sn[5] = ln;
      ln[5] = parent;
      reparent(parent, sn, ln);
      balance(version, sn);
      if(counter >= 50)
       return caml_trampoline_return(balance$0, [0, version, ln]);
      var counter$0 = counter + 1 | 0;
      return balance$0(counter$0, version, ln);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d2_], 1);
   }
   function rot_right(version, sn){
    return caml_trampoline(rot_right$0(0, version, sn));
   }
   function inc_left(counter, version, self){
    if(typeof self !== "number" && 0 === self[0]){
     var right = self[4];
     a:
     if(typeof right !== "number" && 0 === right[0]){
      var _uW_ = size(right[2]);
      if(smaller_ell(size(right[4]), _uW_)){rot_right(version, right); break a;}
     }
     if(counter >= 50)
      return caml_trampoline_return(rot_left$0, [0, version, self]);
     var counter$0 = counter + 1 | 0;
     return rot_left$0(counter$0, version, self);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d4_], 1);
   }
   function inc_right(counter, version, self){
    if(typeof self !== "number" && 0 === self[0]){
     var left = self[2];
     a:
     if(typeof left !== "number" && 0 === left[0]){
      var _uV_ = size(left[4]);
      if(smaller_ell(size(left[2]), _uV_)){rot_left(version, left); break a;}
     }
     if(counter >= 50)
      return caml_trampoline_return(rot_right$0, [0, version, self]);
     var counter$0 = counter + 1 | 0;
     return rot_right$0(counter$0, version, self);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d5_], 1);
   }
   function balance$0(counter, version, self){
    if(typeof self !== "number" && 0 === self[0]){
     var sl = size(self[2]), sr = size(self[4]);
     if(sl < sr){
      if(! disbalanced(sl, sr)){
       self[1] = version;
       self[6] = (1 + sl | 0) + sr | 0;
       return self;
      }
      if(counter >= 50)
       return caml_trampoline_return(inc_left, [0, version, self]);
      var counter$1 = counter + 1 | 0;
      return inc_left(counter$1, version, self);
     }
     if(! disbalanced(sr, sl)){
      self[1] = version;
      self[6] = (1 + sl | 0) + sr | 0;
      return self;
     }
     if(counter >= 50)
      return caml_trampoline_return(inc_right, [0, version, self]);
     var counter$0 = counter + 1 | 0;
     return inc_right(counter$0, version, self);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d6_], 1);
   }
   function balance(version, self){
    return caml_trampoline(balance$0(0, version, self));
   }
   function compute_sub_size(version, self){
    var self$0 = self;
    for(;;){
     if(typeof self$0 === "number") return;
     if(0 !== self$0[0]) return;
     var _uS_ = 0 === self$0[6] ? 1 : 0;
     if(! _uS_) return _uS_;
     var _uT_ = self$0[2];
     if(typeof _uT_ !== "number" && 0 === _uT_[0] && 0 === _uT_[6]){var self$2 = self$0[2]; self$0 = self$2; continue;}
     var _uU_ = self$0[4];
     if(typeof _uU_ !== "number" && 0 === _uU_[0] && 0 === _uU_[6]){var self$1 = self$0[4]; self$0 = self$1; continue;}
     var parent = self$0[5];
     balance(version, self$0);
     self$0 = parent;
    }
   }
   function reset_version(version, param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return;
     if(0 !== param$0[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d7_], 1);
     param$0[1] = version;
     reset_version(version, param$0[2]);
     param$0 = param$0[4];
    }
   }
   function rebalance(r){
    if(typeof r !== "number" && 1 === r[0]){
     var _uR_ = r[2];
     if(typeof _uR_ !== "number"){
      if(0 !== _uR_[0])
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d9_], 1);
      if(0 === _uR_[6]){
       var
        version = r[1] + 1 | 0,
        version$0 =
          version === 2147483647
           ? (r[3] = [0, 0], reset_version(0, r[2]), 0)
           : version;
       r[1] = version$0;
       compute_sub_size(version$0, r[2]);
       return version$0;
      }
     }
     return r[1];
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d8_], 1);
   }
   function plus(param, x, y){
    var plus = param[2], zero = param[1];
    return x === zero ? y : y === zero ? x : caml_call2(plus, x, y);
   }
   function extract_bindings(tree){
    function aux(acc, param){
     var acc$0 = acc, rnode = param;
     for(;;){
      if(! rnode) return acc$0;
      var acc$1 = aux(acc$0, rnode[6]), _uP_ = rnode[2];
      if(_uP_)
       var
        _uQ_ = _uP_[2] ? [0, [0, rnode[2], rnode[3]], acc$1] : acc$1,
        acc$2 = _uQ_;
      else
       var acc$2 = acc$1;
      acc$0 = acc$2;
      rnode = rnode[5];
     }
    }
    return aux(0, tree);
   }
   function full_rebuild(red, tree){
    var bindings = [0, extract_bindings(red[3])];
    function aux(cell){
     if(typeof cell === "number") return 0;
     if(0 !== cell[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d$_], 1);
     var left = aux(cell[2]), binding = cell[3], _uO_ = bindings[1];
     a:
     if(binding){
      if(_uO_){
       var
        bindings$0 = _uO_[2],
        match = _uO_[1],
        reduction = match[2],
        binding$0 = match[1];
       if(binding === binding$0){
        bindings[1] = bindings$0;
        var reduction$0 = reduction;
        break a;
       }
      }
      if(! binding[2])
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d__], 1);
      var reduction$0 = caml_call2(red[5], cell, binding[1]);
     }
     else
      var reduction$0 = red[6][1];
     var
      right = aux(cell[4]),
      aggregate = left ? plus(red[6], left[4], reduction$0) : reduction$0,
      aggregate$0 = right ? plus(red[6], aggregate, right[4]) : aggregate;
     return [0, cell, cell[3], reduction$0, aggregate$0, left, right];
    }
    var result = aux(tree);
    if(0 === bindings[1]) return result;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ea_], 1);
   }
   function extract_fringe(version, tree){
    function aux(acc, tree){
     var acc$0 = acc, rnode = tree;
     for(;;){
      if(! rnode) return acc$0;
      var match = rnode[1];
      if(typeof match !== "number" && 0 === match[0] && match[1] <= version)
       return [0, rnode, acc$0];
      var acc$1 = aux(acc$0, rnode[6]), _uM_ = rnode[2];
      if(_uM_)
       var _uN_ = _uM_[2] ? [0, rnode, acc$1] : acc$1, acc$2 = _uN_;
      else
       var acc$2 = acc$1;
      var tree$0 = rnode[5];
      acc$0 = acc$2;
      rnode = tree$0;
     }
    }
    return aux(0, tree);
   }
   function incremental_rebuild(red, version, tree){
    var fringe = [0, extract_fringe(version, red[3])];
    function aux(cell){
     if(typeof cell !== "number" && 0 === cell[0]){
      if(cell[1] <= version){
       var match = fringe[1];
       if(match){
        var reduction = match[1];
        if(reduction){
         var fringe$0 = match[2];
         if(reduction[1] !== cell)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _eb_], 1);
         fringe[1] = fringe$0;
         return reduction;
        }
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _ec_], 1);
      }
      var left = aux(cell[2]), binding = cell[3], _uK_ = fringe[1];
      a:
      if(binding){
       if(_uK_){
        var rnode = _uK_[1];
        if(rnode){
         var fringe$1 = _uK_[2];
         if(binding === rnode[2]){
          fringe[1] = fringe$1;
          var _uL_ = rnode[3], reduction$0 = _uL_;
          break a;
         }
        }
       }
       if(! binding[2])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ed_], 1);
       var reduction$0 = caml_call2(red[5], cell, binding[1]);
      }
      else
       var reduction$0 = red[6][1];
      var
       right = aux(cell[4]),
       aggregate = left ? plus(red[6], left[4], reduction$0) : reduction$0,
       aggregate$0 = right ? plus(red[6], aggregate, right[4]) : aggregate;
      return [0, cell, cell[3], reduction$0, aggregate$0, left, right];
     }
     return 0;
    }
    var result = aux(tree);
    if(0 === fringe[1]) return result;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ee_], 1);
   }
   function eval$0(red){
    var root = red[2];
    if(typeof root !== "number" && 1 === root[0]){
     var version = rebalance(red[2]);
     if(red[4] !== root[3]){
      red[4] = root[3];
      red[3] = full_rebuild(red, root[2]);
     }
     else
      red[3] = incremental_rebuild(red, red[1], root[2]);
     red[1] = version;
     var match = red[3];
     return match ? match[4] : red[6][1];
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ef_], 1);
   }
   function opaque(_uJ_){return _uJ_;}
   function map_reduce$0(mapper, monoid, source){
    var
     reduction = [0, 0, source, 0, not_origin, mapper, monoid],
     prim$0 =
       prim
        (function(self){
          var match = reduction[2];
          if(typeof match !== "number" && 1 === match[0]){
           var _uI_ = match[4];
           match[4] = [0, opaque(self), _uI_];
           return reduction;
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _eh_], 1);
         },
         function(self, reduction){
          var match = reduction[2];
          if(typeof match !== "number" && 1 === match[0]){
           var
            _uC_ = match[4],
            _uD_ = opaque(self),
            _uE_ = function(_uH_, _uG_){return _uH_ !== _uG_ ? 1 : 0;};
           match[4] = find_all(function(_uF_){return _uE_(_uD_, _uF_);})(_uC_);
           return 0;
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _eg_], 1);
         });
    return func(get_prim(prim$0), eval$0);
   }
   function aux(acc, self){
    var acc$0 = acc, self$0 = self;
    for(;;){
     if(typeof self$0 === "number") return acc$0;
     if(0 !== self$0[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ei_], 1);
     var self$1 = self$0[2], acc$1 = [0, self$0];
     acc$0 = acc$1;
     self$0 = self$1;
    }
   }
   function left_most(r){return aux(0, r);}
   var right_most = function _uB_(_uA_){return _uB_.fun(_uA_);};
   function aux$0(acc, self){
    var acc$0 = acc, self$0 = self;
    for(;;){
     if(typeof self$0 === "number") return acc$0;
     if(0 !== self$0[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ej_], 1);
     var self$1 = self$0[4], acc$1 = [0, self$0];
     acc$0 = acc$1;
     self$0 = self$1;
    }
   }
   caml_update_dummy(right_most, function(r){return aux$0(0, r);});
   function first(param){
    if(typeof param !== "number" && 1 === param[0])
     return left_most(param[2]);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ek_], 1);
   }
   function next(self){
    if(typeof self === "number") return 0;
    if(0 !== self[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _en_], 1);
    var x = left_most(self[4]);
    if(x) return x;
    function walk_root(self, parent){
     var self$0 = self, parent$0 = parent;
     for(;;){
      if(typeof parent$0 === "number")
       throw caml_maybe_attach_backtrace([0, Assert_failure, _el_], 1);
      if(0 !== parent$0[0]) return 0;
      if(parent$0[2] === self$0) return [0, parent$0];
      if(parent$0[4] !== self$0)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _em_], 1);
      var parent$1 = parent$0[5];
      self$0 = parent$0;
      parent$0 = parent$1;
     }
    }
    return walk_root(self, self[5]);
   }
   var empty$1 = 0;
   function element(v){return [0, 0, v];}
   function maxi(a, b){return a < b ? b : a;}
   function rank(t){
    if(typeof t === "number") return 0;
    if(0 === t[0]){if(0 !== t[1]) invalid_arg(_eo_); return 0;}
    if(0 !== (t[1] & 2)) invalid_arg(_ep_);
    return t[1] >>> 2 | 0;
   }
   function concat$1(a, b){
    if(typeof a === "number")
     var x = b;
    else{
     if(typeof b !== "number"){
      var _uz_ = rank(b);
      return [1, (maxi(rank(a), _uz_) + 1 | 0) << 2, a, b];
     }
     var x = a;
    }
    return x;
   }
   function view(param){
    return typeof param === "number"
            ? 0
            : 0 === param[0] ? [0, param[2]] : [1, param[2], param[3]];
   }
   var mask_old = 1, mask_new = 2, mask_both = 3;
   function is_shared(m){return -1 === m ? 1 : 0;}
   function is_not_shared(m){return -1 !== m ? 1 : 0;}
   function is_both(m){return (m & 3) === 3 ? 1 : 0;}
   function is_old(m){return (m & 3) === 1 ? 1 : 0;}
   function is_new(m){return (m & 3) === 2 ? 1 : 0;}
   function set_both(m){return m | 3;}
   function get_index(m){return m >>> 2 | 0;}
   function with_index_new(index){return index << 2 | 2;}
   function unmark(m){return m & lnot(mask_both);}
   function marked(s){return s[1];}
   function shared(s){return s[2];}
   function blocked(s){return s[3];}
   function mk_stats(param){return [0, 0, 0, 0];}
   function new_marked(stats){stats[1] = stats[1] + 1 | 0; return;}
   function new_shared(stats){stats[2] = stats[2] + 1 | 0; return;}
   function new_blocked(stats){stats[3] = stats[3] + 1 | 0; return;}
   function block(stats, mask, param){
    var t = param;
    for(;;){
     if(typeof t === "number") return;
     if(0 === t[0]){
      var
       mark = t[1],
       _uv_ = (mark & 3) !== 3 ? 1 : 0,
       _uw_ = _uv_ ? 0 !== (mark & 3) ? 1 : 0 : _uv_;
      if(_uw_){
       if(0 !== (mark & mask))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _eq_], 1);
       new_marked(stats);
       new_blocked(stats);
       t[1] = mark | 3;
      }
      return;
     }
     var
      mark$0 = t[1],
      _ux_ = (mark$0 & 3) !== 3 ? 1 : 0,
      _uy_ = _ux_ ? 0 !== (mark$0 & 3) ? 1 : 0 : _ux_;
     if(! _uy_) return _uy_;
     if(0 !== (mark$0 & mask))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _er_], 1);
     new_marked(stats);
     new_blocked(stats);
     t[1] = mark$0 | 3;
     block(stats, mask, t[2]);
     t = t[3];
    }
   }
   function enqueue(stats, q, mask, t){
    if(typeof t === "number") return;
    if(0 === t[0]){
     var mark = t[1];
     if(0 === (mark & mask)){
      new_marked(stats);
      if(0 === (mark & 3))
       t[1] = mark | mask;
      else{t[1] = -1; new_blocked(stats); new_shared(stats);}
     }
     var
      _ur_ = -1 !== mark ? 1 : 0,
      _us_ = _ur_ ? (mark & 3) === 3 ? 1 : 0 : _ur_;
     return _us_ ? (t[1] = -1, new_shared(stats)) : _us_;
    }
    var mark$0 = t[1];
    if(0 === (mark$0 & mask)){
     new_marked(stats);
     if(0 === (mark$0 & 3)){
      t[1] = mark$0 | mask;
      add(t, q);
     }
     else{
      t[1] = -1;
      new_blocked(stats);
      new_shared(stats);
      block(stats, mask, t[2]);
      block(stats, mask, t[3]);
     }
    }
    var
     _ut_ = -1 !== mark$0 ? 1 : 0,
     _uu_ = _ut_ ? (mark$0 & 3) === 3 ? 1 : 0 : _ut_;
    return _uu_ ? (t[1] = -1, new_shared(stats)) : _uu_;
   }
   function dequeue(stats, q, mask){
    var t = take(q);
    if(typeof t !== "number" && 1 === t[0]){
     var _uq_ = (t[1] & 3) === mask ? 1 : 0;
     return _uq_
             ? (enqueue(stats, q, mask, t[2]), enqueue(stats, q, mask, t[3]))
             : _uq_;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _es_], 1);
   }
   function traverse1(stats, q, mask){
    for(;;){if(is_empty(q)) return; dequeue(stats, q, mask);}
   }
   function traverse(sold, snew, qold, qnew){
    for(;;){
     if(is_empty(qold)) return traverse1(snew, qnew, mask_new);
     if(is_empty(qnew)) return traverse1(sold, qold, mask_old);
     dequeue(sold, qold, mask_old);
     dequeue(snew, qnew, mask_new);
    }
   }
   function old_stats(tr){return tr[1];}
   function new_stats(tr){return tr[2];}
   function unsafe_traverse(old_root, new_root){
    var
     old_stats = mk_stats(0),
     new_stats = mk_stats(0),
     old_queue = create$0(0),
     new_queue = create$0(0);
    enqueue(old_stats, old_queue, mask_old, old_root);
    enqueue(new_stats, new_queue, mask_new, new_root);
    traverse(old_stats, new_stats, old_queue, new_queue);
    return [0, old_stats, new_stats];
   }
   function restore(param){
    if(typeof param === "number") return;
    if(0 === param[0]){param[1] = 0; return;}
    var _up_ = rank(param[3]);
    param[1] = (maxi(rank(param[2]), _up_) + 1 | 0) << 2;
    return;
   }
   function next_shared_index(st){
    var result = st[6];
    st[6] = result + 1 | 0;
    return result;
   }
   function unblock(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return;
     if(0 === param$0[0]){
      var t = param$0[1];
      if(typeof t !== "number" && 0 === t[0]){
       var
        mark = t[1],
        _ul_ = is_not_shared(mark),
        _um_ = _ul_ ? is_both(mark) : _ul_;
       if(_um_) t[1] = unmark(mark);
       return;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _et_], 1);
     }
     var t$0 = param$0[1];
     if(typeof t$0 !== "number" && 1 === t$0[0]){
      var
       r = param$0[4],
       l = param$0[3],
       mark$0 = t$0[1],
       _un_ = is_not_shared(mark$0),
       _uo_ = _un_ ? is_both(mark$0) : _un_;
      if(! _uo_) return _uo_;
      t$0[1] = unmark(mark$0);
      unblock(l);
      param$0 = r;
      continue;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _eu_], 1);
    }
   }
   function unmark_old(st, t){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return;
     if(0 === t$0[0]){
      var a = t$0[1];
      if(typeof a !== "number" && 0 === a[0]){
       var b = t$0[2], mark = a[1];
       if(! is_old(mark)){
        if(is_shared(mark)){
         var index = next_shared_index(st);
         caml_check_bound(st[4], index)[1 + index] = a;
         caml_check_bound(st[5], index)[1 + index] = [0, t$0, 0];
         a[1] = with_index_new(index);
         return;
        }
        if(is_new(mark)){
         var
          index$0 = get_index(mark),
          _uh_ = [0, t$0, caml_check_bound(st[5], index$0)[1 + index$0]];
         caml_check_bound(st[5], index$0)[1 + index$0] = _uh_;
         return;
        }
        var _ui_ = is_both(mark);
        if(_ui_)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ex_], 1);
        return _ui_;
       }
       var dropped_leaf = st[2];
       if(-1 < dropped_leaf){
        caml_check_bound(st[1], dropped_leaf)[1 + dropped_leaf] = b;
        st[2] = dropped_leaf + 1 | 0;
        if(st[2] > st[3])
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ew_], 1);
       }
       a[1] = unmark(mark);
       return;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ev_], 1);
     }
     var a$0 = t$0[1];
     if(typeof a$0 !== "number" && 1 === a$0[0]){
      var b$0 = t$0[2], r = t$0[4], l = t$0[3], mark$0 = a$0[1];
      if(is_shared(mark$0)){
       var index$1 = next_shared_index(st);
       caml_check_bound(st[4], index$1)[1 + index$1] = a$0;
       caml_check_bound(st[5], index$1)[1 + index$1] = [0, t$0, 0];
       a$0[1] = with_index_new(index$1);
       unblock(l);
       return unblock(r);
      }
      if(! is_old(mark$0)){
       if(is_new(mark$0)){
        var
         index$2 = mark$0 >>> 2 | 0,
         _uj_ = [0, t$0, caml_check_bound(st[5], index$2)[1 + index$2]];
        caml_check_bound(st[5], index$2)[1 + index$2] = _uj_;
        return;
       }
       var _uk_ = is_both(mark$0);
       if(_uk_)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _eA_], 1);
       return _uk_;
      }
      if(-1 < st[3]){
       var dropped_join = st[3] - 1 | 0;
       caml_check_bound(st[1], dropped_join)[1 + dropped_join] = b$0;
       st[3] = dropped_join;
       if(st[2] > st[3])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ez_], 1);
      }
      a$0[1] = unmark(mark$0);
      unmark_old(st, l);
      t$0 = r;
      continue;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ey_], 1);
    }
   }
   function prepare_shared(st){
    var _ue_ = st[6] - 1 | 0, _ud_ = 0;
    if(_ue_ >= 0){
     var i = _ud_;
     for(;;){
      var match = caml_check_bound(st[4], i)[1 + i];
      if(typeof match !== "number")
       if(0 === match[0])
        match[1] = set_both(match[1]);
       else
        match[1] = set_both(match[1]);
      var xs = caml_check_bound(st[5], i)[1 + i];
      if(! xs)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _eB_], 1);
      if(xs[2]){var _uf_ = rev(xs); caml_check_bound(st[5], i)[1 + i] = _uf_;}
      var _ug_ = i + 1 | 0;
      if(_ue_ === i) break;
      i = _ug_;
     }
    }
    return;
   }
   function unmark_new(st, t){
    if(typeof t === "number") return 0;
    if(0 !== t[0]){
     var mark$0 = t[1];
     if(-1 === mark$0){
      var index$0 = next_shared_index(st);
      t[1] = 0;
      caml_check_bound(st[4], index$0)[1 + index$0] = t;
      var l = unmark_new(st, t[2]), r = unmark_new(st, t[3]);
      return [1, t, 0, l, r];
     }
     if(! is_both(mark$0)){
      t[1] = unmark(t[1]);
      var l$0 = unmark_new(st, t[2]), r$0 = unmark_new(st, t[3]);
      return [1, t, 0, l$0, r$0];
     }
     var
      index$1 = mark$0 >>> 2 | 0,
      match$0 = caml_check_bound(st[5], index$1)[1 + index$1];
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _eC_], 1);
     var xs$0 = match$0[2], x$0 = match$0[1];
     caml_check_bound(st[5], index$1)[1 + index$1] = xs$0;
     if(0 === xs$0) t[1] = 0;
     return x$0;
    }
    var mark = t[1];
    if(is_not_shared(mark) && is_both(mark)){
     var
      index = mark >>> 2 | 0,
      match = caml_check_bound(st[5], index)[1 + index];
     if(! match) return [0, t, 0];
     var xs = match[2], x = match[1];
     caml_check_bound(st[5], index)[1 + index] = xs;
     return x;
    }
    t[1] = 0;
    return [0, t, 0];
   }
   var no_dropped = [0, 0, [0], 0, 0];
   function diff(get_dropped, xold, tnew){
    if(typeof xold === "number"){
     if(typeof tnew === "number") return [0, no_dropped, 0];
    }
    else{var a$0 = xold[1]; if(a$0 === tnew) return [0, no_dropped, xold];}
    if(typeof xold === "number")
     var empty = empty$1;
    else
     var a = xold[1], empty = a;
    var
     traversal = unsafe_traverse(empty, tnew),
     sold = old_stats(traversal),
     snew = new_stats(traversal),
     _t2_ = blocked(snew),
     _t3_ = blocked(sold) + _t2_ | 0,
     nb_dropped = marked(sold) - _t3_ | 0,
     _t4_ = shared(snew),
     nb_shared = shared(sold) + _t4_ | 0,
     _t5_ = 0,
     _t6_ = caml_make_vect(nb_shared, 0),
     _t7_ = caml_make_vect(nb_shared, 0),
     nb_dropped$0 = get_dropped ? nb_dropped : -1,
     _t8_ = get_dropped ? 0 : -1,
     _t9_ = get_dropped ? caml_make_vect(nb_dropped, 0) : [0],
     st = [0, _t9_, _t8_, nb_dropped$0, _t7_, _t6_, _t5_];
    unmark_old(st, xold);
    if(st[2] !== st[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _eD_], 1);
    prepare_shared(st);
    var result = unmark_new(st, tnew), _t__ = st[6] - 1 | 0;
    if(_t__ >= 0){
     var i$0 = _t__;
     for(;;){
      restore(caml_check_bound(st[4], i$0)[1 + i$0]);
      var _uc_ = i$0 - 1 | 0;
      if(0 === i$0) break;
      i$0 = _uc_;
     }
    }
    if(! get_dropped) return [0, no_dropped, result];
    var xleaf = [0, 0], xjoin = [0, 0], _ua_ = st[6] - 1 | 0, _t$_ = 0;
    if(_ua_ >= 0){
     var i = _t$_;
     for(;;){
      iter$0
       (function(param){
         if(typeof param !== "number")
          if(0 === param[0]){
           var match = param[2];
           if(match){var b = match[1]; xleaf[1] = [0, b, xleaf[1]]; return 0;}
          }
          else{
           var match$0 = param[2];
           if(match$0){
            var b$0 = match$0[1];
            xjoin[1] = [0, b$0, xjoin[1]];
            return 0;
           }
          }
         return 0;
        },
        caml_check_bound(st[5], i)[1 + i]);
      var _ub_ = i + 1 | 0;
      if(_ua_ === i) break;
      i = _ub_;
     }
    }
    return [0, [0, st[2], st[1], xleaf[1], xjoin[1]], result];
   }
   function eval$1(map_reduce, other){
    if(typeof other === "number") return 0;
    function aux(param){
     a:
     if(typeof param !== "number"){
      b:
      {
       if(0 === param[0]){
        var t = param[1];
        if(typeof t !== "number" && 0 === t[0]){
         var _t0_ = param[2];
         if(_t0_){var b = _t0_[1]; break b;}
         var result = caml_call1(map_reduce[1], t[2]);
         param[2] = [0, result];
         return result;
        }
        break a;
       }
       var _t1_ = param[2];
       if(! _t1_){
        var
         l = aux(param[3]),
         r = aux(param[4]),
         result$0 = caml_call2(map_reduce[2], l, r);
        param[2] = [0, result$0];
        return result$0;
       }
       var b = _t1_[1];
      }
      return b;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _eE_], 1);
    }
    return [0, aux(other)];
   }
   function make$4(map, reduce){return [0, [0, map, reduce], 0];}
   function reduce(param){
    var tree = param[2], map_reduce = param[1];
    return eval$1(map_reduce, tree);
   }
   function update$0(param, new_tree){
    var
     old_tree = param[2],
     map_reduce = param[1],
     tree = diff(0, old_tree, new_tree)[2];
    return [0, map_reduce, tree];
   }
   function update_and_get_dropped(param, new_tree){
    var
     old_tree = param[2],
     map_reduce = param[1],
     match = diff(1, old_tree, new_tree),
     tree = match[2],
     dropped = match[1];
    return [0, dropped, [0, map_reduce, tree]];
   }
   function fold_dropped(kind, f, dropped, acc){
    var acc$0 = [0, acc];
    if(3850876 === kind)
     var bound = dropped[1], bound$0 = bound, start = 0;
    else if(858694086 <= kind)
     var bound$0 = dropped[2].length - 1, start = dropped[1];
    else
     var bound$0 = dropped[2].length - 1, start = 0;
    var _tY_ = bound$0 - 1 | 0;
    if(_tY_ >= start){
     var i = start;
     for(;;){
      var match = caml_check_bound(dropped[2], i)[1 + i];
      if(match){var x = match[1]; acc$0[1] = caml_call2(f, x, acc$0[1]);}
      var _tZ_ = i + 1 | 0;
      if(_tY_ === i) break;
      i = _tZ_;
     }
    }
    if(858694086 > kind)
     iter$0
      (function(x){acc$0[1] = caml_call2(f, x, acc$0[1]); return 0;},
       dropped[3]);
    if(3850876 !== kind)
     iter$0
      (function(x){acc$0[1] = caml_call2(f, x, acc$0[1]); return 0;},
       dropped[4]);
    return;
   }
   function pure_map_reduce(map, reduce, param){
    if(typeof param === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _eF_], 1);
    if(0 === param[0]) return caml_call1(map, param[2]);
    var _tX_ = pure_map_reduce(map, reduce, param[3]);
    return caml_call2(reduce, pure_map_reduce(map, reduce, param[2]), _tX_);
   }
   function fold_monoid(map, param, seq){
    var reduce$0 = param[2], zero = param[1], match = is_pure(seq);
    if(match){
     var other = match[1];
     return typeof other === "number"
             ? pure(zero)
             : pure(pure_map_reduce(map, reduce$0, other));
    }
    var reducer = [0, make$4(map, reduce$0)];
    return func
            (seq,
             function(seq){
              var reducer$0 = update$0(reducer[1], seq);
              reducer[1] = reducer$0;
              var match = reduce(reducer$0);
              if(! match) return zero;
              var x = match[1];
              return x;
             });
   }
   var monoid = [0, empty$1, concat$1];
   function transform_list(ls, f){return map_reduce(f, monoid, ls);}
   function of_list$1(ls){return transform_list(ls, element);}
   function to_list$1(x){
    function fold(x, acc){
     var x$0 = x, acc$0 = acc;
     for(;;){
      if(typeof x$0 === "number") return acc$0;
      if(0 === x$0[0]) return [0, x$0[2], acc$0];
      var acc$1 = fold(x$0[3], acc$0), x$1 = x$0[2];
      x$0 = x$1;
      acc$0 = acc$1;
     }
    }
    return fold(x, 0);
   }
   var
    lwd_empty = pure(0),
    lwd_monoid = [0, lwd_empty, function(x, y){return map2(x, y, concat$1);}];
   function map$4(f, seq){
    return fold_monoid
            (function(x){return element(caml_call1(f, x));}, monoid, seq);
   }
   function filter_map$0(f, seq){
    function select(x){
     var match = caml_call1(f, x);
     if(! match) return empty$1;
     var y = match[1];
     return element(y);
    }
    return fold_monoid(select, monoid, seq);
   }
   function bind$2(seq, f){return join(fold_monoid(f, lwd_monoid, seq));}
   function lift(seq){
    return bind$2(seq, function(_tW_){return func(_tW_, element);});
   }
   function handler(opts, type, func){return [0, opts, type, func];}
   function is_pure_element(param){
    var _tV_ = param[1];
    if(82 === _tV_){var x = param[2]; return is_some(is_pure(x));}
    if(83 > _tV_) return 1;
    var x$0 = param[2];
    return is_some(is_pure(x$0));
   }
   function extract_pure_element(x){return get$0(is_pure(x));}
   function extract_pure_elements(xs){
    return flatten
            (map$1
              (function(param){
                var _tU_ = param[1];
                if(82 === _tU_){
                 var x = param[2];
                 return [0, extract_pure_element(x), 0];
                }
                if(83 <= _tU_){
                 var x$0 = param[2];
                 return to_list$1(extract_pure_element(x$0));
                }
                var x$1 = param[2];
                return [0, x$1, 0];
               },
               xs));
   }
   function prepare_col(col){
    if(! col) return _eG_;
    var
     match = partition(is_pure_element, col),
     impure = match[2],
     pure = match[1];
    return [0, extract_pure_elements(pure), impure];
   }
   function consume_children(col){
    if(! col) return _eH_;
    var _tQ_ = col[1], _tR_ = _tQ_[1];
    if(82 === _tR_){
     if(! col[2]){var x = _tQ_[2]; return [0, 0, [0, func(x, element)]];}
    }
    else
     if(83 <= _tR_){
      if(! col[2]){var x$0 = _tQ_[2]; return [0, 0, [0, x$0]];}
     }
     else if(! col[2]){var x$1 = _tQ_[2]; return [0, [0, x$1, 0], 0];}
    return for_all(is_pure_element, col)
            ? [0,
              flatten
               (map$1
                 (function(param){
                   var _tS_ = param[1];
                   if(82 === _tS_){
                    var x = param[2];
                    return [0, extract_pure_element(x), 0];
                   }
                   if(83 <= _tS_){
                    var x$0 = param[2];
                    return to_list$1(extract_pure_element(x$0));
                   }
                   var x$1 = param[2];
                   return [0, x$1, 0];
                  },
                  col)),
              0]
            : [0,
              0,
              [0,
               map_reduce
                (function(param){
                  var _tT_ = param[1];
                  if(82 === _tT_){var x = param[2]; return func(x, element);}
                  if(83 <= _tT_){var x$0 = param[2]; return x$0;}
                  var x$1 = param[2];
                  return pure(element(x$1));
                 },
                 lwd_monoid,
                 col)]];
   }
   function child_node(node){return [0, node];}
   function child_join(left, right){return [1, null$0, left, right];}
   var
    jv_append = cst_append,
    jv_before = "before",
    jv_remove = cst_remove,
    jv_contains = "contains";
   function contains_focus(node){
    var match = active_el(document(node));
    if(! match) return 0;
    var el = match[1];
    return call(node, jv_contains, [0, el]) | 0;
   }
   function update_children(self, children){
    var reducer = [0, make$4(child_node, child_join)];
    return func
            (children,
             function(children){
              var
               match = update_and_get_dropped(reducer[1], children),
               reducer$0 = match[2],
               dropped = match[1];
              reducer[1] = reducer$0;
              function schedule_for_removal(child, param){
               if(0 !== child[0]) return 0;
               var node = child[1];
               return node[cst_lwd_to_remove] = true$0;
              }
              fold_dropped(3850876, schedule_for_removal, dropped, 0);
              var
               preserve_focus = contains_focus(self),
               match$0 = reduce(reducer$0);
              if(match$0){
               var
                tree = match$0[1],
                update =
                  function(acc, t){
                   if(0 !== t[0]){
                    if(! is_null(t[1])) return t[1];
                    var acc$0 = update(acc, t[3]), acc$1 = update(acc$0, t[2]);
                    t[1] = acc$1;
                    return acc$1;
                   }
                   var node = t[1];
                   delete node[cst_lwd_to_remove];
                   if(node.parentNode !== self)
                    if(is_null(acc))
                     call(self, jv_append, [0, node]);
                    else
                     call(acc, jv_before, [0, node]);
                   else{
                    var _tM_ = node.nextSibling !== acc ? 1 : 0;
                    if(_tM_){
                     if(preserve_focus){
                      var _tN_ = contains_focus(node);
                      if(_tN_)
                       var
                        shift_siblings =
                          function(param){
                           for(;;){
                            var sibling = node.nextSibling;
                            if(sibling === acc) return 1;
                            if(is_null(sibling)) return 0;
                            call(node, jv_before, [0, sibling]);
                           }
                          },
                        _tO_ = shift_siblings(0);
                      else
                       var _tO_ = _tN_;
                     }
                     else
                      var _tO_ = preserve_focus;
                     var _tP_ = 1 - _tO_;
                    }
                    else
                     var _tP_ = _tM_;
                    if(_tP_)
                     if(is_null(acc))
                      call(self, jv_append, [0, node]);
                     else
                      call(acc, jv_before, [0, node]);
                   }
                   return node;
                  };
               update(null$0, tree);
              }
              function remove_child(child, param){
               if(0 !== child[0]) return 0;
               var
                node = child[1],
                _tK_ = is_some$0(node[cst_lwd_to_remove]),
                _tL_ =
                  _tK_
                   ? (delete
                     node[cst_lwd_to_remove],
                     call(node, jv_remove, [0]),
                     0)
                   : _tK_;
               return _tL_;
              }
              fold_dropped(3850876, remove_child, dropped, 0);
              return self;
             });
   }
   var pure_unit = pure(0), dummy_kv_at = [0, empty$0, empty$0];
   function attach_attribs(el, attribs){
    function set_kv(param){
     var v = param[2], k = param[1];
     return equal(k, class$0) ? set_class(v, 1, el) : set_at(k, [0, v], el);
    }
    function unset_kv(param){
     var v = param[2], k = param[1];
     return equal(k, class$0) ? set_class(v, 0, el) : set_at(k, 0, el);
    }
    function set_lwd_at(param){
     var prev = [0, dummy_kv_at];
     return function(at){
      if(prev[1] !== dummy_kv_at) unset_kv(prev[1]);
      var pair = to_pair(at);
      set_kv(pair);
      prev[1] = pair;
      return 0;};
    }
    return map_reduce
            (function(param){
              var _tI_ = param[1];
              if(82 === _tI_){
               var at = param[2];
               return func(at, set_lwd_at(0));
              }
              if(83 > _tI_)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _eI_], 1);
              var ats = param[2];
              function set_at(at){
               var kv = to_pair(at);
               set_kv(kv);
               return kv;
              }
              var
               reducer =
                 [0,
                  make$4(set_at, function(param, _tJ_){return dummy_kv_at;})];
              function update(ats){
               var
                match = update_and_get_dropped(reducer[1], ats),
                reducer$0 = match[2],
                dropped = match[1];
               reducer[1] = reducer$0;
               fold_dropped
                (3850876,
                 function(kv, param){return unset_kv(kv);},
                 dropped,
                 0);
               reduce(reducer$0);
               return 0;
              }
              return func(ats, update);
             },
             [0, pure_unit, function(param, _tH_){return pure_unit;}],
             attribs);
   }
   function listen$0(el, param){
    var func = param[3], type = param[2], opts = param[1];
    return listen(opts, type, func, el);
   }
   function attach_events(el, events){
    return map_reduce
            (function(param){
              var _tF_ = param[1];
              if(82 === _tF_){
               var at = param[2], cached = [0, 0];
               return func
                       (at,
                        function(h){
                         var match = cached[1];
                         if(match){var l = match[1]; unlisten(l);}
                         cached[1] = [0, listen$0(el, h)];
                         return 0;
                        });
              }
              if(83 > _tF_)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _eJ_], 1);
              var
               ats = param[2],
               reducer =
                 [0,
                  make$4
                   (function(_tG_){return listen$0(el, _tG_);},
                    function(x, y){return x;})];
              function update(ats){
               var
                match = update_and_get_dropped(reducer[1], ats),
                reducer$0 = match[2],
                dropped = match[1];
               reducer[1] = reducer$0;
               fold_dropped
                (3850876, function(l, param){return unlisten(l);}, dropped, 0);
               reduce(reducer$0);
               return 0;
              }
              return func(ats, update);
             },
             [0, pure_unit, function(param, _tE_){return pure_unit;}],
             events);
   }
   function v$4(d, opt, _tC_, tag, children){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    if(_tC_) var sth$0 = _tC_[1], ev = sth$0; else var ev = 0;
    var
     match = prepare_col(at),
     impure_at = match[2],
     at$0 = match[1],
     match$0 = prepare_col(ev),
     impure_ev = match$0[2],
     ev$0 = match$0[1],
     match$1 = consume_children(children),
     impure_children = match$1[2],
     children$0 = match$1[1],
     el = v$2(d, [0, at$0], tag, children$0);
    if(impure_at)
     if(impure_children)
      var
       children$1 = impure_children[1],
       _tD_ = update_children(el, children$1),
       result =
         map2
          (attach_attribs(el, impure_at),
           _tD_,
           function(param, el){return el;});
     else
      var
       result =
         func(attach_attribs(el, impure_at), function(param){return el;});
    else if(impure_children)
     var
      children$2 = impure_children[1],
      result = update_children(el, children$2);
    else
     var result = pure(el);
    iter$0(function(h){listen$0(el, h); return 0;}, ev$0);
    var
     result$0 =
       impure_ev
        ? map2
          (attach_events(el, impure_ev),
           result,
           function(param, el){return el;})
        : result;
    return result$0;
   }
   function cons$1(name, d, at, ev, cs){return v$4(d, at, ev, name, cs);}
   function void_cons(name, d, at, ev, param){return v$4(d, at, ev, name, 0);}
   function button$0(_ty_, _tz_, _tA_, _tB_){
    return cons$1(button, _ty_, _tz_, _tA_, _tB_);
   }
   function div$1(_tu_, _tv_, _tw_, _tx_){
    return cons$1(div, _tu_, _tv_, _tw_, _tx_);
   }
   function form$0(_tq_, _tr_, _ts_, _tt_){
    return cons$1(form, _tq_, _tr_, _ts_, _tt_);
   }
   function img$0(_tm_, _tn_, _to_, _tp_){
    return void_cons(img, _tm_, _tn_, _to_, _tp_);
   }
   function input$1(_ti_, _tj_, _tk_, _tl_){
    return void_cons(input$0, _ti_, _tj_, _tk_, _tl_);
   }
   function label$0(_te_, _tf_, _tg_, _th_){
    return cons$1(label, _te_, _tf_, _tg_, _th_);
   }
   function option$0(_ta_, _tb_, _tc_, _td_){
    return cons$1(option, _ta_, _tb_, _tc_, _td_);
   }
   function select$0(_s8_, _s9_, _s__, _s$_){
    return cons$1(select, _s8_, _s9_, _s__, _s$_);
   }
   function span$1(_s4_, _s5_, _s6_, _s7_){
    return cons$1(span, _s4_, _s5_, _s6_, _s7_);
   }
   function symbol$3(_s3_, _s2_){return _s3_ === _s2_ ? 1 : 0;}
   function symbol$4(_s1_, _s0_){return _s1_ !== _s0_ ? 1 : 0;}
   function symbol$5(_sZ_, _sY_){return _sY_ < _sZ_ ? 1 : 0;}
   function symbol$6(_sX_, _sW_){return _sX_ <= _sW_ ? 1 : 0;}
   function symbol$7(_sV_, _sU_){return _sU_ <= _sV_ ? 1 : 0;}
   function symbol$8(_sT_, _sS_){return _sS_ < _sT_ ? 1 : 0;}
   function shuffle(rand_int, a, i, j){
    var _sP_ = j - 1 | 0, _sQ_ = i + 1 | 0;
    if(_sP_ >= _sQ_){
     var k = _sP_;
     for(;;){
      var
       l = caml_call1(rand_int, k + 1 | 0),
       tmp = caml_check_bound(a, l)[1 + l];
      a[1 + l] = caml_check_bound(a, k)[1 + k];
      a[1 + k] = tmp;
      var _sR_ = k - 1 | 0;
      if(_sQ_ === k) break;
      k = _sR_;
     }
    }
    return;
   }
   function shuffle$0(a){return shuffle(int$1, a, 0, a.length - 1);}
   function to_string$2(opt, item_to_string, a){
    if(opt) var sth = opt[1], sep = sth; else var sep = _eK_;
    return function(_sN_){return concat(sep, _sN_);}
            (function(_sO_){return map$1(item_to_string, _sO_);}(to_list(a)));
   }
   function poly(_sM_, _sL_){return caml_equal(_sM_, _sL_);}
   function is_nan(x){return 4 === caml_classify_float(x) ? 1 : 0;}
   function of_string_opt(a){
    try{var _sJ_ = [0, caml_float_of_string(a)]; return _sJ_;}
    catch(_sK_){
     var _sI_ = caml_wrap_exception(_sK_);
     if(_sI_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_sI_, 0);
    }
   }
   function int_of_color(param){
    return 82908052 <= param
            ? 749039939
              <= param
              ? 756711075 <= param ? 2 : 6
              : 737308346 <= param ? 4 : 3
            : -588596599
              <= param
              ? 4100401 <= param ? 1 : 7
              : -605101559 <= param ? 5 : 0;
   }
   function code_of_style(param){
    if(typeof param === "number") return 737455525 <= param ? 1 : 0;
    if(15681 <= param[1]){var c = param[2]; return 30 + int_of_color(c) | 0;}
    var c$0 = param[2];
    return 40 + int_of_color(c$0) | 0;
   }
   function string_of_style(a){
    var _sH_ = code_of_style(a);
    return caml_call1(sprintf(_eL_), _sH_);
   }
   string_of_style(-101336657);
   var No_such_style = [248, _eM_, caml_fresh_oo_id(0)];
   function style_of_tag(s){
    var match = trim$0(s), switch$0 = caml_string_compare(match, "blue");
    if(0 <= switch$0){
     if(0 >= switch$0) return _eV_;
     if(match === "bold") return _eU_;
     if(match === "cyan") return _eT_;
     if(match === "green") return _eS_;
     if(match === "magenta") return _eR_;
     if(match === "red") return _eQ_;
     if(match === "reset") return _eP_;
     if(match === "white") return _eO_;
     if(match === "yellow") return _eN_;
    }
    else{
     if(match === "Black") return _e4_;
     if(match === "Blue") return _e3_;
     if(match === "Cyan") return _e2_;
     if(match === "Green") return _e1_;
     if(match === "Magenta") return _e0_;
     if(match === "Red") return _eZ_;
     if(match === "White") return _eY_;
     if(match === "Yellow") return _eX_;
     if(match === "black") return _eW_;
    }
    throw caml_maybe_attach_backtrace(No_such_style, 1);
   }
   function mark_open_style(st, style){push(style, st); return _e6_;}
   function mark_close_style(st){
    try{pop(st); top(st);}
    catch(_sG_){
     var _sF_ = caml_wrap_exception(_sG_);
     if(_sF_ !== Empty) throw caml_maybe_attach_backtrace(_sF_, 0);
    }
    return _e7_;
   }
   var Style = [248, _e8_, caml_fresh_oo_id(0)], _e5_ = 0;
   function mark_open_stag(st, or_else, tag){
    if(tag[1] === Style){
     var style = tag[2];
     return mark_open_style(st, style);
    }
    if(tag[1] !== String_tag) return caml_call1(or_else, tag);
    var s = tag[2];
    try{
     var style$0 = style_of_tag(s), _sD_ = mark_open_style(st, style$0);
     return _sD_;
    }
    catch(_sE_){
     var _sC_ = caml_wrap_exception(_sE_);
     if(_sC_ === No_such_style) return caml_call1(or_else, tag);
     throw caml_maybe_attach_backtrace(_sC_, 0);
    }
   }
   function mark_close_stag(st, or_else, tag){
    if(tag[1] === Style) return mark_close_style(st);
    if(tag[1] !== String_tag) return caml_call1(or_else, tag);
    var s = tag[2];
    try{style_of_tag(s);}
    catch(_sB_){
     var _sA_ = caml_wrap_exception(_sB_);
     if(_sA_ === No_such_style) return caml_call1(or_else, tag);
     throw caml_maybe_attach_backtrace(_sA_, 0);
    }
    return mark_close_style(st);
   }
   function set_color_tag_handling(ppf){
    var st = create(0);
    pp_set_mark_tags(ppf, 1);
    var
     funs = pp_get_formatter_stag_function(ppf, 0),
     _sw_ = funs[2],
     _sx_ = funs[1],
     funs$0 =
       [0,
        function(_sz_){return mark_open_stag(st, _sx_, _sz_);},
        function(_sy_){return mark_close_stag(st, _sw_, _sy_);},
        funs[3],
        funs[4]];
    return pp_set_formatter_stag_function(ppf, funs$0);
   }
   function sprintf$0(c, format){
    var
     buf = create$1(64),
     fmt = formatter_of_buffer(buf),
     _sv_ = c ? _e5_ : c;
    if(_sv_) set_color_tag_handling(fmt);
    return kfprintf$0
            (function(fmt$0){pp_print_flush(fmt, 0); return contents(buf);},
             fmt,
             format);
   }
   function sprintf$1(fmt){return sprintf$0(1, fmt);}
   function compare$1(a, b){return compare(a, b);}
   function of_string$0(s){
    try{var _st_ = [0, caml_int_of_string(s)]; return _st_;}
    catch(_su_){
     var _ss_ = caml_wrap_exception(_su_);
     if(_ss_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_ss_, 0);
    }
   }
   function of_float(_sr_){return _sr_ | 0;}
   function get$6(tbl, x){
    try{var _sp_ = [0, find(tbl, x)]; return _sp_;}
    catch(_sq_){
     var _so_ = caml_wrap_exception(_sq_);
     if(_so_ === Not_found) return 0;
     throw caml_maybe_attach_backtrace(_so_, 0);
    }
   }
   function get_or_add(tbl, f, k){
    try{var _sm_ = find(tbl, k); return _sm_;}
    catch(_sn_){
     var _sl_ = caml_wrap_exception(_sn_);
     if(_sl_ !== Not_found) throw caml_maybe_attach_backtrace(_sl_, 0);
     var v = caml_call1(f, k);
     add$0(tbl, k, v);
     return v;
    }
   }
   function symbol$9(f, l){
    if(! l) return 0;
    var tl = l[2], x = l[1], x$0 = caml_call1(f, x), block = [0, x$0, 24029];
    map_dps(block, 1, f, tl);
    return block;
   }
   function map_dps(dst, offset, f, l){
    var dst$0 = dst, offset$0 = offset, l$0 = l;
    for(;;){
     if(! l$0){dst$0[1 + offset$0] = 0; return;}
     var
      tl = l$0[2],
      x = l$0[1],
      x$0 = caml_call1(f, x),
      dst$1 = [0, x$0, 24029];
     dst$0[1 + offset$0] = dst$1;
     dst$0 = dst$1;
     offset$0 = 1;
     l$0 = tl;
    }
   }
   function init$2(n, f){
    function init(i, n, f){
     if(symbol$3(i, n)) return 0;
     var x = caml_call1(f, i), block = [0, x, 24029];
     init_dps(block, 1, i + 1 | 0, n, f);
     return block;
    }
    function init_dps(dst, offset, i, n, f){
     var dst$0 = dst, offset$0 = offset, i$0 = i;
     for(;;){
      if(symbol$3(i$0, n)){dst$0[1 + offset$0] = 0; return;}
      var x = caml_call1(f, i$0), dst$1 = [0, x, 24029];
      dst$0[1 + offset$0] = dst$1;
      var i$1 = i$0 + 1 | 0;
      dst$0 = dst$1;
      offset$0 = 1;
      i$0 = i$1;
     }
    }
    return init(0, n, f);
   }
   function symbol$10(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function map_or(default$0, f, param){
    if(! param) return default$0;
    var x = param[1];
    return caml_call1(f, x);
   }
   function is_some$1(param){return param ? 1 : 0;}
   function flat_map(f, o){
    if(! o) return;
    var x = o[1];
    return caml_call1(f, x);
   }
   function symbol_bind$0(o, f){return flat_map(f, o);}
   function value$3(x, default$0){
    if(! x) return default$0;
    var y = x[1];
    return y;
   }
   function to_list$2(o){if(! o) return 0; var x = o[1]; return [0, x, 0];}
   function symbol$11(x, f){return symbol$10(f, x);}
   make_self_init(0);
   function symbol$12(f, e){
    if(0 !== e[0]) return;
    var x = e[1];
    caml_call1(f, x);
    return;
   }
   var Get_error = [248, _e9_, caml_fresh_oo_id(0)];
   function get_exn(param){
    if(0 !== param[0]) throw caml_maybe_attach_backtrace(Get_error, 1);
    var x = param[1];
    return x;
   }
   function get_or(e, default$0){
    if(0 !== e[0]) return default$0;
    var x = e[1];
    return x;
   }
   function flat_map$0(f, e){
    if(0 === e[0]){var x = e[1]; return caml_call1(f, x);}
    var s = e[1];
    return [1, s];
   }
   function symbol$13(e, f){return symbol$12(f, e);}
   function symbol_bind$1(e, f){return flat_map$0(f, e);}
   function Make$1(O){
    var
     S = _P_(O),
     empty = S[1],
     union = S[7],
     elements = S[23],
     of_list = S[37];
    return [0,
            ,
            ,
            ,
            empty,
            ,
            ,
            ,
            ,
            ,
            union,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            of_list,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            elements];
   }
   function _e__(_sj_){
    var _sk_ = Make$1(_sj_);
    return [0,
            _sk_[4],
            ,
            ,
            ,
            ,
            ,
            _sk_[10],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _sk_[40],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _sk_[51]];
   }
   function suffix(suf, s){
    var len = caml_ml_string_length(suf);
    if(symbol$5(len, caml_ml_string_length(s))) return 0;
    var off = caml_ml_string_length(s) - len | 0;
    function check(i){
     var i$0 = i;
     for(;;){
      if(symbol$3(i$0, len)) return 1;
      if
       (caml_string_unsafe_get(s, off + i$0 | 0)
        !== caml_string_unsafe_get(suf, i$0))
       return 0;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
     }
    }
    return check(0);
   }
   function chop_suffix(suf, s){
    return suffix(suf, s)
            ? [0,
              sub$0
               (s,
                0,
                caml_ml_string_length(s) - caml_ml_string_length(suf) | 0)]
            : 0;
   }
   function Make$2(K, V){return;}
   function _e$_(_si_, _sh_){Make$2(_si_, _sh_); return;}
   var Empty$1 = [248, _fa_, caml_fresh_oo_id(0)];
   function single(x){return [0, [0, x]];}
   function deep(n, hd, middle, tl){return [1, n, hd, middle, tl];}
   function is_empty$1(param){
    if(0 === param[0] && typeof param[1] === "number") return 1;
    return 0;
   }
   function cons$2(x, q){
    if(0 === q[0]){
     var match = q[1];
     if(typeof match === "number") return single(x);
     switch(match[0]){
       case 0:
        var y = match[1]; return [0, [1, x, y]];
       case 1:
        var z = match[2], y$0 = match[1]; return [0, [2, x, y$0, z]];
       default:
        var z$0 = match[3], z$1 = match[2], y$1 = match[1];
        return deep(4, [1, x, y$1], empty$3, [1, z$1, z$0]);
     }
    }
    var match$0 = q[2], n = q[1];
    if(typeof match$0 !== "number")
     switch(match$0[0]){
       case 0: break;
       case 1:
        var tl$0 = q[4], middle$0 = q[3], z$2 = match$0[2], y$3 = match$0[1];
        return deep(n + 1 | 0, [2, x, y$3, z$2], middle$0, tl$0);
       default:
        var
         _se_ = q[3],
         z$3 = match$0[3],
         z$4 = match$0[2],
         y$4 = match$0[1],
         _sf_ = caml_obj_tag(_se_),
         q$0 =
           250 === _sf_
            ? _se_[1]
            : 246 === _sf_ ? force_lazy_block(_se_) : _se_,
         tail = q[4];
        return deep
                (n + 1 | 0,
                 [1, x, y$4],
                 [246, function(_sg_){return cons$2([0, z$4, z$3], q$0);}],
                 tail);
     }
    var tl = q[4], middle = q[3], y$2 = match$0[1];
    return deep(n + 1 | 0, [1, x, y$2], middle, tl);
   }
   function take_back_exn(q){
    if(0 === q[0]){
     var match = q[1];
     if(typeof match === "number")
      throw caml_maybe_attach_backtrace(Empty$1, 1);
     switch(match[0]){
       case 0:
        var x = match[1]; return [0, empty$2, x];
       case 1:
        var y = match[2], x$0 = match[1]; return [0, single(x$0), y];
       default:
        var z = match[3], y$0 = match[2], x$1 = match[1];
        return [0, [0, [1, x$1, y$0]], z];
     }
    }
    var
     middle = q[3],
     hd = q[2],
     n = q[1],
     _sc_ = caml_obj_tag(middle),
     q$0 =
       250 === _sc_
        ? middle[1]
        : 246 === _sc_ ? force_lazy_block(middle) : middle,
     match$0 = q[4];
    if(typeof match$0 !== "number" && 0 !== match$0[0]){
     var match$2 = q[4];
     if(typeof match$2 !== "number" && 2 === match$2[0]){
      var z$1 = match$2[3], y$3 = match$2[2], x$4 = match$2[1];
      return [0, deep(n - 1 | 0, hd, middle, [1, x$4, y$3]), z$1];
     }
     var y$2 = match$2[2], x$3 = match$2[1];
     return [0, deep(n - 1 | 0, hd, middle, [0, x$3]), y$2];
    }
    var x$2 = match$0[1];
    if(is_empty$1(q$0)) return [0, [0, hd], x$2];
    var
     _sd_ = take_back_exn(q$0),
     match$1 = _sd_[2],
     z$0 = match$1[2],
     y$1 = match$1[1],
     q$1 = _sd_[1];
    return [0, deep(n - 1 | 0, hd, from_val(q$1), [1, y$1, z$0]), x$2];
   }
   function take_back(q){
    try{var _sa_ = [0, take_back_exn(q)]; return _sa_;}
    catch(_sb_){
     var _r$_ = caml_wrap_exception(_sb_);
     if(_r$_ === Empty$1) return 0;
     throw caml_maybe_attach_backtrace(_r$_, 0);
    }
   }
   function size_digit(param){
    if(typeof param === "number") return 0;
    switch(param[0]){case 0: return 1;case 1: return 2;default: return 3;
    }
   }
   function size$0(param){
    if(0 === param[0]){var d = param[1]; return size_digit(d);}
    var n = param[1];
    return n;
   }
   var Lex_error = [248, _fb_, caml_fresh_oo_id(0)];
   function lex_error(err){
    throw caml_maybe_attach_backtrace([0, Lex_error, err], 1);
   }
   function error_pos(lexbuf){
    var
     start = lexbuf[11],
     cnum = lexbuf[7] - start[3] | 0,
     enum$0 = lexbuf[6] - start[3] | 0;
    return [0, start[2], cnum, enum$0];
   }
   function string2num(s){
    try{var _r9_ = [3, caml_int_of_string(s)]; return _r9_;}
    catch(_r__){
     var _r8_ = caml_wrap_exception(_r__);
     if(_r8_[1] === Failure) return [2, s];
     throw caml_maybe_attach_backtrace(_r8_, 0);
    }
   }
   function update_pos(lexbuf){
    var pos = lexbuf[11];
    lexbuf[11] = [0, pos[1], pos[2] + 1 | 0, lexbuf[5], pos[4]];
    return;
   }
   function int_of_hexchar(c){
    if(65 <= c){
     if(97 <= c){
      if(103 > c) return (c - 97 | 0) + 10 | 0;
     }
     else if(71 > c) return (c - 65 | 0) + 10 | 0;
    }
    else if(9 >= c - 48 >>> 0) return c - 48 | 0;
    return lex_error(symbol_concat(_fd_, symbol_concat(make$1(1, c), _fc_)));
   }
   function utf8_of_code(buf, idx, u){
    var i = [0, idx];
    function add_char(b, c){
     caml_bytes_unsafe_set(b, i[1], c);
     i[1] = i[1] + 1 | 0;
     return;
    }
    function max_used_bits(n, u){return 0 === (u >>> n | 0) ? 1 : 0;}
    if(max_used_bits(7, u))
     add_char(buf, of_int_exn(u));
    else if(max_used_bits(11, u)){
     add_char(buf, of_int_exn(192 | (u >>> 6 | 0) & 31));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(16, u)){
     add_char(buf, of_int_exn(224 | (u >>> 12 | 0) & 15));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(21, u)){
     add_char(buf, of_int_exn(240 | (u >>> 18 | 0) & 7));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(26, u)){
     add_char(buf, of_int_exn(248 | (u >>> 24 | 0) & 3));
     add_char(buf, of_int_exn(128 | (u >>> 18 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else{
     add_char(buf, of_int_exn(252 | (u >>> 30 | 0) & 1));
     add_char(buf, of_int_exn(128 | (u >>> 24 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 18 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    return i[1];
   }
   function utf8_of_surrogate_pair(buf, idx, high, low){
    var
     high$0 = high - 55296 | 0,
     low$0 = low - 56320 | 0,
     code = 65536 + (high$0 << 10 | low$0) | 0;
    return utf8_of_code(buf, idx, code);
   }
   function escaping_error(msg, s, c, off){
    var offs = string_of_int(off);
    if(c)
     var
      c$0 = c[1],
      cs = symbol_concat(_ff_, symbol_concat(make$1(1, c$0), _fe_));
    else
     var cs = _fi_;
    return lex_error
            (symbol_concat
              (msg,
               symbol_concat
                (_fh_,
                 symbol_concat
                  (offs, symbol_concat(cs, symbol_concat(_fg_, s))))));
   }
   function unescape_string(s){
    var
     l = caml_ml_string_length(s),
     s$0 = caml_create_bytes(l),
     j = [0, 0],
     u1 = [0, 0],
     u2 = [0, 0],
     state = [0, 748194550],
     _rZ_ = l - 1 | 0,
     _rY_ = 0;
    if(_rZ_ >= 0){
     var i = _rY_;
     for(;;){
      var _r0_ = state[1];
      a:
      if(308570827 <= _r0_)
       if(308570829 <= _r0_)
        if(748194550 <= _r0_)
         if(945120947 <= _r0_)
          if(117 === caml_string_get(s, i))
           state[1] = 308570827;
          else
           escaping_error(_fk_, s, [0, caml_string_get(s, i)], i);
         else{
          var c = caml_string_get(s, i);
          if(92 === c)
           state[1] = 258914209;
          else{caml_bytes_unsafe_set(s$0, j[1], c); j[1] = j[1] + 1 | 0;}
         }
        else if(308570830 <= _r0_){
         state[1] = 748194550;
         var _r2_ = int_of_hexchar(caml_string_get(s, i));
         u2[1] = u2[1] << 4 | _r2_;
         if(56320 <= u2[1] && 57343 >= u2[1]){
          j[1] = utf8_of_surrogate_pair(s$0, j[1], u1[1], u2[1]);
          break a;
         }
         escaping_error(_fl_, s, 0, i);
        }
        else{
         var _r3_ = int_of_hexchar(caml_string_get(s, i));
         u2[1] = u2[1] << 4 | _r3_;
         state[1] = 308570830;
        }
       else if(308570828 <= _r0_){
        var _r4_ = int_of_hexchar(caml_string_get(s, i));
        u2[1] = u2[1] << 4 | _r4_;
        state[1] = 308570829;
       }
       else{
        u2[1] = int_of_hexchar(caml_string_get(s, i));
        state[1] = 308570828;
       }
      else if(297481261 <= _r0_)
       if(297481263 <= _r0_)
        if(308569555 <= _r0_)
         if(92 === caml_string_get(s, i))
          state[1] = 945120947;
         else
          escaping_error(_fm_, s, [0, caml_string_get(s, i)], i);
        else{
         var _r5_ = int_of_hexchar(caml_string_get(s, i));
         u1[1] = u1[1] << 4 | _r5_;
         if(55296 <= u1[1] && 56319 >= u1[1]){state[1] = 308569555; break a;}
         j[1] = utf8_of_code(s$0, j[1], u1[1]);
         state[1] = 748194550;
        }
       else if(297481262 <= _r0_){
        var _r6_ = int_of_hexchar(caml_string_get(s, i));
        u1[1] = u1[1] << 4 | _r6_;
        state[1] = 297481263;
       }
       else{
        var _r7_ = int_of_hexchar(caml_string_get(s, i));
        u1[1] = u1[1] << 4 | _r7_;
        state[1] = 297481262;
       }
      else if(297481260 <= _r0_){
       u1[1] = int_of_hexchar(caml_string_get(s, i));
       state[1] = 297481261;
      }
      else{
       var match = caml_string_get(s, i);
       b:
       if(34 === match){
        caml_bytes_unsafe_set(s$0, j[1], 34);
        state[1] = 748194550;
        j[1] = j[1] + 1 | 0;
       }
       else{
        c:
        if(92 <= match){
         if(118 > match){
          switch(match - 92 | 0){
            case 0:
             caml_bytes_unsafe_set(s$0, j[1], 92);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 6:
             caml_bytes_unsafe_set(s$0, j[1], 8);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 10:
             caml_bytes_unsafe_set(s$0, j[1], 12);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 18:
             caml_bytes_unsafe_set(s$0, j[1], 10);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 22:
             caml_bytes_unsafe_set(s$0, j[1], 13);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 24:
             caml_bytes_unsafe_set(s$0, j[1], 9);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 25:
             state[1] = 297481260; break;
            default: break c;
          }
          break b;
         }
        }
        else if(47 === match){
         caml_bytes_unsafe_set(s$0, j[1], 47);
         state[1] = 748194550;
         j[1] = j[1] + 1 | 0;
         break b;
        }
        escaping_error(_fn_, s, [0, caml_string_get(s, i)], i);
       }
      }
      var _r1_ = i + 1 | 0;
      if(_rZ_ === i) break;
      i = _r1_;
     }
    }
    if(748194550 !== state[1]) escaping_error(_fj_, s, 0, l);
    return j[1] !== l ? unsafe_to_string(sub(s$0, 0, j[1])) : s;
   }
   function engine(tbl, state, buf){
    var result = caml_lex_engine(tbl, state, buf);
    return result;
   }
   function Make$3(Compliance){
    function read$0(counter, lexbuf){
     var _rX_ = 0;
     if(counter >= 50)
      return caml_trampoline_return(ocaml_lex_read_rec, [0, lexbuf, _rX_]);
     var counter$0 = counter + 1 | 0;
     return ocaml_lex_read_rec(counter$0, lexbuf, _rX_);
    }
    function read(lexbuf){return caml_trampoline(read$0(0, lexbuf));}
    function ocaml_lex_read_rec(counter, lexbuf, ocaml_lex_state){
     var ocaml_lex_state$0 = ocaml_lex_state;
     for(;;){
      var
       ocaml_lex_state$1 = engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
      if(26 >= ocaml_lex_state$1 >>> 0)
       switch(ocaml_lex_state$1){
         case 0:
          return _fo_;
         case 1:
          return _fp_;
         case 2:
          return 2;
         case 3:
          return 0;
         case 4:
          return 1;
         case 5:
          return 9;
         case 6:
          return 10;
         case 7:
          return caml_call1(Compliance[5], 13)
                  ? 13
                  : lex_error
                    (symbol_concat(_fr_, symbol_concat(lexeme(lexbuf), _fq_)));
         case 8:
          return caml_call1(Compliance[5], 14)
                  ? 14
                  : lex_error
                    (symbol_concat(_ft_, symbol_concat(lexeme(lexbuf), _fs_)));
         case 9:
          return caml_call1(Compliance[6], 11)
                  ? 11
                  : lex_error
                    (symbol_concat(_fv_, symbol_concat(lexeme(lexbuf), _fu_)));
         case 10:
          return caml_call1(Compliance[6], 12)
                  ? 12
                  : lex_error
                    (symbol_concat(_fx_, symbol_concat(lexeme(lexbuf), _fw_)));
         case 11:
          return 7;
         case 12:
          return 8;
         case 13:
          return caml_call1(Compliance[2], 3);
         case 14:
          return caml_call1(Compliance[2], 5);
         case 15:
          return caml_call1(Compliance[2], 5);
         case 16:
          return caml_call1(Compliance[2], 4);
         case 17:
          var tok = string2num(lexeme(lexbuf));
          if(typeof tok !== "number")
           switch(tok[0]){
             case 2:
              return caml_call1(Compliance[4], tok);
             case 3:
              return caml_call1(Compliance[3], tok);
           }
          return tok;
         case 18:
          var _rW_ = [4, caml_float_of_string(lexeme(lexbuf))];
          return caml_call1(Compliance[2], _rW_);
         case 19:
          return _fy_;
         case 20:
          var s = sub_lexeme(lexbuf, lexbuf[5] + 1 | 0, lexbuf[6] - 1 | 0);
          return [0, unescape_string(s)];
         case 21:
          return 6;
         case 22:
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$0 = counter + 1 | 0;
          return read$0(counter$0, lexbuf);
         case 23:
          update_pos(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$1 = counter + 1 | 0;
          return read$0(counter$1, lexbuf);
         case 24:
          var match = caml_call1(Compliance[7], 0);
          if(0 !== match[0]){var err = match[1]; return [5, err];}
          read_comment(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$2 = counter + 1 | 0;
          return read$0(counter$2, lexbuf);
         case 25:
          var match$0 = caml_call1(Compliance[7], 0);
          if(0 !== match$0[0]){var err$0 = match$0[1]; return [5, err$0];}
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$3 = counter + 1 | 0;
          return read$0(counter$3, lexbuf);
         default:
          return lex_error
                  (symbol_concat(_fA_, symbol_concat(lexeme(lexbuf), _fz_)));
       }
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state$0 = ocaml_lex_state$1;
     }
    }
    function read_comment$0(counter, lexbuf){
     var _rV_ = 88;
     if(counter >= 50)
      return caml_trampoline_return
              (ocaml_lex_read_comment_rec, [0, lexbuf, _rV_]);
     var counter$0 = counter + 1 | 0;
     return ocaml_lex_read_comment_rec(counter$0, lexbuf, _rV_);
    }
    function read_comment(lexbuf){
     return caml_trampoline(read_comment$0(0, lexbuf));
    }
    function ocaml_lex_read_comment_rec(counter, lexbuf, ocaml_lex_state){
     var ocaml_lex_state$0 = ocaml_lex_state;
     for(;;){
      var
       ocaml_lex_state$1 = engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
      if(3 >= ocaml_lex_state$1 >>> 0)
       switch(ocaml_lex_state$1){
         case 0:
          return;
         case 1:
          update_pos(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read_comment$0, [0, lexbuf]);
          var counter$0 = counter + 1 | 0;
          return read_comment$0(counter$0, lexbuf);
         case 2:
          return lex_error(_fB_);
         default:
          if(counter >= 50)
           return caml_trampoline_return(read_comment$0, [0, lexbuf]);
          var counter$1 = counter + 1 | 0;
          return read_comment$0(counter$1, lexbuf);
       }
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state$0 = ocaml_lex_state$1;
     }
    }
    return [0, read];
   }
   var Json_error_info = [248, _fC_, caml_fresh_oo_id(0)];
   function create_from_lexbuf(lexbuf, emsg){
    var
     match = error_pos(lexbuf),
     echar = match[3],
     schar = match[2],
     eline = match[1];
    return [0, eline, schar, echar, emsg];
   }
   function log2(n){return 1 < n ? 1 + log2(n >> 1) | 0 : 0;}
   function bits$0(n){return log2(n) + 1 | 0;}
   var max_json_int = 53 < bits$0(max_int) ? 2097151 : max_int;
   function string_of_float_json(f){
    var is_int = (f | 0) == f ? 1 : 0;
    if(is_int && Math.abs(f) <= max_json_int){
     var int_value = f | 0;
     return symbol_concat(string_of_int(int_value), _fD_);
    }
    var
     s = caml_format_float("%.16g", f),
     s$0 = caml_float_of_string(s) == f ? s : caml_format_float("%.17g", f);
    if(! contains(s$0, 46) && ! contains(s$0, 101))
     return symbol_concat(s$0, _fE_);
    return s$0;
   }
   function token_error(tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var err = _fF_; break;
       case 1:
        var err = _fG_; break;
       case 2:
        var err = _fH_; break;
       case 3:
        var err = _fI_; break;
       case 4:
        var err = _fJ_; break;
       case 5:
        var err = _fK_; break;
       case 6:
        var err = _fL_; break;
       case 7:
        var err = _fM_; break;
       case 8:
        var err = _fN_; break;
       case 9:
        var err = _fO_; break;
       case 10:
        var err = _fP_; break;
       case 11:
        var err = _fQ_; break;
       case 12:
        var err = _fR_; break;
       case 13:
        var err = _fS_; break;
       default: var err = _fT_;
     }
    else
     switch(tok[0]){
       case 0:
        var s = tok[1], err = symbol_concat(_fV_, symbol_concat(s, _fU_));
        break;
       case 1:
        var s$0 = tok[1], err = s$0; break;
       case 2:
        var s$1 = tok[1], err = symbol_concat(_fX_, symbol_concat(s$1, _fW_));
        break;
       case 3:
        var
         i = tok[1],
         err = symbol_concat(_fZ_, symbol_concat(string_of_int(i), _fY_));
        break;
       case 4:
        var
         f = tok[1],
         err = symbol_concat(_f1_, symbol_concat(string_of_float(f), _f0_));
        break;
       case 5:
        var s$2 = tok[1], err = symbol_concat(_f3_, symbol_concat(s$2, _f2_));
        break;
       default:
        var
         b = tok[1],
         _rU_ = b ? _f5_ : _f7_,
         err = symbol_concat(_f6_, symbol_concat(_rU_, _f4_));
     }
    return [0, 148000204, err];
   }
   function Make$4(Compliance){
    var Parse_error = [248, _f8_, caml_fresh_oo_id(0)];
    function json_value(reader){
     function token_value(tok){
      if(typeof tok === "number")
       switch(tok){
         case 0:
          return object_value_start(0);
         case 2:
          return Compliance[12];
         case 3:
          return caml_call1(Compliance[9], -625979624);
         case 4:
          return caml_call1(Compliance[9], 3900603);
         case 5:
          return caml_call1(Compliance[9], 874173192);
         case 6:
          throw caml_maybe_attach_backtrace([0, Parse_error, 3456156], 1);
         case 9:
          return array_value_start(0);
         case 11:
          return variant_value_start(0);
         case 13:
          return tuple_value_start(0);
       }
      else
       switch(tok[0]){
         case 0:
          var s = tok[1]; return caml_call1(Compliance[13], s);
         case 2:
          var s$0 = tok[1]; return caml_call1(Compliance[11], s$0);
         case 3:
          var i = tok[1]; return caml_call1(Compliance[10], i);
         case 4:
          var f = tok[1]; return caml_call1(Compliance[9], [0, 365180284, f]);
         case 6:
          var b = tok[1]; return caml_call1(Compliance[14], b);
       }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function value(param){return token_value(caml_call1(reader, 0));}
     function array_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 10 === tok)
       return caml_call1(Compliance[16], 0);
      return array_values_start(tok, 0);
     }
     function array_values_start(tok, acc){
      var v = token_value(tok), tok$0 = caml_call1(reader, 0);
      if(typeof tok$0 === "number"){
       if(7 === tok$0) return array_values([0, v, acc]);
       if(10 === tok$0){
        var _rT_ = rev([0, v, acc]);
        return caml_call1(Compliance[16], _rT_);
       }
      }
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, token_error(tok$0)], 1);
     }
     function array_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(7 === tok){var acc$1 = [0, v, acc$0]; acc$0 = acc$1; continue;}
        if(10 === tok){
         var _rS_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[16], _rS_);
        }
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function object_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 1 === tok)
       return caml_call1(Compliance[15], 0);
      return object_values_start(tok, 0);
     }
     function object_values_start(tok, acc){
      var v = colon_value(tok, 0), tok$0 = caml_call1(reader, 0);
      if(typeof tok$0 === "number"){
       if(1 === tok$0){
        var _rR_ = rev([0, v, acc]);
        return caml_call1(Compliance[15], _rR_);
       }
       if(7 === tok$0) return object_values([0, v, acc]);
      }
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, token_error(tok$0)], 1);
     }
     function object_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = key_colon_value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(1 === tok){
         var _rQ_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[15], _rQ_);
        }
        if(7 === tok){var acc$1 = [0, v, acc$0]; acc$0 = acc$1; continue;}
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function colon_value(v, param){
      if(typeof v !== "number" && 0 === v[0]){
       var k = v[1], tok = caml_call1(reader, 0);
       if(typeof tok === "number" && 8 === tok) return [0, k, value(0)];
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(v)], 1);
     }
     function key_colon_value(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok !== "number" && 0 === tok[0]){
       var k = tok[1], tok$0 = caml_call1(reader, 0);
       if(typeof tok$0 === "number" && 8 === tok$0) return [0, k, value(0)];
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok$0)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function tuple_value_start(param){
      var v1 = value(0), tok = caml_call1(reader, 0);
      if(typeof tok === "number"){
       if(7 === tok){
        var v2 = value(0), tok$0 = caml_call1(reader, 0);
        if(typeof tok$0 === "number"){
         if(7 === tok$0) return tuple_values([0, v2, [0, v1, 0]]);
         if(14 <= tok$0)
          return caml_call1(Compliance[17], [0, v1, [0, v2, 0]]);
        }
        throw caml_maybe_attach_backtrace
               ([0, Parse_error, token_error(tok$0)], 1);
       }
       if(14 <= tok)
        throw caml_maybe_attach_backtrace([0, Parse_error, _f9_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function tuple_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(7 === tok){var acc$1 = [0, v, acc$0]; acc$0 = acc$1; continue;}
        if(14 <= tok){
         var _rP_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[17], _rP_);
        }
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function variant_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number"){
       if(12 === tok)
        throw caml_maybe_attach_backtrace([0, Parse_error, _f__], 1);
      }
      else if(0 === tok[0]){
       var k = tok[1], tok$0 = caml_call1(reader, 0);
       if(typeof tok$0 === "number"){
        if(8 === tok$0) return variant_end(k, [0, value(0)]);
        if(12 === tok$0) return caml_call2(Compliance[18], k, 0);
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok$0)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function variant_end(k, v){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 12 === tok)
       return caml_call2(Compliance[18], k, v);
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     try{var tok = caml_call1(reader, 0);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Parse_error && 3456156 === exn[2]) return 0;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     if(typeof tok === "number" && 6 === tok) return 0;
     return [0, token_value(tok)];
    }
    function decode(reader){
     try{var res = json_value(reader);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Parse_error){
       var match = exn[2];
       if(typeof match === "number") return _f$_;
       var err = match[2];
       return [1, err];
      }
      if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err$0 = exn[2];
      return [1, err$0];
     }
     return [0, res];
    }
    return [0, Compliance, decode];
   }
   function nibble_to_hex(i){
    var _rO_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
    return char_of_int(_rO_);
   }
   function add_hex_byte(add_char, i){
    caml_call1(add_char, nibble_to_hex((i >>> 4 | 0) & 15));
    return caml_call1(add_char, nibble_to_hex(i & 15));
   }
   function escape(add_char, add_string, s){
    var l = caml_ml_string_length(s), _rM_ = l - 1 | 0, _rL_ = 0;
    if(_rM_ >= 0){
     var i = _rL_;
     for(;;){
      var c = caml_string_get(s, i);
      a:
      if(92 === c)
       caml_call1(add_string, _ga_);
      else{
       b:
       {
        c:
        {
         if(35 > c){
          if(8 > c) break b;
          switch(c - 8 | 0){
            case 0:
             caml_call1(add_string, _gc_); break;
            case 1:
             caml_call1(add_string, _gd_); break;
            case 2:
             caml_call1(add_string, _ge_); break;
            case 4:
             caml_call1(add_string, _gf_); break;
            case 5:
             caml_call1(add_string, _gg_); break;
            case 26:
             caml_call1(add_string, _gh_); break;
            case 24:
            case 25:
             break c;
            default: break b;
          }
          break a;
         }
         if(127 === c) break b;
        }
        caml_call1(add_char, caml_string_get(s, i));
        break a;
       }
       caml_call1(add_string, _gb_);
       add_hex_byte(add_char, c);
      }
      var _rN_ = i + 1 | 0;
      if(_rM_ === i) break;
      i = _rN_;
     }
    }
    return;
   }
   function Make$5(Compliance){
    function to_json_string(s){
     var buf = create$1(100);
     function add_char$0(_rK_){return add_char(buf, _rK_);}
     function add_string$0(_rJ_){return add_string(buf, _rJ_);}
     function add_quote_string(s){
      add_char$0(34);
      escape(add_char$0, add_string$0, s);
      return add_char$0(34);
     }
     add_quote_string(s);
     return contents(buf);
    }
    function pp_list(sep, ppx, out, l){
     function pp_sep(out, param){
      return caml_call1(fprintf$0(out)(_gi_), sep);
     }
     return pp_print_list([0, pp_sep], ppx, out, l);
    }
    function format(out, json){
     if(typeof json === "number") return pp_print_string(out, _gj_);
     var _rA_ = json[1];
     if(726928360 <= _rA_){
      if(737456202 === _rA_){var b = json[2]; return pp_print_bool(out, b);}
      if(928231259 > _rA_){
       if(848054398 <= _rA_){
        var l$0 = json[2];
        return l$0
                ? caml_call2
                  (fprintf$0(out)(_go_),
                   function(_rH_, _rI_){
                    return pp_list(_gn_, format, _rH_, _rI_);
                   },
                   l$0)
                : pp_print_string(out, _gp_);
       }
       var l$1 = json[2];
       return 0 === l$1
               ? pp_print_string(out, _gq_)
               : caml_call2
                 (fprintf$0(out)(_gs_),
                  function(_rF_, _rG_){
                   return pp_list(_gr_, format, _rF_, _rG_);
                  },
                  l$1);
      }
      if(963043957 <= _rA_){
       var l = json[2];
       return l
               ? caml_call2
                 (fprintf$0(out)(_gl_),
                  function(_rD_, _rE_){
                   return pp_list(_gk_, format_field, _rD_, _rE_);
                  },
                  l)
               : pp_print_string(out, _gm_);
      }
     }
     else{
      if(3654863 === _rA_){
       var i = json[2];
       return pp_print_string(out, string_of_int(i));
      }
      if(365180284 <= _rA_){
       if(708012133 > _rA_){
        var f = json[2], s$2 = caml_call1(Compliance[8], f);
        return pp_print_string(out, s$2);
       }
       var _rB_ = json[2], match = _rB_[2], s$0 = _rB_[1];
       if(match){
        var json$0 = match[1], s$1 = to_json_string(s$0);
        return caml_call3(fprintf$0(out)(_gt_), s$1, format, json$0);
       }
       var _rC_ = to_json_string(s$0);
       return caml_call1(fprintf$0(out)(_gu_), _rC_);
      }
      if(-752863768 > _rA_){
       var s$3 = json[2];
       return pp_print_string(out, to_json_string(s$3));
      }
     }
     var s = json[2];
     return pp_print_string(out, s);
    }
    function format_field(out, param){
     var json = param[2], name = param[1], _rz_ = to_json_string(name);
     return caml_call3(fprintf$0(out)(_gv_), _rz_, format, json);
    }
    function pretty_print(out, json){
     return caml_call2(fprintf$0(out)(_gw_), format, json);
    }
    function pretty_print_to_string(json){
     return caml_call2(asprintf(_gx_), pretty_print, json);
    }
    function pretty_print_to_channel(oc, json){
     var fmt = formatter_of_out_channel(oc);
     return caml_call2(fprintf$0(fmt)(_gy_), pretty_print, json);
    }
    return [0,
            ,
            ,
            ,
            ,
            pretty_print,
            pretty_print_to_string,
            pretty_print_to_channel];
   }
   function _gz_(_rx_){
    var _ry_ = Make$5(_rx_);
    return [0, _ry_[5], _ry_[6], _ry_[7]];
   }
   function error$1(msg, json){
    throw caml_maybe_attach_backtrace([0, Failure, msg], 1);
   }
   function Strict(M){
    function to_assoc(json){
     if(typeof json !== "number" && 963043957 === json[1]){var obj = json[2]; return obj;}
     return error$1(_gA_, json);
    }
    function to_string(json){
     if(typeof json !== "number" && -976970511 === json[1]){var s = json[2]; return s;}
     return error$1(_gB_, json);
    }
    return [0, , , , to_assoc, , , to_string];
   }
   function null$1(param){return 870828711;}
   var
    M = [0, null$1],
    _gC_ = Strict(M),
    to_assoc = _gC_[4],
    to_string$3 = _gC_[7];
   function token_to_string(tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        return _gD_;
       case 1:
        return _gE_;
       case 2:
        return _gF_;
       case 3:
        return _gG_;
       case 4:
        return _gH_;
       case 5:
        return _gI_;
       case 6:
        return _gJ_;
       case 7:
        return _gK_;
       case 8:
        return _gL_;
       case 9:
        return _gM_;
       case 10:
        return _gN_;
       case 11:
        return _gO_;
       case 12:
        return _gP_;
       case 13:
        return _gQ_;
       default: return _gR_;
     }
    switch(tok[0]){
      case 0:
       var s = tok[1]; return s;
      case 1:
       var err = tok[1]; return symbol_concat(_gT_, symbol_concat(err, _gS_));
      case 2:
       var s$0 = tok[1]; return s$0;
      case 3:
       var i = tok[1]; return string_of_int(i);
      case 4:
       var f = tok[1]; return string_of_float(f);
      case 5:
       var err$0 = tok[1]; return err$0;
      default: var b = tok[1]; return b ? _gU_ : _gV_;
    }
   }
   function Make$6(Lexxer, Parser){
    function read_json(lexbuf){
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     var match = caml_call1(Parser[2], reader);
     if(0 !== match[0]){var s = match[1]; return [1, s];}
     var match$0 = match[1];
     if(! match$0) return _gX_;
     var res = match$0[1];
     try{var tok = reader(0);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err = exn[2];
      return [1, err];
     }
     if(typeof tok === "number" && 6 === tok) return [0, res];
     return [1, symbol_concat(_gW_, token_to_string(tok))];
    }
    function read_json_error_info(lexbuf){
     var res = read_json(lexbuf);
     if(0 === res[0]) return res;
     var err = res[1], err_info = create_from_lexbuf(lexbuf, err);
     return [1, err_info];
    }
    function json_of_string_error_info(s){
     var lexbuf = from_string(0, s);
     return read_json_error_info(lexbuf);
    }
    function json_of_channel_error_info(inc){
     var lexbuf = from_channel(0, inc);
     return read_json_error_info(lexbuf);
    }
    function json_of_file_error_info(filename){
     try{
      var inc = open_in(filename), res = json_of_channel_error_info(inc);
      _i_(inc);
      return res;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Sys_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err = exn[2];
      return [1, [0, 0, 0, 0, err]];
     }
    }
    function json_of_lexbuf_error_info_comp(opt, lexbuf){
     if(opt) var sth = opt[1], stream = sth; else var stream = 0;
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     var match = caml_call1(Parser[2], reader);
     if(0 === match[0]){
      var match$0 = match[1];
      if(match$0){
       var res = match$0[1];
       a:
       if(stream)
        var _rt_ = [0, [0, res]];
       else{
        try{var tok = reader(0);}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
         var err = exn[2], _rv_ = [1, err], _rt_ = _rv_;
         break a;
        }
        b:
        {
         if(typeof tok === "number" && 6 === tok){var _rw_ = [0, [0, res]]; break b;}
         var _rw_ = [1, symbol_concat(_gY_, token_to_string(tok))];
        }
        var _rt_ = _rw_;
       }
       var _ru_ = _rt_;
      }
      else
       var _ru_ = stream ? _gZ_ : _g0_;
      var res$0 = _ru_;
     }
     else
      var s$0 = match[1], res$0 = [1, s$0];
     if(0 === res$0[0]){var res$1 = res$0[1]; return [0, res$1];}
     var s = res$0[1], err_info = create_from_lexbuf(lexbuf, s);
     return [1, err_info];
    }
    function read_json_stream_error_info(fin, lexbuf){
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     function f(i){
      var match = caml_call1(Parser[2], reader);
      if(0 !== match[0]){
       var err = match[1];
       caml_call1(fin, 0);
       var err_info = create_from_lexbuf(lexbuf, err);
       throw caml_maybe_attach_backtrace([0, Json_error_info, err_info], 1);
      }
      var match$0 = match[1];
      if(match$0){var res = match$0[1]; return [0, res];}
      caml_call1(fin, 0);
      return 0;
     }
     return from(f);
    }
    function stream_from_string_error_info(s){
     var lexbuf = from_string(0, s);
     return read_json_stream_error_info(function(param){return 0;}, lexbuf);
    }
    function stream_from_channel_error_info(opt, inc){
     if(opt)
      var sth = opt[1], fin = sth;
     else
      var fin = function(param){return 0;};
     var lexbuf = from_channel(0, inc);
     return read_json_stream_error_info(fin, lexbuf);
    }
    function stream_from_file_error_info(filename){
     var inc = open_in(filename);
     return stream_from_channel_error_info
             ([0, function(param){return _i_(inc);}], inc);
    }
    function stream_from_lexbuf_error_info(lexbuf){
     return read_json_stream_error_info(function(param){return 0;}, lexbuf);
    }
    return [0,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            json_of_string_error_info,
            json_of_file_error_info,
            json_of_channel_error_info,
            ,
            ,
            json_of_lexbuf_error_info_comp,
            ,
            ,
            ,
            ,
            ,
            stream_from_string_error_info,
            stream_from_channel_error_info,
            stream_from_file_error_info,
            ,
            stream_from_lexbuf_error_info];
   }
   function Make$7(Compliance){
    function nibble_to_hex(i){
     var _rs_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
     return char_of_int(_rs_);
    }
    function add_hex_byte(oc, i){
     _j_(oc, nibble_to_hex((i >>> 4 | 0) & 15));
     return _j_(oc, nibble_to_hex(i & 15));
    }
    function escape(oc, s){
     function add_char(_rr_){return _j_(oc, _rr_);}
     function add_string(_rq_){return output_string(oc, _rq_);}
     var l = caml_ml_string_length(s), _ro_ = l - 1 | 0, _rn_ = 0;
     if(_ro_ >= 0){
      var i = _rn_;
      for(;;){
       var c = caml_string_get(s, i);
       a:
       if(92 === c)
        add_string(_g1_);
       else{
        b:
        {
         c:
         {
          if(35 > c){
           if(8 > c) break b;
           switch(c - 8 | 0){
             case 0:
              add_string(_g3_); break;
             case 1:
              add_string(_g4_); break;
             case 2:
              add_string(_g5_); break;
             case 4:
              add_string(_g6_); break;
             case 5:
              add_string(_g7_); break;
             case 26:
              add_string(_g8_); break;
             case 24:
             case 25:
              break c;
             default: break b;
           }
           break a;
          }
          if(127 === c) break b;
         }
         add_char(caml_string_get(s, i));
         break a;
        }
        add_string(_g2_);
        add_hex_byte(oc, c);
       }
       var _rp_ = i + 1 | 0;
       if(_ro_ === i) break;
       i = _rp_;
      }
     }
     return;
    }
    function json_to_channel_fmt(oc, json, eol, incr, psep){
     function add_char(_rm_){return _j_(oc, _rm_);}
     function add_string(_rl_){return output_string(oc, _rl_);}
     function add_quote_string(s){
      add_char(34);
      escape(oc, s);
      return add_char(34);
     }
     function add_int(i){return add_string(string_of_int(i));}
     function add_float(f){return add_string(caml_call1(Compliance[8], f));}
     var psep$0 = symbol_concat(_g9_, psep);
     function fmt(off, value){
      if(typeof value === "number") return add_string(_g__);
      var _rk_ = value[1];
      if(708012133 <= _rk_){
       if(737456202 > _rk_){
        if(726928360 <= _rk_){
         var t = value[2], ldr$1 = make$1(off, 32);
         add_char(40);
         add_string(eol);
         json_list(off + incr | 0, t);
         add_string(eol);
         add_string(ldr$1);
         return add_char(41);
        }
        var v = value[2], ldr$2 = make$1(off, 32);
        add_char(60);
        add_string(eol);
        variant(off + incr | 0, v);
        add_string(eol);
        add_string(ldr$2);
        return add_char(62);
       }
       if(928231259 <= _rk_){
        if(963043957 <= _rk_){
         var o = value[2], ldr = make$1(off, 32);
         add_char(123);
         add_string(eol);
         json_assoc(off + incr | 0, o);
         add_string(eol);
         add_string(ldr);
         return add_char(125);
        }
        var s = value[2];
        return add_string(s);
       }
       if(848054398 <= _rk_){
        var l = value[2], ldr$0 = make$1(off, 32);
        add_char(91);
        add_string(eol);
        json_list(off + incr | 0, l);
        add_string(eol);
        add_string(ldr$0);
        return add_char(93);
       }
       var b = value[2];
       return add_string(string_of_bool(b));
      }
      if(-752863768 === _rk_){var s$0 = value[2]; return add_string(s$0);}
      if(3654863 <= _rk_){
       if(365180284 <= _rk_){var f = value[2]; return add_float(f);}
       var i = value[2];
       return add_int(i);
      }
      if(-375152890 <= _rk_){var s$1 = value[2]; return add_string(s$1);}
      var s$2 = value[2];
      return add_quote_string(s$2);
     }
     function json_assoc(off, o){
      var
       ldr = make$1(off, 32),
       sep = [0, ldr],
       newsep = symbol_concat(_g$_, symbol_concat(eol, ldr));
      return iter$0
              (function(v){
                add_string(sep[1]);
                sep[1] = newsep;
                return pair(off, v);
               },
               o);
     }
     function pair(off, param){
      var v = param[2], k = param[1];
      add_quote_string(k);
      add_string(psep$0);
      return fmt(off, v);
     }
     function json_list(off, l){
      var
       ldr = make$1(off, 32),
       sep = [0, ldr],
       newsep = symbol_concat(_ha_, symbol_concat(eol, ldr));
      return iter$0
              (function(v){
                add_string(sep[1]);
                sep[1] = newsep;
                return fmt(off, v);
               },
               l);
     }
     function variant(off, param){
      var j = param[2], k = param[1];
      add_quote_string(k);
      if(! j) return;
      var j$0 = j[1];
      add_string(psep$0);
      return fmt(off + incr | 0, j$0);
     }
     fmt(0, json);
     return add_string(eol);
    }
    function json_to_channel(_rd_){
     function _re_(_rg_, _rh_, _ri_, _rj_){
      return json_to_channel_fmt(_rd_, _rg_, _rh_, _ri_, _rj_);
     }
     return function(_rf_){return _re_(_rf_, _hc_, 0, _hb_);};
    }
    function json_to_file_exn(file, json){
     var oc = open_out(file);
     try{json_to_channel(oc)(json); close_out(oc); return;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      close_out(oc);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    return [0, , , , , , , , , json_to_file_exn, , json_to_channel];
   }
   function Make$8(Compliance){
    function nibble_to_hex(i){
     var _rc_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
     return char_of_int(_rc_);
    }
    function add_hex_byte(buf, i){
     add_char(buf, nibble_to_hex((i >>> 4 | 0) & 15));
     return add_char(buf, nibble_to_hex(i & 15));
    }
    function escape(buf, s){
     function add_char$0(_rb_){return add_char(buf, _rb_);}
     function add_string$0(_ra_){return add_string(buf, _ra_);}
     var l = caml_ml_string_length(s), _q__ = l - 1 | 0, _q9_ = 0;
     if(_q__ >= 0){
      var i = _q9_;
      for(;;){
       var c = caml_string_get(s, i);
       a:
       if(92 === c)
        add_string$0(_hd_);
       else{
        b:
        {
         c:
         {
          if(35 > c){
           if(8 > c) break b;
           switch(c - 8 | 0){
             case 0:
              add_string$0(_hf_); break;
             case 1:
              add_string$0(_hg_); break;
             case 2:
              add_string$0(_hh_); break;
             case 4:
              add_string$0(_hi_); break;
             case 5:
              add_string$0(_hj_); break;
             case 26:
              add_string$0(_hk_); break;
             case 24:
             case 25:
              break c;
             default: break b;
           }
           break a;
          }
          if(127 === c) break b;
         }
         add_char$0(caml_string_get(s, i));
         break a;
        }
        add_string$0(_he_);
        add_hex_byte(buf, c);
       }
       var _q$_ = i + 1 | 0;
       if(_q__ === i) break;
       i = _q$_;
      }
     }
     return;
    }
    function json_to_buffer(buf, json){
     function add_char$0(_q8_){return add_char(buf, _q8_);}
     function add_string$0(_q7_){return add_string(buf, _q7_);}
     function add_quote_string(s){
      add_char$0(34);
      escape(buf, s);
      return add_char$0(34);
     }
     function add_int(i){return add_string$0(string_of_int(i));}
     function add_float(f){return add_string$0(caml_call1(Compliance[8], f));}
     function fmt(value){
      if(typeof value === "number") return add_string$0(_hl_);
      var _q6_ = value[1];
      if(708012133 <= _q6_){
       if(737456202 > _q6_){
        if(726928360 <= _q6_){
         var t = value[2];
         add_char$0(40);
         json_list(t);
         return add_char$0(41);
        }
        var v = value[2];
        add_char$0(60);
        variant(v);
        return add_char$0(62);
       }
       if(928231259 <= _q6_){
        if(963043957 <= _q6_){
         var o = value[2];
         add_char$0(123);
         json_assoc(o);
         return add_char$0(125);
        }
        var s = value[2];
        return add_string$0(s);
       }
       if(848054398 <= _q6_){
        var l = value[2];
        add_char$0(91);
        json_list(l);
        return add_char$0(93);
       }
       var b = value[2];
       return add_string$0(string_of_bool(b));
      }
      if(-752863768 === _q6_){var s$0 = value[2]; return add_string$0(s$0);}
      if(3654863 <= _q6_){
       if(365180284 <= _q6_){var f = value[2]; return add_float(f);}
       var i = value[2];
       return add_int(i);
      }
      if(-375152890 <= _q6_){var s$1 = value[2]; return add_string$0(s$1);}
      var s$2 = value[2];
      return add_quote_string(s$2);
     }
     function json_assoc(o){
      var sep = [0, _hm_];
      return iter$0
              (function(v){
                add_string$0(sep[1]);
                sep[1] = _hn_;
                return pair(v);
               },
               o);
     }
     function pair(param){
      var v = param[2], k = param[1];
      add_quote_string(k);
      add_char$0(58);
      return fmt(v);
     }
     function json_list(l){
      var sep = [0, _ho_];
      return iter$0
              (function(v){
                add_string$0(sep[1]);
                sep[1] = _hp_;
                return fmt(v);
               },
               l);
     }
     function variant(param){
      var j = param[2], k = param[1];
      add_quote_string(k);
      if(! j) return;
      var j$0 = j[1];
      add_char$0(58);
      return fmt(j$0);
     }
     return fmt(json);
    }
    function json_to_string(json){
     var buf = create$1(100);
     json_to_buffer(buf, json);
     return contents(buf);
    }
    return [0, , , json_to_string, , , , , , , , json_to_buffer];
   }
   var Json_error = [248, _hq_, caml_fresh_oo_id(0)];
   function json_error(msg){
    throw caml_maybe_attach_backtrace([0, Json_error, msg], 1);
   }
   function Common_reader(Compliance){
    var
     Lexxer = Make$3(Compliance),
     Parser = Make$4(Compliance),
     include = function(_q5_){return Make$6(Lexxer, _q5_);}(Parser),
     json_of_string_error_info = include[15],
     json_of_file_error_info = include[16],
     json_of_channel_error_info = include[17],
     json_of_lexbuf_error_info_comp = include[20],
     stream_from_string_error_info = include[26],
     stream_from_channel_error_info = include[27],
     stream_from_file_error_info = include[28],
     stream_from_lexbuf_error_info = include[30],
     Internal_reader =
       [0,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        json_of_string_error_info,
        json_of_file_error_info,
        json_of_channel_error_info,
        ,
        ,
        json_of_lexbuf_error_info_comp,
        ,
        ,
        ,
        ,
        ,
        stream_from_string_error_info,
        stream_from_channel_error_info,
        stream_from_file_error_info,
        ,
        stream_from_lexbuf_error_info];
    function error_to_string(error_info, fname, lnum){
     if(lnum) var lnum$0 = lnum[1], lnum$1 = lnum$0; else var lnum$1 = 1;
     var
      _q1_ = error_info[4],
      _q2_ = error_info[3],
      _q3_ = error_info[2],
      _q4_ = (lnum$1 + error_info[1] | 0) - 1 | 0;
     if(fname)
      var
       name = fname[1],
       fname$0 = symbol_concat(_hs_, symbol_concat(name, _hr_));
     else
      var fname$0 = _hu_;
     var loc = caml_call4(sprintf(_ht_), fname$0, _q4_, _q3_, _q2_);
     return symbol_concat(loc, _q1_);
    }
    function apply_and_handle_errors(f, a, fname, lnum){
     var match = caml_call1(f, a);
     if(0 === match[0]){var json = match[1]; return json;}
     var error_info = match[1];
     return json_error(error_to_string(error_info, fname, lnum));
    }
    function from_string(param, fname, lnum, s){
     return apply_and_handle_errors(Internal_reader[17], s, fname, lnum);
    }
    return [0, , , , from_string];
   }
   function Common_writer(Compliance){
    var
     _qW_ = Make$8(Compliance),
     to_string = _qW_[3],
     to_buffer = _qW_[11],
     _qX_ = Make$7(Compliance),
     to_file = _qX_[9],
     to_channel = _qX_[11],
     include = _gz_(Compliance),
     pretty_print = include[1],
     pretty_print_to_string = include[2],
     pretty_print_to_channel = include[3],
     Internal_writer =
       [0,
        ,
        ,
        to_string,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        to_buffer,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        to_file,
        ,
        to_channel,
        ,
        ,
        ,
        pretty_print,
        pretty_print_to_string,
        pretty_print_to_channel];
    function to_standard(json){
     function map(node){
      if(typeof node === "number") return 870828711;
      var _q0_ = node[1];
      if(708012133 > _q0_){
       if(-752863768 === _q0_){
        var v$1 = node[2];
        return [0, -976970511, v$1];
       }
       if(3654863 <= _q0_) return 365180284 <= _q0_ ? node : node;
       if(-375152890 > _q0_) return node;
       var s = node[2];
       return 1 < caml_ml_string_length(s) >>> 0
               ? [0,
                 -976970511,
                 sub$0(s, 1, caml_ml_string_length(s) - 2 | 0)]
               : [0, -976970511, s];
      }
      if(737456202 > _q0_){
       if(726928360 <= _q0_){
        var tpl = node[2];
        return [0, 848054398, map$1(map, tpl)];
       }
       var match = node[2], jopt = match[2], name = match[1];
       if(! jopt) return [0, -976970511, name];
       var v$0 = jopt[1];
       return [0, 848054398, [0, [0, -976970511, name], [0, map(v$0), 0]]];
      }
      if(928231259 > _q0_){
       if(848054398 > _q0_) return node;
       var l = node[2];
       return [0, 848054398, map$1(map, l)];
      }
      if(963043957 <= _q0_){
       var a = node[2];
       return [0,
               963043957,
               map$1
                (function(param){
                  var v = param[2], id = param[1];
                  return [0, id, map(v)];
                 },
                 a)];
      }
      var v = node[2];
      return [0, 365180284, caml_float_of_string(v)];
     }
     return map(json);
    }
    function to_string$0(param, _qY_, opt, json){
     if(opt) var sth = opt[1], std = sth; else var std = 0;
     if(! std) return Internal_writer[3].call(null, json);
     var _qZ_ = to_standard(json);
     return Internal_writer[3].call(null, _qZ_);
    }
    return [0, , , to_string$0];
   }
   function lex_string(s){return unescape_string(s);}
   function lex_number(token){return token;}
   function lex_integer(token){return token;}
   function lex_largeint(param){return _hv_;}
   function lex_variant(param){return 0;}
   function lex_tuple(param){return 0;}
   function comment_check(param){return _hw_;}
   function number_to_string(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _hx_ : _hy_
            : 4 <= match ? _hz_ : string_of_float_json(f);
   }
   function largeint(s){return [0, 365180284, caml_float_of_string(s)];}
   function integer(i){return [0, 3654863, i];}
   var null$2 = 870828711;
   function string$0(s){return [0, -976970511, s];}
   function bool(b){return [0, 737456202, b];}
   function assoc(a){return [0, 963043957, a];}
   function list(l){return [0, 848054398, l];}
   function tuple(l){
    throw caml_maybe_attach_backtrace([0, Failure, _hA_], 1);
   }
   function variant(l){
    throw caml_maybe_attach_backtrace([0, Failure, _hB_], 1);
   }
   function number(param){
    if(typeof param === "number")
     return 3900603 === param
             ? [0, 365180284, NaN]
             : 874173192
               <= param
               ? [0, 365180284, Infinity]
               : [0, 365180284, -Infinity];
    if(928231259 <= param[1])
     throw caml_maybe_attach_backtrace([0, Failure, _hC_], 1);
    var f = param[2];
    return [0, 365180284, f];
   }
   function array_start(param){return 14610;}
   function array_end(param){return 14596;}
   function object_start(param){return 17732;}
   function object_end(param){return 17718;}
   function tuple_start(param){
    throw caml_maybe_attach_backtrace([0, Failure, _hD_], 1);
   }
   function tuple_end(param){
    throw caml_maybe_attach_backtrace([0, Failure, _hE_], 1);
   }
   function variant_start(param){
    throw caml_maybe_attach_backtrace([0, Failure, _hF_], 1);
   }
   function variant_end(param){
    throw caml_maybe_attach_backtrace([0, Failure, _hG_], 1);
   }
   function name$0(s){return [0, 869834347, s];}
   Common_reader
    ([0,
      lex_string,
      lex_number,
      lex_integer,
      lex_largeint,
      lex_tuple,
      lex_variant,
      comment_check,
      number_to_string,
      number,
      integer,
      largeint,
      null$2,
      string$0,
      bool,
      assoc,
      list,
      tuple,
      variant,
      [0,
       number,
       integer,
       largeint,
       null$2,
       string$0,
       bool,
       array_start,
       array_end,
       object_start,
       object_end,
       tuple_start,
       tuple_end,
       variant_start,
       variant_end,
       name$0]]);
   Common_writer
    ([0,
      lex_string,
      lex_number,
      lex_integer,
      lex_largeint,
      lex_tuple,
      lex_variant,
      comment_check,
      number_to_string,
      number,
      integer,
      largeint,
      null$2,
      string$0,
      bool,
      assoc,
      list,
      tuple,
      variant,
      [0,
       number,
       integer,
       largeint,
       null$2,
       string$0,
       bool,
       array_start,
       array_end,
       object_start,
       object_end,
       tuple_start,
       tuple_end,
       variant_start,
       variant_end,
       name$0]]);
   function lex_string$0(s){return unescape_string(s);}
   function lex_number$0(token){return token;}
   function lex_integer$0(token){return token;}
   function lex_largeint$0(token){return token;}
   function lex_variant$0(param){return 1;}
   function lex_tuple$0(param){return 1;}
   function comment_check$0(param){return _hH_;}
   function number_to_string$0(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _hI_ : _hJ_
            : 4 <= match ? _hK_ : string_of_float_json(f);
   }
   function largeint$0(s){return [0, -752863768, s];}
   function integer$0(i){return [0, 3654863, i];}
   var null$3 = 870828711;
   function string$1(s){return [0, -976970511, s];}
   function bool$0(b){return [0, 737456202, b];}
   function assoc$0(a){return [0, 963043957, a];}
   function list$0(l){return [0, 848054398, l];}
   function tuple$0(l){return [0, 726928360, l];}
   function variant$0(k, v){return [0, 708012133, [0, k, v]];}
   function number$0(param){
    if(typeof param === "number")
     return 3900603 === param
             ? [0, 365180284, NaN]
             : 874173192
               <= param
               ? [0, 365180284, Infinity]
               : [0, 365180284, -Infinity];
    if(928231259 <= param[1])
     throw caml_maybe_attach_backtrace([0, Failure, _hL_], 1);
    var f = param[2];
    return [0, 365180284, f];
   }
   function array_start$0(param){return 14610;}
   function array_end$0(param){return 14596;}
   function object_start$0(param){return 17732;}
   function object_end$0(param){return 17718;}
   function tuple_start$0(param){return 18847;}
   function tuple_end$0(param){return 18833;}
   function variant_start$0(param){return 19293;}
   function variant_end$0(param){return 19279;}
   function name$1(s){return [0, 869834347, s];}
   var
    from_string$0 =
      Common_reader
        ([0,
          lex_string$0,
          lex_number$0,
          lex_integer$0,
          lex_largeint$0,
          lex_tuple$0,
          lex_variant$0,
          comment_check$0,
          number_to_string$0,
          number$0,
          integer$0,
          largeint$0,
          null$3,
          string$1,
          bool$0,
          assoc$0,
          list$0,
          tuple$0,
          variant$0,
          [0,
           number$0,
           integer$0,
           largeint$0,
           null$3,
           string$1,
           bool$0,
           array_start$0,
           array_end$0,
           object_start$0,
           object_end$0,
           tuple_start$0,
           tuple_end$0,
           variant_start$0,
           variant_end$0,
           name$1]])
       [4],
    include =
      Common_writer
       ([0,
         lex_string$0,
         lex_number$0,
         lex_integer$0,
         lex_largeint$0,
         lex_tuple$0,
         lex_variant$0,
         comment_check$0,
         number_to_string$0,
         number$0,
         integer$0,
         largeint$0,
         null$3,
         string$1,
         bool$0,
         assoc$0,
         list$0,
         tuple$0,
         variant$0,
         [0,
          number$0,
          integer$0,
          largeint$0,
          null$3,
          string$1,
          bool$0,
          array_start$0,
          array_end$0,
          object_start$0,
          object_end$0,
          tuple_start$0,
          tuple_end$0,
          variant_start$0,
          variant_end$0,
          name$1]]),
    to_string$4 = include[3];
   function lex_string$1(s){
    return symbol_concat(_hN_, symbol_concat(s, _hM_));
   }
   function lex_number$1(token){return token;}
   function lex_integer$1(token){return token;}
   function lex_largeint$1(token){return token;}
   function lex_variant$1(param){return 1;}
   function lex_tuple$1(param){return 1;}
   function comment_check$1(param){return _hO_;}
   function number_to_string$1(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _hP_ : _hQ_
            : 4 <= match ? _hR_ : string_of_float_json(f);
   }
   function largeint$1(s){return [0, -752863768, s];}
   function integer$1(i){return [0, -752863768, string_of_int(i)];}
   var null$4 = 870828711;
   function string$2(s){return [0, -375152890, s];}
   function bool$1(b){return [0, 737456202, b];}
   function assoc$1(a){return [0, 963043957, a];}
   function list$1(l){return [0, 848054398, l];}
   function tuple$1(l){return [0, 726928360, l];}
   function variant$1(k, v){return [0, 708012133, [0, k, v]];}
   function number$1(param){
    if(typeof param === "number")
     return 3900603 === param ? _hS_ : 874173192 <= param ? _hT_ : _hU_;
    if(928231259 <= param[1]){var f = param[2]; return [0, 928231259, f];}
    var f$0 = param[2];
    return [0, 928231259, string_of_float(f$0)];
   }
   function array_start$1(param){return 14610;}
   function array_end$1(param){return 14596;}
   function object_start$1(param){return 17732;}
   function object_end$1(param){return 17718;}
   function tuple_start$1(param){return 18847;}
   function tuple_end$1(param){return 18833;}
   function variant_start$1(param){return 19293;}
   function variant_end$1(param){return 19279;}
   function name$2(s){return [0, 869834347, s];}
   Common_reader
    ([0,
      lex_string$1,
      lex_number$1,
      lex_integer$1,
      lex_largeint$1,
      lex_tuple$1,
      lex_variant$1,
      comment_check$1,
      number_to_string$1,
      number$1,
      integer$1,
      largeint$1,
      null$4,
      string$2,
      bool$1,
      assoc$1,
      list$1,
      tuple$1,
      variant$1,
      [0,
       number$1,
       integer$1,
       largeint$1,
       null$4,
       string$2,
       bool$1,
       array_start$1,
       array_end$1,
       object_start$1,
       object_end$1,
       tuple_start$1,
       tuple_end$1,
       variant_start$1,
       variant_end$1,
       name$2]]);
   Common_writer
    ([0,
      lex_string$1,
      lex_number$1,
      lex_integer$1,
      lex_largeint$1,
      lex_tuple$1,
      lex_variant$1,
      comment_check$1,
      number_to_string$1,
      number$1,
      integer$1,
      largeint$1,
      null$4,
      string$2,
      bool$1,
      assoc$1,
      list$1,
      tuple$1,
      variant$1,
      [0,
       number$1,
       integer$1,
       largeint$1,
       null$4,
       string$2,
       bool$1,
       array_start$1,
       array_end$1,
       object_start$1,
       object_end$1,
       tuple_start$1,
       tuple_end$1,
       variant_start$1,
       variant_end$1,
       name$2]]);
   function rand(s, param){return bits(s);}
   make_self_init(0);
   function v4_ocaml_random_uuid(rand){
    var
     r0 = caml_call1(rand, 0),
     r1 = caml_call1(rand, 0),
     r2 = caml_call1(rand, 0),
     r3 = caml_call1(rand, 0),
     r4 = caml_call1(rand, 0),
     u = caml_create_bytes(16),
     _pq_ = 0;
    function _pr_(_qV_, _qU_, _qT_){caml_bytes_set(_qV_, _qU_, _qT_); return;}
    (function(_qS_){return _pr_(u, _pq_, _qS_);}(r0 & 255));
    var _ps_ = 1;
    function _pt_(_qR_, _qQ_, _qP_){caml_bytes_set(_qR_, _qQ_, _qP_); return;}
    (function(_qO_){return _pt_(u, _ps_, _qO_);}((r0 >>> 8 | 0) & 255));
    var _pu_ = 2;
    function _pv_(_qN_, _qM_, _qL_){caml_bytes_set(_qN_, _qM_, _qL_); return;}
    (function(_qK_){return _pv_(u, _pu_, _qK_);}((r0 >>> 16 | 0) & 255));
    var _pw_ = 3;
    function _px_(_qJ_, _qI_, _qH_){caml_bytes_set(_qJ_, _qI_, _qH_); return;}
    (function(_qG_){return _px_(u, _pw_, _qG_);}(r1 & 255));
    var _py_ = 4;
    function _pz_(_qF_, _qE_, _qD_){caml_bytes_set(_qF_, _qE_, _qD_); return;}
    (function(_qC_){return _pz_(u, _py_, _qC_);}((r1 >>> 8 | 0) & 255));
    var _pA_ = 5;
    function _pB_(_qB_, _qA_, _qz_){caml_bytes_set(_qB_, _qA_, _qz_); return;}
    (function(_qy_){return _pB_(u, _pA_, _qy_);}((r1 >>> 16 | 0) & 255));
    var _pC_ = 6;
    function _pD_(_qx_, _qw_, _qv_){caml_bytes_set(_qx_, _qw_, _qv_); return;}
    (function(_qu_){return _pD_(u, _pC_, _qu_);}(64 | (r1 >>> 24 | 0) & 15));
    var _pE_ = 7;
    function _pF_(_qt_, _qs_, _qr_){caml_bytes_set(_qt_, _qs_, _qr_); return;}
    (function(_qq_){return _pF_(u, _pE_, _qq_);}(r2 & 255));
    var _pG_ = 8;
    function _pH_(_qp_, _qo_, _qn_){caml_bytes_set(_qp_, _qo_, _qn_); return;}
    (function(_qm_){return _pH_(u, _pG_, _qm_);}(128 | (r2 >>> 24 | 0) & 63));
    var _pI_ = 9;
    function _pJ_(_ql_, _qk_, _qj_){caml_bytes_set(_ql_, _qk_, _qj_); return;}
    (function(_qi_){return _pJ_(u, _pI_, _qi_);}((r2 >>> 8 | 0) & 255));
    var _pK_ = 10;
    function _pL_(_qh_, _qg_, _qf_){caml_bytes_set(_qh_, _qg_, _qf_); return;}
    (function(_qe_){return _pL_(u, _pK_, _qe_);}((r2 >>> 16 | 0) & 255));
    var _pM_ = 11;
    function _pN_(_qd_, _qc_, _qb_){caml_bytes_set(_qd_, _qc_, _qb_); return;}
    (function(_qa_){return _pN_(u, _pM_, _qa_);}(r3 & 255));
    var _pO_ = 12;
    function _pP_(_p$_, _p__, _p9_){caml_bytes_set(_p$_, _p__, _p9_); return;}
    (function(_p8_){return _pP_(u, _pO_, _p8_);}((r3 >>> 8 | 0) & 255));
    var _pQ_ = 13;
    function _pR_(_p7_, _p6_, _p5_){caml_bytes_set(_p7_, _p6_, _p5_); return;}
    (function(_p4_){return _pR_(u, _pQ_, _p4_);}((r3 >>> 16 | 0) & 255));
    var _pS_ = 14;
    function _pT_(_p3_, _p2_, _p1_){caml_bytes_set(_p3_, _p2_, _p1_); return;}
    (function(_p0_){return _pT_(u, _pS_, _p0_);}(r4 & 255));
    var _pU_ = 15;
    function _pV_(_pZ_, _pY_, _pX_){caml_bytes_set(_pZ_, _pY_, _pX_); return;}
    (function(_pW_){return _pV_(u, _pU_, _pW_);}((r4 >>> 8 | 0) & 255));
    return unsafe_to_string(u);
   }
   function v4_gen(seed){
    function rand$0(_pp_){return rand(seed, _pp_);}
    return function(param){return v4_ocaml_random_uuid(rand$0);};
   }
   function to_string$5(opt, u){
    if(opt) var sth = opt[1], upper = sth; else var upper = 0;
    var hbase = upper ? 55 : 87;
    function hex(hbase, i){return 10 <= i ? hbase + i | 0 : 48 + i | 0;}
    var s = of_string(_hV_), i = [0, 0], j = [0, 0];
    function byte$0(s, i, c){
     function _pe_(_po_, _pn_, _pm_){
      caml_bytes_set(_po_, _pn_, _pm_);
      return;
     }
     (function(_pl_){return _pe_(s, i, _pl_);}(hex(hbase, c >>> 4 | 0)));
     var _pf_ = i + 1 | 0;
     function _pg_(_pk_, _pj_, _pi_){
      caml_bytes_set(_pk_, _pj_, _pi_);
      return;
     }
     return function(_ph_){return _pg_(s, _pf_, _ph_);}(hex(hbase, c & 15));
    }
    for(;;){
     if(4 <= j[1]) break;
     var _pd_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _pd_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
    i[1]++;
    for(;;){
     if(6 <= j[1]) break;
     var _pc_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _pc_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
    i[1]++;
    for(;;){
     if(8 <= j[1]) break;
     var _pb_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _pb_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
    i[1]++;
    for(;;){
     if(10 <= j[1]) break;
     var _pa_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _pa_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
    i[1]++;
    for(;;){
     if(16 <= j[1]) return unsafe_to_string(s);
     var _o$_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _o$_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
   }
   function RA_queue(Key){
    var Map = _Y_(Key);
    function size(t){return size$0(t[1]);}
    function create(param){return [0, empty$2, Map[1]];}
    function add(t, k, x){
     var _o__ = Map[4].call(null, k, x, t[2]);
     return [0, cons$2(k, t[1]), _o__];
    }
    function take_opt(t){
     var match = take_back(t[1]);
     if(! match) return [0, t, 0];
     var
      match$0 = match[1],
      k = match$0[2],
      queue = match$0[1],
      x = Map[28].call(null, k, t[2]);
     return [0, [0, queue, Map[7].call(null, k, t[2])], [0, [0, k, x]]];
    }
    function find(t, k){return Map[29].call(null, k, t[2]);}
    return [0, , size, create, , add, take_opt, find];
   }
   function Make$9(Key){
    var RA_queue$0 = RA_queue(Key);
    function create(size){
     var q1 = RA_queue$0[3].call(null, 0), q2 = RA_queue$0[3].call(null, 0);
     return [0, q1, q2, size];
    }
    function evict_one(on_evict, t){return evict_q2(on_evict, t);}
    function evict_q2$0(counter, on_evict, t){
     var t$0 = t;
     for(;;){
      var
       _o7_ = RA_queue$0[6].call(null, t$0[2]),
       _o8_ = _o7_[2],
       q2 = _o7_[1];
      if(! _o8_){
       if(counter >= 50)
        return caml_trampoline_return(evict_q1, [0, on_evict, t$0]);
       var counter$0 = counter + 1 | 0;
       return evict_q1(counter$0, on_evict, t$0);
      }
      var
       _o9_ = _o8_[1],
       match = _o9_[2],
       elt = match[1],
       k = _o9_[1],
       visited = match[2];
      if(! visited[1]){
       caml_call1(on_evict, elt);
       return [0, t$0[1], q2, t$0[3]];
      }
      var
       q1 = RA_queue$0[5].call(null, t$0[1], k, [0, elt, [0, 0]]),
       t$1 = [0, q1, q2, t$0[3]];
      t$0 = t$1;
     }
    }
    function evict_q2(on_evict, t){
     return caml_trampoline(evict_q2$0(0, on_evict, t));
    }
    function evict_q1(counter, on_evict, t){
     var t$0 = t;
     for(;;){
      var
       _o4_ = RA_queue$0[6].call(null, t$0[1]),
       _o5_ = _o4_[2],
       q1 = _o4_[1];
      if(! _o5_){
       if(counter >= 50)
        return caml_trampoline_return(evict_q2$0, [0, on_evict, t$0]);
       var counter$0 = counter + 1 | 0;
       return evict_q2$0(counter$0, on_evict, t$0);
      }
      var
       _o6_ = _o5_[1],
       match = _o6_[2],
       elt = match[1],
       k = _o6_[1],
       visited = match[2];
      if(! visited[1]){
       caml_call1(on_evict, elt);
       return [0, q1, t$0[2], t$0[3]];
      }
      var
       q2 = RA_queue$0[5].call(null, t$0[2], k, [0, elt, [0, 0]]),
       t$1 = [0, q1, q2, t$0[3]];
      t$0 = t$1;
     }
    }
    function evict(on_evict, t){
     var t$0 = t;
     for(;;){
      var
       _o3_ = RA_queue$0[2].call(null, t$0[2]),
       size = RA_queue$0[2].call(null, t$0[1]) + _o3_ | 0;
      if(0 < size && t$0[3] < size){
       var t$1 = evict_one(on_evict, t$0);
       t$0 = t$1;
       continue;
      }
      return t$0;
     }
    }
    function insert(t, opt, _o0_, k, x){
     if(opt)
      var sth = opt[1], on_insert = sth;
     else
      var on_insert = function(_o2_){return;};
     if(_o0_)
      var sth$0 = _o0_[1], on_evict = sth$0;
     else
      var on_evict = function(_o1_){return 0;};
     var match = RA_queue$0[7].call(null, t[1], k);
     if(match){var visited = match[1][2]; visited[1] = 1; return [0, t, 0];}
     var match$0 = RA_queue$0[7].call(null, t[2], k);
     if(match$0){
      var visited$0 = match$0[1][2];
      visited$0[1] = 1;
      return [0, t, 0];
     }
     var q1 = RA_queue$0[5].call(null, t[1], k, [0, x, [0, 0]]);
     caml_call1(on_insert, x);
     return [0, evict(on_evict, [0, q1, t[2], t[3]]), 1];
    }
    return [0, create, insert];
   }
   var include$0 = _e__([0, compare$0]);
   function to_jstr$1(t){return encode(t);}
   function of_jstr$0(jstr){
    var match = decode(jstr);
    if(0 === match[0]){var v = match[1]; return [0, v];}
    var err = match[1];
    error$0([0, err, 0]);
    return _hW_;
   }
   function of_jv(jv){return of_jstr$0(jv);}
   var random_state = get_state(0);
   function new_uuid_v4(param){return v4_gen(random_state)(0);}
   function tee(f, x){caml_call1(f, x); return x;}
   var
    empty$4 = include$0[1],
    union = include$0[7],
    of_list$2 = include$0[29],
    to_list$3 = include$0[49];
   function to_at(t){
    return symbol$9
            (function(c){return [0, 80, class$1(caml_jsstring_of_string(c))];},
             to_list$3(t));
   }
   var empty$5 = [0, empty$4, 0];
   function to_at$0(id, t){
    var
     _oX_ = to_at(t[1]),
     _oY_ = t[2],
     at = function(_oZ_){return rev_append(_oY_, _oZ_);}(_oX_);
    if(! id) return at;
    var id$0 = id[1];
    return [0, [0, 80, id$1(caml_jsstring_of_string(id$0))], at];
   }
   function classes(l){var _oW_ = empty$5[2]; return [0, of_list$2(l), _oW_];}
   function union$0(param, _oU_){
    var
     a = _oU_[2],
     c = _oU_[1],
     attrs = param[2],
     classes = param[1],
     _oV_ = rev_append(attrs, a);
    return [0, union(classes, c), _oV_];
   }
   function add$1(at_name, v, at){
    var _oR_ = v[1];
    if(82 === _oR_)
     var
      v$0 = v[2],
      a =
        [0,
         82,
         func
          (v$0,
           function(v){
            return function(_oS_){return v$1(at_name, _oS_);}
                    (caml_jsstring_of_string(v));
           })];
    else if(83 <= _oR_)
     var a = failwith(_hX_);
    else
     var
      v$2 = v[2],
      a =
        [0,
         80,
         function(_oT_){return v$1(at_name, _oT_);}
          (caml_jsstring_of_string(v$2))];
    return [0, a, at];
   }
   function add_bool(at$0, v, at){return v ? [0, [0, 80, at$0], at] : at;}
   function add_opt(at_name, v, at){
    if(! v) return at;
    var v$0 = v[1];
    return [0,
            [0,
             80,
             function(_oQ_){return v$1(at_name, _oQ_);}
              (caml_jsstring_of_string(v$0))],
            at];
   }
   function map_col(f, param){
    var _oP_ = param[1];
    if(82 === _oP_){var v = param[2]; return [0, 82, func(v, f)];}
    if(83 <= _oP_){var v$0 = param[2]; return [0, 83, map$4(f, v$0)];}
    var v$1 = param[2];
    return [0, 80, caml_call1(f, v$1)];
   }
   function of_at(param){
    if(0 === param[0]){
     var name = param[1];
     return class$1(caml_jsstring_of_string(name));
    }
    var at = param[1];
    return at;
   }
   function cons$3(at, t){return [0, map_col(of_at, at), t];}
   function class$2(n){
    return cons$3(map_col(function(n){return [0, n];}, n), 0);
   }
   function v$5(at){return cons$3(at, 0);}
   function symbol$14(at, t){return cons$3(at, t);}
   function of_string$1(s){
    var match = chop_suffix(_hY_, s);
    if(match){
     var i = match[1], match$0 = of_string$0(i);
     if(match$0){var i$0 = match$0[1]; return [0, [0, i$0]];}
     var _oJ_ = function(i){return [0, i];};
     return function(_oO_){return symbol$10(_oJ_, _oO_);}(of_string_opt(i));
    }
    var match$1 = chop_suffix(_hZ_, s);
    if(match$1){
     var f = match$1[1], _oK_ = function(f){return [1, f];};
     return function(_oN_){return symbol$10(_oK_, _oN_);}(of_string_opt(f));
    }
    var match$2 = chop_suffix(_h0_, s);
    if(! match$2) return 0;
    var f$0 = match$2[1];
    function _oL_(f){return [1, f];}
    return function(_oM_){return symbol$10(_oL_, _oM_);}(of_string_opt(f$0));
   }
   function to_string$6(param){
    switch(param[0]){
      case 0:
       var i = param[1]; return caml_call1(sprintf(_h1_), i);
      case 1:
       var f = param[1]; return caml_call1(sprintf(_h2_), f);
      default: var f$0 = param[1]; return caml_call1(sprintf(_h3_), f$0);
    }
   }
   function to_px(opt){
    if(opt)
     var sth = opt[1], parent = sth;
    else
     var parent = root(global_document);
    function get_font_size_in_px(parent){
     var
      font_size =
        caml_string_of_jsstring(computed_style(0, "font-size", parent)),
      match = of_string$1(font_size);
     if(! match) return 16.;
     var match$0 = match[1];
     if(0 !== match$0[0]) return failwith(_h4_);
     var i = match$0[1];
     return i;
    }
    return function(param){
     switch(param[0]){
       case 0:
        var i = param[1]; return i;
       case 1:
        var
         f = param[1],
         font_size = get_font_size_in_px(root(global_document));
        return f * font_size;
       default:
        var f$0 = param[1], font_size$0 = get_font_size_in_px(parent);
        return f$0 * font_size$0;
     }};
   }
   function map3(f, a, b, c){
    function _oE_(_oH_, _oI_){return map2(c, _oH_, _oI_);}
    function _oF_(c, param){
     var b = param[2], a = param[1];
     return caml_call3(f, a, b, c);
    }
    return function(_oG_){return _oE_(_oG_, _oF_);}
            (map2(a, b, function(a, b){return [0, a, b];}));
   }
   function triple(a, b, c){
    return map3(function(a, b, c){return [0, a, b, c];}, a, b, c);
   }
   function js_scroll(elt, target){
    if(0 === target[0]){var x = target[1]; elt.scroll(0, x); return 0;}
    var el = target[1];
    return scroll_into_view(0, el);
   }
   function make$5(opt, scroll_target, elt){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var
     active = var$0(1),
     active_class =
       func
        (get$4(active),
         function(param){return param ? [1, class$1("locked")] : [1, void$0];}),
     at$0 = symbol$14(_h5_, symbol$14([0, 82, active_class], at)),
     at$1 = class$2(_h6_);
    function on_click(param){return symbol$1(active, 1);}
    var
     handler$0 = handler(0, click, on_click),
     ev = [0, [0, 80, handler$0], 0],
     controls =
       div$1
        (0,
         [0, at$1],
         [0, ev],
         [0, [0, 82, button$0(0, 0, 0, [0, [0, 80, txt(0, _h7_)], 0])], 0]),
     on_wheel =
       handler
        (0,
         wheel,
         function(ev){
          var _oD_ = peek(active);
          return _oD_ ? symbol$1(active, 0) : _oD_;
         }),
     state = triple(elt, get$4(active), scroll_target),
     elt$0 =
       func
        (state,
         function(param){
          var pos = param[3], active = param[2], elt = param[1];
          if(active) iter(function(_oC_){return js_scroll(elt, _oC_);}, pos);
          return elt;
         });
    return div$1
            (0,
             [0, at$0],
             [0, [0, [0, 80, on_wheel], 0]],
             [0, [0, 82, elt$0], [0, [0, 82, controls], 0]]);
   }
   function v$6(name, css_size, content){return [0, name, css_size, content];}
   function to_header(t){
    var
     cells =
       fold_right
        (function(param, acc){
          var content = param[3];
          return [0, [0, 82, div$1(0, 0, 0, content)], acc];
         },
         t,
         0);
    return cells;
   }
   function style$1(t){
    var
     template =
       to_string$2
        (_h8_, function(param){var css_size = param[2]; return css_size;}, t);
    return caml_call2(sprintf(_h__), _h9_, template);
   }
   function style$2(t){
    var style = style$1(t[1][1]);
    return concat(_h$_, [0, style, 0]);
   }
   function header(t){
    var
     row_height = to_string$6(t[2]),
     at =
       [0,
        [0,
         80,
         style$0
          (caml_jsstring_of_string(caml_call1(sprintf(_ia_), row_height)))],
        0],
     _oy_ = [0, at],
     _ox_ = to_header(t[1][1]);
    return function(_oz_){
              return function(_oA_, _oB_){
               return div$1(_oz_, _oy_, _oA_, _oB_);};
             }
             (0)
            (0, _ox_);
   }
   to_px(0)(_ib_);
   var Cache = Make$9([0, compare$1]);
   function make$6(ui_table, opt, scroll_target){
    return function(param){
     var
      render = param[3],
      fetch = param[2],
      total_items = param[1],
      row_size = to_string$6(ui_table[2]);
     function height_n(n){return caml_call2(sprintf(_ic_), row_size, n);}
     var
      height$0 = caml_call1(sprintf(_id_), row_size),
      table = make$3(0),
      row_index = create$2(0, 2048);
     function unload(i){
      symbol_bind$0
       (get$6(row_index, i),
        function(row){
         return symbol$11
                 (get$5(row),
                  function(row_data){
                   return symbol$2(row, [0, row_data[1], 0, row_data[3]]);
                  });
        });
      return 0;
     }
     function new_cache(param){return Cache[1].call(null, 50);}
     var cache_ref = [0, new_cache(0)];
     function add(fetch, opt, indexes){
      var cache = cache_ref[1];
      function load(indexes){
       let$1
        (caml_call1(fetch, indexes),
         function(data){
          return iter2
                  (function(i, data){
                    symbol_bind$0
                     (get$6(row_index, i),
                      function(row){
                       return symbol$11
                               (get$5(row),
                                function(row_data){
                                 if(! data) throw caml_maybe_attach_backtrace(Not_found, 1);
                                 var
                                  data$0 = data[1],
                                  _ou_ = row_data[2],
                                  _ov_ =
                                    1 - function(_ow_){return poly(_ou_, _ow_);}([0, data$0]);
                                 return _ov_
                                         ? symbol$2(row, [0, row_data[1], [0, data$0], row_data[3]])
                                         : _ov_;
                                });
                      });
                    return 0;
                   },
                   indexes,
                   data);
         });
       return 0;
      }
      var
       match =
         fold_left
          (function(param, i){
            var
             acc = param[2],
             cache = param[1],
             match = Cache[2].call(null, cache, 0, [0, unload], i, i),
             inserted = match[2],
             cache$0 = match[1];
            return inserted ? [0, cache$0, [0, i, acc]] : [0, cache$0, acc];
           },
           [0, cache, 0],
           indexes),
       to_load = match[2],
       cache$0 = match[1];
      cache_ref[1] = cache$0;
      return load(of_list(to_load));
     }
     var table_height = var$0(0);
     function compute_visible_rows(last_scroll_y, div){
      function height(elt){return elt["offsetHeight"];}
      var
       scroll_y$0 = scroll_y(div),
       direction = symbol$8(scroll_y$0, last_scroll_y[1]) ? 759637122 : 19067;
      last_scroll_y[1] = scroll_y$0;
      var
       visible_height = height(div),
       _or_ = ui_table[2],
       header_height = to_px([0, div])(_or_),
       number_of_visible_rows = visible_height / header_height | 0,
       scroll_y$1 = scroll_y$0 - header_height,
       first_visible_row = (scroll_y$1 / header_height | 0) + 1 | 0,
       last_visible_row = first_visible_row + number_of_visible_rows | 0,
       bleeding =
         19067 === direction
          ? number_of_visible_rows
          : number_of_visible_rows / 2 | 0,
       _os_ = 0,
       first =
         function(_ot_){return max(_os_, _ot_);}
          (first_visible_row - bleeding | 0),
       bleeding$0 =
         759637122 === direction
          ? number_of_visible_rows
          : number_of_visible_rows / 2 | 0,
       last = last_visible_row + bleeding$0 | 0;
      return init$2(last - first | 0, function(i){return first + i | 0;});
     }
     function prepare(total, render){
      cache_ref[1] = new_cache(0);
      var i = [0, 0], current_row = [0, first(table)];
      for(;;){
       if(! is_some$1(current_row[1]) && ! symbol$6(i[1], total - 1 | 0))
        return;
       var match = current_row[1];
       if(match){
        var row = match[1];
        if(symbol$6(i[1], total - 1 | 0)){
         replace(row_index, i[1], row);
         symbol$2(row, [0, i[1], 0, render]);
        }
        else
         unset(row);
        i[1]++;
        current_row[1] = next(row);
       }
       else if(symbol$6(i[1], total - 1 | 0)){
        var set = [0, i[1], 0, render], row$0 = append$0([0, set], table);
        add$0(row_index, i[1], row$0);
        i[1]++;
        current_row[1] = next(row$0);
       }
      }
     }
     var
      last_scroll_y = [0, 0.],
      populate_on_scroll =
        map2
         (total_items,
          fetch,
          function(total_items, fetch){
           function update(div){
            var visible_rows = compute_visible_rows(last_scroll_y, div);
            return add(fetch, [0, 4 * length(visible_rows) | 0], visible_rows);
           }
           prepare(total_items, render);
           return update;
          }),
      scroll_handler =
        func
         (populate_on_scroll,
          function(update){
           return handler
                   (0,
                    scroll,
                    function(ev){
                     var last_update = [0, 0.], timeout = [0, -1];
                     function reset_ticker(div){
                      var debouncing_interval = 500, now = now_ms(performance);
                      if(symbol$7(timeout[1], 0)) stop_timer(timeout[1]);
                      timeout[1] =
                       set_timeout
                        (debouncing_interval,
                         function(param){return caml_call1(update, div);});
                      var
                       _oq_ = symbol$8(now - last_update[1], debouncing_interval);
                      return _oq_
                              ? (last_update[1] = now, caml_call1(update, div))
                              : _oq_;
                     }
                     function scroll_handler(div){return reset_ticker(div);}
                     var div = target(ev);
                     scroll_handler(div);
                     return 0;
                    });
          }),
      repopulate_deps = pair(populate_on_scroll, get$4(table_height)),
      root = observe$0(0, repopulate_deps);
     set_on_invalidate
      (root,
       function(param){
        var _oo_ = quick_sample(root), _op_ = _oo_[2];
        if(! _op_) return 0;
        var div = _op_[1][2], update = _oo_[1];
        return caml_call1(update, div);
       });
     quick_sample(root);
     function make_spacer(n){
      var
       at = [0, class$1("row_spacer"), 0],
       style = style$0(caml_jsstring_of_string(height_n(n)));
      return div$0(0, [0, [0, style, at]], 0);
     }
     function render$0(row, param){
      var
       render = param[3],
       content = param[2],
       index = param[1],
       at = add$1(class$0, _ie_, 0),
       style = [0, 80, style$0(caml_jsstring_of_string(height$0))];
      if(! content) return [0, 1, empty$1, 0];
      var
       data = content[1],
       rendered_row =
         func
          (render,
           function(render){
            return of_list$1
                    (symbol$9
                      (function(elt){return div$1(0, 0, 0, [0, elt, 0]);},
                       caml_call2(render, index, data)));
           });
      return [0,
              0,
              element
               (div$1
                 (0,
                  [0, [0, style, at]],
                  0,
                  [0, [0, 83, lift(rendered_row)], 0])),
              0];
     }
     var
      rows =
        map_reduce$0
         (render$0,
          [0,
           [0, 0, empty$1, 0],
           function(param, _om_){
            var
             q = _om_[3],
             s = _om_[2],
             p = _om_[1],
             m = param[3],
             s$0 = param[2],
             n = param[1],
             match = view(s$0),
             match$0 = view(s);
            if(typeof match === "number")
             return typeof match$0 === "number"
                     ? [0, ((n + m | 0) + p | 0) + q | 0, s$0, 0]
                     : [0, (n + m | 0) + p | 0, s, q];
            if(typeof match$0 === "number")
             return [0, n, s$0, (m + p | 0) + q | 0];
            if(symbol$5(m + p | 0, 0))
             var
              spacer = pure(make_spacer(m + p | 0)),
              s$1 =
                function(_on_){return concat$1(s$0, _on_);}
                 (concat$1(element(spacer), s));
            else
             var s$1 = concat$1(s$0, s);
            return [0, n, s$1, q];
           }],
          table),
      table_body =
        func
         (rows,
          function(param){
           var m = param[3], s = param[2], n = param[1];
           if(symbol$5(n, 0))
            var
             first_spacer = pure(make_spacer(n)),
             result = concat$1(element(first_spacer), s);
           else
            var result = s;
           if(! symbol$5(m, 0)) return result;
           var last_spacer = pure(make_spacer(m));
           return concat$1(result, element(last_spacer));
          }),
      table_header = header(ui_table),
      observer =
        create$7
         (function(entries, param){
           var
            entry = hd(entries),
            div = target$0(entry),
            rect = content_rect(entry),
            height$0 = height(rect),
            match = peek(table_height);
           if(! match) return symbol$1(table_height, [0, [0, height$0, div]]);
           var h = match[1][1];
           return symbol$4(h, height$0)
                   ? symbol$1(table_height, [0, [0, height$0, div]])
                   : 0;
          }),
      at = to_at$0(0, classes(_if_)),
      grid_style = style$2(ui_table),
      s = style$0(caml_jsstring_of_string(grid_style)),
      at$0 = [0, [0, 80, s], at];
     function arg(_ok_, _ol_){return observe(observer, _ok_, _ol_);}
     function _of_(eta){return arg(0, eta);}
     function _og_(_oj_){return tee(_of_, _oj_);}
     var
      table$0 =
        function(_oi_){return func(_oi_, _og_);}
         (div$1
           (0,
            [0, at$0],
            [0, [0, [0, 82, scroll_handler], 0]],
            [0, [0, 82, table_header], [0, [0, 83, lift(table_body)], 0]])),
      at$1 = v$5(_ig_);
     if(! scroll_target)
      return div$1(0, [0, at$1], 0, [0, [0, 82, table$0], 0]);
     var
      scroll_target$0 = scroll_target[1],
      scroll_target$1 =
        map2
         (table$0,
          scroll_target$0,
          function(parent, i){
           var
            _oh_ = ui_table[2],
            row_height = of_float(to_px([0, parent])(_oh_));
           return [0, [0, caml_mul(i, row_height)]];
          });
     return make$5([0, at$1], scroll_target$1, table$0);};
   }
   function make$7(C){
    function set(lang){return symbol$1(C[1], lang);}
    return [0, set];
   }
   var keys = create$2(0, 64);
   function check_key(key){
    return mem(keys, key)
            ? failwith(caml_call1(sprintf(_ih_), key))
            : add$0(keys, key, 0);
   }
   var local_storage = local(window);
   function store(key, value){
    return function(_oe_){return set_item(local_storage, key, _oe_);}
            (to_jstr$1(value));
   }
   function fetch$0(key){
    var match = get_item(local_storage, key);
    function _oc_(encoded_value){return of_jstr$0(encoded_value);}
    if(match) var v = match[1], _od_ = [0, v]; else var _od_ = _ii_;
    return symbol_bind$1(_od_, _oc_);
   }
   function initial_value(key, f){
    var match = fetch$0(key);
    if(0 === match[0]){var v = match[1]; return v;}
    var match$0 = match[1];
    if(typeof match$0 === "number") return caml_call1(f, 0);
    var msg = match$0[2];
    warn([0, msg, 0]);
    return caml_call1(f, 0);
   }
   function make_persistent_var(key, value){
    store(key, value);
    var var$1 = var$0(value), root = observe$0(0, get$4(var$1));
    set_on_invalidate
     (root,
      function(param){
       var new_value = quick_sample(root);
       store(key, new_value);
       return 0;
      });
    quick_sample(root);
    return var$1;
   }
   function var_f(key, f){
    check_key(key);
    var key$0 = caml_jsstring_of_string(key), value = initial_value(key$0, f);
    return make_persistent_var(key$0, value);
   }
   function var$1(key, default$0){
    return var_f(key, function(param){return default$0;});
   }
   function make_handler(value, value_change_event, default_value){
    var
     var$1 = var$0(default_value),
     on_change =
       handler
        (0,
         value_change_event,
         function(ev){
          var t = target(ev), v = t[cst_value];
          return symbol$1(var$1, [0, caml_call1(value, v)]);
         });
    return [0, on_change, var$1];
   }
   function make_input
   (value,
    validate,
    d,
    opt,
    ev,
    _n$_,
    value_change_event,
    pattern$0,
    type,
    default_value){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    if(_n$_) var sth$0 = _n$_[1], required = sth$0; else var required = 0;
    var
     type$1 = type$0(caml_jsstring_of_string(type)),
     at$0 = [0, [0, 80, type$1], at],
     at$1 =
       function(_oa_){return add_opt(pattern, pattern$0, _oa_);}
        (function(_ob_){return add_bool(required$0, required, _ob_);}(at$0)),
     validate$0 = value$3(validate, function(v){return [0, v];}),
     match = make_handler(value, value_change_event, default_value),
     value$0 = match[2],
     on_change = match[1],
     ev$0 = [0, [0, 80, on_change], to_list$2(ev)],
     elt = input$1(d, [0, at$1], [0, ev$0], 0);
    return [0, elt, value$0, validate$0];
   }
   function text_input
   (validate, d, opt, ev, required, pattern, placeholder$0, default_value){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var
     at$0 =
       function(_n9_){return add_opt(value$1, default_value, _n9_);}
        (function(_n__){return add_opt(placeholder, placeholder$0, _n__);}(at));
    return make_input
            (value$0,
             validate,
             d,
             [0, at$0],
             ev,
             required,
             keyup,
             pattern,
             _ij_,
             default_value);
   }
   function password_input
   (validate, d, opt, ev, required, pattern, placeholder$0, value){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var
     at$0 =
       function(_n8_){return add_opt(placeholder, placeholder$0, _n8_);}(at);
    return make_input
            (value$0,
             validate,
             d,
             [0, at$0],
             ev,
             required,
             keyup,
             pattern,
             _ik_,
             0);
   }
   function submit$0(d, opt, ev, text){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var at$0 = add$1(value$1, text, at);
    return make_input
            (function(_n7_){return 0;},
             0,
             d,
             [0, at$0],
             ev,
             0,
             change,
             0,
             _il_,
             0);
   }
   function field$0(field, setter){
    return func(field, function(field){return [0, field, setter];});
   }
   function create$8(d, at, ev, Form){
    return function(on_submit){
     var
      _n0_ =
        [0,
         [0, empty$1, function(_n6_){return _n6_;}],
         function(param, _n5_){
          var f = _n5_[2], elts = _n5_[1], f$0 = param[2], elts$0 = param[1];
          return [0,
                  concat$1(elts$0, elts),
                  function(t){return caml_call1(f, caml_call1(f$0, t));}];
         }];
     function _n1_(param){
      var mapper = param[2], field = param[1];
      function value(param){
       var match = peek(field[2]);
       if(! match) return 0;
       var v = match[1];
       return caml_call1(field[3], v);
      }
      return [0,
              element(field[1]),
              function(t){
               var _n4_ = value(0);
               return caml_call1(caml_call1(mapper, t), _n4_);
              }];
     }
     var
      fields =
        function(_n3_){return fold_monoid(_n1_, _n0_, _n3_);}(lift(Form[2])),
      handler$0 =
        func
         (fields,
          function(param){
           var value = param[2];
           function on_submit$0(e){
            caml_call1(on_submit, caml_call1(value, Form[1]));
            return prevent_default(e);
           }
           return handler(0, submit, on_submit$0);
          }),
      on_submit$0 = [0, 82, handler$0],
      elts = func(fields, function(param){var elts = param[1]; return elts;}),
      ev$0 =
        map_or
         ([0, on_submit$0, 0],
          function(_n2_){return cons(on_submit$0, _n2_);},
          ev);
     return form$0(d, at, [0, ev$0], [0, [0, 83, lift(elts)], 0]);};
   }
   function name$3(id, base_name){
    return id
            ? caml_call1(sprintf(_im_), base_name)
            : caml_call1(sprintf(_in_), base_name);
   }
   function make$8(opt, _nV_, desc){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    if(_nV_) var sth$0 = _nV_[1], ev = sth$0; else var ev = 0;
    var
     id = name$3(1, desc[1]),
     name$0 = name$3(0, desc[1]),
     var$0 = var$1(id, desc[2]),
     _nW_ = desc[3];
    label$0
     (0, [0, [0, [0, 80, for$1(caml_jsstring_of_string(id))], 0]], 0, _nW_);
    var
     _nX_ = [0, 80, name$0],
     at$0 =
       function(_nY_){return add$1(type, _io_, _nY_);}
        (function(_nZ_){return add$1(name, _nX_, _nZ_);}
          (add$1(id$0, [0, 80, id], at))),
     match = peek(var$0);
    if(match)
     var
      v = match[1],
      at$1 = [0, [0, 80, value$2(caml_jsstring_of_string(v))], at$0];
    else
     var at$1 = at$0;
    var
     on_change =
       handler
        (0,
         keyup,
         function(ev){
          var t = target(ev), value = t[cst_value];
          return symbol$1(var$0, [0, value$0(value)]);
         }),
     ev$0 = [0, [0, 80, on_change], ev],
     field = input$1(0, [0, at$1], [0, ev$0], 0);
    return [0, field, , get$4(var$0)];
   }
   function name$4(id, base_name){
    return id ? caml_call1(sprintf(_ip_), base_name) : base_name;
   }
   function make$9(opt, _nQ_, desc){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    if(_nQ_) var sth$0 = _nQ_[1], ev = sth$0; else var ev = 0;
    return function(options){
     var
      id = name$4(1, desc[1]),
      name$0 = name$4(0, desc[1]),
      var$0 = var$1(id, desc[2]),
      _nR_ = desc[3];
     label$0
      (0, [0, [0, [0, 80, for$1(caml_jsstring_of_string(id))], 0]], 0, _nR_);
     var
      _nS_ = [0, 80, name$0],
      at$0 =
        function(_nT_){return add$1(type, _iq_, _nT_);}
         (function(_nU_){return add$1(name, _nS_, _nU_);}
           (add$1(id$0, [0, 80, id], at))),
      on_change =
        handler
         (0,
          change,
          function(ev){
           var t = target(ev), value = t[cst_value];
           return symbol$1(var$0, value$0(value));
          }),
      ev$0 = [0, [0, 80, on_change], ev],
      options$0 =
        map$4
         (function(param){
           var
            name = param[2],
            value = param[1],
            at = v$5([0, 80, [1, value$2(caml_jsstring_of_string(value))]]),
            selected =
              func
               (get$4(var$0),
                function(selected){
                 return [1, if$0(poly(selected, value), selected$0)];
                }),
            at$0 = symbol$14([0, 82, selected], at);
           return option$0(0, [0, at$0], 0, [0, [0, 80, txt(0, name)], 0]);
          },
          options),
      field =
        select$0(0, [0, at$0], [0, ev$0], [0, [0, 83, lift(options$0)], 0]);
     return [0, field, , get$4(var$0)];};
   }
   function name$5(g, n, id, base_name){
    return id
            ? caml_call3(sprintf(_ir_), base_name, g, n)
            : caml_call3(sprintf(_is_), base_name, g, n);
   }
   function make$10(t){
    function make_check(g, n, value, label, checked){
     var id = name$5(g, n, 1, t[1]), name$0 = name$5(g, n, 0, t[1]);
     function result(checked){return checked ? [0, value] : 0;}
     var
      var$0 = var$1(id, result(checked)),
      lbl =
        label$0
         (0,
          [0, [0, [0, 80, for$1(caml_jsstring_of_string(id))], 0]],
          0,
          label),
      _nM_ = [0, 80, name$0],
      at =
        function(_nO_){return add$1(type, _it_, _nO_);}
         (function(_nP_){return add$1(name, _nM_, _nP_);}
           (add$1(id$0, [0, 80, id], 0))),
      checked$1 =
        func
         (get$4(var$0), function(param){return param ? checked$0 : void$0;}),
      at$0 = [0, [0, 82, checked$1], at],
      on_change =
        handler
         (0,
          change,
          function(ev){
           var t = target(ev), checked = t[cst_checked];
           return symbol$1(var$0, result(checked | 0));
          }),
      ev = [0, [0, 80, on_change], 0],
      _nN_ = get$4(var$0);
     return [0,
             div$1
              (0,
               0,
               0,
               [0,
                [0, 82, input$1(0, [0, at$0], [0, ev], 0)],
                [0, [0, 82, lbl], 0]]),
             _nN_];
    }
    function make_all(g, desc){
     var n = [0, 0];
     return map$4
             (function(param){
               var
                c = param[3],
                l = param[2],
                v = param[1],
                match = make_check(g, n[1], v, l, c),
                value = match[2],
                elt = match[1];
               n[1]++;
               return [0, elt, value];
              },
              desc);
    }
    var
     all = make_all(0, t[2]),
     elts = map$4(function(param){var elt = param[1]; return elt;}, all);
    function _nJ_(_nL_){return _nL_;}
    var
     value =
       function(_nK_){return filter_map$0(_nJ_, _nK_);}
        (lift
          (fold_monoid
            (function(param){var v = param[2]; return element(v);},
             monoid,
             all)));
    return [0, div$1(0, 0, 0, [0, [0, 83, lift(elts)], 0]), value];
   }
   function v$7(d, opt, ev, value){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var
     at$0 =
       function(_nI_){return add$1(value$1, value, _nI_);}
        (add$1(type, _iu_, at));
    return input$1(d, [0, at$0], ev, 0);
   }
   function handler$0(opts, type, func){return [0, opts, type, func];}
   function apply_state(state, f){return caml_call1(f, state);}
   function with_state(opt, S){
    if(opt) var sth = opt[1], base = sth; else var base = empty$5;
    return function(opt, d, at){
     if(opt) var sth = opt[1], state = sth; else var state = S[1];
     return function(ev, content){
      var v_state = var$0(state);
      function get_state(param){return get$4(v_state);}
      function set_state(t){return symbol$1(v_state, t);}
      var
       elt =
         symbol_bind
          (get_state(0),
           function(state){
            function with_state(param){
             var func = param[3], type = param[2], opts = param[1];
             function func$0(ev){
              var match = caml_call2(func, state, ev);
              if(typeof match === "number")
               return match ? set_state(caml_call1(S[2], state)) : 0;
              var s = match[1];
              return set_state(s);
             }
             return handler(opts, type, func$0);
            }
            var
             at$0 =
               map_or
                (base,
                 function(at){
                  return function(_nH_){return union$0(base, _nH_);}
                          (apply_state(state, at));
                 },
                 at),
             at$1 = to_at$0(0, at$0);
            function _nE_(param){
             var _nG_ = param[1];
             if(82 === _nG_){
              var h = param[2];
              return [0, 82, func(h, with_state)];
             }
             if(83 <= _nG_){
              var h$0 = param[2];
              return [0, 83, map$4(with_state, h$0)];
             }
             var h$1 = param[2];
             return [0, 80, with_state(h$1)];
            }
            var
             ev$0 =
               symbol$10(function(_nF_){return symbol$9(_nE_, _nF_);}, ev);
            return button$0(d, [0, at$1], ev$0, caml_call1(content, state));
           });
      return [0, elt, get_state, set_state];};};
   }
   function next$0(param){return param ? 0 : 1;}
   var Two_state = [0, 0, next$0];
   function two_state(base){return with_state(base, Two_state);}
   function yojson_of_string(str){return [0, -976970511, str];}
   function yojson_of_int(n){return [0, 3654863, n];}
   function yojson_of_option(yojson_of_a, param){
    if(! param) return 870828711;
    var x = param[1];
    return caml_call1(yojson_of_a, x);
   }
   function yojson_of_list(yojson_of_a, lst){
    return [0, 848054398, rev(rev_map(yojson_of_a, lst))];
   }
   var
    Of_yojson_error = [248, _iv_, caml_fresh_oo_id(0)],
    record_check_extra_fields = [0, 1];
   function of_yojson_error(what, yojson){
    throw caml_maybe_attach_backtrace
           ([0, Of_yojson_error, [0, Failure, what], yojson], 1);
   }
   function string_of_yojson(yojson){
    if(typeof yojson !== "number" && -976970511 === yojson[1]){var str = yojson[2]; return str;}
    return of_yojson_error(_iw_, yojson);
   }
   function int_of_yojson(yojson){
    if(typeof yojson !== "number" && 3654863 === yojson[1]){var v = yojson[2]; return v;}
    return of_yojson_error(_ix_, yojson);
   }
   function option_of_yojson(a_of_yojson, yojson){
    return 870828711 === yojson ? 0 : [0, caml_call1(a_of_yojson, yojson)];
   }
   function list_of_yojson(a_of_yojson, yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var lst = yojson[2], rev_lst = rev_map(a_of_yojson, lst);
     return rev(rev_lst);
    }
    return of_yojson_error(_iy_, yojson);
   }
   function stag_no_args(loc, yojson){
    return of_yojson_error(symbol_concat(loc, _iz_), yojson);
   }
   function nested_list_invalid_sum(loc, yojson){
    return of_yojson_error(symbol_concat(loc, _iA_), yojson);
   }
   function empty_list_invalid_sum(loc, yojson){
    return of_yojson_error(symbol_concat(loc, _iB_), yojson);
   }
   function unexpected_stag(loc, yojson){
    return of_yojson_error(symbol_concat(loc, _iC_), yojson);
   }
   function record_superfluous_fields(what, loc, rev_fld_names, yojson){
    var
     fld_names_str = concat(_iD_, rev(rev_fld_names)),
     msg = caml_call3(sprintf(_iE_), loc, what, fld_names_str);
    return of_yojson_error(msg, yojson);
   }
   function record_duplicate_fields(loc, rev_fld_names, yojson){
    return record_superfluous_fields(_iF_, loc, rev_fld_names, yojson);
   }
   function record_extra_fields(loc, rev_fld_names, yojson){
    return record_superfluous_fields(_iG_, loc, rev_fld_names, yojson);
   }
   function record_get_undefined_loop(fields, param){
    var fields$0 = fields, param$0 = param;
    for(;;){
     if(! param$0) return concat(_iH_, rev(fields$0));
     var _nD_ = param$0[1];
     if(_nD_[1]){
      var rest = param$0[2], field = _nD_[2], fields$1 = [0, field, fields$0];
      fields$0 = fields$1;
      param$0 = rest;
     }
     else{var rest$0 = param$0[2]; param$0 = rest$0;}
    }
   }
   function record_undefined_elements(loc, yojson, lst){
    var
     undefined$0 = record_get_undefined_loop(0, lst),
     msg = caml_call2(sprintf(_iI_), loc, undefined$0);
    return of_yojson_error(msg, yojson);
   }
   function record_list_instead_atom(loc, yojson){
    var msg = symbol_concat(loc, _iJ_);
    return of_yojson_error(msg, yojson);
   }
   function symbol$15(x){return x[1];}
   function jstr_of_method(param){return param ? "POST" : "GET";}
   function user_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      name_field = [0, 0],
      server_id_field = [0, 0],
      server_name_field = [0, 0],
      id_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_Id)
           if(field_name !== cst_Name)
            if(field_name !== cst_ServerId){
             if(field_name === cst_ServerName)
              if(symbol$15(server_name_field))
               duplicates[1] = [0, field_name, symbol$15(duplicates)];
              else{
               var fvalue = option_of_yojson(string_of_yojson, field_yojson);
               server_name_field[1] = [0, fvalue];
              }
            }
            else if(symbol$15(server_id_field))
             duplicates[1] = [0, field_name, symbol$15(duplicates)];
            else{
             var fvalue$0 = string_of_yojson(field_yojson);
             server_id_field[1] = [0, fvalue$0];
            }
           else if(symbol$15(name_field))
            duplicates[1] = [0, field_name, symbol$15(duplicates)];
           else{
            var fvalue$1 = string_of_yojson(field_yojson);
            name_field[1] = [0, fvalue$1];
           }
          else if(symbol$15(id_field))
           duplicates[1] = [0, field_name, symbol$15(duplicates)];
          else{
           var fvalue$2 = string_of_yojson(field_yojson);
           id_field[1] = [0, fvalue$2];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$15(duplicates))
      return record_duplicate_fields(tp_loc, symbol$15(duplicates), yojson);
     if(symbol$15(extra))
      return record_extra_fields(tp_loc, symbol$15(extra), yojson);
     var
      match = symbol$15(name_field),
      match$0 = symbol$15(server_id_field),
      server_name_value = symbol$15(server_name_field),
      match$1 = symbol$15(id_field);
     if(match && match$0 && match$1){
      var
       id_value = match$1[1],
       server_id_value = match$0[1],
       name_value = match[1];
      if(server_name_value)
       var v = server_name_value[1], v$0 = v;
      else
       var v$0 = 0;
      return [0, name_value, server_id_value, v$0, id_value];
     }
     var
      _nB_ = [0, [0, 0 === symbol$15(id_field) ? 1 : 0, _iK_], 0],
      _nC_ = [0, [0, 0 === symbol$15(server_id_field) ? 1 : 0, _iL_], _nB_];
     return record_undefined_elements
             (tp_loc,
              yojson,
              [0, [0, 0 === symbol$15(name_field) ? 1 : 0, _iM_], _nC_]);
    }
    return record_list_instead_atom(tp_loc, yojson);
   }
   function yojson_of_user(param){
    var
     v_id = param[4],
     v_server_name = param[3],
     v_server_id = param[2],
     v_name = param[1],
     arg = yojson_of_string(v_id),
     bnds = [0, [0, _iN_, arg], 0],
     arg$0 = yojson_of_option(yojson_of_string, v_server_name),
     bnds$0 = [0, [0, _iO_, arg$0], bnds],
     arg$1 = yojson_of_string(v_server_id),
     bnds$1 = [0, [0, _iP_, arg$1], bnds$0],
     arg$2 = yojson_of_string(v_name),
     bnds$2 = [0, [0, _iQ_, arg$2], bnds$1];
    return [0, 963043957, bnds$2];
   }
   function params_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      username_field = [0, 0],
      pw_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_Pw)
           if(field_name !== cst_Username){
            if(symbol$15(record_check_extra_fields))
             extra[1] = [0, field_name, symbol$15(extra)];
           }
           else if(symbol$15(username_field))
            duplicates[1] = [0, field_name, symbol$15(duplicates)];
           else{
            var fvalue = string_of_yojson(field_yojson);
            username_field[1] = [0, fvalue];
           }
          else if(symbol$15(pw_field))
           duplicates[1] = [0, field_name, symbol$15(duplicates)];
          else{
           var fvalue$0 = string_of_yojson(field_yojson);
           pw_field[1] = [0, fvalue$0];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$15(duplicates))
      return record_duplicate_fields(tp_loc$0, symbol$15(duplicates), yojson);
     if(symbol$15(extra))
      return record_extra_fields(tp_loc$0, symbol$15(extra), yojson);
     var match = symbol$15(username_field), match$0 = symbol$15(pw_field);
     if(match && match$0){
      var pw_value = match$0[1], username_value = match[1];
      return [0, username_value, pw_value];
     }
     var _nA_ = [0, [0, 0 === symbol$15(pw_field) ? 1 : 0, _iR_], 0];
     return record_undefined_elements
             (tp_loc$0,
              yojson,
              [0, [0, 0 === symbol$15(username_field) ? 1 : 0, _iS_], _nA_]);
    }
    return record_list_instead_atom(tp_loc$0, yojson);
   }
   function yojson_of_params(param){
    var
     v_pw = param[2],
     v_username = param[1],
     arg = yojson_of_string(v_pw),
     bnds = [0, [0, _iT_, arg], 0],
     arg$0 = yojson_of_string(v_username),
     bnds$0 = [0, [0, _iU_, arg$0], bnds];
    return [0, 963043957, bnds$0];
   }
   function response_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      user_field = [0, 0],
      access_token_field = [0, 0],
      server_id_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_AccessToken)
           if(field_name !== cst_ServerId){
            if(field_name === cst_User)
             if(symbol$15(user_field))
              duplicates[1] = [0, field_name, symbol$15(duplicates)];
             else{
              var fvalue = user_of_yojson(field_yojson);
              user_field[1] = [0, fvalue];
             }
           }
           else if(symbol$15(server_id_field))
            duplicates[1] = [0, field_name, symbol$15(duplicates)];
           else{
            var fvalue$0 = string_of_yojson(field_yojson);
            server_id_field[1] = [0, fvalue$0];
           }
          else if(symbol$15(access_token_field))
           duplicates[1] = [0, field_name, symbol$15(duplicates)];
          else{
           var fvalue$1 = string_of_yojson(field_yojson);
           access_token_field[1] = [0, fvalue$1];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$15(duplicates))
      return record_duplicate_fields(tp_loc$1, symbol$15(duplicates), yojson);
     if(symbol$15(extra))
      return record_extra_fields(tp_loc$1, symbol$15(extra), yojson);
     var
      match = symbol$15(user_field),
      match$0 = symbol$15(access_token_field),
      match$1 = symbol$15(server_id_field);
     if(match && match$0 && match$1){
      var
       server_id_value = match$1[1],
       access_token_value = match$0[1],
       user_value = match[1];
      return [0, user_value, access_token_value, server_id_value];
     }
     var
      _ny_ = [0, [0, 0 === symbol$15(server_id_field) ? 1 : 0, _iV_], 0],
      _nz_ = [0, [0, 0 === symbol$15(access_token_field) ? 1 : 0, _iW_], _ny_];
     return record_undefined_elements
             (tp_loc$1,
              yojson,
              [0, [0, 0 === symbol$15(user_field) ? 1 : 0, _iX_], _nz_]);
    }
    return record_list_instead_atom(tp_loc$1, yojson);
   }
   function yojson_of_response(param){
    var
     v_server_id = param[3],
     v_access_token = param[2],
     v_user = param[1],
     arg = yojson_of_string(v_server_id),
     bnds = [0, [0, _iY_, arg], 0],
     arg$0 = yojson_of_string(v_access_token),
     bnds$0 = [0, [0, _iZ_, arg$0], bnds],
     arg$1 = yojson_of_user(v_user),
     bnds$1 = [0, [0, _i0_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   function endpoint(param){return _i1_;}
   function image_blur_hash_of_yojson(y){
    var assoc = to_assoc(y);
    return map$1
            (function(param){
              var v = param[2], key = param[1];
              return [0, key, to_string$3(v)];
             },
             assoc);
   }
   function yojson_of_image_blur_hash(i){
    var
     assoc =
       map$1
        (function(param){
          var v = param[2], key = param[1];
          return [0, key, [0, -976970511, v]];
         },
         i);
    return [0, 963043957, assoc];
   }
   function image_blur_hashes_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      primary_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name === cst_Primary)
           if(symbol$15(primary_field))
            duplicates[1] = [0, field_name, symbol$15(duplicates)];
           else{
            var fvalue = image_blur_hash_of_yojson(field_yojson);
            primary_field[1] = [0, fvalue];
           }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$15(duplicates))
      return record_duplicate_fields(tp_loc$2, symbol$15(duplicates), yojson);
     if(symbol$15(extra))
      return record_extra_fields(tp_loc$2, symbol$15(extra), yojson);
     var primary_value = symbol$15(primary_field);
     return [0, primary_value];
    }
    return record_list_instead_atom(tp_loc$2, yojson);
   }
   function yojson_of_image_blur_hashes(param){
    var v_primary = param[1], bnds = 0;
    if(v_primary)
     var
      v = v_primary[1],
      arg = yojson_of_image_blur_hash(v),
      bnd = [0, _i2_, arg],
      bnds$0 = [0, bnd, bnds];
    else
     var bnds$0 = bnds;
    return [0, 963043957, bnds$0];
   }
   function type_of_yojson(yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var _nu_ = yojson[2];
     if(! _nu_) return empty_list_invalid_sum(tp_loc$3, yojson);
     var _nv_ = _nu_[1];
     if(typeof _nv_ !== "number"){
      var _nw_ = _nv_[1];
      if(-976970511 === _nw_){
       var
        _nx_ = _nv_[2],
        switch$0 = caml_string_compare(_nx_, cst_MusicGenre);
       if(0 <= switch$0){
        if(0 >= switch$0)
         return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 18;
        var switch$1 = caml_string_compare(_nx_, cst_Series);
        if(0 <= switch$1){
         if(0 >= switch$1)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 28;
         if(_nx_ === cst_Studio)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 29;
         if(_nx_ === cst_Trailer)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 30;
         if(_nx_ === cst_TvChannel)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 31;
         if(_nx_ === cst_TvProgram)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 32;
         if(_nx_ === cst_UserRootFolder)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 33;
         if(_nx_ === cst_UserView)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 34;
         if(_nx_ === cst_Video)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 35;
         if(_nx_ === cst_Year)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 36;
        }
        else{
         if(_nx_ === cst_MusicVideo)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 19;
         if(_nx_ === cst_Person)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 20;
         if(_nx_ === cst_Photo)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 21;
         if(_nx_ === cst_PhotoAlbum)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 22;
         if(_nx_ === cst_Playlist)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 23;
         if(_nx_ === cst_PlaylistsFolder)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 24;
         if(_nx_ === cst_Program)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 25;
         if(_nx_ === cst_Recording)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 26;
         if(_nx_ === cst_Season)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 27;
        }
       }
       else{
        var switch$2 = caml_string_compare(_nx_, cst_Episode);
        if(0 <= switch$2){
         if(0 >= switch$2)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 9;
         if(_nx_ === cst_Folder)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 10;
         if(_nx_ === cst_Genre)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 11;
         if(_nx_ === cst_LiveTvChannel)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 12;
         if(_nx_ === cst_LiveTvProgram)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 13;
         if(_nx_ === cst_ManualPlaylistsFolder)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 14;
         if(_nx_ === cst_Movie)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 15;
         if(_nx_ === cst_MusicAlbum)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 16;
         if(_nx_ === cst_MusicArtist)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 17;
        }
        else{
         if(_nx_ === cst_AggregateFolder)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 0;
         if(_nx_ === cst_Audio)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 1;
         if(_nx_ === cst_AudioBook)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 2;
         if(_nx_ === cst_BasePluginFolder)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 3;
         if(_nx_ === cst_Book)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 4;
         if(_nx_ === cst_BoxSet)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 5;
         if(_nx_ === cst_Channel)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 6;
         if(_nx_ === cst_ChannelFolderItem)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 7;
         if(_nx_ === cst_CollectionFolder)
          return _nu_[2] ? stag_no_args(tp_loc$3, yojson) : 8;
        }
       }
      }
      else if(848054398 === _nw_)
       return nested_list_invalid_sum(tp_loc$3, yojson);
     }
    }
    return unexpected_stag(tp_loc$3, yojson);
   }
   function yojson_of_type(param){
    switch(param){
      case 0:
       return _i3_;
      case 1:
       return _i4_;
      case 2:
       return _i5_;
      case 3:
       return _i6_;
      case 4:
       return _i7_;
      case 5:
       return _i8_;
      case 6:
       return _i9_;
      case 7:
       return _i__;
      case 8:
       return _i$_;
      case 9:
       return _ja_;
      case 10:
       return _jb_;
      case 11:
       return _jc_;
      case 12:
       return _jd_;
      case 13:
       return _je_;
      case 14:
       return _jf_;
      case 15:
       return _jg_;
      case 16:
       return _jh_;
      case 17:
       return _ji_;
      case 18:
       return _jj_;
      case 19:
       return _jk_;
      case 20:
       return _jl_;
      case 21:
       return _jm_;
      case 22:
       return _jn_;
      case 23:
       return _jo_;
      case 24:
       return _jp_;
      case 25:
       return _jq_;
      case 26:
       return _jr_;
      case 27:
       return _js_;
      case 28:
       return _jt_;
      case 29:
       return _ju_;
      case 30:
       return _jv_;
      case 31:
       return _jw_;
      case 32:
       return _jx_;
      case 33:
       return _jy_;
      case 34:
       return _jz_;
      case 35:
       return _jA_;
      default: return _jB_;
    }
   }
   function type_str_of_yojson(j){
    var s = to_string$3(j);
    return type_of_yojson([0, 848054398, [0, [0, -976970511, s], 0]]);
   }
   function yojson_of_type_str(ts){
    var match = yojson_of_type(ts);
    if(typeof match !== "number" && 848054398 === match[1]){
     var _nt_ = match[2];
     if(_nt_ && ! _nt_[2]){var json = _nt_[1]; return json;}
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _jC_], 1);
   }
   function t_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      name_field = [0, 0],
      sort_name_field = [0, 0],
      id_field = [0, 0],
      path_field = [0, 0],
      album_id_field = [0, 0],
      parent_id_field = [0, 0],
      server_id_field = [0, 0],
      image_blur_hashes_field = [0, 0],
      type_field = [0, 0],
      collection_type_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1],
           switch$0 = caml_string_compare(field_name, cst_ParentId);
          a:
          b:
          {
           if(0 <= switch$0)
            if(0 < switch$0)
             if(field_name !== cst_Path)
              if(field_name !== cst_ServerId)
               if(field_name !== cst_SortName){
                if(field_name !== cst_Type) break b;
                if(symbol$15(type_field))
                 duplicates[1] = [0, field_name, symbol$15(duplicates)];
                else{
                 var fvalue = type_str_of_yojson(field_yojson);
                 type_field[1] = [0, fvalue];
                }
               }
               else if(symbol$15(sort_name_field))
                duplicates[1] = [0, field_name, symbol$15(duplicates)];
               else{
                var fvalue$0 = string_of_yojson(field_yojson);
                sort_name_field[1] = [0, fvalue$0];
               }
              else if(symbol$15(server_id_field))
               duplicates[1] = [0, field_name, symbol$15(duplicates)];
              else{
               var fvalue$1 = string_of_yojson(field_yojson);
               server_id_field[1] = [0, fvalue$1];
              }
             else if(symbol$15(path_field))
              duplicates[1] = [0, field_name, symbol$15(duplicates)];
             else{
              var fvalue$2 = string_of_yojson(field_yojson);
              path_field[1] = [0, fvalue$2];
             }
            else if(symbol$15(parent_id_field))
             duplicates[1] = [0, field_name, symbol$15(duplicates)];
            else{
             var fvalue$3 = option_of_yojson(string_of_yojson, field_yojson);
             parent_id_field[1] = [0, fvalue$3];
            }
           else if(field_name !== cst_AlbumId)
            if(field_name !== cst_CollectionType)
             if(field_name !== cst_Id)
              if(field_name !== cst_ImageBlurHashes){
               if(field_name !== cst_Name) break b;
               if(symbol$15(name_field))
                duplicates[1] = [0, field_name, symbol$15(duplicates)];
               else{
                var fvalue$4 = string_of_yojson(field_yojson);
                name_field[1] = [0, fvalue$4];
               }
              }
              else if(symbol$15(image_blur_hashes_field))
               duplicates[1] = [0, field_name, symbol$15(duplicates)];
              else{
               var fvalue$5 = image_blur_hashes_of_yojson(field_yojson);
               image_blur_hashes_field[1] = [0, fvalue$5];
              }
             else if(symbol$15(id_field))
              duplicates[1] = [0, field_name, symbol$15(duplicates)];
             else{
              var fvalue$6 = string_of_yojson(field_yojson);
              id_field[1] = [0, fvalue$6];
             }
            else if(symbol$15(collection_type_field))
             duplicates[1] = [0, field_name, symbol$15(duplicates)];
            else{
             var fvalue$7 = option_of_yojson(string_of_yojson, field_yojson);
             collection_type_field[1] = [0, fvalue$7];
            }
           else if(symbol$15(album_id_field))
            duplicates[1] = [0, field_name, symbol$15(duplicates)];
           else{
            var fvalue$8 = string_of_yojson(field_yojson);
            album_id_field[1] = [0, fvalue$8];
           }
           break a;
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$15(duplicates))
      return record_duplicate_fields(tp_loc$4, symbol$15(duplicates), yojson);
     if(symbol$15(extra))
      return record_extra_fields(tp_loc$4, symbol$15(extra), yojson);
     var
      match = symbol$15(name_field),
      sort_name_value = symbol$15(sort_name_field),
      match$0 = symbol$15(id_field),
      path_value = symbol$15(path_field),
      album_id_value = symbol$15(album_id_field),
      parent_id_value = symbol$15(parent_id_field),
      match$1 = symbol$15(server_id_field),
      match$2 = symbol$15(image_blur_hashes_field),
      match$3 = symbol$15(type_field),
      collection_type_value = symbol$15(collection_type_field);
     if(match && match$0 && match$1 && match$2 && match$3){
      var
       type_value = match$3[1],
       image_blur_hashes_value = match$2[1],
       server_id_value = match$1[1],
       id_value = match$0[1],
       name_value = match[1];
      if(collection_type_value)
       var v = collection_type_value[1], v$0 = v;
      else
       var v$0 = 0;
      return [0,
              name_value,
              sort_name_value,
              id_value,
              path_value,
              album_id_value,
              parent_id_value,
              server_id_value,
              image_blur_hashes_value,
              type_value,
              v$0];
     }
     var
      _np_ = [0, [0, 0 === symbol$15(type_field) ? 1 : 0, _jD_], 0],
      _nq_ =
        [0, [0, 0 === symbol$15(image_blur_hashes_field) ? 1 : 0, _jE_], _np_],
      _nr_ = [0, [0, 0 === symbol$15(server_id_field) ? 1 : 0, _jF_], _nq_],
      _ns_ = [0, [0, 0 === symbol$15(id_field) ? 1 : 0, _jG_], _nr_];
     return record_undefined_elements
             (tp_loc$4,
              yojson,
              [0, [0, 0 === symbol$15(name_field) ? 1 : 0, _jH_], _ns_]);
    }
    return record_list_instead_atom(tp_loc$4, yojson);
   }
   function yojson_of_t(param){
    var
     v_collection_type = param[10],
     v_type = param[9],
     v_image_blur_hashes = param[8],
     v_server_id = param[7],
     v_parent_id = param[6],
     v_album_id = param[5],
     v_path = param[4],
     v_id = param[3],
     v_sort_name = param[2],
     v_name = param[1],
     bnds = 0;
    if(0 === v_collection_type)
     var bnds$0 = bnds;
    else
     var
      arg$8 =
        function(_no_){return yojson_of_option(yojson_of_string, _no_);}
         (v_collection_type),
      bnd$3 = [0, _jR_, arg$8],
      bnds$0 = [0, bnd$3, bnds];
    var
     arg = yojson_of_type_str(v_type),
     bnds$1 = [0, [0, _jI_, arg], bnds$0],
     arg$0 = yojson_of_image_blur_hashes(v_image_blur_hashes),
     bnds$2 = [0, [0, _jJ_, arg$0], bnds$1],
     arg$1 = yojson_of_string(v_server_id),
     bnds$3 = [0, [0, _jK_, arg$1], bnds$2];
    if(v_parent_id)
     var
      v = v_parent_id[1],
      arg$2 = yojson_of_option(yojson_of_string, v),
      bnd = [0, _jL_, arg$2],
      bnds$4 = [0, bnd, bnds$3];
    else
     var bnds$4 = bnds$3;
    if(v_album_id)
     var
      v$0 = v_album_id[1],
      arg$3 = yojson_of_string(v$0),
      bnd$0 = [0, _jM_, arg$3],
      bnds$5 = [0, bnd$0, bnds$4];
    else
     var bnds$5 = bnds$4;
    if(v_path)
     var
      v$1 = v_path[1],
      arg$4 = yojson_of_string(v$1),
      bnd$1 = [0, _jN_, arg$4],
      bnds$6 = [0, bnd$1, bnds$5];
    else
     var bnds$6 = bnds$5;
    var
     arg$5 = yojson_of_string(v_id),
     bnds$7 = [0, [0, _jO_, arg$5], bnds$6];
    if(v_sort_name)
     var
      v$2 = v_sort_name[1],
      arg$6 = yojson_of_string(v$2),
      bnd$2 = [0, _jP_, arg$6],
      bnds$8 = [0, bnd$2, bnds$7];
    else
     var bnds$8 = bnds$7;
    var
     arg$7 = yojson_of_string(v_name),
     bnds$9 = [0, [0, _jQ_, arg$7], bnds$8];
    return [0, 963043957, bnds$9];
   }
   var session_uuid = [0, 0];
   function set_session_uuid(s){session_uuid[1] = [0, s]; return;}
   function authorization(token, param){
    if(token)
     var t = token[1], token$0 = caml_call1(sprintf(_jS_), t);
    else
     var token$0 = _jV_;
    var session_uuid$0 = value(session_uuid[1], _jT_);
    return caml_call2(sprintf(_jU_), session_uuid$0, token$0);
   }
   function request$1(base_url, token, headers, Q){
    return function(params, path_params){
     var
      base_uri = v$0(0, caml_jsstring_of_string(base_url)),
      base_path_segments = get_ok(path_segments(base_uri)),
      endpoint_path_segments =
        map$1
         (function(_nn_){return caml_jsstring_of_string(_nn_);},
          caml_call1(Q[6], path_params)),
      path_segments$0 =
        caml_equal(base_path_segments, [0, empty$0, 0])
         ? endpoint_path_segments
         : flatten([0, base_path_segments, [0, endpoint_path_segments, 0]]),
      uri = with_path_segments(base_uri, path_segments$0),
      uri$0 = get_ok(uri),
      authorization$0 = authorization(token, 0),
      headers$0 =
        of_assoc
         (headers,
          [0,
           [0, "content-type", "text/json"],
           [0,
            [0,
             "X-Emby-Authorization",
             caml_jsstring_of_string(authorization$0)],
            0]]),
      method = jstr_of_method(Q[5]);
     if(Q[5])
      var
       body =
         of_jstr
          (caml_jsstring_of_string
            (to_string$4(0, 0, 0, caml_call1(Q[1], params)))),
       url = to_jstr$0(uri$0),
       url$0 = url,
       init =
         init$1
          ([0, body],
           0,
           0,
           [0, headers$0],
           0,
           0,
           [0, method],
           0,
           0,
           0,
           0,
           0,
           0);
     else
      var
       params$0 =
         of_obj
          (get_ok
            (decode
              (caml_jsstring_of_string
                (to_string$4(0, 0, 0, caml_call1(Q[1], params)))))),
       uri_with_params = with_query_params(uri$0, params$0),
       url$1 = to_jstr$0(uri_with_params),
       init$0 =
         init$1(0, 0, 0, [0, headers$0], 0, 0, [0, method], 0, 0, 0, 0, 0, 0),
       url$0 = url$1,
       init = init$0;
     return let$0
             (request$0(v$3([0, init], url$0)),
              function(res){
               return let$1
                       (text(res),
                        function(json){
                         var
                          yojson =
                            from_string$0(0, 0, 0, caml_string_of_jsstring(json));
                         try{var _nm_ = caml_call1(Q[4], yojson); return _nm_;}
                         catch(e$0){
                          var e = caml_wrap_exception(e$0);
                          log([0, _jW_, [0, json, 0]]);
                          log([0, e, 0]);
                          throw caml_maybe_attach_backtrace(e, 0);
                         }
                        });
              });};
   }
   var method = 1;
   function connect(credentials){
    var
     password = credentials[3],
     username = credentials[2],
     base_url = credentials[1],
     auth = [0, username, password];
    return let$1
            (request$1
               (base_url,
                0,
                0,
                [0,
                 yojson_of_params,
                 params_of_yojson,
                 yojson_of_response,
                 response_of_yojson,
                 method,
                 endpoint])
              (auth, 0),
             function(auth_response){return [0, base_url, auth_response];});
   }
   function tag_of(obj){
    return is_block(obj) ? [0, caml_obj_tag(obj)] : [1, obj];
   }
   function Make$10(Q){
    function Start_client(P){
     var
      futures = create$2(0, 64),
      listeners = create$2(0, 64),
      worker = create$6(0, caml_jsstring_of_string(P[1]));
     function query(query){
      var
       uuid = to_string$5(0, new_uuid_v4(0)),
       match = create$5(0),
       set = match[2],
       fut = match[1];
      function set$0(jv){return set(of_jv(jv));}
      var query$0 = to_jstr$1([0, uuid, query]);
      post(0, worker, query$0);
      add$0(futures, uuid, set$0);
      return fut;
     }
     function listen$0(event, f){
      to_string$5(0, new_uuid_v4(0));
      function set(jv){return caml_call1(f, jv);}
      add$0(listeners, tag_of(event), set);
      return;
     }
     function on_message(ev){
      symbol$13
       (of_jstr$0(data(ev)),
        function(message){
         if(0 === message[0]){
          var
           match = message[1],
           data = match[2],
           uuid = match[1],
           f = find(futures, uuid);
          remove(futures, uuid);
          return caml_call1(f, data);
         }
         var match$0 = message[1], v = match$0[2], e = match$0[1];
         function _nk_(f){return caml_call1(f, v);}
         return function(_nl_){return iter$0(_nk_, _nl_);}
                 (find_all$0(listeners, tag_of(e)));
        });
      return 0;
     }
     var _ni_ = 0;
     (function(_nj_){return listen(_ni_, message, on_message, _nj_);}(worker));
     return [0, , , , query, listen$0];
    }
    function Make_worker(W){
     var W$0 = caml_call1(W, [0]);
     function on_message(ev){
      symbol$13
       (of_jstr$0(data(ev)),
        function(param){
         var data = param[2], uuid = param[1];
         return let$1
                 (caml_call1(W$0[1], data),
                  function(result){
                   var data = to_jstr$1(result);
                   return post$0(0, to_jstr$1([0, [0, uuid, data]]));
                  });
        });
      return 0;
     }
     listen(0, message, on_message, global);
     return;
    }
    return [0, Start_client, , Make_worker];
   }
   function _jX_(_ne_){
    var _nf_ = Make$10(_ne_)[1];
    return [0,
            function(_ng_){
             var _nh_ = _nf_(_ng_);
             return [0, , _nh_[4], _nh_[5]];
            }];
   }
   function random(size){
    var tbl = init$0(size, function(_nd_){return _nd_;});
    shuffle$0(tbl);
    return [0, tbl];
   }
   function of_string$2(size, param){
    return param !== cst_asc
            ? param !== cst_desc ? param !== cst_random ? 0 : random(size) : 2
            : 1;
   }
   function of_string$3(param){
    return param !== cst_date_added ? param !== cst_name ? 0 : 1 : 0;
   }
   function req(kind, opt, _nc_, _nb_, param){
    if(opt) var sth = opt[1], src_views = sth; else var src_views = 0;
    if(_nc_) var sth$0 = _nc_[1], sort = sth$0; else var sort = 0;
    if(_nb_) var sth$1 = _nb_[1], filters = sth$1; else var filters = 0;
    return [0, kind, src_views, sort, filters];
   }
   function t_to_jv(encoder, t){
    return get_exn
            (decode
              (caml_jsstring_of_string
                (to_string$4(0, 0, 0, caml_call1(encoder, t)))));
   }
   function jv_to_t(decoder, j){
    var json = encode(j);
    return [0,
            caml_call1
             (decoder, from_string$0(0, 0, 0, caml_string_of_jsstring(json)))];
   }
   function sorts_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      date_added_field = [0, 0],
      views_field = [0, 0],
      sort_name_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_date_added)
           if(field_name !== cst_sort_name)
            if(field_name !== cst_views){
             if(symbol$15(record_check_extra_fields))
              extra[1] = [0, field_name, symbol$15(extra)];
            }
            else if(symbol$15(views_field))
             duplicates[1] = [0, field_name, symbol$15(duplicates)];
            else{
             var fvalue = list_of_yojson(string_of_yojson, field_yojson);
             views_field[1] = [0, fvalue];
            }
           else if(symbol$15(sort_name_field))
            duplicates[1] = [0, field_name, symbol$15(duplicates)];
           else{
            var fvalue$0 = string_of_yojson(field_yojson);
            sort_name_field[1] = [0, fvalue$0];
           }
          else if(symbol$15(date_added_field))
           duplicates[1] = [0, field_name, symbol$15(duplicates)];
          else{
           var fvalue$1 = int_of_yojson(field_yojson);
           date_added_field[1] = [0, fvalue$1];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$15(duplicates))
      return record_duplicate_fields(tp_loc$5, symbol$15(duplicates), yojson);
     if(symbol$15(extra))
      return record_extra_fields(tp_loc$5, symbol$15(extra), yojson);
     var
      match = symbol$15(date_added_field),
      match$0 = symbol$15(views_field),
      match$1 = symbol$15(sort_name_field);
     if(match && match$0 && match$1){
      var
       sort_name_value = match$1[1],
       views_value = match$0[1],
       date_added_value = match[1];
      return [0, date_added_value, views_value, sort_name_value];
     }
     var
      _m$_ = [0, [0, 0 === symbol$15(sort_name_field) ? 1 : 0, _jY_], 0],
      _na_ = [0, [0, 0 === symbol$15(views_field) ? 1 : 0, _jZ_], _m$_];
     return record_undefined_elements
             (tp_loc$5,
              yojson,
              [0, [0, 0 === symbol$15(date_added_field) ? 1 : 0, _j0_], _na_]);
    }
    return record_list_instead_atom(tp_loc$5, yojson);
   }
   function yojson_of_sorts(param){
    var
     v_sort_name = param[3],
     v_views = param[2],
     v_date_added = param[1],
     arg = yojson_of_string(v_sort_name),
     bnds = [0, [0, _j1_, arg], 0],
     arg$0 = yojson_of_list(yojson_of_string, v_views),
     bnds$0 = [0, [0, _j2_, arg$0], bnds],
     arg$1 = yojson_of_int(v_date_added),
     bnds$1 = [0, [0, _j3_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   function t_of_yojson$0(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      sorts_field = [0, 0],
      item_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(field_name !== cst_item)
           if(field_name !== cst_sorts){
            if(symbol$15(record_check_extra_fields))
             extra[1] = [0, field_name, symbol$15(extra)];
           }
           else if(symbol$15(sorts_field))
            duplicates[1] = [0, field_name, symbol$15(duplicates)];
           else{
            var fvalue = sorts_of_yojson(field_yojson);
            sorts_field[1] = [0, fvalue];
           }
          else if(symbol$15(item_field))
           duplicates[1] = [0, field_name, symbol$15(duplicates)];
          else{
           var fvalue$0 = t_of_yojson(field_yojson);
           item_field[1] = [0, fvalue$0];
          }
          param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$15(duplicates))
      return record_duplicate_fields(tp_loc$6, symbol$15(duplicates), yojson);
     if(symbol$15(extra))
      return record_extra_fields(tp_loc$6, symbol$15(extra), yojson);
     var match = symbol$15(sorts_field), match$0 = symbol$15(item_field);
     if(match && match$0){
      var item_value = match$0[1], sorts_value = match[1];
      return [0, sorts_value, item_value];
     }
     var _m__ = [0, [0, 0 === symbol$15(item_field) ? 1 : 0, _j4_], 0];
     return record_undefined_elements
             (tp_loc$6,
              yojson,
              [0, [0, 0 === symbol$15(sorts_field) ? 1 : 0, _j5_], _m__]);
    }
    return record_list_instead_atom(tp_loc$6, yojson);
   }
   function yojson_of_t$0(param){
    var
     v_item = param[2],
     v_sorts = param[1],
     arg = yojson_of_t(v_item),
     bnds = [0, [0, _j6_, arg], 0],
     arg$0 = yojson_of_sorts(v_sorts),
     bnds$0 = [0, [0, _j7_, arg$0], bnds];
    return [0, 963043957, bnds$0];
   }
   function compare$2(t$0, t){return compare$0(t$0[1][3], t[1][3]);}
   function to_jv$0(param){
    var
     views = param[3],
     sort_name = param[2],
     id = param[1],
     id$0 = _cX_(id),
     sort_name$0 = _cX_(sort_name),
     views$0 = of_list$0(_cX_, views);
    return caml_js_from_array([0, id$0, sort_name$0, views$0]);
   }
   function of_jv$0(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(3 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _j8_], 1);
    var
     id = match[1],
     sort_name = match[2],
     views = match[3],
     id$0 = value$0(id),
     sort_name$0 = value$0(sort_name),
     views$0 = to_list$0(value$0, views);
    return [0, id$0, sort_name$0, views$0];
   }
   var path$0 = [1, [0, _j$_, _j__, _j9_]];
   function to_jv$1(k){return k;}
   function of_jv$1(j){return j;}
   function to_jv$2(k){return _cX_(k);}
   function of_jv$2(j){return value$0(j);}
   function to_jv$3(k){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ka_], 1);
   }
   function of_jv$3(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(2 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _kb_], 1);
    var type = match[1], views = match[2], _m9_ = to_list$0(value$0, views);
    return [0, value$0(type), _m9_];
   }
   var path$3 = [1, [0, _kd_, _kc_]];
   function to_jv$4(t){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ke_], 1);
   }
   function of_jv$4(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(2 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _kf_], 1);
    var
     collection_type = match[1],
     sort_name = match[2],
     _m8_ = value$0(sort_name);
    return [0, value$0(collection_type), _m8_];
   }
   var path$4 = [1, [0, _kh_, _kg_]];
   function to_jv$5(t){return t_to_jv(yojson_of_t$0, t);}
   function of_jv$5(j){return get_exn(jv_to_t(t_of_yojson$0, j));}
   function get_key(t){return [0, t[2][3], t[1][3], t[1][2]];}
   var
    _ki_ =
      [0, [0, path$0, to_jv$0, of_jv$0], name$6, to_jv$5, of_jv$5, get_key];
   function _kj_(_m6_, _m7_){return _dq_(undef, _m6_, _m7_);}
   (function(_m5_){return _kj_(_ki_, _m5_);}([0, path$1, to_jv$1, of_jv$1]));
   var
    _kk_ =
      [0, [0, path$0, to_jv$0, of_jv$0], name$6, to_jv$5, of_jv$5, get_key];
   function _kl_(_m3_, _m4_){return _dq_(undef, _m3_, _m4_);}
   (function(_m2_){return _kl_(_kk_, _m2_);}([0, path$3, to_jv$3, of_jv$3]));
   var
    _km_ =
      [0, [0, path$0, to_jv$0, of_jv$0], name$6, to_jv$5, of_jv$5, get_key];
   function _kn_(_m0_, _m1_){return _dq_(undef, _m0_, _m1_);}
   (function(_mZ_){return _kn_(_km_, _mZ_);}([0, path$2, to_jv$2, of_jv$2]));
   var
    _ko_ =
      [0, [0, path$0, to_jv$0, of_jv$0], name$6, to_jv$5, of_jv$5, get_key];
   function _kp_(_mX_, _mY_){return _dq_(undef, _mX_, _mY_);}
   (function(_mW_){return _kp_(_ko_, _mW_);}([0, path$4, to_jv$4, of_jv$4]));
   function status_to_string(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _kq_;
       case 1:
        return _kr_;
       default: return _ks_;
     }
    if(0 === param[0]){
     var
      last_source_item_key = param[3],
      first_unfetched_key = param[2],
      first_missing_key = param[1];
     return caml_call3
             (sprintf$1(_kt_),
              last_source_item_key,
              first_missing_key,
              first_unfetched_key);
    }
    var first_unfetched_key$0 = param[1];
    return caml_call2
            (sprintf$1(_ku_), first_unfetched_key$0, first_unfetched_key$0);
   }
   function pp_progress(fmt, param){
    var remaining = param[2], total = param[1];
    return caml_call2(fprintf$0(fmt)(_kv_), remaining, total);
   }
   function pp_report(fmt, param){
    var
     sync_progress = param[2],
     status = param[1],
     status$0 = status_to_string(status),
     _mT_ = 0;
    return caml_call3
            (fprintf$0(fmt)(_kw_),
             status$0,
             function(_mU_, _mV_){
              return pp_print_option(_mT_, pp_progress, _mU_, _mV_);
             },
             sync_progress);
   }
   var
    Queries = [0],
    include$1 = _jX_(Queries),
    Start_client = include$1[1],
    _kx_ = [0, compare$0];
   function MMap(_mS_){return _e$_(_kx_, _mS_);}
   MMap([0, compare$2]);
   var active_layout = var$0(0), active = var$0(0);
   function get$7(lang, string){
    return function(_mR_){return value(_mR_, string);}
            (assoc_opt([0, lang, string], strings));
   }
   var Config = [0, active, get$7], set$1 = make$7(Config)[1];
   function to_view(view){
    return map3
            (function(request, start_offset, item_count){
              return [0, request, start_offset, item_count];
             },
             view[1],
             view[3],
             view[2]);
   }
   var
    include$2 = Start_client([0, url$0]),
    query = include$2[2],
    listen$1 = include$2[3],
    servers_status = var$0([0, _ky_, initial_report]);
   listen$1
    (0,
     function(param){
      var report = param[2], id = param[1];
      log([0, caml_call3(asprintf(_kz_), id, pp_report, report), 0]);
      return symbol$1(servers_status, [0, id, report]);
     });
   function update$1(opt, var$0, next){
    if(opt) var sth = opt[1], eq = sth; else var eq = poly;
    var current = peek(var$0), _mQ_ = 1 - caml_call2(eq, current, next);
    return _mQ_ ? symbol$1(var$0, next) : _mQ_;
   }
   var memo = create$2(0, 64);
   function get_view_item_count(v){
    var item_count = get_or_add(memo, function(param){return var$0(0);}, v);
    await$1
     (query([5, v]),
      function(error){
       if(0 === error[0]){
        var v = error[1];
        debug([0, _kB_, [0, v[3], [0, _kA_, [0, v[2], 0]]]]);
        return update$1(0, item_count, v[3]);
       }
       debug([0, _kC_, [0, error, 0]]);
       return update$1(0, item_count, 0);
      });
    return get$4(item_count);
   }
   var connexions = var$1(_kD_, empty$1);
   function connect$0(param){
    var
     match = param[2],
     refresh = match[3],
     status = match[2],
     connexion = match[1],
     server_id = param[1];
    listen$1
     (0,
      function(param){
       var
        report = param[2],
        id = param[1],
        previous_status = peek(status),
        _mM_ = symbol$0(server_id, id);
       if(_mM_){
        symbol$1(status, report);
        var _mN_ = previous_status[2], _mO_ = report[2];
        if(_mN_){
         var remaining = _mN_[1][2];
         if(! _mO_) return symbol$1(refresh, 0);
         var remaining$0 = _mO_[1][2];
         if(symbol$4(remaining, remaining$0)) return symbol$1(refresh, 0);
        }
        var _mP_ = 0;
       }
       else
        var _mP_ = _mM_;
       return _mP_;
      });
    query([1, [0, [0, server_id, connexion], 0]]);
    return;
   }
   var
    servers_with_status =
      map$4
       (function(param){
         var
          connexion = param[2],
          id = param[1],
          status = var$0(initial_report),
          refresh = var$0(0),
          server = [0, id, [0, connexion, status, refresh]];
         connect$0(server);
         return server;
        },
        get$4(connexions));
   function new_connexion(base_url, username, password){
    return let$1
            (connect([0, base_url, username, password]),
             function(connexion){
              var server_id = connexion[2][3];
              return update
                      (function(servers){
                        return concat$1(servers, element([0, server_id, connexion]));
                       },
                       connexions);
             });
   }
   var
    url_field =
      field$0
       (pure(text_input(0, 0, 0, 0, _kF_, 0, 0, _kE_)),
        function(t, v){return [0, v, t[2], t[3]];}),
    username_field =
      field$0
       (pure(text_input(0, 0, 0, 0, _kH_, 0, 0, _kG_)),
        function(t, v){return [0, t[1], v, t[3]];}),
    password_field =
      field$0
       (pure(password_input(0, 0, 0, 0, _kI_, 0, 0, 0)),
        function(t, v){return [0, t[1], t[2], v];}),
    submit$1 =
      field$0(pure(submit$0(0, 0, 0, _kJ_)), function(t, v){return t;}),
    fields$0 =
      return$1
       (of_list$1
         ([0,
           url_field,
           [0, username_field, [0, password_field, [0, submit$1, 0]]]])),
    Connect_form = [0, default$1, fields$0];
   function ui_form(param){
    return create$8(0, 0, 0, Connect_form)
            (function(t){
              log([0, _kK_, [0, t, 0]]);
              var _mK_ = t[1];
              a:
              if(typeof _mK_ !== "number" && 1 !== _mK_[0]){
               var _mL_ = t[2], url = _mK_[1];
               if(typeof _mL_ !== "number" && 1 !== _mL_[0]){
                var username = _mL_[1], match = t[3];
                if(typeof match !== "number" && 1 !== match[0]){
                 var password = match[1];
                 log([0, _kN_, [0, url, [0, username, 0]]]);
                 new_connexion(url, username, password);
                 return 0;
                }
                log([0, _kL_, [0, url, [0, username, 0]]]);
                new_connexion(url, username, _kM_);
                return 0;
               }
               break a;
              }
              return 0;
             });
   }
   function ui_status(server){
    var
     status =
       func
        (get$4(server[2]),
         function(param){
          var sync_progress = param[2], status = param[1];
          if(typeof status === "number" && 1 === status && ! sync_progress)
           return txt(0, _kQ_);
          if(! sync_progress) return txt(0, _kP_);
          var
           match = sync_progress[1],
           remaining = match[2],
           total = match[1];
          return txt
                  (0, caml_call2(sprintf(_kO_), total - remaining | 0, total));
         });
    return status;
   }
   function fut_to_lwd(init, f){
    var v = var$0(init);
    await$1(f, function(_mJ_){return symbol$1(v, _mJ_);});
    return get$4(v);
   }
   function seq_share(cmp, prev, next){
    function aux(prev, next){
     var match = view(prev), match$0 = view(next);
     a:
     if(typeof match === "number"){
      if(typeof match$0 === "number") return [0, prev, 1];
     }
     else if(0 === match[0]){
      var i = match[1];
      if(typeof match$0 !== "number" && 1 !== match$0[0]){
       var i$0 = match$0[1];
       if(caml_call2(cmp, i, i$0)) return [0, prev, 1];
       break a;
      }
     }
     else{
      var r = match[2], l = match[1];
      if(typeof match$0 !== "number" && 0 !== match$0[0]){
       var
        r$0 = match$0[2],
        l$0 = match$0[1],
        match$1 = aux(l, l$0),
        l_same = match$1[2],
        l$1 = match$1[1],
        match$2 = aux(r, r$0),
        r_same = match$2[2],
        r$1 = match$2[1];
       if(l_same && r_same) return [0, prev, 1];
       return [0, concat$1(l$1, r$1), 0];
      }
     }
     return [0, next, 0];
    }
    return aux(prev, next)[1];
   }
   function lib_diff(prev, next){
    return seq_share
            (function(i$0, i){return symbol$0(i$0[2][3], i[2][3]);},
             prev,
             next);
   }
   var
    servers_libraries =
      map$4
       (function(param){
         var refresh = param[2][3], server_id = param[1];
         log(_kR_);
         var
          previous_value = [0, 0],
          v =
            bind$1
             (get$4(refresh),
              function(param){
               function _mA_(_mI_){return get_or(_mI_, 0);}
               function _mB_(l){log([0, _kS_, [0, l, 0]]); return l;}
               var
                _mC_ =
                  function(_mF_){return map$3(of_list$1, _mF_);}
                   (function(_mG_){return map$3(_mB_, _mG_);}
                     (function(_mH_){return map$3(_mA_, _mH_);}
                       (query([4, server_id])))),
                _mD_ = value$3(previous_value[1], empty$1);
               return function(_mE_){return fut_to_lwd(_mD_, _mE_);}(_mC_);
              }),
          views =
            func
             (v,
              function(v){
               var
                new_value =
                  map_or
                   (v,
                    function(prev){return lib_diff(prev, v);},
                    previous_value[1]);
               previous_value[1] = [0, new_value];
               return new_value;
              });
         return [0, server_id, views];
        },
        servers_with_status);
   function ui(param){
    var
     statuses =
       map$4
        (function(param){var server = param[2]; return ui_status(server);},
         servers_with_status),
     ui_form$0 =
       func
        (servers_with_status,
         function(s){
          return typeof view(s) === "number"
                  ? element(div$1(0, 0, 0, [0, [0, 82, ui_form(0)], 0]))
                  : empty$1;
         }),
     _mz_ = [0, [0, 83, lift(statuses)], 0];
    return div$1(0, 0, 0, [0, [0, 83, lift(ui_form$0)], _mz_]);
   }
   var _kT_ = var$0(0), _kU_ = var$0(0), now_playing = var$0(0);
   function audio_url(server, item_id){
    var _mx_ = server[2][2], _my_ = server[1];
    return caml_call3(sprintf(_kV_), _my_, item_id, _mx_);
   }
   function Playback_controller(P){
    function set_play_url(playlist, current_index){
     if(! playlist) return ok(0);
     var playlist$0 = playlist[1];
     return let$1
             (let$1
               (caml_call2(P[1], playlist$0, [0, current_index]),
                function(result){
                 var len = result.length - 1;
                 if(1 === len){
                  var _mv_ = result[1];
                  if(_mv_){
                   var
                    item = _mv_[1][2],
                    server_id = item[7],
                    album_id = item[5],
                    id = item[3],
                    name = item[1],
                    servers = to_list$1(peek(connexions)),
                    connexion = assq(server_id, servers),
                    url = audio_url(connexion, id);
                   log([0, _kW_, [0, name, [0, _cX_(url), 0]]]);
                   var
                    session = of_navigator(navigator),
                    image_id = value$3(album_id, id),
                    _mw_ = connexion[1],
                    img_src = caml_call2(sprintf(_kX_), _mw_, image_id),
                    artwork = [0, [0, img_src, _kZ_, _kY_], 0];
                   set_metadata(session, [0, name, artist, album, artwork]);
                   return [0, item, url];
                  }
                 }
                 throw caml_maybe_attach_backtrace(Not_found, 1);
                }),
              function(item){return symbol$1(now_playing, [0, item]);});
    }
    function reset_playlist(playlist){
     set_play_url([0, playlist], 0);
     symbol$1(_kU_, [0, playlist]);
     return symbol$1(_kT_, 0);
    }
    function make(param){
     var
      _ml_ = [0, v$1("preload", "auto"), 0],
      _mm_ = [0, v$1("autoplay", cst_true), _ml_],
      audio_elt = audio$0(0, [0, [0, v$1("controls", cst_true), _mm_]], 0);
     function set_src(url){
      return set_at(cst_src, [0, caml_jsstring_of_string(url)], audio_elt);
     }
     var root = observe$0(0, get$4(now_playing));
     set_on_invalidate
      (root,
       function(param){
        var match = quick_sample(root);
        if(! match) return 0;
        var url = match[1][2];
        return set_src(url);
       });
     quick_sample(root);
     function next(param){
      var
       playlist = peek(_kU_),
       current_index = peek(_kT_),
       next_index = current_index + 1 | 0;
      set_play_url(playlist, next_index);
      return symbol$1(_kT_, next_index);
     }
     function prev(param){
      var
       playlist = peek(_kU_),
       current_index = peek(_kT_),
       next_index = max(0, current_index - 1 | 0);
      set_play_url(playlist, next_index);
      return symbol$1(_kT_, next_index);
     }
     var session = of_navigator(navigator);
     function set_position_state$0(param){
      var
       duration = prop(float$0(cst_duration), audio_elt),
       _mu_ = 1 - is_nan(duration);
      if(! _mu_) return _mu_;
      var
       playback_rate = prop(float$0(cst_playbackRate), audio_elt),
       position = prop(float$0("currentTime"), audio_elt);
      return set_position_state
              ([0, duration], [0, playback_rate], [0, position], session);
     }
     set_action_handler(session, next_track, next);
     set_action_handler(session, previous_track, prev);
     function on_error(ev){
      stop_immediate_propagation(ev);
      prevent_default(ev);
      log([0, _k0_, [0, ev, 0]]);
      return next(0);
     }
     function next$0(param){return next(0);}
     listen(0, ended, next$0, audio_elt);
     listen(0, error, on_error, audio_elt);
     listen
      (0, play, function(param){return set_position_state$0(0);}, audio_elt);
     var
      btn_next =
        v$7(0, 0, [0, [0, [0, 80, handler(0, click, next$0)], 0]], _k1_),
      style$0 =
        func
         (get$4(now_playing),
          function(np){
           if(np)
            var
             match = np[1][1],
             server_id = match[7],
             album_id = match[5],
             id = match[3],
             image_id = value$3(album_id, id),
             servers = to_list$1(peek(connexions)),
             connexion = assq(server_id, servers),
             _mt_ = connexion[1],
             src = caml_call2(sprintf(_k2_), _mt_, image_id);
           else
            var src = _k4_;
           return caml_call1(sprintf(_k3_), src);
          }),
      _mn_ = [0, 82, style$0],
      at =
        function(_ms_){return add$1(style, _mn_, _ms_);}
         (add$1(class$0, _k5_, 0)),
      on_click =
        handler
         (0,
          click,
          function(param){
           var _mq_ = peek(active_layout) ? 0 : 1;
           return function(_mr_){return symbol$1(active_layout, _mr_);}(_mq_);
          }),
      track_cover = div$1(0, [0, at], [0, [0, [0, 80, on_click], 0]], 0),
      at$0 = add$1(class$0, _k6_, 0),
      txt$0 =
        func
         (get$4(now_playing),
          function(param){
           if(! param) return txt(0, _k7_);
           var name = param[1][1][1];
           return txt(0, name);
          }),
      title = span$1(0, 0, 0, [0, [0, 82, txt$0], 0]),
      track_details = div$1(0, [0, at$0], 0, [0, [0, 82, title], 0]),
      at$1 =
        function(_mp_){return add$1(class$0, _k9_, _mp_);}
         (add$1(class$0, _k8_, 0)),
      now_playing$0 =
        div$1
         (0,
          [0, at$1],
          0,
          [0, [0, 82, track_cover], [0, [0, 82, track_details], 0]]),
      at$2 =
        function(_mo_){return add$1(class$0, _k$_, _mo_);}
         (add$1(class$0, _k__, 0));
     return div$1
             (0,
              [0, at$2],
              0,
              [0,
               [0, 82, now_playing$0],
               [0, [0, 80, audio_elt], [0, [0, 82, btn_next], 0]]]);
    }
    return [0, , reset_playlist, make];
   }
   var base = classes(_la_);
   function at(param){return param ? classes(_lb_) : classes(_lc_);}
   function make$11(on_click){
    var
     on_click$0 = handler$0(0, click, on_click),
     _mh_ = [0, at],
     _mi_ = [0, [0, [0, 80, on_click$0], 0]];
    return function(_mk_, _mj_){
     return caml_call1(two_state([0, base])(_mk_, _mj_, _mh_), _mi_);};
   }
   classes(_ld_);
   function columns(param){
    var
     _mc_ =
       function(_mg_){return v$6(_lg_, _lf_, _mg_);}
        ([0, [0, 80, txt(0, _le_)], 0]),
     _md_ =
       function(_mf_){return v$6(_lj_, _li_, _mf_);}
        ([0, [0, 80, txt(0, _lh_)], 0]);
    return [0,
            function(_me_){return v$6(_lm_, _ll_, _me_);}
             ([0, [0, 80, txt(0, _lk_)], 0]),
            _md_,
            _mc_];
   }
   function make$12(reset_playlist, fetch, scroll_target, view){
    var
     _l3_ = view[4],
     ranged =
       map2
        (to_view(view),
         _l3_,
         function(view, order){return [0, view, 0, 0, order];});
    function img_url(server_id, item_id){
     var servers = to_list$1(peek(connexions));
     try{
      var
       connexion = assq(server_id, servers),
       _l$_ = connexion[1],
       _ma_ = caml_call2(sprintf(_lo_), _l$_, item_id),
       url = _ma_;
     }
     catch(_mb_){
      var _l__ = caml_wrap_exception(_mb_);
      if(_l__ !== Not_found) throw caml_maybe_attach_backtrace(_l__, 0);
      var url = _ln_;
     }
     return src$0(caml_jsstring_of_string(url));
    }
    function render(ranged, start_index, param){
     var
      match = param[2],
      image_blur_hashes = match[8],
      server_id = match[7],
      album_id = match[5],
      id = match[3],
      name = match[1];
     function play_from(ranged){
      return func
              (ranged,
               function(ranged, param){
                var _l9_ = ranged[1];
                caml_call1
                 (reset_playlist,
                  [0,
                   [0, _l9_[1], ranged[1][2] + start_index | 0, _l9_[3]],
                   ranged[2],
                   ranged[3],
                   ranged[4]]);
                return 0;
               });
     }
     var
      play_on_click =
        func(play_from(ranged), function(cb){return handler(0, click, cb);});
     a:
     {
      if(image_blur_hashes[1] && album_id){
       var
        id$0 = album_id[1],
        _l6_ = return$1(img_url(server_id, id$0)),
        img_url$0 = _l6_;
       break a;
      }
      var img_url$0 = return$1(src$0(cst_track_png));
     }
     var
      status =
        func
         (get$4(now_playing),
          function(param){
           if(param){
            var item_id = param[1][1][3];
            if(symbol$0(item_id, id)){
             var _l8_ = [0, txt(0, _lp_), 0];
             return div$0(0, [0, [0, class$1("playing"), 0]], _l8_);
            }
           }
           return div$0
                   (0, 0, [0, txt(0, string_of_int(start_index + 1 | 0)), 0]);
          }),
      _l7_ =
        [0,
         [0, 80, div$0(0, 0, [0, span$0(0, 0, [0, txt(0, name), 0]), 0])],
         0];
     return [0,
             [0, 82, status],
             [0,
              [0,
               82,
               div$1
                (0,
                 0,
                 [0, [0, [0, 82, play_on_click], 0]],
                 [0,
                  [0,
                   82,
                   img$0
                    (0,
                     [0, [0, [0, 82, img_url$0], [0, [0, 80, width$0(50)], 0]]],
                     0,
                     0)],
                  0])],
              _l7_]];
    }
    function placeholder(i){return 0;}
    var
     ui_table = [0, [0, columns(0)], _lq_],
     total_items = view[2],
     fetch$0 =
       func(ranged, function(ranged, i){return caml_call2(fetch, ranged, i);}),
     render$0 = pure(function(_l4_, _l5_){return render(ranged, _l4_, _l5_);}),
     data_source = [0, total_items, fetch$0, render$0];
    return make$6(ui_table, [0, placeholder], scroll_target)(data_source);
   }
   function make_now_playing(reset_playlist, fetch, view){
    var scroll_target = get$4(_kT_);
    return make$12(reset_playlist, fetch, [0, scroll_target], view);
   }
   var
    session_uuid$0 =
      var_f(_lr_, function(param){return to_string$5(0, new_uuid_v4(0));}),
    uuid = peek(session_uuid$0);
   set_session_uuid(uuid);
   query([0, peek(session_uuid$0)]);
   function fetch$1(ranged_view, i){
    return query([6, ranged_view[1], ranged_view[4], i]);
   }
   var P = Playback_controller([0, fetch$1]), playlist = var$1(_ls_, 0);
   function on_click(param, _l2_){
    symbol$1(playlist, peek(playlist) + 1 | 0);
    set$1(1);
    return 1;
   }
   caml_call1
    (make$11(on_click)(0, 0),
     function(param){
      return [0,
              [0,
               82,
               func
                (get$4(playlist),
                 function(pl){
                  return txt(0, symbol_concat(_lt_, string_of_int(pl)));
                 })],
              0];
     });
   var
    _lu_ = [0, [0, 82, ui(0)], 0],
    _lw_ = [0, [0, 80, h1$0(0, 0, [0, txt(0, _lv_), 0])], _lu_],
    status =
      div$1(0, [0, [0, [0, 80, style$0(cst_grid_column_1_1)], 0]], 0, _lw_),
    player = P[3].call(null, 0),
    player_ui =
      div$1
       (0,
        [0, [0, [0, 80, style$0(cst_grid_column_1_1)], 0]],
        0,
        [0, [0, 82, player], 0]),
    f_search = make$8(0, 0, _lx_),
    options = pure(of_list$1(_ly_)),
    f_sort = make$9(0, 0, _lz_)(options),
    options$0 = pure(of_list$1(_lA_)),
    f_order = make$9(0, 0, _lB_)(options$0),
    f_sort_order = pair(f_sort[3], f_order[3]),
    choices =
      fold_monoid
       (function(param){
         var l = param[2];
         return map$4
                 (function(l){
                   var _l1_ = [0, [0, 80, txt(0, l[2][1])], 0];
                   return [0, l[2][3], _l1_, 1];
                  },
                  l);
        },
        [0,
         return$1(empty$1),
         function(_lW_){
          function _lX_(_lZ_, _l0_){return map2(_lW_, _lZ_, _l0_);}
          return function(_lY_){return _lX_(_lY_, concat$1);};
         }],
        servers_libraries),
    f_libraries = make$10([0, _lC_, join(choices)]),
    filters =
      div$1
       (0,
        0,
        0,
        [0,
         [0, 82, f_sort[1]],
         [0,
          [0, 82, f_order[1]],
          [0, [0, 82, f_search[1]], [0, [0, 82, f_libraries[1]], 0]]]]),
    f_value = f_libraries[2],
    previous_value = [0, 0],
    request$2 =
      map3
       (function(l, t, param){
         var
          s = param[1],
          filters = symbol$10(function(s){return [0, [0, s], 0];}, t),
          _lV_ = [0, _cX_(s), 0];
         log([0, _lE_, [0, of_option(_cX_(_lD_), _cX_, t), _lV_]]);
         var
          sort = of_string$3(s),
          new_view = req(0, [0, [0, to_list$1(l)]], [0, sort], filters, 0);
         return map_or
                 (new_view,
                  function(old){
                   return poly(old, new_view)
                           ? old
                           : (previous_value[1] = [0, new_view], new_view);
                  },
                  previous_value[1]);
        },
        f_value,
        f_search[3],
        f_sort_order),
    item_count =
      func(request$2, function(req){return get_view_item_count(req);}),
    item_count$0 = join(item_count),
    order =
      map2
       (item_count$0,
        f_sort_order,
        function(item_count, param){
         var order = param[2], order$0 = of_string$2(item_count, order);
         return order$0;
        }),
    main_view = [0, request$2, item_count$0, pure(0), order],
    main_list = make$12(P[2], fetch$1, 0, main_view),
    playlist$0 =
      func
       (get$4(_kU_),
        function(param){
         if(! param) return span$1(0, 0, 0, [0, [0, 80, txt(0, _lF_)], 0]);
         var
          playlist = param[1],
          _lS_ = pure(playlist[4]),
          _lT_ = pure(playlist[1][2]),
          _lU_ = pure(playlist[1][3]),
          view = [0, pure(playlist[1][1]), _lU_, _lT_, _lS_];
         return make_now_playing(P[2], fetch$1, view);
        }),
    now_playing$0 = join(playlist$0),
    display_none =
      func
       (get$4(active_layout),
        function(param){return param ? void$0 : class$1("display-none");}),
    style$3 =
      func
       (get$4(now_playing),
        function(np){
         if(np)
          var
           match = np[1][1],
           server_id = match[7],
           album_id = match[5],
           id = match[3],
           image_id = value$3(album_id, id),
           servers = to_list$1(peek(connexions)),
           connexion = assq(server_id, servers),
           _lR_ = connexion[1],
           src = caml_call2(sprintf(_lG_), _lR_, image_id);
         else
          var src = _lI_;
         return style$0
                 (caml_jsstring_of_string(caml_call1(sprintf(_lH_), src)));
        }),
    at$0 = [0, [0, 82, display_none], [0, [0, 80, class$1("big-cover")], 0]],
    big_cover =
      div$1
       (0,
        [0, at$0],
        0,
        [0, [0, 82, div$1(0, [0, [0, [0, 82, style$3], 0]], 0, 0)], 0]),
    _lJ_ =
      [0,
       [0,
        82,
        div$1
         (0,
          [0, [0, [0, 80, class$1("playlist")], 0]],
          0,
          [0, [0, 82, now_playing$0], 0])],
       [0, [0, 82, player_ui], 0]],
    _lK_ =
      [0,
       [0, 82, status],
       [0,
        [0,
         82,
         div$1
          (0,
           [0, [0, [0, 80, class$1("item-list")], 0]],
           0,
           [0,
            [0, 82, big_cover],
            [0, [0, 82, filters], [0, [0, 82, main_list], 0]]])],
        _lJ_]],
    app =
      div$1
       (0,
        [0, function(_lQ_){return to_at$0(_lL_, _lQ_);}(classes(0))],
        0,
        _lK_),
    is_storage_persistent = persist(manager(navigator));
   function on_load(param){
    log([0, _lM_, [0, is_storage_persistent, 0]]);
    var app$0 = observe$0(0, app);
    function on_invalidate(param){
     request_animation_frame(function(param){quick_sample(app$0); return 0;});
     return 0;
    }
    var _lP_ = [0, quick_sample(app$0), 0];
    append_children(body(global_document), _lP_);
    return set_on_invalidate(app$0, on_invalidate);
   }
   listen(0, dom_content_loaded, on_load, as_target(window));
   do_at_exit(0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,

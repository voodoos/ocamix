// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=exe, use-js-string=true, version=5.7.2+5.7.2
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i == 0 && len <= 4096 && len == a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len == 0) return 0;
    if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length)){
     s2.c =
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else if(s2.t == 2 && i2 == s2.c.length){
     s2.c +=
      s1.t == 4
       ? caml_subarray_to_jsbytes(s1.c, i1, len)
       : i1 == 0 && s1.c.length == len ? s1.c : s1.c.substr(i1, len);
     s2.t = s2.c.length == s2.l ? 0 : 2;
    }
    else{
     if(s2.t != 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t == 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function caml_str_repeat(n, s){
    if(n == 0) return "";
    if(s.repeat) return s.repeat(n);
    var r = "", l = 0;
    for(;;){
     if(n & 1) r += s;
     n >>= 1;
     if(n == 0) return r;
     s += s;
     l++;
     if(l == 9) s.slice(0, 1);
    }
   }
   function caml_convert_string_to_bytes(s){
    if(s.t == 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_subarray_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   function caml_utf16_of_utf8(s){
    for(var b = "", t = "", c, c1, c2, v, i = 0, l = s.length; i < l; i++){
     c1 = s.charCodeAt(i);
     if(c1 < 0x80){
      for(var j = i + 1; j < l && (c1 = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     v = 1;
     if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
      c = c2 + (c1 << 6);
      if(c1 < 0xe0){
       v = c - 0x3080;
       if(v < 0x80) v = 1;
      }
      else{
       v = 2;
       if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128){
        c = c2 + (c << 6);
        if(c1 < 0xf0){
         v = c - 0xe2080;
         if(v < 0x800 || v >= 0xd7ff && v < 0xe000) v = 2;
        }
        else{
         v = 3;
         if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128 && c1 < 0xf5){
          v = c2 - 0x3c82080 + (c << 6);
          if(v < 0x10000 || v > 0x10ffff) v = 3;
         }
        }
       }
      }
     }
     if(v < 4){
      i -= v;
      t += "\ufffd";
     }
     else if(v > 0xffff)
      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF));
     else
      t += String.fromCharCode(v);
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function MlBytes(tag, contents, length){
    this.t = tag;
    this.c = contents;
    this.l = length;
   }
   MlBytes.prototype.toString =
    function(){
     switch(this.t){
       case 9:
        return this.c;
       default: caml_convert_string_to_bytes(this);
       case 0:
        if(jsoo_is_ascii(this.c)){this.t = 9; return this.c;} this.t = 8;
       case 8:
        return this.c;
     }
    };
   MlBytes.prototype.toUtf16 =
    function(){
     var r = this.toString();
     if(this.t == 9) return r;
     return caml_utf16_of_utf8(r);
    };
   MlBytes.prototype.slice =
    function(){
     var content = this.t == 4 ? this.c.slice() : this.c;
     return new MlBytes(this.t, content, this.l);
    };
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function jsoo_sys_getenv(n){
    var process = globalThis.process;
    if(process && process.env && process.env[n] != undefined)
     return process.env[n];
    if(globalThis.jsoo_static_env && globalThis.jsoo_static_env[n])
     return globalThis.jsoo_static_env[n];
   }
   var caml_record_backtrace_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] == "b"){
         caml_record_backtrace_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] == 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   function caml_string_of_jsbytes(x){return x;}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t != 4){
     if(i == s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 == s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      default: if(i >= s.c.length) return 0;
      case 0:
       return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d == 0)
     return f.apply(null, args);
    else if(d < 0){
     var g = f.apply(null, args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f.apply(null, nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f.apply(null, nargs);
            };
         break;
        }
       default:
        var
         g =
           function(){
            var
             extra_args = arguments.length == 0 ? 1 : arguments.length,
             nargs = new Array(args.length + extra_args);
            for(var i = 0; i < args.length; i++) nargs[i] = args[i];
            for(var i = 0; i < arguments.length; i++)
             nargs[args.length + i] = arguments[i];
            return caml_call_gen(f, nargs);
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x != 0) return 1;
     return 2;
    }
    return isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return 0;}
   var log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
   function jsoo_floor_log2(x){
    if(log2_ok) return Math.floor(Math.log2(x));
    var i = 0;
    if(x == 0) return - Infinity;
    if(x >= 1) while(x >= 2){x /= 2; i++;} else while(x < 1){x *= 2; i--;}
    return i;
   }
   function caml_int32_bits_of_float(x){
    var float32a = new Float32Array(1);
    float32a[0] = x;
    var int32a = new Int32Array(float32a.buffer);
    return int32a[0] | 0;
   }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   function MlInt64(lo, mi, hi){
    this.lo = lo & 0xffffff;
    this.mi = mi & 0xffffff;
    this.hi = hi & 0xffff;
   }
   MlInt64.prototype.caml_custom = "_j";
   MlInt64.prototype.copy =
    function(){return new MlInt64(this.lo, this.mi, this.hi);};
   MlInt64.prototype.ucompare =
    function(x){
     if(this.hi > x.hi) return 1;
     if(this.hi < x.hi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.compare =
    function(x){
     var hi = this.hi << 16, xhi = x.hi << 16;
     if(hi > xhi) return 1;
     if(hi < xhi) return - 1;
     if(this.mi > x.mi) return 1;
     if(this.mi < x.mi) return - 1;
     if(this.lo > x.lo) return 1;
     if(this.lo < x.lo) return - 1;
     return 0;
    };
   MlInt64.prototype.neg =
    function(){
     var
      lo = - this.lo,
      mi = - this.mi + (lo >> 24),
      hi = - this.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.add =
    function(x){
     var
      lo = this.lo + x.lo,
      mi = this.mi + x.mi + (lo >> 24),
      hi = this.hi + x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.sub =
    function(x){
     var
      lo = this.lo - x.lo,
      mi = this.mi - x.mi + (lo >> 24),
      hi = this.hi - x.hi + (mi >> 24);
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.mul =
    function(x){
     var
      lo = this.lo * x.lo,
      mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
      hi =
        (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
        + this.lo * x.hi;
     return new MlInt64(lo, mi, hi);
    };
   MlInt64.prototype.isZero =
    function(){return (this.lo | this.mi | this.hi) == 0;};
   MlInt64.prototype.isNeg = function(){return this.hi << 16 < 0;};
   MlInt64.prototype.and =
    function(x){
     return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
    };
   MlInt64.prototype.or =
    function(x){
     return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
    };
   MlInt64.prototype.xor =
    function(x){
     return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
    };
   MlInt64.prototype.shift_left =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo << s,
               this.mi << s | this.lo >> 24 - s,
               this.hi << s | this.mi >> 24 - s);
     if(s < 48)
      return new
              MlInt64
              (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
     return new MlInt64(0, 0, this.lo << s - 48);
    };
   MlInt64.prototype.shift_right_unsigned =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | this.hi << 24 - s,
               this.hi >> s);
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
     return new MlInt64(this.hi >> s - 48, 0, 0);
    };
   MlInt64.prototype.shift_right =
    function(s){
     s = s & 63;
     if(s == 0) return this;
     var h = this.hi << 16 >> 16;
     if(s < 24)
      return new
              MlInt64
              (this.lo >> s | this.mi << 24 - s,
               this.mi >> s | h << 24 - s,
               this.hi << 16 >> s >>> 16);
     var sign = this.hi << 16 >> 31;
     if(s < 48)
      return new
              MlInt64
              (this.mi >> s - 24 | this.hi << 48 - s,
               this.hi << 16 >> s - 24 >> 16,
               sign & 0xffff);
     return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
    };
   MlInt64.prototype.lsl1 =
    function(){
     this.hi = this.hi << 1 | this.mi >> 23;
     this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
     this.lo = this.lo << 1 & 0xffffff;
    };
   MlInt64.prototype.lsr1 =
    function(){
     this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
     this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
     this.hi = this.hi >>> 1;
    };
   MlInt64.prototype.udivmod =
    function(x){
     var
      offset = 0,
      modulus = this.copy(),
      divisor = x.copy(),
      quotient = new MlInt64(0, 0, 0);
     while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
     while(offset >= 0){
      offset--;
      quotient.lsl1();
      if(modulus.ucompare(divisor) >= 0){
       quotient.lo++;
       modulus = modulus.sub(divisor);
      }
      divisor.lsr1();
     }
     return {quotient: quotient, modulus: modulus};
    };
   MlInt64.prototype.div =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi ^ y.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var q = x.udivmod(y).quotient;
     if(sign & 0x8000) q = q.neg();
     return q;
    };
   MlInt64.prototype.mod =
    function(y){
     var x = this;
     if(y.isZero()) caml_raise_zero_divide();
     var sign = x.hi;
     if(x.hi & 0x8000) x = x.neg();
     if(y.hi & 0x8000) y = y.neg();
     var r = x.udivmod(y).modulus;
     if(sign & 0x8000) r = r.neg();
     return r;
    };
   MlInt64.prototype.toInt = function(){return this.lo | this.mi << 24;};
   MlInt64.prototype.toFloat =
    function(){
     return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
            + this.lo;
    };
   MlInt64.prototype.toArray =
    function(){
     return [this.hi >> 8,
             this.hi & 0xff,
             this.mi >> 16,
             this.mi >> 8 & 0xff,
             this.mi & 0xff,
             this.lo >> 16,
             this.lo >> 8 & 0xff,
             this.lo & 0xff];
    };
   MlInt64.prototype.lo32 =
    function(){return this.lo | (this.mi & 0xff) << 24;};
   MlInt64.prototype.hi32 =
    function(){return this.mi >>> 8 & 0xffff | this.hi << 16;};
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_int64_create_lo_mi_hi(1, 0, 0x7ff0);
     return x > 0
             ? caml_int64_create_lo_mi_hi(0, 0, 0x7ff0)
             : caml_int64_create_lo_mi_hi(0, 0, 0xfff0);
    }
    var sign = x == 0 && 1 / x == - Infinity ? 0x8000 : x >= 0 ? 0 : 0x8000;
    if(sign) x = - x;
    var exp = jsoo_floor_log2(x) + 1023;
    if(exp <= 0){
     exp = 0;
     x /= Math.pow(2, - 1026);
    }
    else{
     x /= Math.pow(2, exp - 1027);
     if(x < 16){x *= 2; exp -= 1;}
     if(exp == 0) x /= 2;
    }
    var k = Math.pow(2, 24), r3 = x | 0;
    x = (x - r3) * k;
    var r2 = x | 0;
    x = (x - r2) * k;
    var r1 = x | 0;
    r3 = r3 & 0xf | sign | exp << 4;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom == "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_int32_float_of_bits(x){
    var int32a = new Int32Array(1);
    int32a[0] = x;
    var float32a = new Float32Array(int32a.buffer);
    return float32a[0];
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi, exp = (hi & 0x7fff) >> 4;
    if(exp == 2047)
     return (lo | mi | hi & 0xf) == 0
             ? hi & 0x8000 ? - Infinity : Infinity
             : NaN;
    var k = Math.pow(2, - 24), res = (lo * k + mi) * k + (hi & 0xf);
    if(exp > 0){
     res += 16;
     res *= Math.pow(2, exp - 1027);
    }
    else
     res *= Math.pow(2, - 1026);
    if(hi & 0x8000) res = - res;
    return res;
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   var caml_ba_custom_name = "_bigarr02";
   function Ml_Bigarray(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray.prototype.caml_custom = caml_ba_custom_name;
   Ml_Bigarray.prototype.offset =
    function(arg){
     var ofs = 0;
     if(typeof arg === "number") arg = [arg];
     if(! (arg instanceof Array))
      caml_invalid_argument("bigarray.js: invalid offset");
     if(this.dims.length != arg.length)
      caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
     if(this.layout == 0)
      for(var i = 0; i < this.dims.length; i++){
       if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + arg[i];
      }
     else
      for(var i = this.dims.length - 1; i >= 0; i--){
       if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
       ofs = ofs * this.dims[i] + (arg[i] - 1);
      }
     return ofs;
    };
   Ml_Bigarray.prototype.get =
    function(ofs){
     switch(this.kind){
       case 7:
        var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
        return caml_int64_create_lo_hi(l, h);
       case 10:
       case 11:
        var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
        return [254, r, i];
       default: return this.data[ofs];
     }
    };
   Ml_Bigarray.prototype.set =
    function(ofs, v){
     switch(this.kind){
       case 7:
        this.data[ofs * 2 + 0] = caml_int64_lo32(v);
        this.data[ofs * 2 + 1] = caml_int64_hi32(v);
        break;
       case 10:
       case 11:
        this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
       default: this.data[ofs] = v; break;
     }
     return 0;
    };
   Ml_Bigarray.prototype.fill =
    function(v){
     switch(this.kind){
       case 7:
        var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
        if(a == b)
         this.data.fill(a);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? a : b;
        break;
       case 10:
       case 11:
        var im = v[1], re = v[2];
        if(im == re)
         this.data.fill(im);
        else
         for(var i = 0; i < this.data.length; i++)
          this.data[i] = i % 2 == 0 ? im : re;
        break;
       default: this.data.fill(v); break;
     }
    };
   Ml_Bigarray.prototype.compare =
    function(b, total){
     if(this.layout != b.layout || this.kind != b.kind){
      var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
      return k2 - k1;
     }
     if(this.dims.length != b.dims.length)
      return b.dims.length - this.dims.length;
     for(var i = 0; i < this.dims.length; i++)
      if(this.dims[i] != b.dims[i]) return this.dims[i] < b.dims[i] ? - 1 : 1;
     switch(this.kind){
       case 0:
       case 1:
       case 10:
       case 11:
        var x, y;
        for(var i = 0; i < this.data.length; i++){
         x = this.data[i];
         y = b.data[i];
         if(x < y) return - 1;
         if(x > y) return 1;
         if(x != y){
          if(! total) return NaN;
          if(x == x) return 1;
          if(y == y) return - 1;
         }
        }
        break;
       case 7:
        for(var i = 0; i < this.data.length; i += 2){
         if(this.data[i + 1] < b.data[i + 1]) return - 1;
         if(this.data[i + 1] > b.data[i + 1]) return 1;
         if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
         if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
        }
        break;
       case 2:
       case 3:
       case 4:
       case 5:
       case 6:
       case 8:
       case 9:
       case 12:
        for(var i = 0; i < this.data.length; i++){
         if(this.data[i] < b.data[i]) return - 1;
         if(this.data[i] > b.data[i]) return 1;
        }
        break;
     }
     return 0;
    };
   function Ml_Bigarray_c_1_1(kind, layout, dims, buffer){
    this.kind = kind;
    this.layout = layout;
    this.dims = dims;
    this.data = buffer;
   }
   Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
   Ml_Bigarray_c_1_1.prototype.offset =
    function(arg){
     if(typeof arg !== "number")
      if(arg instanceof Array && arg.length == 1)
       arg = arg[0];
      else
       caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
     if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
     return arg;
    };
   Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs];};
   Ml_Bigarray_c_1_1.prototype.set =
    function(ofs, v){this.data[ofs] = v; return 0;};
   Ml_Bigarray_c_1_1.prototype.fill =
    function(v){this.data.fill(v); return 0;};
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element != data.length)
     caml_invalid_argument("length doesn't match dims");
    if(layout == 0 && dims.length == 1 && size_per_element == 1)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name == "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim == 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi != 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function caml_hash_mix_float(h, v0){
    return caml_hash_mix_int64(h, caml_int64_bits_of_float(v0));
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= ba.data.length; i += 4){
        w =
         ba.data[i + 0] | ba.data[i + 1] << 8 | ba.data[i + 2] << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= ba.data.length; i += 2){
        w = ba.data[i + 0] | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) != 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large");
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {"_j":
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       "_i": {deserialize: caml_int32_unmarshal, fixed_length: 4},
       "_n": {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       "_bigarray":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       "_bigarr02":
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && x != x) return swap;
     if(+ x != + x) return + x;
     if((x | 0) != 0) return x | 0;
    }
    return swap;
   }
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag == 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a == "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a && a.caml_custom)
     return 1255;
    else if(a && a.compare)
     return 1256;
    else if(typeof a == "function")
     return 1247;
    else if(typeof a == "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a == b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a == 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b == 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a == 1000){
        if(tag_b == 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b == 1000){
        if(tag_a == 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]); if(x != 0) return x | 0; break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b);
          if(x != 0) return x | 0;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp != caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(x != x) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x != 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a != b){
          if(! total) return NaN;
          if(a == a) return 1;
          if(b == b) return - 1;
         }
         break;
        case 1251:
         if(a !== b){if(! total) return NaN; return 1;} break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 246:
        case 254:
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length != b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length == 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_convert_raw_backtrace(){return [0];}
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) == 0);}
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
      if(c == 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l == s.l ? 0 : 2;
      }
     else{
      if(s.t != 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_float_of_string(s){
    var res;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(s.length > 0 && res === res) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(s.length > 0 && res === res || /^[+-]?nan$/i.test(s)) return res;
    var m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = parseInt(m[1] + m[2] + m3, 16),
      exponent = (m[5] | 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Infinity;
    if(/^-inf(inity)?$/i.test(s)) return - Infinity;
    caml_failwith("float_of_string");
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
       case "d":
       case "i":
        f.signedconv = true;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle != "-")) len++;
    if(f.alternate){if(f.base == 8) len += 1; if(f.base == 16) len += 2;}
    var buffer = "";
    if(f.justify == "+" && f.filler == " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle != "-") buffer += f.signstyle;
    if(f.alternate && f.base == 8) buffer += "0";
    if(f.alternate && f.base == 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify == "+" && f.filler == "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify == "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += new Array(e + 1).join("0");
       if(dp > 0) x = x + "." + new Array(dp + 1).join("0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1; x = - x;}
    if(isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! isFinite(x)){
     s = "inf";
     f.filler = " ";
    }
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) == "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) == "0") i--;
         if(s.charAt(i) == ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) == "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) == "0") i--;
          if(s.charAt(i) == ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) == "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    return caml_utf16_of_utf8(s);
   }
   function fs_node_supported(){
    return typeof globalThis.process !== "undefined"
           && typeof globalThis.process.versions !== "undefined"
           && typeof globalThis.process.versions.node !== "undefined";
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.substring(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = Boolean(device && device.charAt(1) !== ":");
     if(Boolean(result[2] || isUnc)){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.substring(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split("/"),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        if(ncomp.length > 1) ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_utf8_of_utf16(s){
    for(var b = "", t = b, c, d, i = 0, l = s.length; i < l; i++){
     c = s.charCodeAt(i);
     if(c < 0x80){
      for(var j = i + 1; j < l && (c = s.charCodeAt(j)) < 0x80; j++) ;
      if(j - i > 512){
       t.substr(0, 1);
       b += t;
       t = "";
       b += s.slice(i, j);
      }
      else
       t += s.slice(i, j);
      if(j == l) break;
      i = j;
     }
     if(c < 0x800){
      t += String.fromCharCode(0xc0 | c >> 6);
      t += String.fromCharCode(0x80 | c & 0x3f);
     }
     else if(c < 0xd800 || c >= 0xdfff)
      t +=
       String.fromCharCode
        (0xe0 | c >> 12, 0x80 | c >> 6 & 0x3f, 0x80 | c & 0x3f);
     else if
      (c >= 0xdbff || i + 1 == l || (d = s.charCodeAt(i + 1)) < 0xdc00
       || d > 0xdfff)
      t += "\xef\xbf\xbd";
     else{
      i++;
      c = (c << 10) + d - 0x35fdc00;
      t +=
       String.fromCharCode
        (0xf0 | c >> 18,
         0x80 | c >> 12 & 0x3f,
         0x80 | c >> 6 & 0x3f,
         0x80 | c & 0x3f);
     }
     if(t.length > 1024){t.substr(0, 1); b += t; t = "";}
    }
    return b + t;
   }
   function caml_string_of_jsstring(s){
    return jsoo_is_ascii(s)
            ? caml_string_of_jsbytes(s)
            : caml_string_of_jsbytes(caml_utf8_of_utf16(s));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_string(caml_global_data.Sys_error, msg);
   }
   function caml_raise_no_such_file(name){
    caml_raise_sys_error(name + ": No such file or directory");
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t != 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_ml_bytes_length(s){return s.l;}
   function MlFile(){}
   function MlFakeFile(content){this.data = content;}
   MlFakeFile.prototype = new MlFile();
   MlFakeFile.prototype.constructor = MlFakeFile;
   MlFakeFile.prototype.truncate =
    function(len){
     var old = this.data;
     this.data = caml_create_bytes(len | 0);
     caml_blit_bytes(old, 0, this.data, 0, len);
    };
   MlFakeFile.prototype.length =
    function(){return caml_ml_bytes_length(this.data);};
   MlFakeFile.prototype.write =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen){
      var new_str = caml_create_bytes(offset + len), old_data = this.data;
      this.data = new_str;
      caml_blit_bytes(old_data, 0, this.data, 0, clen);
     }
     caml_blit_bytes(caml_bytes_of_array(buf), pos, this.data, offset, len);
     return 0;
    };
   MlFakeFile.prototype.read =
    function(offset, buf, pos, len){
     var clen = this.length();
     if(offset + len >= clen) len = clen - offset;
     if(len){
      var data = caml_create_bytes(len | 0);
      caml_blit_bytes(this.data, offset, data, 0, len);
      buf.set(caml_uint8_array_of_bytes(data), pos);
     }
     return len;
    };
   function MlFakeFd(name, file, flags){
    this.file = file;
    this.name = name;
    this.flags = flags;
   }
   MlFakeFd.prototype.err_closed =
    function(){
     caml_raise_sys_error(this.name + ": file descriptor already closed");
    };
   MlFakeFd.prototype.length =
    function(){if(this.file) return this.file.length(); this.err_closed();};
   MlFakeFd.prototype.write =
    function(offset, buf, pos, len){
     if(this.file) return this.file.write(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.read =
    function(offset, buf, pos, len){
     if(this.file) return this.file.read(offset, buf, pos, len);
     this.err_closed();
    };
   MlFakeFd.prototype.close = function(){this.file = undefined;};
   function MlFakeDevice(root, f){
    this.content = {};
    this.root = root;
    this.lookupFun = f;
   }
   MlFakeDevice.prototype.nm = function(name){return this.root + name;};
   MlFakeDevice.prototype.create_dir_if_needed =
    function(name){
     var comp = name.split("/"), res = "";
     for(var i = 0; i < comp.length - 1; i++){
      res += comp[i] + "/";
      if(this.content[res]) continue;
      this.content[res] = Symbol("directory");
     }
    };
   MlFakeDevice.prototype.slash =
    function(name){return /\/$/.test(name) ? name : name + "/";};
   MlFakeDevice.prototype.lookup =
    function(name){
     if(! this.content[name] && this.lookupFun){
      var
       res =
         this.lookupFun
          (caml_string_of_jsbytes(this.root), caml_string_of_jsbytes(name));
      if(res !== 0){
       this.create_dir_if_needed(name);
       this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
      }
     }
    };
   MlFakeDevice.prototype.exists =
    function(name){
     if(name == "") return 1;
     var name_slash = this.slash(name);
     if(this.content[name_slash]) return 1;
     this.lookup(name);
     return this.content[name] ? 1 : 0;
    };
   MlFakeDevice.prototype.isFile =
    function(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;};
   MlFakeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     var unix_error = raise_unix && caml_named_value("Unix.Unix_error");
     if(this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("EEXIST", "mkdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": File exists");
     var parent = /^(.*)\/[^/]+/.exec(name);
     parent = parent && parent[1] || "";
     if(! this.exists(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": No such file or directory");
     if(! this.is_dir(parent))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "mkdir", this.nm(parent)));
      else
       caml_raise_sys_error(parent + ": Not a directory");
     this.create_dir_if_needed(this.slash(name));
    };
   MlFakeDevice.prototype.rmdir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      name_slash = name == "" ? "" : this.slash(name),
      r = new RegExp("^" + name_slash + "([^/]+)");
     if(! this.exists(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOENT", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name))
      if(unix_error)
       caml_raise_with_args
        (unix_error, make_unix_err_args("ENOTDIR", "rmdir", this.nm(name)));
      else
       caml_raise_sys_error(name + ": Not a directory");
     for(var n in this.content)
      if(n.match(r))
       if(unix_error)
        caml_raise_with_args
         (unix_error, make_unix_err_args("ENOTEMPTY", "rmdir", this.nm(name)));
       else
        caml_raise_sys_error(this.nm(name) + ": Directory not empty");
     delete this.content[name_slash];
    };
   MlFakeDevice.prototype.readdir =
    function(name){
     var name_slash = name == "" ? "" : this.slash(name);
     if(! this.exists(name))
      caml_raise_sys_error(name + ": No such file or directory");
     if(! this.is_dir(name)) caml_raise_sys_error(name + ": Not a directory");
     var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
     for(var n in this.content){
      var m = n.match(r);
      if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
     }
     return a;
    };
   MlFakeDevice.prototype.opendir =
    function(name, raise_unix){
     var
      unix_error = raise_unix && caml_named_value("Unix.Unix_error"),
      a = this.readdir(name),
      c = false,
      i = 0;
     return {readSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              if(i == a.length) return null;
              var entry = a[i];
              i++;
              return {name: entry};
             },
             closeSync:
             function(){
              if(c)
               if(unix_error)
                caml_raise_with_args
                 (unix_error,
                  make_unix_err_args("EBADF", "closedir", this.nm(name)));
               else
                caml_raise_sys_error(name + ": closedir failed");
              c = true;
              a = [];
             }};
    };
   MlFakeDevice.prototype.is_dir =
    function(name){
     if(name == "") return true;
     var name_slash = this.slash(name);
     return this.content[name_slash] ? 1 : 0;
    };
   MlFakeDevice.prototype.unlink =
    function(name){
     var ok = this.content[name] ? true : false;
     delete this.content[name];
     return ok;
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.open =
    function(name, f){
     var file;
     if(f.rdonly && f.wronly)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_rdonly and Open_wronly are not compatible");
     if(f.text && f.binary)
      caml_raise_sys_error
       (this.nm(name)
        + " : flags Open_text and Open_binary are not compatible");
     this.lookup(name);
     if(this.content[name]){
      if(this.is_dir(name))
       caml_raise_sys_error(this.nm(name) + " : is a directory");
      if(f.create && f.excl)
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      file = this.content[name];
      if(f.truncate) file.truncate();
     }
     else if(f.create){
      this.create_dir_if_needed(name);
      this.content[name] = new MlFakeFile(caml_create_bytes(0));
      file = this.content[name];
     }
     else
      caml_raise_no_such_file(this.nm(name));
     return new MlFakeFd(this.nm(name), file, f);
    };
   MlFakeDevice.prototype.register =
    function(name, content){
     var file;
     if(this.content[name])
      caml_raise_sys_error(this.nm(name) + " : file already exists");
     if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
     if(caml_is_ml_string(content))
      file = new MlFakeFile(caml_bytes_of_string(content));
     else if(content instanceof Array)
      file = new MlFakeFile(caml_bytes_of_array(content));
     else if(typeof content === "string")
      file = new MlFakeFile(caml_bytes_of_jsbytes(content));
     else if(content.toString){
      var
       bytes =
         caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
      file = new MlFakeFile(bytes);
     }
     if(file){
      this.create_dir_if_needed(name);
      this.content[name] = file;
     }
     else
      caml_raise_sys_error
       (this.nm(name) + " : registering file with invalid content type");
    };
   MlFakeDevice.prototype.constructor = MlFakeDevice;
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Uint8Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function MlNodeFd(fd, flags){
    this.fs = require("fs");
    this.fd = fd;
    this.flags = flags;
   }
   MlNodeFd.prototype = new MlFile();
   MlNodeFd.prototype.constructor = MlNodeFd;
   MlNodeFd.prototype.truncate =
    function(len){
     try{this.fs.ftruncateSync(this.fd, len | 0);}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.length =
    function(){
     try{return this.fs.fstatSync(this.fd).size;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.write =
    function(offset, buf, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       this.fs.writeSync(this.fd, buf, buf_offset, len);
      else
       this.fs.writeSync(this.fd, buf, buf_offset, len, offset);
     }
     catch(err){caml_raise_sys_error(err.toString());}
     return 0;
    };
   MlNodeFd.prototype.read =
    function(offset, a, buf_offset, len){
     try{
      if(this.flags.isCharacterDevice)
       var read = this.fs.readSync(this.fd, a, buf_offset, len);
      else
       var read = this.fs.readSync(this.fd, a, buf_offset, len, offset);
      return read;
     }
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeFd.prototype.close =
    function(){
     try{this.fs.closeSync(this.fd); return 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   function MlNodeDevice(root){this.fs = require("fs"); this.root = root;}
   MlNodeDevice.prototype.nm = function(name){return this.root + name;};
   MlNodeDevice.prototype.exists =
    function(name){
     try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
     catch(err){return 0;}
    };
   MlNodeDevice.prototype.isFile =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.mkdir =
    function(name, mode, raise_unix){
     try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rmdir =
    function(name, raise_unix){
     try{this.fs.rmdirSync(this.nm(name)); return 0;}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readdir =
    function(name, raise_unix){
     try{return this.fs.readdirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.is_dir =
    function(name){
     try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
     catch(err){caml_raise_sys_error(err.toString());}
    };
   MlNodeDevice.prototype.unlink =
    function(name, raise_unix){
     try{
      var b = this.fs.existsSync(this.nm(name)) ? 1 : 0;
      this.fs.unlinkSync(this.nm(name));
      return b;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.open =
    function(name, f, raise_unix){
     var consts = require("constants"), res = 0;
     for(var key in f)
      switch(key){
        case "rdonly":
         res |= consts.O_RDONLY; break;
        case "wronly":
         res |= consts.O_WRONLY; break;
        case "append":
         res |= consts.O_WRONLY | consts.O_APPEND; break;
        case "create":
         res |= consts.O_CREAT; break;
        case "truncate":
         res |= consts.O_TRUNC; break;
        case "excl":
         res |= consts.O_EXCL; break;
        case "binary":
         res |= consts.O_BINARY; break;
        case "text":
         res |= consts.O_TEXT; break;
        case "nonblock":
         res |= consts.O_NONBLOCK; break;
      }
     try{
      var
       fd = this.fs.openSync(this.nm(name), res),
       isCharacterDevice =
         this.fs.lstatSync(this.nm(name)).isCharacterDevice();
      f.isCharacterDevice = isCharacterDevice;
      return new MlNodeFd(fd, f);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.rename =
    function(o, n, raise_unix){
     try{this.fs.renameSync(this.nm(o), this.nm(n));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.stat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.statSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.lstat =
    function(name, raise_unix){
     try{
      var js_stats = this.fs.lstatSync(this.nm(name));
      return this.stats_from_js(js_stats);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.symlink =
    function(to_dir, target, path, raise_unix){
     try{
      this.fs.symlinkSync
       (this.nm(target), this.nm(path), to_dir ? "dir" : "file");
      return 0;
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.readlink =
    function(name, raise_unix){
     try{
      var link = this.fs.readlinkSync(this.nm(name), "utf8");
      return caml_string_of_jsstring(link);
     }
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.opendir =
    function(name, raise_unix){
     try{return this.fs.opendirSync(this.nm(name));}
     catch(err){this.raise_nodejs_error(err, raise_unix);}
    };
   MlNodeDevice.prototype.raise_nodejs_error =
    function(err, raise_unix){
     var unix_error = caml_named_value("Unix.Unix_error");
     if(raise_unix && unix_error){
      var
       args = make_unix_err_args(err.code, err.syscall, err.path, err.errno);
      caml_raise_with_args(unix_error, args);
     }
     else
      caml_raise_sys_error(err.toString());
    };
   MlNodeDevice.prototype.stats_from_js =
    function(js_stats){
     var file_kind;
     if(js_stats.isFile())
      file_kind = 0;
     else if(js_stats.isDirectory())
      file_kind = 1;
     else if(js_stats.isCharacterDevice())
      file_kind = 2;
     else if(js_stats.isBlockDevice())
      file_kind = 3;
     else if(js_stats.isSymbolicLink())
      file_kind = 4;
     else if(js_stats.isFIFO())
      file_kind = 5;
     else if(js_stats.isSocket()) file_kind = 6;
     return [0,
             js_stats.dev,
             js_stats.ino,
             file_kind,
             js_stats.mode,
             js_stats.nlink,
             js_stats.uid,
             js_stats.gid,
             js_stats.rdev,
             js_stats.size,
             js_stats.atimeMs,
             js_stats.mtimeMs,
             js_stats.ctimeMs];
    };
   MlNodeDevice.prototype.constructor = MlNodeDevice;
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) == 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root && root.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.substring(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsbytes(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.caml_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.caml_fs_tmp = [];
    return 0;
   }
   function caml_get_current_callstack(){return [0];}
   function caml_get_exception_raw_backtrace(){return [0];}
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      default: caml_convert_string_to_bytes(s);
      case 0:
       return s.c;
      case 4:
       return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v && v.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(v instanceof Array && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3FFFFFFF;
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! isFinite(x)){
     if(isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var sign = x == 0 && 1 / x == - Infinity ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x == 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.substr(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_parse_sign_and_base(s){
    var i = 0, len = caml_ml_string_length(s), base = 10, sign = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) == 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        base = 16; i += 2; break;
       case 111:
       case 79:
        base = 8; i += 2; break;
       case 98:
       case 66:
        base = 2; i += 2; break;
       case 117:
       case 85:
        i += 2; break;
     }
    return [i, sign, base];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c == 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i != len) caml_failwith("int_of_string");
    res = sign * res;
    if(base == 10 && (res | 0) != res) caml_failwith("int_of_string");
    return res | 0;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c;
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F;
   }
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   var caml_callback = caml_call_gen;
   function caml_js_wrap_callback_strict(arity, f){
    return function(){
     var
      n = arguments.length,
      args = new Array(arity),
      len = Math.min(arguments.length, arity);
     for(var i = 0; i < len; i++) args[i] = arguments[i];
     return caml_callback(f, args);};
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var
     c,
     state = start_state,
     buffer = caml_uint8_array_of_bytes(lexbuf[lex_buffer]);
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] == 0) return - state - 1; else c = 256;
     else{c = buffer[lexbuf[lex_curr_pos]]; lexbuf[lex_curr_pos]++;}
     if(tbl.lex_check[base + c] == state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] == - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c == 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   function caml_make_vect(len, init){
    if(len < 0) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xD76AA478);
         d = ff(d, a, b, c, buffer[1], 12, 0xE8C7B756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070DB);
         b = ff(b, c, d, a, buffer[3], 22, 0xC1BDCEEE);
         a = ff(a, b, c, d, buffer[4], 7, 0xF57C0FAF);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787C62A);
         c = ff(c, d, a, b, buffer[6], 17, 0xA8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xFD469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098D8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8B44F7AF);
         c = ff(c, d, a, b, buffer[10], 17, 0xFFFF5BB1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895CD7BE);
         a = ff(a, b, c, d, buffer[12], 7, 0x6B901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xFD987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xA679438E);
         b = ff(b, c, d, a, buffer[15], 22, 0x49B40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xF61E2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xC040B340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265E5A51);
         b = gg(b, c, d, a, buffer[0], 20, 0xE9B6C7AA);
         a = gg(a, b, c, d, buffer[5], 5, 0xD62F105D);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xD8A1E681);
         b = gg(b, c, d, a, buffer[4], 20, 0xE7D3FBC8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21E1CDE6);
         d = gg(d, a, b, c, buffer[14], 9, 0xC33707D6);
         c = gg(c, d, a, b, buffer[3], 14, 0xF4D50D87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455A14ED);
         a = gg(a, b, c, d, buffer[13], 5, 0xA9E3E905);
         d = gg(d, a, b, c, buffer[2], 9, 0xFCEFA3F8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676F02D9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8D2A4C8A);
         a = hh(a, b, c, d, buffer[5], 4, 0xFFFA3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771F681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6D9D6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xFDE5380C);
         a = hh(a, b, c, d, buffer[1], 4, 0xA4BEEA44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4BDECFA9);
         c = hh(c, d, a, b, buffer[7], 16, 0xF6BB4B60);
         b = hh(b, c, d, a, buffer[10], 23, 0xBEBFBC70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289B7EC6);
         d = hh(d, a, b, c, buffer[0], 11, 0xEAA127FA);
         c = hh(c, d, a, b, buffer[3], 16, 0xD4EF3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881D05);
         a = hh(a, b, c, d, buffer[9], 4, 0xD9D4D039);
         d = hh(d, a, b, c, buffer[12], 11, 0xE6DB99E5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1FA27CF8);
         b = hh(b, c, d, a, buffer[2], 23, 0xC4AC5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xF4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432AFF97);
         c = ii(c, d, a, b, buffer[14], 15, 0xAB9423A7);
         b = ii(b, c, d, a, buffer[5], 21, 0xFC93A039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655B59C3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8F0CCC92);
         c = ii(c, d, a, b, buffer[10], 15, 0xFFEFF47D);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845DD1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6FA87E4F);
         d = ii(d, a, b, c, buffer[15], 10, 0xFE2CE6E0);
         c = ii(c, d, a, b, buffer[6], 15, 0xA3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4E0811A1);
         a = ii(a, b, c, d, buffer[4], 6, 0xF7537E82);
         d = ii(d, a, b, c, buffer[11], 10, 0xBD3AF235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2AD7D2BB);
         b = ii(b, c, d, a, buffer[9], 21, 0xEB86D391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1FFFFFFF;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xFF;
    return t;
   }
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_array(caml_MD5Final(ctx));
   }
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   var caml_sys_fds = new Array(3);
   function caml_sys_close(fd){
    var file = caml_sys_fds[fd];
    if(file) file.close();
    delete caml_sys_fds[fd];
    return 0;
   }
   var caml_ml_channels = new Array();
   function caml_ml_flush(chanid){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr == 0) return 0;
    if(chan.output)
     chan.output(caml_subarray_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     chan.file.write(chan.offset, chan.buffer, 0, chan.buffer_curr);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channels[chanid];
    if(chan.opened){
     chan.opened = false;
     caml_sys_close(chan.fd);
     chan.fd = - 1;
     chan.buffer = new Uint8Array(0);
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_debug_info_status(){return 0;}
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length == 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     var
      nread =
        chan.file.read
         (chan.offset,
          chan.buffer,
          chan.buffer_max,
          chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channels[chanid],
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.name)
     try{
      var fs = require("fs"), fd2 = fs.openSync(flags.name, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   function MlFakeFd_out(fd, flags){
    MlFakeFile.call(this, caml_create_bytes(0));
    this.log = function(s){return 0;};
    if(fd == 1 && typeof console.log == "function")
     this.log = console.log;
    else if(fd == 2 && typeof console.error == "function")
     this.log = console.error;
    else if(typeof console.log == "function") this.log = console.log;
    this.flags = flags;
   }
   MlFakeFd_out.prototype.length = function(){return 0;};
   MlFakeFd_out.prototype.write =
    function(offset, buf, pos, len){
     if(this.log){
      if
       (len > 0 && pos >= 0 && pos + len <= buf.length
        && buf[pos + len - 1] == 10)
       len--;
      var src = caml_create_bytes(len);
      caml_blit_bytes(caml_bytes_of_array(buf), pos, src, 0, len);
      this.log(src.toUtf16());
      return 0;
     }
     caml_raise_sys_error(this.fd + ": file descriptor already closed");
    };
   MlFakeFd_out.prototype.read =
    function(offset, buf, pos, len){
     caml_raise_sys_error(this.fd + ": file descriptor is write only");
    };
   MlFakeFd_out.prototype.close = function(){this.log = undefined;};
   function caml_sys_open_internal(file, idx){
    if(idx == undefined) idx = caml_sys_fds.length;
    caml_sys_fds[idx] = file;
    return idx | 0;
   }
   function caml_sys_open(name, flags, _perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    if(f.rdonly && f.wronly)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_rdonly and Open_wronly are not compatible");
    if(f.text && f.binary)
     caml_raise_sys_error
      (caml_jsbytes_of_string(name)
       + " : flags Open_text and Open_binary are not compatible");
    var root = resolve_fs_device(name), file = root.device.open(root.rest, f);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      function file(fd, flags){
       return fs_node_supported()
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file(1, {buffered: 2, wronly: 1, isCharacterDevice: true}), 1);
      caml_sys_open_internal
       (file(2, {buffered: 2, wronly: 1, isCharacterDevice: true}), 2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.wronly) caml_raise_sys_error("fd " + fd + " is writeonly");
    var
     refill = null,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(65536),
        refill: refill};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_open_descriptor_out(fd){
    var file = caml_sys_fds[fd];
    if(file.flags.rdonly) caml_raise_sys_error("fd " + fd + " is readonly");
    var
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.flags.append ? file.length() : 0,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(65536),
        buffered: buffered};
    caml_ml_channels[channel.fd] = channel;
    return channel.fd;
   }
   function caml_ml_out_channels_list(){
    var l = 0;
    for(var c = 0; c < caml_ml_channels.length; c++)
     if
      (caml_ml_channels[c] && caml_ml_channels[c].opened
       && caml_ml_channels[c].out)
      l = [0, caml_ml_channels[c].fd, l];
    return l;
   }
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channels[chanid];
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channels[chanid];
    chan.name = name;
    return 0;
   }
   function caml_mod(x, y){if(y == 0) caml_raise_zero_divide(); return x % y;}
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) != 0);
   }
   function caml_obj_make_forward(b, v){b[0] = 250; b[1] = v; return 0;}
   function caml_obj_tag(x){
    if(x instanceof Array && x[0] == x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x == "function")
     return 247;
    else if(x && x.caml_custom) return 255; else return 1000;
   }
   function caml_build_symbols(symb){
    var r = {};
    if(symb)
     for(var i = 1; i < symb.length; i++)
      r[caml_jsstring_of_string(symb[i][1])] = symb[i][2];
    return r;
   }
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(globalThis.toplevelReloc)
      n = caml_callback(globalThis.toplevelReloc, [name]);
     else if(caml_global_data.symbols){
      if(! caml_global_data.symidx)
       caml_global_data.symidx = caml_build_symbols(caml_global_data.symbols);
      var nid = caml_global_data.symidx[name];
      if(nid >= 0)
       n = nid;
      else
       caml_failwith("caml_register_global: cannot locate " + name);
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0;}
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   function caml_trampoline(res){
    var c = 1;
    while(res && res.joo_tramp){
     res = res.joo_tramp.apply(null, res.joo_args);
     c++;
    }
    return res;
   }
   function caml_trampoline_return(f, args){return {joo_tramp: f, joo_args: args};
   }
   function caml_wrap_exception(e){
    {
     if(e instanceof Array) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] == 0){
     r += exn[1][1];
     if
      (exn.length == 3 && exn[2][0] == 0 && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v == "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v == "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] == 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(err instanceof Array && (err[0] == 0 || err[0] == 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process && process.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   var
    cst$1 = "",
    cst$13 = " ",
    cst$12 = '"',
    cst_Li = "%Li",
    cst_a = "%a",
    cst_d = "%d",
    cst_i = "%i",
    cst_li = "%li",
    cst_ni = "%ni",
    cst_s = "%s",
    cst_s_Items_s_Images_Primary_w =
      "%s/Items/%s/Images/Primary?width=500&format=Jpg",
    cst_u = "%u",
    cst$8 = "'",
    cst_Program_not_linked_with_g_ =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst$10 = ",",
    cst$4 = ", ",
    cst_characters = ", characters ",
    cst_Infinity = "-Infinity",
    cst = ".",
    cst_0 = ".0",
    cst_Images_Primary_width_500_f = "/Images/Primary?width=500&format=Jpg",
    cst_Items = "/Items/",
    cst_5rem = "5rem",
    cst$11 = ":",
    cst$5 = ": ",
    cst$7 = "<",
    cst_hov = "<hov>",
    cst_hv2 = "<hv2>",
    cst$6 = ">",
    cst_1_2 = "@;<1 -2>",
    cst_1_0 = "@;<1 0>",
    cst$3 = "@[",
    cst$2 = "@{",
    cst_AccessToken = "AccessToken",
    cst_AggregateFolder = "AggregateFolder",
    cst_AlbumId = "AlbumId",
    cst_Assert_failure = "Assert_failure",
    cst_Audio = "Audio",
    cst_AudioBook = "AudioBook",
    cst_BasePluginFolder = "BasePluginFolder",
    cst_Book = "Book",
    cst_BoxSet = "BoxSet",
    cst_Channel = "Channel",
    cst_ChannelFolderItem = "ChannelFolderItem",
    cst_CollectionFolder = "CollectionFolder",
    cst_CollectionType = "CollectionType",
    cst_Cover = "Cover",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Episode = "Episode",
    cst_Failure = "Failure",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Folder = "Folder",
    cst_Form_submitted = "Form submitted:",
    cst_Genre = "Genre",
    cst_Id = "Id",
    cst_ImageBlurHashes = "ImageBlurHashes",
    cst_Infinity$0 = "Infinity",
    cst_Invalid_argument = "Invalid_argument",
    cst_ItemId = "ItemId",
    cst_LiveTvChannel = "LiveTvChannel",
    cst_LiveTvProgram = "LiveTvProgram",
    cst_Locations = "Locations",
    cst_Lwd_seq_rank_node_is_marke = "Lwd_seq.rank: node is marked",
    cst_ManualPlaylistsFolder = "ManualPlaylistsFolder",
    cst_Match_failure = "Match_failure",
    cst_Movie = "Movie",
    cst_MusicAlbum = "MusicAlbum",
    cst_MusicArtist = "MusicArtist",
    cst_MusicGenre = "MusicGenre",
    cst_MusicVideo = "MusicVideo",
    cst_NaN = "NaN",
    cst_Name = "Name",
    cst_Not_found = "Not_found",
    cst_Nothing_playing = "Nothing playing",
    cst_Out_of_memory = "Out_of_memory",
    cst_ParentId = "ParentId",
    cst_Path = "Path",
    cst_Person = "Person",
    cst_Photo = "Photo",
    cst_PhotoAlbum = "PhotoAlbum",
    cst_Playlist = "Playlist",
    cst_PlaylistsFolder = "PlaylistsFolder",
    cst_Primary = "Primary",
    cst_Program = "Program",
    cst_Pw = "Pw",
    cst_Recording = "Recording",
    cst_Season = "Season",
    cst_Series = "Series",
    cst_ServerId = "ServerId",
    cst_ServerName = "ServerName",
    cst_Set_bal = "Set.bal",
    cst_SortName = "SortName",
    cst_Stack_overflow = "Stack_overflow",
    cst_Studio = "Studio",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Title = "Title",
    cst_Trailer = "Trailer",
    cst_TvChannel = "TvChannel",
    cst_TvProgram = "TvProgram",
    cst_Type = "Type",
    cst_Undefined_recursive_module = "Undefined_recursive_module",
    cst_User = "User",
    cst_UserRootFolder = "UserRootFolder",
    cst_UserView = "UserView",
    cst_Username = "Username",
    cst_Video = "Video",
    cst_Year = "Year",
    cst$9 = '\\"',
    cst$0 = "\\\\",
    cst_b = "\\b",
    cst_f = "\\f",
    cst_n = "\\n",
    cst_r = "\\r",
    cst_t = "\\t",
    cst_u00 = "\\u00",
    cst_append = "append",
    cst_body = "body",
    cst_box = "box",
    cst_buffer_ml = "buffer.ml",
    cst_button = "button",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_checked = "checked",
    cst_classList = "classList",
    cst_click = "click",
    cst_console = "console",
    cst_date_added = "date_added",
    cst_documentElement = "documentElement",
    cst_duration = "duration",
    cst_em = "em",
    cst_empty_input = "empty input",
    cst_error = "error",
    cst_false = "false",
    cst_fut = "fut",
    cst_grid_column_1_1 = "grid-column:1/-1",
    cst_height = "height: ",
    cst_id = "id",
    cst_input = "input",
    cst_item = "item",
    cst_item_Id = "item.Id",
    cst_items_by_date_added = "items_by_date_added",
    cst_junk_after_end_of_JSON_val = "junk after end of JSON value: ",
    cst_length = "length",
    cst_lib_db_stores_ml = "lib/db/stores.ml",
    cst_lwd_to_remove = "lwd-to-remove",
    cst_name = "name",
    cst_null = "null",
    cst_playbackRate = "playbackRate",
    cst_pouet = "pouet",
    cst_px = "px",
    cst_rem = "rem",
    cst_remove = "remove",
    cst_server_id = "server_id",
    cst_sort_name = "sort_name",
    cst_sorts = "sorts",
    cst_sorts_views = "sorts.views",
    cst_src = "src",
    cst_style = "style",
    cst_submit = "submit",
    cst_target = "target",
    cst_text = "text",
    cst_track_png = "track.png",
    cst_true = "true",
    cst_tuples_not_supported_in_yo =
      "tuples not supported in yojson basic mode",
    cst_type = "type",
    cst_unexpected_character = "unexpected character '",
    cst_value = "value",
    cst_variants_not_supported_in_ =
      "variants not supported in yojson basic mode",
    cst_vendor_lwd_lib_brr_lwd_elw = "vendor/lwd/lib/brr-lwd/elwd.ml",
    cst_vendor_lwd_lib_lwd_lwd_ml = "vendor/lwd/lib/lwd/lwd.ml",
    cst_vendor_lwd_lib_lwd_lwd_seq = "vendor/lwd/lib/lwd/lwd_seq.pp.ml",
    cst_vendor_lwd_lib_lwd_lwd_tab = "vendor/lwd/lib/lwd/lwd_table.ml",
    cst_views = "views",
    cst_window = "window";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var undef = undefined;
   caml_fs_init();
   var
    Out_of_memory = [248, cst_Out_of_memory, -1],
    Sys_error = [248, cst_Sys_error, -2],
    Failure = [248, cst_Failure, -3],
    Invalid_argument = [248, cst_Invalid_argument, -4],
    End_of_file = [248, cst_End_of_file, -5],
    Division_by_zero = [248, cst_Division_by_zero, -6],
    Not_found = [248, cst_Not_found, -7],
    Match_failure = [248, cst_Match_failure, -8],
    Stack_overflow = [248, cst_Stack_overflow, -9],
    Sys_blocked_io = [248, cst_Sys_blocked_io, -10],
    Assert_failure = [248, cst_Assert_failure, -11],
    Undefined_recursive_module = [248, cst_Undefined_recursive_module, -12],
    dummy_pos = [0, cst$1, 0, 0, -1],
    zero_pos = [0, cst$1, 1, 0, 0],
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, cst$5, [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    ocaml_lex_tables =
      [0,
       "\0\0\xe5\xff\x11\0\xe8\xff\x03\0\xea\xff~\0\0\0q\0\0\0\x01\0\x01\0\x02\0{\0\xf3\xff\xf4\xff\xf5\xff\xf6\xff\xf7\xff\xf8\xff\xf9\xff\xfa\xff\xfb\xff\xfc\xff\x01\0\x02\0\0\0\0\0\x02\0\xff\xff\0\0\0\0\x03\0\xfe\xff\x03\0\x01\0\x0b\0\xfd\xff\xef\xff\x03\0\n\0\x0b\0\x05\0\xf2\xff\x14\0\x13\x000\0L\0C\0?\0K\0T\0\xf1\xffU\0S\0O\0U\0K\0G\0S\0T\0]\0\xf0\xff_\0]\0Y\0_\0U\0Q\0\x01\0 \0\x9b\0\xba\0\xd1\0\xdb\0\xe5\0\xf0\0\xfa\0\x12\x01B\x01\xec\xff\xeb\xff^\x01u\x01\x9b\x01\xb2\x015\0\xe7\xffX\x01\xfc\xff\xfd\xff\xfe\xff\x0e\0\xff\xff",
       "\xff\xff\xff\xff\x1a\0\xff\xff\x16\0\xff\xff\x1a\0\x11\0\x11\0\x1a\0\x1a\0\x1a\0\x1a\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1a\0\x1a\0\x1a\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x12\0\xff\xff\x12\0\xff\xff\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x19\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff",
       "\x01\0\0\0\xff\xff\0\0\xff\xff\0\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xffV\0\0\0Y\0\0\0\0\0\0\0\xff\xff\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x03\0\0\0\x04\0\x04\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x06\0\x04\0\0\0\0\0\0\0\0\0\x13\0\x12\0\0\0\n\0\x0f\0\r\0G\0\x02\0\x07\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\x0e\0W\0\x11\0]\0\x10\0\xff\xffV\0\0\0\0\0\0\0\0\0F\0\0\0\0\0\0\0\x0b\0;\0M\0\0\0M\0\t\0&\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0\0\0\x15\0\0\0\x14\0\0\0\0\0\0\0E\0\"\0\x1e\x002\0F\0\x19\0\x1d\0!\0\f\0<\0+\0\x1f\0$\0\x18\x005\x003\0&\0\x1b\0 \0\x1a\0\x1c\0#\0%\0,\0*\0-\0\x17\0.\0\x16\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff/\0G\0P\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\x07\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\x000\0F\x001\0+\0&\x004\x006\x007\x008\x009\0:\x004\0?\0=\0>\0(\0@\0A\0B\0C\0D\0>\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\0\0F\0\0\0\0\0\0\0N\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0)\0\0\0\0\0\0\0\0\0'\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0K\0\0\0K\0I\0\x05\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0I\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0O\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff[\0\0\0Q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0O\0\0\0\0\0\0\0O\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0O\0\0\0\\\0\0\0O\0\0\0O\0R\0\0\0\0\0\0\0\0\0\0\0\0\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0N\0S\0S\0S\0S\0S\0S\0T\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0T\0T\0T\0T\0T\0T\0\0\0\0\0\0\0S\0S\0S\0S\0S\0S\0\0\0\0\0\0\0\0\0\0\0\0\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0\0\0T\0T\0T\0T\0T\0T\0U\0U\0U\0U\0U\0U\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0U\0U\0U\0U\0U\0U\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0O\0O\0O\0O\0O\0O\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0Z\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\x04\0\0\0\xff\xff\xff\xff\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\\\0\0\0V\0\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\0\0\n\0F\0\xff\xffF\0\0\0E\0F\0F\0F\0F\0F\0F\0F\0F\0F\0F\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\t\0\x18\0\x19\0'\0\x07\0\0\0\x1c\0 \0\0\0\n\0*\0\x1e\0#\0\0\0\x0b\0\f\0\"\0\x1a\0\x1f\0\0\0\x1b\0\x18\0$\0(\0)\0,\0\0\0-\0\0\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0\x06\0.\0\b\0\x06\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0\r\0/\0\b\x000\x001\x002\x003\x005\x006\x007\x008\x009\0:\0;\0<\0=\0\r\0?\0@\0A\0B\0C\0D\0G\0G\0G\0G\0G\0G\0G\0G\0G\0G\0\xff\xff\b\0\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0H\0H\0H\0H\0H\0H\0H\0H\0H\0H\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0\xff\xffI\0H\0\0\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0K\0K\0K\0K\0K\0K\0K\0K\0K\0K\0H\0L\0L\0L\0L\0L\0L\0L\0L\0L\0L\0M\0M\0M\0M\0M\0M\0M\0M\0M\0M\0N\0V\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0O\0X\0\xff\xffO\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xffN\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\xff\xffN\0\xff\xffX\0\xff\xffN\0\xff\xffN\0N\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffR\0R\0R\0R\0R\0R\0R\0R\0R\0R\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0R\0R\0R\0R\0R\0R\0S\0S\0S\0S\0S\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffS\0S\0S\0S\0S\0S\0\xff\xff\xff\xff\xff\xffR\0R\0R\0R\0R\0R\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0T\0T\0T\0T\0\xff\xffS\0S\0S\0S\0S\0S\0T\0T\0T\0T\0T\0T\0U\0U\0U\0U\0U\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xffT\0T\0T\0T\0T\0T\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffU\0U\0U\0U\0U\0U\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffO\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffX\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst$1,
       cst$1,
       cst$1,
       cst$1,
       cst$1,
       cst$1],
    tp_loc = "lib/data_source/jellyfin_api.ml.user",
    tp_loc$0 = "lib/data_source/jellyfin_api.ml.Authenticate_by_name.params",
    tp_loc$1 = "lib/data_source/jellyfin_api.ml.Authenticate_by_name.response",
    tp_loc$2 = "lib/data_source/jellyfin_api.ml.Item.image_blur_hashes",
    tp_loc$3 = "lib/data_source/jellyfin_api.ml.Item.type_",
    tp_loc$4 = "lib/data_source/jellyfin_api.ml.Item.t",
    tp_loc$5 =
      "lib/data_source/jellyfin_api.ml.Virtual_folders.virtual_folder",
    tp_loc$6 = "lib/db/stores.ml.Orderred_items.t",
    path = [0, cst_id],
    name$5 = cst_items_by_date_added,
    tp_loc$7 = "lib/db/stores.ml.Items.sorts",
    tp_loc$8 = "lib/db/stores.ml.Items.t",
    path$1 = [0, "sorts.date_added"],
    path$2 = [0, cst_item_Id],
    name$6 = "items",
    path$5 = [0, cst_ItemId],
    name$7 = "virtual_folders",
    name$8 = cst_items_by_date_added,
    name$9 = "items_by_view_and_kind",
    name$10 = "items_by_id",
    name$11 = "items_by_type_and_name",
    initial_report = [0, 0, 0],
    strings =
      [0,
       [0, [0, 0, cst_click], "Cliquez sur le bouton !"],
       [0, [0, [0, 1, cst_click], "Click on the Button !"], 0]],
    url$0 = "./db_worker.bc.js",
    default$1 = [0, 0, 0, 0],
    album = cst$1,
    artist = cst$1;
   caml_register_global
    (11, Undefined_recursive_module, cst_Undefined_recursive_module);
   caml_register_global(10, Assert_failure, cst_Assert_failure);
   caml_register_global(9, Sys_blocked_io, cst_Sys_blocked_io);
   caml_register_global(8, Stack_overflow, cst_Stack_overflow);
   caml_register_global(7, Match_failure, cst_Match_failure);
   caml_register_global(6, Not_found, cst_Not_found);
   caml_register_global(5, Division_by_zero, cst_Division_by_zero);
   caml_register_global(4, End_of_file, cst_End_of_file);
   caml_register_global(3, Invalid_argument, cst_Invalid_argument);
   caml_register_global(2, Failure, cst_Failure);
   caml_register_global(1, Sys_error, cst_Sys_error);
   caml_register_global(0, Out_of_memory, cst_Out_of_memory);
   var
    _h_ = cst_input,
    _g_ = [0, 0, [0, 7, 0]],
    _f_ = "output_substring",
    _e_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _d_ = cst,
    _b_ = cst_true,
    _c_ = cst_false,
    _a_ = "char_of_int",
    _l_ = "CamlinternalLazy.Undefined",
    _m_ = "option is None",
    _n_ = "result is Error _",
    _p_ = cst$0,
    _q_ = "\\'",
    _r_ = cst_b,
    _s_ = cst_t,
    _t_ = cst_n,
    _u_ = cst_r,
    _o_ = "Char.chr",
    _w_ = "List.init",
    _v_ = "hd",
    _z_ = "String.blit / Bytes.blit_string",
    _y_ = "Bytes.blit",
    _x_ = "String.sub / Bytes.sub",
    _C_ = "String.contains_from / Bytes.contains_from",
    _B_ = cst$1,
    _A_ = "String.concat",
    _G_ = "Array.iter2: arrays must have the same length",
    _F_ = "Array.blit",
    _E_ = "Array.fill",
    _D_ = "Array.sub",
    _H_ = "Lexing.lex_refill: cannot grow buffer",
    _M_ = "Set.remove_min_elt",
    _N_ = [0, 0, 0, 0],
    _O_ = [0, "set.ml", 570, 18],
    _I_ = cst_Set_bal,
    _J_ = cst_Set_bal,
    _K_ = cst_Set_bal,
    _L_ = cst_Set_bal,
    _Q_ = "Stdlib.Queue.Empty",
    _W_ = "Buffer.add_substring/add_subbytes",
    _V_ = "Buffer.add: cannot grow buffer",
    _U_ = [0, cst_buffer_ml, 93, 2],
    _S_ = [0, cst_buffer_ml, 94, 2],
    _R_ = "Buffer.sub",
    _ad_ = "%c",
    _ae_ = cst_s,
    _af_ = cst_i,
    _ag_ = cst_li,
    _ah_ = cst_ni,
    _ai_ = cst_Li,
    _aj_ = "%f",
    _ak_ = "%B",
    _al_ = "%{",
    _am_ = "%}",
    _an_ = "%(",
    _ao_ = "%)",
    _ap_ = cst_a,
    _aq_ = "%t",
    _ar_ = "%?",
    _as_ = "%r",
    _at_ = "%_r",
    _au_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _aF_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _ax_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _aG_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _ay_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _aH_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _az_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _aI_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _aA_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _aJ_ = [0, cst_camlinternalFormat_ml, 831, 30],
    _aB_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _aD_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _av_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _aE_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _aw_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _aC_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _bE_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    _bF_ = "Printf: bad conversion %[",
    _bG_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _bH_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _bI_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    _bJ_ = "Printf: bad conversion %_",
    _bK_ = cst$2,
    _bL_ = cst$3,
    _bM_ = cst$2,
    _bN_ = cst$3,
    _bP_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _bO_ = [0, 0, 4],
    _bD_ = "nan",
    _bB_ = "neg_infinity",
    _bC_ = "infinity",
    _bA_ = cst,
    _bz_ = [0, 103],
    _bn_ = "%+nd",
    _bo_ = "% nd",
    _bq_ = "%+ni",
    _br_ = "% ni",
    _bs_ = "%nx",
    _bt_ = "%#nx",
    _bu_ = "%nX",
    _bv_ = "%#nX",
    _bw_ = "%no",
    _bx_ = "%#no",
    _bm_ = "%nd",
    _bp_ = cst_ni,
    _by_ = "%nu",
    _ba_ = "%+ld",
    _bb_ = "% ld",
    _bd_ = "%+li",
    _be_ = "% li",
    _bf_ = "%lx",
    _bg_ = "%#lx",
    _bh_ = "%lX",
    _bi_ = "%#lX",
    _bj_ = "%lo",
    _bk_ = "%#lo",
    _a$_ = "%ld",
    _bc_ = cst_li,
    _bl_ = "%lu",
    _aZ_ = "%+Ld",
    _a0_ = "% Ld",
    _a2_ = "%+Li",
    _a3_ = "% Li",
    _a4_ = "%Lx",
    _a5_ = "%#Lx",
    _a6_ = "%LX",
    _a7_ = "%#LX",
    _a8_ = "%Lo",
    _a9_ = "%#Lo",
    _aY_ = "%Ld",
    _a1_ = cst_Li,
    _a__ = "%Lu",
    _aM_ = "%+d",
    _aN_ = "% d",
    _aP_ = "%+i",
    _aQ_ = "% i",
    _aR_ = "%x",
    _aS_ = "%#x",
    _aT_ = "%X",
    _aU_ = "%#X",
    _aV_ = "%o",
    _aW_ = "%#o",
    _aL_ = cst_d,
    _aO_ = cst_i,
    _aX_ = cst_u,
    _X_ = "@]",
    _Y_ = "@}",
    _Z_ = "@?",
    ___ = "@\n",
    _$_ = "@.",
    _aa_ = "@@",
    _ab_ = "@%",
    _ac_ = "@",
    _aK_ = "CamlinternalFormat.Type_mismatch",
    _bT_ = cst$1,
    _bU_ = [0, [11, cst$4, [2, 0, [2, 0, 0]]], ", %s%s"],
    _cf_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _cg_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"],
    _ce_ = "Fatal error: out of memory in uncaught exception handler",
    _cd_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _ca_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _cb_ =
      [0,
       [11, cst_Program_not_linked_with_g_, 0],
       cst_Program_not_linked_with_g_],
    _b4_ = "Raised at",
    _b5_ = "Re-raised at",
    _b6_ = "Raised by primitive operation at",
    _b7_ = "Called from",
    _b8_ = " (inlined)",
    _b__ = cst$1,
    _b9_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _b$_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _bZ_ = "Out of memory",
    _b0_ = "Stack overflow",
    _b1_ = "Pattern matching failed",
    _b2_ = "Assertion failed",
    _b3_ = "Undefined recursive module",
    _bV_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _bW_ = cst$1,
    _bX_ = cst$1,
    _bY_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _bS_ = [0, [4, 0, 0, 0, 0], cst_d],
    _bQ_ = [0, [3, 0, 0], "%S"],
    _bR_ = "_",
    _cc_ =
      [0,
       cst$1,
       "(Cannot print locations:\n bytecode executable program file not found)",
       "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
       "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
       "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"],
    _cj_ = "Fun.Finally_raised: ",
    _ci_ = "Stdlib.Fun.Finally_raised",
    _ck_ = "x",
    _cl_ =
      [0,
       987910699,
       495797812,
       364182224,
       414272206,
       318284740,
       990407751,
       383018966,
       270373319,
       840823159,
       24560019,
       536292337,
       512266505,
       189156120,
       730249596,
       143776328,
       51606627,
       140166561,
       366354223,
       1003410265,
       700563762,
       981890670,
       913149062,
       526082594,
       1021425055,
       784300257,
       667753350,
       630144451,
       949649812,
       48546892,
       415514493,
       258888527,
       511570777,
       89983870,
       283659902,
       308386020,
       242688715,
       482270760,
       865188196,
       1027664170,
       207196989,
       193777847,
       619708188,
       671350186,
       149669678,
       257044018,
       87658204,
       558145612,
       183450813,
       28133145,
       901332182,
       710253903,
       510646120,
       652377910,
       409934019,
       801085050],
    _cq_ = "Hashtbl: unsupported hash table format",
    _co_ = cst$1,
    _cJ_ = [3, 0, 3],
    _cK_ = cst,
    _cG_ = cst$6,
    _cH_ = "<\/",
    _cI_ = cst$1,
    _cD_ = cst$6,
    _cE_ = cst$7,
    _cF_ = cst$1,
    _cC_ = "\n",
    _cy_ = cst$1,
    _cz_ = cst$1,
    _cA_ = cst$1,
    _cB_ = cst$1,
    _cx_ = [0, cst$1],
    _ct_ = cst$1,
    _cu_ = cst$1,
    _cv_ = cst$1,
    _cw_ = cst$1,
    _cs_ = [0, cst$1, 0, cst$1],
    _cr_ = "Stdlib.Format.String_tag",
    _cL_ = "Jsoo_runtime.Error.Exn",
    _cM_ = "jsError",
    _cO_ = [0, "src/fut.ml", 34, 25],
    _cW_ = "info",
    _cV_ = "warn",
    _cU_ = cst_error,
    _cT_ = "log",
    _cR_ = "scrollTop",
    _cP_ = "search",
    _cX_ = "isSecureContext",
    _cY_ = "cache",
    _cZ_ = "credentials",
    _c0_ = "headers",
    _c1_ = "integrity",
    _c2_ = "keepalive",
    _c3_ = "method",
    _c4_ = "mode",
    _c5_ = "redirect",
    _c6_ = "referrer",
    _c7_ = "referrerPolicy",
    _c9_ = "content-box",
    _c__ = "border-box",
    _c$_ = "device-pixel-content-box",
    _db_ = cst_duration,
    _dc_ = cst_playbackRate,
    _dd_ = "position",
    _da_ = "Set metadata",
    _dh_ = "open",
    _de_ = "autoIncrement",
    _df_ = "keyPath",
    _dg_ = "new object store with options:",
    _dl_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 157, 10],
    _dn_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 179, 10],
    _dp_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 191, 10],
    _dr_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 218, 17],
    _dw_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 367, 16],
    _dx_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 368, 18],
    _dy_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 372, 15],
    _dz_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 377, 15],
    _dA_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 383, 15],
    _dB_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 386, 10],
    _dC_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 362, 16],
    _dD_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 517, 12],
    _dE_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 459, 14],
    _dK_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 686, 27],
    _dJ_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 651, 27],
    _dH_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 560, 16],
    _dF_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 550, 23],
    _dG_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 544, 14],
    _dv_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 334, 9],
    _du_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 309, 9],
    _dt_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 305, 9],
    _ds_ =
      [0,
       [11,
        "Lwd: unsafe mutation (variable invalidated during evaluation) at\n",
        [15, 0]],
       "Lwd: unsafe mutation (variable invalidated during evaluation) at\n%a"],
    _dq_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 199, 14],
    _do_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 186, 14],
    _dm_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 169, 14],
    _dk_ = [0, cst_vendor_lwd_lib_lwd_lwd_ml, 152, 14],
    _dI_ = "Lwd.Release_failure",
    _dM_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 64, 12],
    _dU_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 205, 18],
    _dT_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 218, 9],
    _dW_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 224, 18],
    _dV_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 237, 9],
    _dX_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 240, 21],
    _dY_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 250, 21],
    _dZ_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 260, 21],
    _d0_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 296, 14],
    _ea_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 492, 29],
    _d$_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 499, 29],
    _d__ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 462, 21],
    _d6_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 420, 10],
    _d7_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 423, 15],
    _d8_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 435, 10],
    _d9_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 457, 2],
    _d3_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 371, 24],
    _d4_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 391, 16],
    _d5_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 394, 2],
    _d2_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 315, 18],
    _d1_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 317, 9],
    _dS_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 193, 4],
    _dR_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 199, 21],
    _dP_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 174, 4],
    _dQ_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 177, 14],
    _dO_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 113, 14],
    _dN_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 82, 21],
    _dL_ = [0, cst_vendor_lwd_lib_lwd_lwd_tab, 32, 14],
    _es_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 571, 12],
    _eg_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 321, 37],
    _eh_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 322, 37],
    _ej_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 346, 10],
    _ek_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 357, 42],
    _ei_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 337, 37],
    _em_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 375, 10],
    _en_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 383, 42],
    _el_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 338, 37],
    _ep_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 425, 16],
    _er_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 513, 50],
    _eq_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 480, 6],
    _eo_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 395, 14],
    _ed_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 174, 57],
    _ee_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 182, 57],
    _ef_ = [0, cst_vendor_lwd_lib_lwd_lwd_seq, 238, 11],
    _eb_ = cst_Lwd_seq_rank_node_is_marke,
    _ec_ = cst_Lwd_seq_rank_node_is_marke,
    _ew_ = [0, cst_vendor_lwd_lib_brr_lwd_elw, 233, 16],
    _ev_ = [0, cst_vendor_lwd_lib_brr_lwd_elw, 201, 16],
    _eu_ = [0, 0, 0],
    _et_ = [0, 0, 0],
    _ex_ = cst$4,
    _ey_ = "CCResult.Get_error",
    _eJ_ = "expected low surrogate escape sequence (u)",
    _eK_ = "invalid low surrogate for code point beyond U+FFFF'",
    _eL_ = "expected low surrogate escape char (\\)",
    _eM_ = "invalid escape in string",
    _eI_ = "end of string in escape sequence",
    _eD_ = "' ",
    _eE_ = " '",
    _eH_ = cst$1,
    _eF_ = cst$5,
    _eG_ = " at offset ",
    _eB_ = cst$8,
    _eC_ = "invalid hex char in unicode escape: '",
    _eA_ = "Jsonxt__Lexxer_utils.Lex_error",
    _eN_ = [6, 1],
    _eO_ = [6, 0],
    _eP_ = cst$8,
    _eQ_ = cst_unexpected_character,
    _eR_ = cst$8,
    _eS_ = cst_unexpected_character,
    _eT_ = cst$8,
    _eU_ = cst_unexpected_character,
    _eV_ = cst$8,
    _eW_ = cst_unexpected_character,
    _eX_ = [0, cst$1],
    _eY_ = cst$8,
    _eZ_ = cst_unexpected_character,
    _e0_ = "unexpected EOF in comment",
    _e1_ = "Jsonxt__Error_info.Json_error_info",
    _e2_ = cst_0,
    _e3_ = cst_0,
    _e4_ = "unexpected '{'",
    _e5_ = "unexpected '}'",
    _e6_ = "unexpected null value",
    _e7_ = "unexpected negative infinity",
    _e8_ = "unexpected Not-a-Number",
    _e9_ = "unexpected infinity",
    _e__ = "unexpected end-of-input",
    _e$_ = "unexpected ','",
    _fa_ = "unexpected ':'",
    _fb_ = "unexpected '['",
    _fc_ = "unexpected ']'",
    _fd_ = "unexpected '<'",
    _fe_ = "unexpected '>'",
    _ff_ = "unexpected '('",
    _fg_ = "unexpected ')'",
    _fh_ = cst$8,
    _fi_ = "unexpected string '",
    _fj_ = cst$8,
    _fk_ = "unexpected large integer '",
    _fl_ = cst$8,
    _fm_ = "unexpected integer '",
    _fn_ = cst$8,
    _fo_ = "unexpected float '",
    _fp_ = cst$8,
    _fq_ = "compliance error '",
    _fr_ = cst$8,
    _fs_ = cst_true,
    _fu_ = cst_false,
    _ft_ = "unexpected boolean '",
    _fy_ = [1, "Unexpected end-of-input"],
    _fw_ = [0, 148000204, "tuple must have at least 2 elements"],
    _fx_ = [0, 148000204, "variant must have at least a string"],
    _fv_ = "Jsonxt__Parser.Make(Compliance).Parse_error",
    _fB_ = cst_b,
    _fC_ = cst_t,
    _fD_ = cst_n,
    _fE_ = cst_f,
    _fF_ = cst_r,
    _fG_ = cst$9,
    _fz_ = cst$0,
    _fA_ = cst_u00,
    _fI_ = cst_null,
    _fJ_ = cst$10,
    _fK_ =
      [0,
       [12,
        123,
        [17,
         [0, cst_1_0, 1, 0],
         [15, [17, [0, cst_1_2, 1, -2], [12, 125, 0]]]]],
       "{@;<1 0>%a@;<1 -2>}"],
    _fL_ = "{}",
    _fM_ = cst$10,
    _fN_ =
      [0,
       [12,
        91,
        [17,
         [0, cst_1_0, 1, 0],
         [18,
          [1, [0, [11, cst_hov, 0], cst_hov]],
          [15, [17, 0, [17, [0, cst_1_2, 1, -2], [12, 93, 0]]]]]]],
       "[@;<1 0>@[<hov>%a@]@;<1 -2>]"],
    _fO_ = "[]",
    _fP_ = "()",
    _fQ_ = cst$10,
    _fR_ =
      [0,
       [12,
        40,
        [17, [0, "@,", 0, 0], [15, [17, [0, "@;<0 -2>", 0, -2], [12, 41, 0]]]]],
       "(@,%a@;<0 -2>)"],
    _fS_ =
      [0,
       [12,
        60,
        [18,
         [1, [0, [11, cst_hv2, 0], cst_hv2]],
         [2, 0, [11, cst$5, [15, [17, 0, [12, 62, 0]]]]]]],
       "<@[<hv2>%s: %a@]>"],
    _fT_ = [0, [12, 60, [2, 0, [12, 62, 0]]], "<%s>"],
    _fU_ =
      [0,
       [18,
        [1, [0, [11, cst_hv2, 0], cst_hv2]],
        [2, 0, [11, cst$5, [15, [17, 0, 0]]]]],
       "@[<hv2>%s: %a@]"],
    _fX_ = [0, [15, [17, 2, 0]], "%a@?"],
    _fW_ = [0, [15, 0], cst_a],
    _fV_ =
      [0,
       [18, [1, [0, [11, cst_hv2, 0], cst_hv2]], [15, [17, 0, 0]]],
       "@[<hv2>%a@]"],
    _fH_ = [0, [2, 0, [17, [0, "@ ", 1, 0], 0]], "%s@ "],
    _f0_ = "Expected `String",
    _fZ_ = "Expected `Assoc",
    _f2_ = "{",
    _f3_ = "}",
    _f4_ = "Null",
    _f5_ = cst_Infinity,
    _f6_ = "NAN",
    _f7_ = cst_Infinity$0,
    _f8_ = "end-of-file",
    _f9_ = cst$10,
    _f__ = cst$11,
    _f$_ = "[",
    _ga_ = "]",
    _gb_ = cst$7,
    _gc_ = cst$6,
    _gd_ = "(",
    _ge_ = ")",
    _gf_ = cst$8,
    _gg_ = "input error '",
    _gh_ = cst_true,
    _gi_ = cst_false,
    _gl_ = cst_junk_after_end_of_JSON_val,
    _gm_ = [0, 0],
    _gn_ = [1, cst_empty_input],
    _gj_ = cst_junk_after_end_of_JSON_val,
    _gk_ = [1, cst_empty_input],
    _gA_ = cst$1,
    _gB_ = cst$1,
    _gx_ = cst_null,
    _gy_ = cst$10,
    _gz_ = cst$10,
    _gw_ = cst$11,
    _gq_ = cst_b,
    _gr_ = cst_t,
    _gs_ = cst_n,
    _gt_ = cst_f,
    _gu_ = cst_r,
    _gv_ = cst$9,
    _go_ = cst$0,
    _gp_ = cst_u00,
    _gK_ = cst_null,
    _gM_ = cst$10,
    _gL_ = cst$1,
    _gO_ = cst$10,
    _gN_ = cst$1,
    _gE_ = cst_b,
    _gF_ = cst_t,
    _gG_ = cst_n,
    _gH_ = cst_f,
    _gI_ = cst_r,
    _gJ_ = cst$9,
    _gC_ = cst$0,
    _gD_ = cst_u00,
    _hg_ = [0, 928231259, cst_Infinity$0],
    _hh_ = [0, 928231259, cst_Infinity],
    _hf_ = [0, 928231259, cst_NaN],
    _he_ = cst_NaN,
    _hc_ = cst_Infinity,
    _hd_ = cst_Infinity$0,
    _hb_ = [0, 0],
    _g$_ = cst$12,
    _ha_ = cst$12,
    _g__ = "floatlit not supported in yojson safe mode",
    _g9_ = cst_NaN,
    _g7_ = cst_Infinity,
    _g8_ = cst_Infinity$0,
    _g6_ = [0, 0],
    _g5_ = cst_variants_not_supported_in_,
    _g4_ = cst_variants_not_supported_in_,
    _g3_ = cst_tuples_not_supported_in_yo,
    _g2_ = cst_tuples_not_supported_in_yo,
    _g1_ = "floatlit not supported in yojson basic mode",
    _g0_ = cst_variants_not_supported_in_,
    _gZ_ = cst_tuples_not_supported_in_yo,
    _gY_ = cst_NaN,
    _gW_ = cst_Infinity,
    _gX_ = cst_Infinity$0,
    _gV_ = [0, 0],
    _gU_ = [5, "Integer out of bounds"],
    _gQ_ = ", line",
    _gR_ = "File ",
    _gT_ = "Line",
    _gS_ =
      [0,
       [2,
        0,
        [12,
         32,
         [4,
          0,
          0,
          0,
          [11,
           " chars ",
           [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, cst$5, 0]]]]]]]],
       "%s %d chars %d-%d: "],
    _gP_ = "Jsonxt__Yojson.Json_error",
    _hi_ = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
    _hj_ = [1, [0, 3854881, "Failed to unmarshal data"]],
    _hk_ = "TODO not implemented",
    _hr_ = [0, "lib/brr_lwd_ui/utils.ml", 40, 61],
    _ho_ = [0, [8, [0, 0, 0], 0, 0, [11, cst_px, 0]], "%fpx"],
    _hp_ = [0, [8, [0, 0, 0], 0, 0, [11, cst_rem, 0]], "%frem"],
    _hq_ = [0, [8, [0, 0, 0], 0, 0, [11, cst_em, 0]], "%fem"],
    _hl_ = cst_px,
    _hm_ = cst_rem,
    _hn_ = cst_em,
    _hw_ = [0, [11, cst_height, [2, 0, 0]], "height: %s"],
    _hv_ = cst$13,
    _hs_ = [0, cst$13],
    _ht_ = "grid-template-columns",
    _hu_ = [0, [2, 0, [11, cst$5, [2, 0, [12, 59, 0]]]], "%s: %s;"],
    _hx_ = [1, 4.],
    _hA_ = [0, 80, "row"],
    _hy_ =
      [0,
       [11, "height: calc(", [2, 0, [11, " * ", [4, 3, 0, 0, [11, ");", 0]]]]],
       "height: calc(%s * %i);"],
    _hz_ =
      [0,
       [11, cst_height, [2, 0, [11, " !important;", 0]]],
       "height: %s !important;"],
    _hB_ = [0, "lwdui-lazy-table", 0],
    _hC_ = [0, "lwdui-lazy-table-wrapper", 0],
    _hE_ = [1, -358247754],
    _hD_ =
      [0,
       [11, "Multiple persitent var are using the key ", [2, 0, 0]],
       "Multiple persitent var are using the key %s"],
    _hH_ = cst_submit,
    _hG_ = "password",
    _hF_ = cst_text,
    _hK_ = [0, 80, cst_text],
    _hI_ = [0, [2, 0, [11, "--id", 0]], "%s--id"],
    _hJ_ = [0, [2, 0, 0], cst_s],
    _hN_ = [0, 80, "checkbox"],
    _hL_ =
      [0,
       [2, 0, [12, 45, [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, [11, "-id", 0]]]]]],
       "%s-%i-%i-id"],
    _hM_ =
      [0,
       [2, 0, [12, 45, [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]]],
       "%s-%i-%i"],
    _hO_ = [0, 80, cst_button],
    _hS_ = "list_of_yojson: list needed",
    _hR_ = "int_of_yojson: integer needed",
    _hQ_ = "string_of_yojson: string needed",
    _hP_ = "Ppx_yojson_conv_lib__Yojson_conv.Of_yojson_error",
    _h1_ = cst$13,
    _h3_ = "_of_yojson: list instead of atom for record expected",
    _h2_ =
      [0,
       [2,
        0,
        [11,
         "_of_yojson: the following record elements were undefined: ",
         [2, 0, 0]]],
       "%s_of_yojson: the following record elements were undefined: %s"],
    _h0_ = "extra fields",
    _hZ_ = "duplicate fields",
    _hX_ = cst$13,
    _hY_ =
      [0,
       [2, 0, [11, "_of_yojson: ", [2, 0, [11, cst$5, [2, 0, 0]]]]],
       "%s_of_yojson: %s: %s"],
    _hW_ = "_of_yojson: unexpected variant constructor",
    _hV_ = "_of_yojson: expected a variant type, saw an empty list",
    _hU_ = "_of_yojson: expected a variant type, saw a nested list",
    _hT_ = "_of_yojson: this constructor does not take arguments",
    _jk_ = "An error occured while decoding response: ",
    _jg_ = [0, [11, ", Token=", [3, 0, 0]], ", Token=%S"],
    _jj_ = cst$1,
    _jh_ = "abcdef",
    _ji_ =
      [0,
       [11,
        'MediaBrowser Client="Ocamix", Device="Firefox", DeviceId="',
        [2, 0, [11, '", Version="0.1"', [2, 0, 0]]]],
       'MediaBrowser Client="Ocamix", Device="Firefox", DeviceId="%s", Version="0.1"%s'],
    _jd_ = cst_ItemId,
    _je_ = cst_Locations,
    _jf_ = cst_Name,
    _ja_ = "item_id",
    _jb_ = "locations",
    _jc_ = cst_name,
    _i$_ = cst_CollectionType,
    _i2_ = cst_Type,
    _i3_ = cst_ImageBlurHashes,
    _i4_ = cst_ServerId,
    _i5_ = cst_ParentId,
    _i6_ = cst_AlbumId,
    _i7_ = cst_Path,
    _i8_ = cst_Id,
    _i9_ = cst_SortName,
    _i__ = cst_Name,
    _iX_ = "type_",
    _iY_ = "image_blur_hashes",
    _iZ_ = cst_server_id,
    _i0_ = cst_id,
    _i1_ = cst_name,
    _iW_ = [0, "lib/data_source/jellyfin_api.ml", 193, 64],
    _il_ = [0, 848054398, [0, [0, -976970511, cst_AggregateFolder], 0]],
    _im_ = [0, 848054398, [0, [0, -976970511, cst_Audio], 0]],
    _in_ = [0, 848054398, [0, [0, -976970511, cst_AudioBook], 0]],
    _io_ = [0, 848054398, [0, [0, -976970511, cst_BasePluginFolder], 0]],
    _ip_ = [0, 848054398, [0, [0, -976970511, cst_Book], 0]],
    _iq_ = [0, 848054398, [0, [0, -976970511, cst_BoxSet], 0]],
    _ir_ = [0, 848054398, [0, [0, -976970511, cst_Channel], 0]],
    _is_ = [0, 848054398, [0, [0, -976970511, cst_ChannelFolderItem], 0]],
    _it_ = [0, 848054398, [0, [0, -976970511, cst_CollectionFolder], 0]],
    _iu_ = [0, 848054398, [0, [0, -976970511, cst_Episode], 0]],
    _iv_ = [0, 848054398, [0, [0, -976970511, cst_Folder], 0]],
    _iw_ = [0, 848054398, [0, [0, -976970511, cst_Genre], 0]],
    _ix_ = [0, 848054398, [0, [0, -976970511, cst_LiveTvChannel], 0]],
    _iy_ = [0, 848054398, [0, [0, -976970511, cst_LiveTvProgram], 0]],
    _iz_ = [0, 848054398, [0, [0, -976970511, cst_ManualPlaylistsFolder], 0]],
    _iA_ = [0, 848054398, [0, [0, -976970511, cst_Movie], 0]],
    _iB_ = [0, 848054398, [0, [0, -976970511, cst_MusicAlbum], 0]],
    _iC_ = [0, 848054398, [0, [0, -976970511, cst_MusicArtist], 0]],
    _iD_ = [0, 848054398, [0, [0, -976970511, cst_MusicGenre], 0]],
    _iE_ = [0, 848054398, [0, [0, -976970511, cst_MusicVideo], 0]],
    _iF_ = [0, 848054398, [0, [0, -976970511, cst_Person], 0]],
    _iG_ = [0, 848054398, [0, [0, -976970511, cst_Photo], 0]],
    _iH_ = [0, 848054398, [0, [0, -976970511, cst_PhotoAlbum], 0]],
    _iI_ = [0, 848054398, [0, [0, -976970511, cst_Playlist], 0]],
    _iJ_ = [0, 848054398, [0, [0, -976970511, cst_PlaylistsFolder], 0]],
    _iK_ = [0, 848054398, [0, [0, -976970511, cst_Program], 0]],
    _iL_ = [0, 848054398, [0, [0, -976970511, cst_Recording], 0]],
    _iM_ = [0, 848054398, [0, [0, -976970511, cst_Season], 0]],
    _iN_ = [0, 848054398, [0, [0, -976970511, cst_Series], 0]],
    _iO_ = [0, 848054398, [0, [0, -976970511, cst_Studio], 0]],
    _iP_ = [0, 848054398, [0, [0, -976970511, cst_Trailer], 0]],
    _iQ_ = [0, 848054398, [0, [0, -976970511, cst_TvChannel], 0]],
    _iR_ = [0, 848054398, [0, [0, -976970511, cst_TvProgram], 0]],
    _iS_ = [0, 848054398, [0, [0, -976970511, cst_UserRootFolder], 0]],
    _iT_ = [0, 848054398, [0, [0, -976970511, cst_UserView], 0]],
    _iU_ = [0, 848054398, [0, [0, -976970511, cst_Video], 0]],
    _iV_ = [0, 848054398, [0, [0, -976970511, cst_Year], 0]],
    _ik_ = cst_Primary,
    _ij_ = "/Users/AuthenticateByName",
    _ig_ = cst_ServerId,
    _ih_ = cst_AccessToken,
    _ii_ = cst_User,
    _id_ = cst_server_id,
    _ie_ = "access_token",
    _if_ = "user",
    _ib_ = cst_Pw,
    _ic_ = cst_Username,
    _h$_ = "pw",
    _ia_ = "username",
    _h7_ = cst_Id,
    _h8_ = cst_ServerName,
    _h9_ = cst_ServerId,
    _h__ = cst_Name,
    _h4_ = cst_id,
    _h5_ = cst_server_id,
    _h6_ = cst_name,
    _jm_ = [0, 0, 1],
    _jK_ = [0, cst_lib_db_stores_ml, 119, 13],
    _jJ_ = [0, cst_lib_db_stores_ml, 110, 19],
    _jG_ = [0, cst_lib_db_stores_ml, 102, 13],
    _jF_ = [0, cst_lib_db_stores_ml, 96, 19],
    _jB_ = [0, cst_lib_db_stores_ml, 66, 13],
    _jz_ = cst_item,
    _jA_ = cst_sorts,
    _jx_ = cst_item,
    _jy_ = cst_sorts,
    _ju_ = cst_sort_name,
    _jv_ = cst_views,
    _jw_ = cst_date_added,
    _jr_ = cst_sort_name,
    _js_ = cst_views,
    _jt_ = cst_date_added,
    _jp_ = cst_item,
    _jq_ = cst_id,
    _jn_ = cst_item,
    _jo_ = cst_id,
    _jC_ = [0, cst_sorts_views],
    _jD_ = [0, "item.Name"],
    _jE_ = [0, cst_item_Id],
    _jH_ = [0, cst_sorts_views],
    _jI_ = [0, "item.Type"],
    _jL_ = [0, "sorts.sort_name"],
    _jM_ = [0, "item.CollectionType"],
    _jZ_ = "to",
    _j0_ = "Upgrading indexed_db schema from version",
    _j1_ = [0, 0],
    _j2_ = [0, 0],
    _j3_ = [0, 0],
    _j4_ = "Stores created:",
    _kf_ = "Synchronized",
    _kd_ =
      [0,
       [11, "Sync in progress: ", [4, 3, 0, 0, [12, 47, [4, 3, 0, 0, 0]]]],
       "Sync in progress: %i/%i"],
    _ke_ = "Desynchronized",
    _kb_ = cst_Form_submitted,
    _kc_ = cst_Form_submitted,
    _j7_ = "ui_servers",
    _j8_ = [0, "http://localhost:8096"],
    _j9_ = [0, 1],
    _j__ = [0, 1],
    _j$_ = [0, 1],
    _ka_ = [0, 80, "Connect"],
    _kt_ = cst_Nothing_playing,
    _kp_ =
      [0,
       [2,
        0,
        [11, cst_Items, [2, 0, [11, cst_Images_Primary_width_500_f, 0]]]],
       cst_s_Items_s_Images_Primary_w],
    _kr_ = cst_track_png,
    _kq_ =
      [0,
       [11, "background-image: url(", [3, 0, [12, 41, 0]]],
       "background-image: url(%S)"],
    _kn_ =
      "A playback error happened. This is probably due to a codec unsupported by the browser.",
    _ko_ = [0, 80, "NEXT"],
    _ks_ = [0, 80, "now-playing-cover"],
    _ku_ = [0, 80, cst_box],
    _kv_ = [0, 80, "now-playing-display"],
    _kw_ = [0, 80, "player-wrapper"],
    _kx_ = [0, 80, cst_box],
    _kj_ = "Now playing:",
    _kk_ =
      [0,
       [2,
        0,
        [11, cst_Items, [2, 0, [11, cst_Images_Primary_width_500_f, 0]]]],
       cst_s_Items_s_Images_Primary_w],
    _kl_ = "image/jpeg",
    _km_ = "500x500",
    _ki_ =
      [0,
       [2,
        0,
        [11,
         "/Audio/",
         [2,
          0,
          [11,
           "/universal?api_key=",
           [2,
            0,
            [11,
             "&audioCodec=aac&container=opus,mp3,aac,m4a,m4b,flac,wav,ogg&transcodingContainer=ts&transcodingProtocol=hls",
             0]]]]]],
       "%s/Audio/%s/universal?api_key=%s&audioCodec=aac&container=opus,mp3,aac,m4a,m4b,flac,wav,ogg&transcodingContainer=ts&transcodingProtocol=hls"],
    _kz_ = [0, "off", 0],
    _kA_ = [0, "on", 0],
    _ky_ = [0, cst_button, 0],
    _kB_ = [0, "draggable-table", 0],
    _kN_ = "|>",
    _kM_ =
      [0,
       [2, 0, [11, cst_Items, [2, 0, [11, "/Images/Primary?width=50", 0]]]],
       "%s/Items/%s/Images/Primary?width=50"],
    _kL_ = "server-error.png",
    _kO_ = [2, 4.],
    _kC_ = cst_Title,
    _kD_ = "1fr",
    _kE_ = cst_Title,
    _kF_ = cst_Cover,
    _kG_ = cst_5rem,
    _kH_ = cst_Cover,
    _kI_ = "#",
    _kJ_ = cst_5rem,
    _kK_ = "Order",
    _kZ_ = "Persist ?",
    _k0_ = "tracks",
    _k1_ = [0, 1],
    _kX_ = cst_Nothing_playing,
    _kU_ = '""',
    _kV_ = "Updating main view:",
    _kW_ = [0, 0],
    _kQ_ = cst_click,
    _kP_ = "toto1",
    _kR_ = "Welcome to OCAMIX",
    _kS_ = cst_pouet,
    _kT_ = cst_pouet,
    _kY_ = [0, "main-layout"];
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   function make(v){return [0, v];}
   function get(r){return r[1];}
   function compare_and_set(r, seen, v){
    var cur = r[1];
    return cur === seen ? (r[1] = v, 1) : 0;
   }
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lnot(x){return x ^ -1;}
   var max_int = 2147483647;
   function symbol(s1, s2){
    var
     l1 = caml_ml_string_length(s1),
     l2 = caml_ml_string_length(s2),
     s = caml_create_bytes(l1 + l2 | 0);
    caml_blit_string(s1, 0, s, 0, l1);
    caml_blit_string(s2, 0, s, l1, l2);
    return caml_string_of_bytes(s);
   }
   function char_of_int(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(_a_);
   }
   function string_of_bool(b){return b ? _b_ : _c_;}
   function string_of_int(n){return "" + n;}
   function valid_float_lexem(s){
    var l = caml_ml_string_length(s);
    function loop(i){
     var i$0 = i;
     for(;;){
      if(l <= i$0) return symbol(s, _d_);
      var match = caml_string_get(s, i$0);
      a:
      {
       if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
       return s;
      }
      var i$1 = i$0 + 1 | 0, i$0 = i$1;
     }
    }
    return loop(0);
   }
   function string_of_float(f){
    return valid_float_lexem(caml_format_float("%.12g", f));
   }
   function symbol$0(l1, l2){
    if(! l1) return l2;
    var tl = l1[2], hd = l1[1];
    return [0, hd, symbol$0(tl, l2)];
   }
   caml_ml_open_descriptor_in(0);
   var
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2);
   function open_out_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_out(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_out(name){return open_out_gen(_e_, 438, name);}
   function flush_all(param){
    function iter(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var l = param$0[2], a = param$0[1];
      try{caml_ml_flush(a);}
      catch(_yv_){
       var _yu_ = caml_wrap_exception(_yv_);
       if(_yu_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_yu_, 0);
      }
      var param$0 = l;
     }
    }
    return iter(caml_ml_out_channels_list(0));
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function output_substring(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
     return caml_ml_output(oc, s, ofs, len);
    return invalid_arg(_f_);
   }
   function close_out(oc){
    caml_ml_flush(oc);
    caml_ml_close_channel(oc);
    return;
   }
   function open_in_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_in(name){return open_in_gen(_g_, 0, name);}
   function input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_input(ic, s, ofs, len);
    return invalid_arg(_h_);
   }
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   var exit_function = make(flush_all);
   function at_exit(f){
    for(;;){
     var f_yet_to_run = make(1), old_exit = get(exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
         if(compare_and_set(f_yet_to_run$0, 1, 0)) caml_call1(f, 0);
         return caml_call1(old_exit$0, 0);
        },
      success = compare_and_set(exit_function, old_exit, new_exit),
      _yt_ = 1 - success;
     if(! _yt_) return _yt_;
    }
   }
   function do_at_exit(param){return caml_call1(get(exit_function), 0);}
   caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   function _i_(_ys_){return caml_ml_close_channel(_ys_);}
   function _j_(_yr_, _yq_){return caml_ml_output_char(_yr_, _yq_);}
   function _k_(_yp_){return caml_ml_flush(_yp_);}
   var
    max_array_length = caml_sys_const_max_wosize(0),
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function is_block(a){return 1 - (typeof a === "number" ? 1 : 0);}
   var Undefined = [248, _l_, caml_fresh_oo_id(0)];
   function raise_undefined(param){
    throw caml_maybe_attach_backtrace(Undefined, 1);
   }
   function force_lazy_block(blk){
    var closure = blk[1];
    blk[1] = raise_undefined;
    try{
     var result = caml_call1(closure, 0);
     caml_obj_make_forward(blk, result);
     return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     blk[1] = function(param){throw caml_maybe_attach_backtrace(e, 0);};
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function value(o, default$0){
    if(! o) return default$0;
    var v = o[1];
    return v;
   }
   function get$0(param){
    if(! param) return invalid_arg(_m_);
    var v = param[1];
    return v;
   }
   function map(f, o){
    if(! o) return 0;
    var v = o[1];
    return [0, caml_call1(f, v)];
   }
   function is_some(param){return param ? 1 : 0;}
   function get_ok(param){
    if(0 !== param[0]) return invalid_arg(_n_);
    var v = param[1];
    return v;
   }
   function map$0(f, e){
    if(0 !== e[0]) return e;
    var v = e[1];
    return [0, caml_call1(f, v)];
   }
   function of_int_exn(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(_o_);
   }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c) return _p_;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){if(39 <= c) return _q_; break a;}
      if(14 > c)
       switch(c){
         case 8:
          return _r_;
         case 9:
          return _s_;
         case 10:
          return _t_;
         case 13:
          return _u_;
       }
     }
     var s = caml_create_bytes(4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s);
    }
    var s$0 = caml_create_bytes(1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0);
   }
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function length_aux(len, param){
    var len$0 = len, param$0 = param;
    for(;;){
     if(! param$0) return len$0;
     var l = param$0[2], len$1 = len$0 + 1 | 0, len$0 = len$1, param$0 = l;
    }
   }
   function length(l){return length_aux(0, l);}
   function cons(a, l){return [0, a, l];}
   function hd(param){
    if(! param) return failwith(_v_);
    var a = param[1];
    return a;
   }
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(! l1$0) return l2$0;
     var
      l1$1 = l1$0[2],
      a = l1$0[1],
      l2$1 = [0, a, l2$0],
      l1$0 = l1$1,
      l2$0 = l2$1;
    }
   }
   function rev(l){return rev_append(l, 0);}
   function init_tailrec_aux(acc, i, n, f){
    var acc$0 = acc, i$0 = i;
    for(;;){
     if(n <= i$0) return acc$0;
     var
      i$1 = i$0 + 1 | 0,
      acc$1 = [0, caml_call1(f, i$0), acc$0],
      acc$0 = acc$1,
      i$0 = i$1;
    }
   }
   function init_aux(i, n, f){
    if(n <= i) return 0;
    var r = caml_call1(f, i);
    return [0, r, init_aux(i + 1 | 0, n, f)];
   }
   function init(len, f){
    return 0 <= len
            ? 50
              < len
              ? rev(init_tailrec_aux(0, 0, len, f))
              : init_aux(0, len, f)
            : invalid_arg(_w_);
   }
   function flatten(param){
    if(! param) return 0;
    var r = param[2], l = param[1];
    return symbol$0(l, flatten(r));
   }
   function map$1(f, param){
    if(! param) return 0;
    var l = param[2], a = param[1], r = caml_call1(f, a);
    return [0, r, map$1(f, l)];
   }
   function rev_map(f, l){
    function rmap_f(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return accu$0;
      var
       l = param$0[2],
       a = param$0[1],
       accu$1 = [0, caml_call1(f, a), accu$0],
       accu$0 = accu$1,
       param$0 = l;
     }
    }
    return rmap_f(0, l);
   }
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     caml_call1(f, a);
     var param$0 = l;
    }
   }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
    for(;;){
     if(! l$0) return accu$0;
     var
      l$1 = l$0[2],
      a = l$0[1],
      accu$1 = caml_call2(f, accu$0, a),
      accu$0 = accu$1,
      l$0 = l$1;
    }
   }
   function for_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 1;
     var l = param$0[2], a = param$0[1], _yo_ = caml_call1(p, a);
     if(! _yo_) return _yo_;
     var param$0 = l;
    }
   }
   function assoc_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return [0, b];
     var param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x) return b;
     var param$0 = l;
    }
   }
   function find_all(p){
    function find(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return rev(accu$0);
      var l = param$0[2], x = param$0[1];
      if(caml_call1(p, x))
       var accu$1 = [0, x, accu$0], accu$0 = accu$1, param$0 = l;
      else
       var param$0 = l;
     }
    }
    var _ym_ = 0;
    return function(_yn_){return find(_ym_, _yn_);};
   }
   function filter_map(f){
    function aux(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return rev(accu$0);
      var l = param$0[2], x = param$0[1], match = caml_call1(f, x);
      if(match)
       var
        v = match[1],
        accu$1 = [0, v, accu$0],
        accu$0 = accu$1,
        param$0 = l;
      else
       var param$0 = l;
     }
    }
    var _yk_ = 0;
    return function(_yl_){return aux(_yk_, _yl_);};
   }
   function partition(p, l){
    function part(yes, no, param){
     var yes$0 = yes, no$0 = no, param$0 = param;
     for(;;){
      if(! param$0){var _yj_ = rev(no$0); return [0, rev(yes$0), _yj_];}
      var l = param$0[2], x = param$0[1];
      if(caml_call1(p, x))
       var yes$1 = [0, x, yes$0], yes$0 = yes$1, param$0 = l;
      else
       var no$1 = [0, x, no$0], no$0 = no$1, param$0 = l;
     }
    }
    return part(0, 0, l);
   }
   function sort_uniq(cmp, l){
    function rev_merge(l1, l2, accu){
     var l1$0 = l1, l2$0 = l2, accu$0 = accu;
     for(;;){
      if(! l1$0) return rev_append(l2$0, accu$0);
      if(! l2$0) return rev_append(l1$0, accu$0);
      var
       t2 = l2$0[2],
       h2 = l2$0[1],
       t1 = l1$0[2],
       h1 = l1$0[1],
       c = caml_call2(cmp, h1, h2);
      if(0 === c)
       var accu$1 = [0, h1, accu$0], l1$0 = t1, l2$0 = t2, accu$0 = accu$1;
      else if(0 <= c)
       var accu$2 = [0, h2, accu$0], l2$0 = t2, accu$0 = accu$2;
      else
       var accu$3 = [0, h1, accu$0], l1$0 = t1, accu$0 = accu$3;
     }
    }
    function rev_merge_rev(l1, l2, accu){
     var l1$0 = l1, l2$0 = l2, accu$0 = accu;
     for(;;){
      if(! l1$0) return rev_append(l2$0, accu$0);
      if(! l2$0) return rev_append(l1$0, accu$0);
      var
       t2 = l2$0[2],
       h2 = l2$0[1],
       t1 = l1$0[2],
       h1 = l1$0[1],
       c = caml_call2(cmp, h1, h2);
      if(0 === c)
       var accu$1 = [0, h1, accu$0], l1$0 = t1, l2$0 = t2, accu$0 = accu$1;
      else if(0 < c)
       var accu$2 = [0, h1, accu$0], l1$0 = t1, accu$0 = accu$2;
      else
       var accu$3 = [0, h2, accu$0], l2$0 = t2, accu$0 = accu$3;
     }
    }
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c = caml_call2(cmp, x1, x2),
         s =
           0 === c
            ? [0, x1, 0]
            : 0 <= c ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _yd_ = l[2];
      if(_yd_){
       var match$2 = _yd_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _yd_[1],
         x1$0 = l[1],
         c$0 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$0)
         var
          c$1 = caml_call2(cmp, x2$0, x3),
          _ye_ =
            0 === c$1
             ? [0, x2$0, 0]
             : 0 <= c$1 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]],
          s$0 = _ye_;
        else if(0 <= c$0){
         var c$2 = caml_call2(cmp, x1$0, x3);
         if(0 === c$2)
          var _yf_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$2)
          var
           c$3 = caml_call2(cmp, x2$0, x3),
           _yg_ =
             0 === c$3
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$3
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]],
           _yf_ = _yg_;
         else
          var _yf_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         var s$0 = _yf_;
        }
        else{
         var c$4 = caml_call2(cmp, x2$0, x3);
         if(0 === c$4)
          var _yh_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$4)
          var
           c$5 = caml_call2(cmp, x1$0, x3),
           _yi_ =
             0 === c$5
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$5
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]],
           _yh_ = _yi_;
         else
          var _yh_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _yh_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2),
      tl$0 = match$1[2],
      s2 = match$1[1];
     return [0, rev_merge_rev(s1, s2, 0), tl$0];
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c = caml_call2(cmp, x1, x2),
         s =
           0 === c
            ? [0, x1, 0]
            : 0 < c ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _x9_ = l[2];
      if(_x9_){
       var match$2 = _x9_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _x9_[1],
         x1$0 = l[1],
         c$0 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$0)
         var
          c$1 = caml_call2(cmp, x2$0, x3),
          _x__ =
            0 === c$1
             ? [0, x2$0, 0]
             : 0 < c$1 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]],
          s$0 = _x__;
        else if(0 < c$0){
         var c$2 = caml_call2(cmp, x2$0, x3);
         if(0 === c$2)
          var _x$_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$2)
          var _x$_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
          var
           c$3 = caml_call2(cmp, x1$0, x3),
           _ya_ =
             0 === c$3
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$3
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
           _x$_ = _ya_;
         var s$0 = _x$_;
        }
        else{
         var c$4 = caml_call2(cmp, x1$0, x3);
         if(0 === c$4)
          var _yb_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$4)
          var _yb_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
          var
           c$5 = caml_call2(cmp, x2$0, x3),
           _yc_ =
             0 === c$5
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$5
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]],
           _yb_ = _yc_;
         var s$0 = _yb_;
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2),
      tl$0 = match$1[2],
      s2 = match$1[1];
     return [0, rev_merge(s1, s2, 0), tl$0];
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function compare(_x8_, _x7_){return caml_int_compare(_x8_, _x7_);}
   function min(x, y){return x <= y ? x : y;}
   function max$0(x, y){return y <= x ? x : y;}
   function to_string(x){return "" + x;}
   function make$0(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function copy(s){
    var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
   }
   function of_string(s){return copy(caml_bytes_of_string(s));}
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return invalid_arg(_x_);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2){caml_blit_bytes(s1, ofs1, s2, ofs2, len); return;}
    return invalid_arg(_y_);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2){caml_blit_string(s1, ofs1, s2, ofs2, len); return;}
    return invalid_arg(_z_);
   }
   function escaped$0(s){
    var n = [0, 0], _x0_ = caml_ml_bytes_length(s) - 1 | 0, _xZ_ = 0;
    if(_x0_ >= 0){
     var i$0 = _xZ_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _x4_ = match - 34 | 0;
          if(58 < _x4_ >>> 0){
           if(93 <= _x4_) break c;
          }
          else if(56 < _x4_ - 1 >>> 0) break b;
          var _x5_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _x5_ = 4;
        break a;
       }
       var _x5_ = 2;
      }
      n[1] = n[1] + _x5_ | 0;
      var _x6_ = i$0 + 1 | 0;
      if(_x0_ === i$0) break;
      var i$0 = _x6_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s)) return copy(s);
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var _x2_ = caml_ml_bytes_length(s) - 1 | 0, _x1_ = 0;
    if(_x2_ >= 0){
     var i = _x1_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _x3_ = i + 1 | 0;
      if(_x2_ === i) break;
      var i = _x3_;
     }
    }
    return s$0;
   }
   function map$2(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), _xX_ = l - 1 | 0, _xW_ = 0;
    if(_xX_ >= 0){
     var i = _xW_;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(s, i)));
      var _xY_ = i + 1 | 0;
      if(_xX_ === i) break;
      var i = _xY_;
     }
    }
    return r;
   }
   function uppercase_ascii$0(s){return map$2(uppercase_ascii, s);}
   function unsafe_of_string(_xV_){return caml_bytes_of_string(_xV_);}
   function unsafe_to_string(_xU_){return caml_string_of_bytes(_xU_);}
   function make$1(n, c){return unsafe_to_string(make$0(n, c));}
   function sub$0(s, ofs, len){
    return unsafe_to_string(sub(unsafe_of_string(s), ofs, len));
   }
   function ensure_ge(x, y){return y <= x ? x : invalid_arg(_A_);}
   function sum_lengths(acc, seplen, param){
    var acc$0 = acc, param$0 = param;
    for(;;){
     if(! param$0) return acc$0;
     var hd = param$0[1];
     if(! param$0[2]) return caml_ml_string_length(hd) + acc$0 | 0;
     var
      tl = param$0[2],
      acc$1 =
        ensure_ge((caml_ml_string_length(hd) + seplen | 0) + acc$0 | 0, acc$0),
      acc$0 = acc$1,
      param$0 = tl;
    }
   }
   function unsafe_blits(dst, pos, sep, seplen, param){
    var pos$0 = pos, param$0 = param;
    for(;;){
     if(! param$0) return dst;
     var hd = param$0[1];
     if(! param$0[2]){
      caml_blit_string(hd, 0, dst, pos$0, caml_ml_string_length(hd));
      return dst;
     }
     var tl = param$0[2];
     caml_blit_string(hd, 0, dst, pos$0, caml_ml_string_length(hd));
     caml_blit_string
      (sep, 0, dst, pos$0 + caml_ml_string_length(hd) | 0, seplen);
     var
      pos$1 = (pos$0 + caml_ml_string_length(hd) | 0) + seplen | 0,
      pos$0 = pos$1,
      param$0 = tl;
    }
   }
   function concat(sep, l){
    if(! l) return _B_;
    var seplen = caml_ml_string_length(sep);
    return unsafe_to_string
            (unsafe_blits
              (caml_create_bytes(sum_lengths(0, seplen, l)),
               0,
               sep,
               seplen,
               l));
   }
   function escaped$1(s){
    function escape_if_needed(s, n, i){
     var i$0 = i;
     for(;;){
      if(n <= i$0) return s;
      var _xT_ = caml_string_unsafe_get(s, i$0) - 32 | 0;
      a:
      {
       if(59 < _xT_ >>> 0){
        if(33 < _xT_ - 61 >>> 0) break a;
       }
       else if(2 === _xT_) break a;
       var i$1 = i$0 + 1 | 0, i$0 = i$1;
       continue;
      }
      return unsafe_to_string(escaped$0(unsafe_of_string(s)));
     }
    }
    return escape_if_needed(s, caml_ml_string_length(s), 0);
   }
   function index_rec(s, lim, i, c){
    var i$0 = i;
    for(;;){
     if(lim <= i$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     if(caml_string_unsafe_get(s, i$0) === c) return i$0;
     var i$1 = i$0 + 1 | 0, i$0 = i$1;
    }
   }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var _xR_ = 1; return _xR_;}
     catch(_xS_){
      var _xQ_ = caml_wrap_exception(_xS_);
      if(_xQ_ === Not_found) return 0;
      throw caml_maybe_attach_backtrace(_xQ_, 0);
     }
    return invalid_arg(_C_);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function uppercase_ascii$1(s){
    return unsafe_to_string(uppercase_ascii$0(unsafe_of_string(s)));
   }
   function compare$0(x, y){return caml_string_compare(x, y);}
   function symbol$1(_xP_, _xO_){return caml_string_equal(_xP_, _xO_);}
   function sub$1(a, ofs, len){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return caml_array_sub(a, ofs, len);
    return invalid_arg(_D_);
   }
   function fill(a, ofs, len, v){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs){caml_array_fill(a, ofs, len, v); return;}
    return invalid_arg(_E_);
   }
   function blit$0(a1, ofs1, a2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2){
     caml_array_blit(a1, ofs1, a2, ofs2, len);
     return;
    }
    return invalid_arg(_F_);
   }
   function iter2(f, a, b){
    if(a.length - 1 !== b.length - 1) return invalid_arg(_G_);
    var _xM_ = a.length - 1 - 1 | 0, _xL_ = 0;
    if(_xM_ >= 0){
     var i = _xL_;
     for(;;){
      caml_call2(f, a[1 + i], b[1 + i]);
      var _xN_ = i + 1 | 0;
      if(_xM_ === i) break;
      var i = _xN_;
     }
    }
    return 0;
   }
   function map$3(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var
     r = caml_make_vect(l, caml_call1(f, a[1])),
     _xJ_ = l - 1 | 0,
     _xI_ = 1;
    if(_xJ_ >= 1){
     var i = _xI_;
     for(;;){
      r[1 + i] = caml_call1(f, a[1 + i]);
      var _xK_ = i + 1 | 0;
      if(_xJ_ === i) break;
      var i = _xK_;
     }
    }
    return r;
   }
   function to_list(a){
    function tolist(i, res){
     var i$0 = i, res$0 = res;
     for(;;){
      if(0 > i$0) return res$0;
      var
       res$1 = [0, a[1 + i$0], res$0],
       i$1 = i$0 - 1 | 0,
       i$0 = i$1,
       res$0 = res$1;
     }
    }
    return tolist(a.length - 1 - 1 | 0, 0);
   }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0) return accu$0;
     var
      t = param$0[2],
      accu$1 = accu$0 + 1 | 0,
      accu$0 = accu$1,
      param$0 = t;
    }
   }
   function of_list(l){
    if(! l) return [0];
    var tl = l[2], hd = l[1], a = caml_make_vect(list_length(0, l), hd);
    function fill(i, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return a;
      var tl = param$0[2], hd = param$0[1];
      a[1 + i$0] = hd;
      var i$1 = i$0 + 1 | 0, i$0 = i$1, param$0 = tl;
     }
    }
    return fill(1, tl);
   }
   function fold_right(f, a, x){
    var r = [0, x], _xG_ = a.length - 1 - 1 | 0;
    if(_xG_ >= 0){
     var i = _xG_;
     for(;;){
      r[1] = caml_call2(f, a[1 + i], r[1]);
      var _xH_ = i - 1 | 0;
      if(0 === i) break;
      var i = _xH_;
     }
    }
    return r[1];
   }
   function lex_refill(read_fun, aux_buffer, lexbuf){
    var
     read = caml_call2(read_fun, aux_buffer, caml_ml_bytes_length(aux_buffer)),
     n = 0 < read ? read : (lexbuf[9] = 1, 0);
    if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0)){
     if
      (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
       <= caml_ml_bytes_length(lexbuf[2]))
      blit(lexbuf[2], lexbuf[5], lexbuf[2], 0, lexbuf[3] - lexbuf[5] | 0);
     else{
      var
       newlen =
         min(2 * caml_ml_bytes_length(lexbuf[2]) | 0, max_string_length);
      if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0)) failwith(_H_);
      var newbuf = caml_create_bytes(newlen);
      blit(lexbuf[2], lexbuf[5], newbuf, 0, lexbuf[3] - lexbuf[5] | 0);
      lexbuf[2] = newbuf;
     }
     var s = lexbuf[5];
     lexbuf[4] = lexbuf[4] + s | 0;
     lexbuf[6] = lexbuf[6] - s | 0;
     lexbuf[5] = 0;
     lexbuf[7] = lexbuf[7] - s | 0;
     lexbuf[3] = lexbuf[3] - s | 0;
     var t = lexbuf[10], _xE_ = t.length - 1 - 1 | 0, _xD_ = 0;
     if(_xE_ >= 0){
      var i = _xD_;
      for(;;){
       var v = caml_check_bound(t, i)[1 + i];
       if(0 <= v) caml_check_bound(t, i)[1 + i] = v - s | 0;
       var _xF_ = i + 1 | 0;
       if(_xE_ === i) break;
       var i = _xF_;
      }
     }
    }
    blit(aux_buffer, 0, lexbuf[2], lexbuf[3], n);
    lexbuf[3] = lexbuf[3] + n | 0;
    return 0;
   }
   function from_function(opt, f){
    if(opt)
     var sth = opt[1], with_positions = sth;
    else
     var with_positions = 1;
    var
     _xz_ = with_positions ? zero_pos : dummy_pos,
     _xA_ = with_positions ? zero_pos : dummy_pos,
     _xB_ = caml_create_bytes(512);
    return [0,
            function(_xC_){return lex_refill(f, _xB_, _xC_);},
            caml_create_bytes(1024),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            [0],
            _xA_,
            _xz_];
   }
   function from_channel(with_positions, ic){
    return from_function
            (with_positions, function(buf, n){return input(ic, buf, 0, n);});
   }
   function from_string(opt, s){
    if(opt)
     var sth = opt[1], with_positions = sth;
    else
     var with_positions = 1;
    var
     _xx_ = with_positions ? zero_pos : dummy_pos,
     _xy_ = with_positions ? zero_pos : dummy_pos;
    return [0,
            function(lexbuf){lexbuf[9] = 1; return 0;},
            of_string(s),
            caml_ml_string_length(s),
            0,
            0,
            0,
            0,
            0,
            1,
            [0],
            _xy_,
            _xx_];
   }
   function lexeme(lexbuf){
    var len = lexbuf[6] - lexbuf[5] | 0;
    return sub_string(lexbuf[2], lexbuf[5], len);
   }
   function sub_lexeme(lexbuf, i1, i2){
    var len = i2 - i1 | 0;
    return sub_string(lexbuf[2], i1, len);
   }
   function Make(Ord){
    function height(param){if(! param) return 0; var h = param[4]; return h;}
    function create(l, v, r){
     if(l) var h = l[4], hl = h; else var hl = 0;
     if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
     var _xw_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
     return [0, l, v, r, _xw_];
    }
    function bal(l, v, r){
     if(l) var h = l[4], hl = h; else var hl = 0;
     if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
     if((hr + 2 | 0) < hl){
      if(! l) return invalid_arg(_J_);
      var lr = l[3], lv = l[2], ll = l[1], _xr_ = height(lr);
      if(_xr_ <= height(ll)) return create(ll, lv, create(lr, v, r));
      if(! lr) return invalid_arg(_I_);
      var lrr = lr[3], lrv = lr[2], lrl = lr[1], _xs_ = create(lrr, v, r);
      return create(create(ll, lv, lrl), lrv, _xs_);
     }
     if((hl + 2 | 0) >= hr){
      var _xv_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
      return [0, l, v, r, _xv_];
     }
     if(! r) return invalid_arg(_L_);
     var rr = r[3], rv = r[2], rl = r[1], _xt_ = height(rl);
     if(_xt_ <= height(rr)) return create(create(l, v, rl), rv, rr);
     if(! rl) return invalid_arg(_K_);
     var rlr = rl[3], rlv = rl[2], rll = rl[1], _xu_ = create(rlr, rv, rr);
     return create(create(l, v, rll), rlv, _xu_);
    }
    function add(x, t){
     if(! t) return [0, 0, x, 0, 1];
     var r = t[3], v = t[2], l = t[1], c = caml_call2(Ord[1], x, v);
     if(0 === c) return t;
     if(0 <= c){var rr = add(x, r); return r === rr ? t : bal(l, v, rr);}
     var ll = add(x, l);
     return l === ll ? t : bal(ll, v, r);
    }
    function singleton(x){return [0, 0, x, 0, 1];}
    function add_min_element(x, param){
     if(! param) return singleton(x);
     var r = param[3], v = param[2], l = param[1];
     return bal(add_min_element(x, l), v, r);
    }
    function add_max_element(x, param){
     if(! param) return singleton(x);
     var r = param[3], v = param[2], l = param[1];
     return bal(l, v, add_max_element(x, r));
    }
    function join(l, v, r){
     if(! l) return add_min_element(v, r);
     if(! r) return add_max_element(v, l);
     var
      rh = r[4],
      rr = r[3],
      rv = r[2],
      rl = r[1],
      lh = l[4],
      lr = l[3],
      lv = l[2],
      ll = l[1];
     return (rh + 2 | 0) < lh
             ? bal(ll, lv, join(lr, v, r))
             : (lh
               + 2
               | 0)
               < rh
               ? bal(join(l, v, rl), rv, rr)
               : create(l, v, r);
    }
    function min_elt(param){
     var param$0 = param;
     for(;;){
      if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
      var l = param$0[1];
      if(! l){var v = param$0[2]; return v;}
      var param$0 = l;
     }
    }
    function remove_min_elt(param){
     if(! param) return invalid_arg(_M_);
     var l = param[1];
     if(l){
      var r = param[3], v = param[2];
      return bal(remove_min_elt(l), v, r);
     }
     var r$0 = param[3];
     return r$0;
    }
    function merge(t1, t2){
     if(! t1) return t2;
     if(! t2) return t1;
     var _xq_ = remove_min_elt(t2);
     return bal(t1, min_elt(t2), _xq_);
    }
    function concat(t1, t2){
     if(! t1) return t2;
     if(! t2) return t1;
     var _xp_ = remove_min_elt(t2);
     return join(t1, min_elt(t2), _xp_);
    }
    function split(x, param){
     if(! param) return _N_;
     var
      r = param[3],
      v = param[2],
      l = param[1],
      c = caml_call2(Ord[1], x, v);
     if(0 === c) return [0, l, 1, r];
     if(0 <= c){
      var match = split(x, r), rr = match[3], pres = match[2], lr = match[1];
      return [0, join(l, v, lr), pres, rr];
     }
     var
      match$0 = split(x, l),
      rl = match$0[3],
      pres$0 = match$0[2],
      ll = match$0[1];
     return [0, ll, pres$0, join(rl, v, r)];
    }
    var empty = 0;
    function is_empty(param){return param ? 0 : 1;}
    function mem(x, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var
       r = param$0[3],
       v = param$0[2],
       l = param$0[1],
       c = caml_call2(Ord[1], x, v),
       _xo_ = 0 === c ? 1 : 0;
      if(_xo_) return _xo_;
      var r$0 = 0 <= c ? r : l, param$0 = r$0;
     }
    }
    function remove(x, t){
     if(! t) return 0;
     var r = t[3], v = t[2], l = t[1], c = caml_call2(Ord[1], x, v);
     if(0 === c) return merge(l, r);
     if(0 <= c){var rr = remove(x, r); return r === rr ? t : bal(l, v, rr);}
     var ll = remove(x, l);
     return l === ll ? t : bal(ll, v, r);
    }
    function union(s1, s2){
     if(! s1) return s2;
     if(! s2) return s1;
     var
      h2 = s2[4],
      r2 = s2[3],
      v2 = s2[2],
      l2 = s2[1],
      h1 = s1[4],
      r1 = s1[3],
      v1 = s1[2],
      l1 = s1[1];
     if(h2 <= h1){
      if(1 === h2) return add(v2, s1);
      var
       match = split(v1, s2),
       r2$0 = match[3],
       l2$0 = match[1],
       _xm_ = union(r1, r2$0);
      return join(union(l1, l2$0), v1, _xm_);
     }
     if(1 === h1) return add(v1, s2);
     var
      match$0 = split(v2, s1),
      r1$0 = match$0[3],
      l1$0 = match$0[1],
      _xn_ = union(r1$0, r2);
     return join(union(l1$0, l2), v2, _xn_);
    }
    function inter(s1, s2){
     if(! s1) return 0;
     if(! s2) return 0;
     var
      r1 = s1[3],
      v1 = s1[2],
      l1 = s1[1],
      _xj_ = split(v1, s2),
      l2 = _xj_[1];
     if(_xj_[2]){
      var r2 = _xj_[3], _xk_ = inter(r1, r2);
      return join(inter(l1, l2), v1, _xk_);
     }
     var r2$0 = _xj_[3], _xl_ = inter(r1, r2$0);
     return concat(inter(l1, l2), _xl_);
    }
    function diff(s1, s2){
     if(! s1) return 0;
     if(! s2) return s1;
     var
      r1 = s1[3],
      v1 = s1[2],
      l1 = s1[1],
      _xg_ = split(v1, s2),
      l2 = _xg_[1];
     if(_xg_[2]){
      var r2 = _xg_[3], _xh_ = diff(r1, r2);
      return concat(diff(l1, l2), _xh_);
     }
     var r2$0 = _xg_[3], _xi_ = diff(r1, r2$0);
     return join(diff(l1, l2), v1, _xi_);
    }
    function cons_enum(s, e){
     var s$0 = s, e$0 = e;
     for(;;){
      if(! s$0) return e$0;
      var
       r = s$0[3],
       v = s$0[2],
       l = s$0[1],
       e$1 = [0, v, r, e$0],
       s$0 = l,
       e$0 = e$1;
     }
    }
    function compare_aux(e1, e2){
     var e1$0 = e1, e2$0 = e2;
     for(;;){
      if(! e1$0) return e2$0 ? -1 : 0;
      if(! e2$0) return 1;
      var
       e2$1 = e2$0[3],
       r2 = e2$0[2],
       v2 = e2$0[1],
       e1$1 = e1$0[3],
       r1 = e1$0[2],
       v1 = e1$0[1],
       c = caml_call2(Ord[1], v1, v2);
      if(0 !== c) return c;
      var
       e2$2 = cons_enum(r2, e2$1),
       e1$2 = cons_enum(r1, e1$1),
       e1$0 = e1$2,
       e2$0 = e2$2;
     }
    }
    function compare(s1, s2){
     var _xf_ = cons_enum(s2, 0);
     return compare_aux(cons_enum(s1, 0), _xf_);
    }
    function equal(s1, s2){return 0 === compare(s1, s2) ? 1 : 0;}
    function subset(s1, s2){
     var s1$0 = s1, s2$0 = s2;
     for(;;){
      if(! s1$0) return 1;
      if(! s2$0) return 0;
      var
       r2 = s2$0[3],
       v2 = s2$0[2],
       l2 = s2$0[1],
       r1 = s1$0[3],
       v1 = s1$0[2],
       l1 = s1$0[1],
       c = caml_call2(Ord[1], v1, v2);
      if(0 === c){
       var _xc_ = subset(l1, l2);
       if(! _xc_) return _xc_;
       var s1$0 = r1, s2$0 = r2;
      }
      else if(0 <= c){
       var _xd_ = subset([0, 0, v1, r1, 0], r2);
       if(! _xd_) return _xd_;
       var s1$0 = l1;
      }
      else{
       var _xe_ = subset([0, l1, v1, 0, 0], l2);
       if(! _xe_) return _xe_;
       var s1$0 = r1;
      }
     }
    }
    function iter(f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var r = param$0[3], v = param$0[2], l = param$0[1];
      iter(f, l);
      caml_call1(f, v);
      var param$0 = r;
     }
    }
    function fold(f, s, accu){
     var s$0 = s, accu$0 = accu;
     for(;;){
      if(! s$0) return accu$0;
      var
       r = s$0[3],
       v = s$0[2],
       l = s$0[1],
       accu$1 = caml_call2(f, v, fold(f, l, accu$0)),
       s$0 = r,
       accu$0 = accu$1;
     }
    }
    function cardinal(param){
     if(! param) return;
     var r = param[3], l = param[1];
     cardinal(r);
     cardinal(l);
     return;
    }
    function elements_aux(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0) return accu$0;
      var
       r = param$0[3],
       v = param$0[2],
       l = param$0[1],
       accu$1 = [0, v, elements_aux(accu$0, r)],
       accu$0 = accu$1,
       param$0 = l;
     }
    }
    function elements(s){return elements_aux(0, s);}
    function find_last_opt_aux(v0, f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var
       r = param$0[3],
       v0$0 = param$0[2],
       l = param$0[1],
       param$0 = caml_call1(f, v0$0) ? r : l;
     }
    }
    function find_last_opt(f, param){
     var param$0 = param;
     for(;;){
      if(! param$0) return;
      var r = param$0[3], v = param$0[2], l = param$0[1];
      if(caml_call1(f, v)) return find_last_opt_aux(v, f, r);
      var param$0 = l;
     }
    }
    function of_sorted_list(l){
     function sub(n, l){
      if(3 >= n >>> 0)
       switch(n){
         case 0:
          return [0, 0, l];
         case 1:
          if(l){var l$3 = l[2], x0 = l[1]; return [0, [0, 0, x0, 0, 1], l$3];}
          break;
         case 2:
          if(l){
           var match$1 = l[2];
           if(match$1){
            var l$4 = match$1[2], x1 = match$1[1], x0$0 = l[1];
            return [0, [0, [0, 0, x0$0, 0, 1], x1, 0, 2], l$4];
           }
          }
          break;
         default:
          if(l){
           var _xb_ = l[2];
           if(_xb_){
            var match$2 = _xb_[2];
            if(match$2){
             var
              l$5 = match$2[2],
              x2 = match$2[1],
              x1$0 = _xb_[1],
              x0$1 = l[1];
             return [0,
                     [0, [0, 0, x0$1, 0, 1], x1$0, [0, 0, x2, 0, 1], 2],
                     l$5];
            }
           }
          }
       }
      var nl = n / 2 | 0, match = sub(nl, l), l$0 = match[2], left = match[1];
      if(! l$0)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
      var
       l$1 = l$0[2],
       mid = l$0[1],
       match$0 = sub((n - nl | 0) - 1 | 0, l$1),
       l$2 = match$0[2],
       right = match$0[1];
      return [0, create(left, mid, right), l$2];
     }
     return sub(length(l), l)[1];
    }
    function of_list(l){
     if(! l) return empty;
     var _w9_ = l[2], x0 = l[1];
     if(! _w9_) return singleton(x0);
     var _w__ = _w9_[2], x1 = _w9_[1];
     if(! _w__) return add(x1, singleton(x0));
     var _w$_ = _w__[2], x2 = _w__[1];
     if(! _w$_) return add(x2, add(x1, singleton(x0)));
     var _xa_ = _w$_[2], x3 = _w$_[1];
     if(! _xa_) return add(x3, add(x2, add(x1, singleton(x0))));
     if(_xa_[2]) return of_sorted_list(sort_uniq(Ord[1], l));
     var x4 = _xa_[1];
     return add(x4, add(x3, add(x2, add(x1, singleton(x0)))));
    }
    return [0,
            ,
            ,
            ,
            add,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            empty,
            is_empty,
            mem,
            remove,
            union,
            inter,
            ,
            ,
            diff,
            ,
            ,
            compare,
            equal,
            subset,
            iter,
            fold,
            ,
            ,
            ,
            ,
            cardinal,
            ,
            elements,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            find_last_opt,
            ,
            ,
            ,
            ,
            ,
            ,
            of_list];
   }
   function _P_(_w7_){
    var _w8_ = Make(_w7_);
    return [0,
            _w8_[17],
            _w8_[18],
            _w8_[19],
            _w8_[4],
            ,
            _w8_[20],
            _w8_[21],
            _w8_[22],
            ,
            _w8_[25],
            _w8_[28],
            _w8_[29],
            _w8_[30],
            _w8_[31],
            ,
            _w8_[32],
            ,
            ,
            ,
            ,
            ,
            _w8_[37],
            _w8_[39],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _w8_[50],
            _w8_[57]];
   }
   function create(param){return [0, 0, 0];}
   function clear(s){s[1] = 0; s[2] = 0; return;}
   function push(x, s){s[1] = [0, x, s[1]]; s[2] = s[2] + 1 | 0; return 0;}
   function pop_opt(s){
    var match = s[1];
    if(! match) return 0;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return [0, hd];
   }
   function top_opt(s){
    var match = s[1];
    if(! match) return 0;
    var hd = match[1];
    return [0, hd];
   }
   function iter$0(f, s){return iter(f, s[1]);}
   var Empty = [248, _Q_, caml_fresh_oo_id(0)];
   function create$0(param){return [0, 0, 0, 0];}
   function clear$0(q){q[1] = 0; q[2] = 0; q[3] = 0; return;}
   function add(x, q){
    var cell = [0, x, 0], match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
   }
   function peek_opt(q){
    var match = q[2];
    if(! match) return 0;
    var content = match[1];
    return [0, content];
   }
   function take(q){
    var _w6_ = q[2];
    if(! _w6_) throw caml_maybe_attach_backtrace(Empty, 1);
    var content = _w6_[1];
    if(_w6_[2]){
     var next = _w6_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return content;
    }
    clear$0(q);
    return content;
   }
   function take_opt(q){
    var _w5_ = q[2];
    if(! _w5_) return 0;
    var content = _w5_[1];
    if(_w5_[2]){
     var next = _w5_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return [0, content];
    }
    clear$0(q);
    return [0, content];
   }
   function is_empty(q){return 0 === q[1] ? 1 : 0;}
   function length$0(q){return q[1];}
   function iter$1(f, cell){
    var cell$0 = cell;
    for(;;){
     if(! cell$0) return;
     var content = cell$0[1], next = cell$0[2];
     caml_call1(f, content);
     var cell$0 = next;
    }
   }
   function iter$2(f, q){return iter$1(f, q[2]);}
   function from(f){return [0, [0, 0, [3, [0, 0, f]]]];}
   function create$1(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = max_string_length < n$0 ? max_string_length : n$0,
     s = caml_create_bytes(n$1);
    return [0, s, 0, n$1, s];
   }
   function contents(b){return sub_string(b[1], 0, b[2]);}
   function sub$2(b, ofs, len){
    if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
     return sub_string(b[1], ofs, len);
    return invalid_arg(_R_);
   }
   function length$1(b){return b[2];}
   function reset(b){
    b[2] = 0;
    b[1] = b[4];
    b[3] = caml_ml_bytes_length(b[1]);
    return;
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[3], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(max_string_length < new_len[1])
     if((old_pos + more | 0) <= max_string_length)
      new_len[1] = max_string_length;
     else
      failwith(_V_);
    var new_buffer = caml_create_bytes(new_len[1]);
    blit(b[1], 0, new_buffer, 0, b[2]);
    b[1] = new_buffer;
    b[3] = new_len[1];
    if((b[2] + more | 0) > b[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _U_], 1);
    if((old_pos + more | 0) <= b[3]) return;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _S_], 1);
   }
   function add_char(b, c){
    var pos = b[2];
    if(b[3] <= pos) resize(b, 1);
    caml_bytes_unsafe_set(b[1], pos, c);
    b[2] = pos + 1 | 0;
    return 0;
   }
   function add_substring(b, s, offset, len){
    var _w2_ = offset < 0 ? 1 : 0;
    if(_w2_)
     var _w3_ = _w2_;
    else
     var
      _w4_ = len < 0 ? 1 : 0,
      _w3_ = _w4_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_w3_) invalid_arg(_W_);
    var new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, offset, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function add_string(b, s){
    var len = caml_ml_string_length(s), new_position = b[2] + len | 0;
    if(b[3] < new_position) resize(b, len);
    caml_blit_string(s, 0, b[1], b[2], len);
    b[2] = new_position;
    return 0;
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var len = caml_ml_bytes_length(buf[2]), min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len = max$0(len * 2 | 0, min_len),
      new_str = caml_create_bytes(new_len);
     blit(buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
    return;
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    return;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    blit_string(s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
    return;
   }
   function buffer_contents(buf){return sub_string(buf[2], 0, buf[1]);}
   function char_of_fconv(opt, fconv){
    if(opt) var sth = opt[1], cF = sth; else var cF = 70;
    switch(fconv[2]){
      case 0:
       return 102;
      case 1:
       return 101;
      case 2:
       return 69;
      case 3:
       return 103;
      case 4:
       return 71;
      case 5:
       return cF;
      case 6:
       return 104;
      case 7:
       return 72;
      default: return 70;
    }
   }
   function bprint_fconv_flag(buf, fconv){
    switch(fconv[1]){
      case 0: break;
      case 1:
       buffer_add_char(buf, 43); break;
      default: buffer_add_char(buf, 32);
    }
    if(8 <= fconv[2]) return buffer_add_char(buf, 35);
    return;
   }
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return _X_;
       case 1:
        return _Y_;
       case 2:
        return _Z_;
       case 3:
        return ___;
       case 4:
        return _$_;
       case 5:
        return _aa_;
       default: return _ab_;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1]; return str;
      case 1:
       var str$0 = formatting_lit[1]; return str$0;
      default: var c = formatting_lit[1]; return symbol(_ac_, make$1(1, c));
    }
   }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
    for(;;){
     if(typeof fmtty$0 === "number") return;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
        buffer_add_string(buf, _ad_);
        var fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
        buffer_add_string(buf, _ae_);
        var fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
        buffer_add_string(buf, _af_);
        var fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
        buffer_add_string(buf, _ag_);
        var fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
        buffer_add_string(buf, _ah_);
        var fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
        buffer_add_string(buf, _ai_);
        var fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
        buffer_add_string(buf, _aj_);
        var fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
        buffer_add_string(buf, _ak_);
        var fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
        buffer_add_string(buf, _al_);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, _am_);
        var fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
        buffer_add_string(buf, _an_);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, _ao_);
        var fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
        buffer_add_string(buf, _ap_);
        var fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
        buffer_add_string(buf, _aq_);
        var fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
        buffer_add_string(buf, _ar_);
        var fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
        buffer_add_string(buf, _as_);
        var fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
        buffer_add_string(buf, _at_);
        var fmtty$0 = fmtty$15;
     }
    }
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param === "number")
     return [0,
             function(param){return;},
             function(param){return;},
             function(param){return;},
             function(param){return;}];
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match = fmtty_rel_det(rest),
        de = match[4],
        ed = match[3],
        af = match[2],
        fa = match[1];
       return [0,
               function(param){fa(0); return;},
               function(param){af(0); return;},
               ed,
               de];
      case 1:
       var
        rest$0 = param[1],
        match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        ed$0 = match$0[3],
        af$0 = match$0[2],
        fa$0 = match$0[1];
       return [0,
               function(param){fa$0(0); return;},
               function(param){af$0(0); return;},
               ed$0,
               de$0];
      case 2:
       var
        rest$1 = param[1],
        match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        ed$1 = match$1[3],
        af$1 = match$1[2],
        fa$1 = match$1[1];
       return [0,
               function(param){fa$1(0); return;},
               function(param){af$1(0); return;},
               ed$1,
               de$1];
      case 3:
       var
        rest$2 = param[1],
        match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        ed$2 = match$2[3],
        af$2 = match$2[2],
        fa$2 = match$2[1];
       return [0,
               function(param){fa$2(0); return;},
               function(param){af$2(0); return;},
               ed$2,
               de$2];
      case 4:
       var
        rest$3 = param[1],
        match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        ed$3 = match$3[3],
        af$3 = match$3[2],
        fa$3 = match$3[1];
       return [0,
               function(param){fa$3(0); return;},
               function(param){af$3(0); return;},
               ed$3,
               de$3];
      case 5:
       var
        rest$4 = param[1],
        match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        ed$4 = match$4[3],
        af$4 = match$4[2],
        fa$4 = match$4[1];
       return [0,
               function(param){fa$4(0); return;},
               function(param){af$4(0); return;},
               ed$4,
               de$4];
      case 6:
       var
        rest$5 = param[1],
        match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        ed$5 = match$5[3],
        af$5 = match$5[2],
        fa$5 = match$5[1];
       return [0,
               function(param){fa$5(0); return;},
               function(param){af$5(0); return;},
               ed$5,
               de$5];
      case 7:
       var
        rest$6 = param[1],
        match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        ed$6 = match$6[3],
        af$6 = match$6[2],
        fa$6 = match$6[1];
       return [0,
               function(param){fa$6(0); return;},
               function(param){af$6(0); return;},
               ed$6,
               de$6];
      case 8:
       var
        rest$7 = param[2],
        match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        ed$7 = match$7[3],
        af$7 = match$7[2],
        fa$7 = match$7[1];
       return [0,
               function(param){fa$7(0); return;},
               function(param){af$7(0); return;},
               ed$7,
               de$7];
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        ed$8 = match$8[3],
        af$8 = match$8[2],
        fa$8 = match$8[1],
        ty = trans(symm(ty1), ty2),
        match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        dj = match$9[3],
        ga = match$9[2],
        ag = match$9[1];
       return [0,
               function(param){fa$8(0); ag(0); return;},
               function(param){ga(0); af$8(0); return;},
               function(param){ed$8(0); dj(0); return;},
               function(param){jd(0); de$8(0); return;}];
      case 10:
       var
        rest$9 = param[1],
        match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        ed$9 = match$10[3],
        af$9 = match$10[2],
        fa$9 = match$10[1];
       return [0,
               function(param){fa$9(0); return;},
               function(param){af$9(0); return;},
               ed$9,
               de$9];
      case 11:
       var
        rest$10 = param[1],
        match$11 = fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        ed$10 = match$11[3],
        af$10 = match$11[2],
        fa$10 = match$11[1];
       return [0,
               function(param){fa$10(0); return;},
               function(param){af$10(0); return;},
               ed$10,
               de$10];
      case 12:
       var
        rest$11 = param[1],
        match$12 = fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        ed$11 = match$12[3],
        af$11 = match$12[2],
        fa$11 = match$12[1];
       return [0,
               function(param){fa$11(0); return;},
               function(param){af$11(0); return;},
               ed$11,
               de$11];
      case 13:
       var
        rest$12 = param[1],
        match$13 = fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        ed$12 = match$13[3],
        af$12 = match$13[2],
        fa$12 = match$13[1];
       return [0,
               function(param){fa$12(0); return;},
               function(param){af$12(0); return;},
               function(param){ed$12(0); return;},
               function(param){de$12(0); return;}];
      default:
       var
        rest$13 = param[1],
        match$14 = fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        ed$13 = match$14[3],
        af$13 = match$14[2],
        fa$13 = match$14[1];
       return [0,
               function(param){fa$13(0); return;},
               function(param){af$13(0); return;},
               function(param){ed$13(0); return;},
               function(param){de$13(0); return;}];
    }
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _w1_ = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), _w1_];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aD_], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aE_], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aF_], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aG_], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aH_], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aI_], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, _aJ_], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, _aC_], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, _au_], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _aw_], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, _av_], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, _aB_], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _aA_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _az_], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _ay_], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ax_], 1);
   }
   var Type_mismatch = [248, _aK_, caml_fresh_oo_id(0)];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_format(fmt, fmtty){
    var _w0_ = type_format_gen(fmt, fmtty);
    if(typeof _w0_[2] !== "number")
     throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    var fmt$0 = _w0_[1];
    return fmt$0;
   }
   function type_format_gen(fmt, fmtty){
    if(typeof fmt === "number") return [0, 0, fmtty];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty$0 = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$1 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$1];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$2 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$3 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$4 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$5 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$6 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$7 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$8 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$9 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$9];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty),
        fmtty$10 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$10];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty),
        fmtty$11 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$11];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty),
        fmtty$12 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$12];
      case 13:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[2],
         sub_fmtty = fmtty[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$13 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$13];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[3],
         sub_fmtty1 = fmtty[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _wZ_ = [0, erase_rel(sub_fmtty1)];
        if(caml_notequal([0, erase_rel(sub_fmtty$1)], _wZ_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 = type_format_gen(fmt_rest$13, erase_rel(fmtty_rest$10)),
         fmtty$14 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$14];
       }
       break;
      case 15:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$15 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$15];
       }
       break;
      case 16:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$16 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$16];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty),
        fmtty$17 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$17];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       return type_formatting_gen(formatting_gen, fmt_rest$17, fmtty);
      case 19:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$13 = fmtty[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$18 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$18];
       }
       break;
      case 20:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$14 = fmtty[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$19 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$19];
       }
       break;
      case 21:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$15 = fmtty[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$20 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$20];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       return type_ignored_param(ign, rest, fmtty);
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_formatting_gen(formatting_gen, fmt0, fmtty0){
    if(0 === formatting_gen[0]){
     var
      match = formatting_gen[1],
      str = match[2],
      fmt1 = match[1],
      match$0 = type_format_gen(fmt1, fmtty0),
      fmtty2 = match$0[2],
      fmt2 = match$0[1],
      match$1 = type_format_gen(fmt0, fmtty2),
      fmtty3 = match$1[2],
      fmt3 = match$1[1];
     return [0, [18, [0, [0, fmt2, str]], fmt3], fmtty3];
    }
    var
     match$2 = formatting_gen[1],
     str$0 = match$2[2],
     fmt1$0 = match$2[1],
     match$3 = type_format_gen(fmt1$0, fmtty0),
     fmtty2$0 = match$3[2],
     fmt2$0 = match$3[1],
     match$4 = type_format_gen(fmt0, fmtty2$0),
     fmtty3$0 = match$4[2],
     fmt3$0 = match$4[1];
    return [0, [18, [1, [0, fmt2$0, str$0]], fmt3$0], fmtty3$0];
   }
   function type_ignored_param(ign, fmt, fmtty){
    if(typeof ign !== "number")
     switch(ign[0]){
       case 0:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 1:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 2:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 3:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 4:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 5:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 6:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 7:
        return type_ignored_param_one(ign, fmt, fmtty);
       case 8:
        var sub_fmtty = ign[2], pad_opt = ign[1];
        return type_ignored_param_one([8, pad_opt, sub_fmtty], fmt, fmtty);
       case 9:
        var
         sub_fmtty$0 = ign[2],
         pad_opt$0 = ign[1],
         _wY_ = type_ignored_format_substituti(sub_fmtty$0, fmt, fmtty),
         match$0 = _wY_[2],
         fmtty$1 = match$0[2],
         fmt$1 = match$0[1],
         sub_fmtty$1 = _wY_[1];
        return [0, [23, [9, pad_opt$0, sub_fmtty$1], fmt$1], fmtty$1];
       case 10:
        return type_ignored_param_one(ign, fmt, fmtty);
       default: return type_ignored_param_one(ign, fmt, fmtty);
     }
    switch(ign){
      case 0:
       return type_ignored_param_one(ign, fmt, fmtty);
      case 1:
       return type_ignored_param_one(ign, fmt, fmtty);
      case 2:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         match = type_format_gen(fmt, fmtty_rest),
         fmtty$0 = match[2],
         fmt$0 = match[1];
        return [0, [23, 2, fmt$0], fmtty$0];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      default: return type_ignored_param_one(ign, fmt, fmtty);
    }
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _wW_ = [0, erase_rel(sub1_fmtty)];
        if(caml_notequal([0, erase_rel(sub1_fmtty$0)], _wW_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var _wX_ = [0, erase_rel(sub2_fmtty$1)];
        if(caml_notequal([0, erase_rel(sub2_fmtty$2)], _wX_))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (erase_rel(sub_fmtty_rest$17), fmt, fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function recast(fmt, fmtty){
    return type_format(fmt, erase_rel(symm(fmtty)));
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = abs(width);
    if(width$0 <= len) return str;
    var _wV_ = 2 === padty$0 ? 48 : 32, res = make$0(width$0, _wV_);
    switch(padty$0){
      case 0:
       blit_string(str, 0, res, 0, len); break;
      case 1:
       blit_string(str, 0, res, width$0 - len | 0, len); break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        blit_string(str, 1, res, (width$0 - len | 0) + 1 | 0, len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        blit_string(str, 2, res, (width$0 - len | 0) + 2 | 0, len - 2 | 0);
        break;
       }
       blit_string(str, 0, res, width$0 - len | 0, len);
    }
    return unsafe_to_string(res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = abs(prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
            if
             (120 !== caml_string_get(str, 1)
              && 88 !== caml_string_get(str, 1))
             break c;
            var res$1 = make$0(prec$0 + 2 | 0, 48);
            caml_bytes_set(res$1, 1, caml_string_get(str, 1));
            blit_string
             (str, 2, res$1, (prec$0 - len | 0) + 4 | 0, len - 2 | 0);
            return unsafe_to_string(res$1);
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = make$0(prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       blit_string(str, 1, res$0, (prec$0 - len | 0) + 2 | 0, len - 1 | 0);
       return unsafe_to_string(res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = make$0(prec$0, 48);
      blit_string(str, 0, res, prec$0 - len | 0, len);
      return unsafe_to_string(res);
     }
    }
    return str;
   }
   function string_to_caml_string(str){
    var
     str$0 = escaped$1(str),
     l = caml_ml_string_length(str$0),
     res = make$0(l + 2 | 0, 34);
    caml_blit_string(str$0, 0, res, 1, l);
    return unsafe_to_string(res);
   }
   function format_of_iconv(param){
    switch(param){
      case 1:
       return _aM_;
      case 2:
       return _aN_;
      case 4:
       return _aP_;
      case 5:
       return _aQ_;
      case 6:
       return _aR_;
      case 7:
       return _aS_;
      case 8:
       return _aT_;
      case 9:
       return _aU_;
      case 10:
       return _aV_;
      case 11:
       return _aW_;
      case 0:
      case 13:
       return _aL_;
      case 3:
      case 14:
       return _aO_;
      default: return _aX_;
    }
   }
   function format_of_iconvL(param){
    switch(param){
      case 1:
       return _aZ_;
      case 2:
       return _a0_;
      case 4:
       return _a2_;
      case 5:
       return _a3_;
      case 6:
       return _a4_;
      case 7:
       return _a5_;
      case 8:
       return _a6_;
      case 9:
       return _a7_;
      case 10:
       return _a8_;
      case 11:
       return _a9_;
      case 0:
      case 13:
       return _aY_;
      case 3:
      case 14:
       return _a1_;
      default: return _a__;
    }
   }
   function format_of_iconvl(param){
    switch(param){
      case 1:
       return _ba_;
      case 2:
       return _bb_;
      case 4:
       return _bd_;
      case 5:
       return _be_;
      case 6:
       return _bf_;
      case 7:
       return _bg_;
      case 8:
       return _bh_;
      case 9:
       return _bi_;
      case 10:
       return _bj_;
      case 11:
       return _bk_;
      case 0:
      case 13:
       return _a$_;
      case 3:
      case 14:
       return _bc_;
      default: return _bl_;
    }
   }
   function format_of_iconvn(param){
    switch(param){
      case 1:
       return _bn_;
      case 2:
       return _bo_;
      case 4:
       return _bq_;
      case 5:
       return _br_;
      case 6:
       return _bs_;
      case 7:
       return _bt_;
      case 8:
       return _bu_;
      case 9:
       return _bv_;
      case 10:
       return _bw_;
      case 11:
       return _bx_;
      case 0:
      case 13:
       return _bm_;
      case 3:
      case 14:
       return _bp_;
      default: return _by_;
    }
   }
   function format_of_fconv(fconv, prec){
    var
     prec$0 = abs(prec),
     symb = char_of_fconv(_bz_, fconv),
     buf = buffer_create(16);
    buffer_add_char(buf, 37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, to_string(prec$0));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], _wQ_ = caml_ml_string_length(s) - 1 | 0, _wP_ = 0;
    if(_wQ_ >= 0){
     var i$0 = _wP_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _wU_ = i$0 + 1 | 0;
      if(_wQ_ === i$0) break;
      var i$0 = _wU_;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++; return;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _wS_ = caml_ml_string_length(s) - 1 | 0,
     _wR_ = 0;
    if(_wS_ >= 0){
     var i = _wR_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1] += -1; put(c);}
      var _wT_ = i + 1 | 0;
      if(_wS_ === i) break;
      var i = _wT_;
     }
    }
    return unsafe_to_string(buf);
   }
   function convert_int(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconv(iconv), n));
   }
   function convert_int32(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconvl(iconv), n));
   }
   function convert_nativeint(iconv, n){
    return transform_int_alt
            (iconv, caml_format_int(format_of_iconvn(iconv), n));
   }
   function convert_int64(iconv, n){
    return transform_int_alt
            (iconv, caml_int64_format(format_of_iconvL(iconv), n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return caml_hexstring_of_float(x, prec, sign);
    }
    function add_dot_if_needed(str){
     var len = caml_ml_string_length(str);
     function is_valid(i){
      var i$0 = i;
      for(;;){
       if(i$0 === len) return 0;
       var _wO_ = caml_string_get(str, i$0) - 46 | 0;
       a:
       {
        if(23 < _wO_ >>> 0){
         if(55 === _wO_) break a;
        }
        else if(21 < _wO_ - 1 >>> 0) break a;
        var i$1 = i$0 + 1 | 0, i$0 = i$1;
        continue;
       }
       return 1;
      }
     }
     return is_valid(0) ? str : symbol(str, _bA_);
    }
    function caml_special_val(str){
     var match = caml_classify_float(x);
     return 3 === match ? x < 0. ? _bB_ : _bC_ : 4 <= match ? _bD_ : str;
    }
    switch(fconv[2]){
      case 5:
       var str = caml_format_float(format_of_fconv(fconv, prec), x);
       return caml_special_val(add_dot_if_needed(str));
      case 6:
       return hex(0);
      case 7:
       return uppercase_ascii$1(hex(0));
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function format_caml_char(c){
    var
     str = escaped(c),
     l = caml_ml_string_length(str),
     res = make$0(l + 2 | 0, 39);
    caml_blit_string(str, 0, res, 1, l);
    return unsafe_to_string(res);
   }
   function string_of_fmtty(fmtty){
    var buf = buffer_create(16);
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
   }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
    for(;;){
     if(typeof fmt$0 === "number") return caml_call1(k$0, acc$0);
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest);};
       case 1:
        var rest$0 = fmt$0[1];
        return function(c){
         var new_acc = [4, acc$0, format_caml_char(c)];
         return make_printf(k$0, new_acc, rest$0);};
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0, acc$0, rest$1, pad, function(str){return str;});
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        return make_float_padding_precision
                (k$0, acc$0, rest$7, pad$5, prec$3, fconv);
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, string_of_bool);
       case 10:
        var
         rest$9 = fmt$0[1],
         acc$1 = [7, acc$0],
         acc$0 = acc$1,
         fmt$0 = rest$9;
        break;
       case 11:
        var
         rest$10 = fmt$0[2],
         str = fmt$0[1],
         acc$2 = [2, acc$0, str],
         acc$0 = acc$2,
         fmt$0 = rest$10;
        break;
       case 12:
        var
         rest$11 = fmt$0[2],
         chr = fmt$0[1],
         acc$3 = [3, acc$0, chr],
         acc$0 = acc$3,
         fmt$0 = rest$11;
        break;
       case 13:
        var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
         ty = string_of_fmtty(sub_fmtty);
        return function(str){
         return make_printf(k$0, [4, acc$0, ty], rest$12);};
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
         var fmt = param[1];
         return make_printf
                 (k$0, acc$0, concat_fmt(recast(fmt, fmtty), rest$13));};
       case 15:
        var rest$14 = fmt$0[1];
        return function(f, x){
         return make_printf
                 (k$0,
                  [6, acc$0, function(o){return caml_call2(f, o, x);}],
                  rest$14);};
       case 16:
        var rest$15 = fmt$0[1];
        return function(f){return make_printf(k$0, [6, acc$0, f], rest$15);};
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit],
         acc$0 = acc$4,
         fmt$0 = rest$16;
        break;
       case 18:
        var _wM_ = fmt$0[1];
        if(0 === _wM_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _wM_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){return make_printf(k, [1, acc, [0, kacc]], rest);},
          k$0 = k$1,
          acc$0 = 0,
          fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _wM_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){return make_printf(k, [1, acc, [1, kacc]], rest);},
          k$0 = k$2,
          acc$0 = 0,
          fmt$0 = fmt$2;
        }
        break;
       case 19:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bE_], 1);
       case 20:
        var rest$19 = fmt$0[3], new_acc = [8, acc$0, _bF_];
        return function(param){return make_printf(k$0, new_acc, rest$19);};
       case 21:
        var rest$20 = fmt$0[2];
        return function(n){
         var new_acc = [4, acc$0, caml_format_int(cst_u, n)];
         return make_printf(k$0, new_acc, rest$20);};
       case 22:
        var rest$21 = fmt$0[1];
        return function(c){
         var new_acc = [5, acc$0, c];
         return make_printf(k$0, new_acc, rest$21);};
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (make_ignored_param, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
        return make_ignored_param(counter$1, k$0, acc$0, ign, rest$22);
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _wN_ = caml_call1(f, 0);
        if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _wN_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _wN_);
     }
    }
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param(counter, k, acc, ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
        return make_invalid_arg(counter$0, k, acc, fmt);
       case 1:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
        return make_invalid_arg(counter$1, k, acc, fmt);
       case 2:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bG_], 1);
       default:
        if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
        return make_invalid_arg(counter$2, k, acc, fmt);
     }
    switch(ign[0]){
      case 0:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
       return make_invalid_arg(counter$3, k, acc, fmt);
      case 1:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
       return make_invalid_arg(counter$4, k, acc, fmt);
      case 2:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
       return make_invalid_arg(counter$5, k, acc, fmt);
      case 3:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
       return make_invalid_arg(counter$6, k, acc, fmt);
      case 4:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
       return make_invalid_arg(counter$7, k, acc, fmt);
      case 5:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
       return make_invalid_arg(counter$8, k, acc, fmt);
      case 6:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
       return make_invalid_arg(counter$9, k, acc, fmt);
      case 7:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
       return make_invalid_arg(counter$10, k, acc, fmt);
      case 8:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
       return make_invalid_arg(counter$11, k, acc, fmt);
      case 9:
       var fmtty = ign[2];
       if(counter >= 50)
        return caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
       return make_from_fmtty$0(counter$14, k, acc, fmtty, fmt);
      case 10:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
       return make_invalid_arg(counter$12, k, acc, fmt);
      default:
       if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
       return make_invalid_arg(counter$13, k, acc, fmt);
    }
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty(k, acc, concat_fmtty(ty, rest$8), fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(param, _wL_){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bH_], 1);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _bI_], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var _wK_ = [8, acc, _bJ_];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _wK_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _wK_, fmt);
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_float_padding_precision(k, acc, fmt, pad, prec, fconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = convert_float(fconv, p, x);
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var
                 str = convert_float(fconv, default_float_precision(fconv), x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = convert_float(fconv, p, x);
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_padding(padty, w, convert_float(fconv, p, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var
                 str = convert_float(fconv, default_float_precision(fconv), x),
                 str$0 = fix_padding(padty, w, str);
                return make_printf(k, [4, acc, str$0], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var str = fix_padding(padty$0, w, convert_float(fconv, p, x));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var
                str = convert_float(fconv, default_float_precision(fconv), x),
                str$0 = fix_padding(padty$0, w, str);
               return make_printf(k, [4, acc, str$0], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var _wJ_ = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _wJ_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _wJ_, rest);
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return output_string(o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         output_acc(o, p$0);
         output_string(o, _bK_);
         var acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         output_acc(o, p$0);
         output_string(o, _bL_);
         var acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc$0[1]; output_acc(o, p$4); return _k_(o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
        output_acc(o, p$5);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        output_acc(o, p$1);
        return output_string(o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        output_acc(o, p$2);
        return _j_(o, c);
     }
    }
   }
   function strput_acc(b, acc){
    var acc$0 = acc;
    for(;;){
     if(typeof acc$0 === "number") return;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return add_string(b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
         strput_acc(b, p$0);
         add_string(b, _bM_);
         var acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
         strput_acc(b, p$0);
         add_string(b, _bN_);
         var acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
        strput_acc(b, p$3);
        return add_string(b, caml_call1(f, 0));
       case 7:
        var acc$3 = acc$0[1], acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
        strput_acc(b, p$4);
        return invalid_arg(msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
        strput_acc(b, p$1);
        return add_string(b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
        strput_acc(b, p$2);
        return add_char(b, c);
     }
    }
   }
   function failwith_message(param){
    var fmt = param[1], buf = create$1(256);
    function k(acc){strput_acc(buf, acc); return failwith(contents(buf));}
    return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
    if(caml_string_equal(str, cst$1)) return _bO_;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
     return caml_call1(failwith_message(_bP_), str);
    }
    function parse_spaces(i){
     var i$0 = i;
     for(;;){
      if(i$0 === len) return i$0;
      var match = caml_string_get(str, i$0);
      if(9 !== match && 32 !== match) return i$0;
      var i$1 = i$0 + 1 | 0, i$0 = i$1;
     }
    }
    function parse_lword(i, j){
     var j$0 = j;
     for(;;){
      if(j$0 === len) return j$0;
      if(25 < caml_string_get(str, j$0) - 97 >>> 0) return j$0;
      var j$1 = j$0 + 1 | 0, j$0 = j$1;
     }
    }
    function parse_int(i, j){
     var j$0 = j;
     for(;;){
      if(j$0 === len) return j$0;
      var match = caml_string_get(str, j$0);
      a:
      {
       if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
       return j$0;
      }
      var j$1 = j$0 + 1 | 0, j$0 = j$1;
     }
    }
    var
     wstart = parse_spaces(0),
     wend = parse_lword(wstart, wstart),
     box_name = sub$0(str, wstart, wend - wstart | 0),
     nstart = parse_spaces(wend),
     nend = parse_int(nstart, nstart);
    if(nstart === nend)
     var indent = 0;
    else
     try{
      var
       _wH_ = caml_int_of_string(sub$0(str, nstart, nend - nstart | 0)),
       indent = _wH_;
     }
     catch(_wI_){
      var _wF_ = caml_wrap_exception(_wI_);
      if(_wF_[1] !== Failure) throw caml_maybe_attach_backtrace(_wF_, 0);
      var _wG_ = invalid_box(0), indent = _wG_;
     }
    var exp_end = parse_spaces(nend);
    if(exp_end !== len) invalid_box(0);
    a:
    {
     if
      (caml_string_notequal(box_name, cst$1)
       && caml_string_notequal(box_name, "b")){
      if(! caml_string_notequal(box_name, "h")){var box_type = 0; break a;}
      if(! caml_string_notequal(box_name, "hov")){var box_type = 3; break a;}
      if(! caml_string_notequal(box_name, "hv")){var box_type = 2; break a;}
      if(caml_string_notequal(box_name, "v")){
       var box_type = invalid_box(0);
       break a;
      }
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
    return [0, indent, box_type];
   }
   function kfprintf(k, o, param){
    var fmt = param[1];
    return make_printf
            (function(acc){output_acc(o, acc); return caml_call1(k, o);},
             0,
             fmt);
   }
   function fprintf(oc, fmt){
    return kfprintf(function(_wE_){return 0;}, oc, fmt);
   }
   function eprintf(fmt){return fprintf(stderr, fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = create$1(64);
     strput_acc(buf, acc);
     return caml_call1(k, contents(buf));
    }
    return make_printf(k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var printers = make(0);
   function field(x, i){
    var f = x[1 + i];
    return is_block(f)
            ? caml_obj_tag
               (f)
              === 252
              ? caml_call1(sprintf(_bQ_), f)
              : caml_obj_tag(f) === 253 ? string_of_float(f) : _bR_
            : caml_call1(sprintf(_bS_), f);
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return _bT_;
    var _wC_ = other_fields(x, i + 1 | 0), _wD_ = field(x, i);
    return caml_call2(sprintf(_bU_), _wD_, _wC_);
   }
   function fields(x){
    var match = x.length - 1;
    if(2 >= match >>> 0)
     switch(match){
       case 0:
        return _bW_;
       case 1:
        return _bX_;
       default:
        var _wB_ = field(x, 1); return caml_call1(sprintf(_bY_), _wB_);
     }
    var _wz_ = other_fields(x, 2), _wA_ = field(x, 1);
    return caml_call2(sprintf(_bV_), _wA_, _wz_);
   }
   function use_printers(x){
    function conv(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var tl = param$0[2], hd = param$0[1];
      a:
      {
       try{var val = caml_call1(hd, x);}catch(_wy_){break a;}
       if(val){var s = val[1]; return [0, s];}
      }
      var param$0 = tl;
     }
    }
    return conv(get(printers));
   }
   function to_string_default(x){
    if(x === Out_of_memory) return _bZ_;
    if(x === Stack_overflow) return _b0_;
    if(x[1] === Match_failure){
     var match = x[2], char$0 = match[3], line = match[2], file = match[1];
     return caml_call5
             (sprintf(locfmt), file, line, char$0, char$0 + 5 | 0, _b1_);
    }
    if(x[1] === Assert_failure){
     var
      match$0 = x[2],
      char$1 = match$0[3],
      line$0 = match$0[2],
      file$0 = match$0[1];
     return caml_call5
             (sprintf(locfmt), file$0, line$0, char$1, char$1 + 6 | 0, _b2_);
    }
    if(x[1] === Undefined_recursive_module){
     var
      match$1 = x[2],
      char$2 = match$1[3],
      line$1 = match$1[2],
      file$1 = match$1[1];
     return caml_call5
             (sprintf(locfmt), file$1, line$1, char$2, char$2 + 6 | 0, _b3_);
    }
    if(0 !== caml_obj_tag(x)) return x[1];
    var constructor = x[1][1];
    return symbol(constructor, fields(x));
   }
   function to_string$0(e){
    var match = use_printers(e);
    if(! match) return to_string_default(e);
    var s = match[1];
    return s;
   }
   function convert_raw_backtrace(bt){
    var _wx_ = [0, caml_convert_raw_backtrace(bt)];
    return _wx_;
   }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
     return is_raise ? 0 === pos ? _b4_ : _b5_ : 0 === pos ? _b6_ : _b7_;
    }
    if(0 === slot[0]){
     var
      _wp_ = slot[5],
      _wq_ = slot[4],
      _wr_ = slot[3],
      _ws_ = slot[6] ? _b8_ : _b__,
      _wt_ = slot[2],
      _wu_ = slot[7],
      _wv_ = info(slot[1]);
     return [0,
             caml_call7
              (sprintf(_b9_), _wv_, _wu_, _wt_, _ws_, _wr_, _wq_, _wp_)];
    }
    if(slot[1]) return 0;
    var _ww_ = info(0);
    return [0, caml_call1(sprintf(_b$_), _ww_)];
   }
   function print_exception_backtrace(outchan, backtrace){
    if(! backtrace) return fprintf(outchan, _cb_);
    var a = backtrace[1], _wn_ = a.length - 1 - 1 | 0, _wm_ = 0;
    if(_wn_ >= 0){
     var i = _wm_;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[1 + i]);
      if(match){var str = match[1]; caml_call1(fprintf(outchan, _ca_), str);}
      var _wo_ = i + 1 | 0;
      if(_wn_ === i) break;
      var i = _wo_;
     }
    }
    return 0;
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    return print_exception_backtrace
            (outchan, convert_raw_backtrace(raw_backtrace));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = get(printers),
      new_printers = [0, fn, old_printers],
      success = compare_and_set(printers, old_printers, new_printers),
      _wl_ = 1 - success;
     if(! _wl_) return _wl_;
    }
   }
   var errors = _cc_.slice();
   function default_uncaught_exception_han(exn, raw_backtrace){
    var _wj_ = to_string$0(exn);
    caml_call1(eprintf(_cd_), _wj_);
    print_raw_backtrace(stderr, raw_backtrace);
    var status = caml_ml_debug_info_status(0);
    if(status < 0){
     var _wk_ = abs(status);
     prerr_endline(caml_check_bound(errors, _wk_)[1 + _wk_]);
    }
    return _k_(stderr);
   }
   var empty_backtrace = [0];
   function try_get_raw_backtrace(param){
    var _wi_ = caml_get_exception_raw_backtrace(0);
    return _wi_;
   }
   function handle_uncaught_exception(exn, debugger_in_use){
    try{
     var
      raw_backtrace =
        debugger_in_use ? empty_backtrace : try_get_raw_backtrace(0);
     try{do_at_exit(0);}catch(_wh_){}
     try{
      var
       _wf_ = default_uncaught_exception_han(exn, raw_backtrace),
       _we_ = _wf_;
     }
     catch(exn$1){
      var
       exn$0 = caml_wrap_exception(exn$1),
       raw_backtrace$0 = try_get_raw_backtrace(0),
       _wc_ = to_string$0(exn);
      caml_call1(eprintf(_cf_), _wc_);
      print_raw_backtrace(stderr, raw_backtrace);
      var _wd_ = to_string$0(exn$0);
      caml_call1(eprintf(_cg_), _wd_);
      print_raw_backtrace(stderr, raw_backtrace$0);
      var _we_ = _k_(stderr);
     }
     return _we_;
    }
    catch(_wg_){
     var _wb_ = caml_wrap_exception(_wg_);
     if(_wb_ === Out_of_memory) return prerr_endline(_ce_);
     throw caml_maybe_attach_backtrace(_wb_, 0);
    }
   }
   function handle_uncaught_exception$0(exn, debugger_in_use){
    try{
     var _v$_ = handle_uncaught_exception(exn, debugger_in_use);
     return _v$_;
    }
    catch(_wa_){return 0;}
   }
   caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception$0);
   function _ch_(_v__){return caml_get_exception_raw_backtrace(_v__);}
   var Finally_raised = [248, _ci_, caml_fresh_oo_id(0)];
   register_printer
    (function(param){
      if(param[1] !== Finally_raised) return 0;
      var exn = param[2];
      return [0, symbol(_cj_, to_string$0(exn))];
     });
   function string(str){
    return caml_md5_string(str, 0, caml_ml_string_length(str));
   }
   function new_state(param){return [0, caml_make_vect(55, 0), 0];}
   function assign(st1, st2){
    blit$0(st2[1], 0, st1[1], 0, 55);
    st1[2] = st2[2];
    return;
   }
   function full_init(s, seed){
    function combine(accu, x){return string(symbol(accu, to_string(x)));}
    function extract(d){
     var
      _v7_ = caml_string_get(d, 3) << 24,
      _v8_ = caml_string_get(d, 2) << 16,
      _v9_ = caml_string_get(d, 1) << 8;
     return ((caml_string_get(d, 0) + _v9_ | 0) + _v8_ | 0) + _v7_ | 0;
    }
    var
     seed$0 = 0 === seed.length - 1 ? [0, 0] : seed,
     l = seed$0.length - 1,
     i$0 = 0;
    for(;;){
     caml_check_bound(s[1], i$0)[1 + i$0] = i$0;
     var _v6_ = i$0 + 1 | 0;
     if(54 === i$0) break;
     var i$0 = _v6_;
    }
    var accu = [0, _ck_], _v1_ = 54 + max$0(55, l) | 0, _v0_ = 0;
    if(_v1_ >= 0){
     var i = _v0_;
     for(;;){
      var
       j = i % 55 | 0,
       k = caml_mod(i, l),
       _v2_ = caml_check_bound(seed$0, k)[1 + k];
      accu[1] = combine(accu[1], _v2_);
      var
       _v3_ = extract(accu[1]),
       _v4_ = (caml_check_bound(s[1], j)[1 + j] ^ _v3_) & 1073741823;
      caml_check_bound(s[1], j)[1 + j] = _v4_;
      var _v5_ = i + 1 | 0;
      if(_v1_ === i) break;
      var i = _v5_;
     }
    }
    s[2] = 0;
    return;
   }
   function make$2(seed){
    var result = new_state(0);
    full_init(result, seed);
    return result;
   }
   function make_self_init(param){return make$2(caml_sys_random_seed(0));}
   function copy$0(s){
    var result = new_state(0);
    assign(result, s);
    return result;
   }
   function bits(s){
    s[2] = (s[2] + 1 | 0) % 55 | 0;
    var
     _vX_ = s[2],
     curval = caml_check_bound(s[1], _vX_)[1 + _vX_],
     _vY_ = (s[2] + 24 | 0) % 55 | 0,
     newval =
       caml_check_bound(s[1], _vY_)[1 + _vY_]
       + (curval ^ (curval >>> 25 | 0) & 31)
       | 0,
     newval30 = newval & 1073741823,
     _vZ_ = s[2];
    caml_check_bound(s[1], _vZ_)[1 + _vZ_] = newval30;
    return newval30;
   }
   var default$0 = [0, _cl_.slice(), 0];
   function get_state(param){return copy$0(default$0);}
   function ongoing_traversal(h){
    var _vV_ = h.length - 1 < 4 ? 1 : 0, _vW_ = _vV_ || (h[4] < 0 ? 1 : 0);
    return _vW_;
   }
   try{var _k3_ = caml_sys_getenv("OCAMLRUNPARAM"), params = _k3_;}
   catch(_vT_){
    var _cm_ = caml_wrap_exception(_vT_);
    if(_cm_ !== Not_found) throw caml_maybe_attach_backtrace(_cm_, 0);
    try{var _k2_ = caml_sys_getenv("CAMLRUNPARAM"), _cp_ = _k2_;}
    catch(_vU_){
     var _cn_ = caml_wrap_exception(_vU_);
     if(_cn_ !== Not_found) throw caml_maybe_attach_backtrace(_cn_, 0);
     var _cp_ = _co_;
    }
    var params = _cp_;
   }
   var
    randomized_default = contains(params, 82),
    prng = [246, function(_vS_){return make_self_init(0);}];
   function power_2_above(x, n){
    var x$0 = x;
    for(;;){
     if(n <= x$0) return x$0;
     if(max_array_length < (x$0 * 2 | 0)) return x$0;
     var x$1 = x$0 * 2 | 0, x$0 = x$1;
    }
   }
   function create$2(opt, initial_size){
    if(opt)
     var sth = opt[1], random = sth;
    else
     var random = randomized_default;
    var s = power_2_above(16, initial_size);
    if(random)
     var
      _vQ_ = caml_obj_tag(prng),
      _vR_ =
        250 === _vQ_ ? prng[1] : 246 === _vQ_ ? force_lazy_block(prng) : prng,
      seed = bits(_vR_);
    else
     var seed = 0;
    return [0, 0, caml_make_vect(s, 0), seed, s];
   }
   function clear$1(h){
    var _vP_ = 0 < h[1] ? 1 : 0;
    return _vP_ ? (h[1] = 0, fill(h[2], 0, h[2].length - 1, 0)) : _vP_;
   }
   function insert_all_buckets(indexfun, inplace, odata, ndata){
    var nsize = ndata.length - 1, ndata_tail = caml_make_vect(nsize, 0);
    function insert_bucket(cell){
     var cell$0 = cell;
     for(;;){
      if(! cell$0) return;
      var
       key = cell$0[1],
       data = cell$0[2],
       next = cell$0[3],
       cell$1 = inplace ? cell$0 : [0, key, data, 0],
       nidx = caml_call1(indexfun, key),
       match = caml_check_bound(ndata_tail, nidx)[1 + nidx];
      if(match)
       match[3] = cell$1;
      else
       caml_check_bound(ndata, nidx)[1 + nidx] = cell$1;
      caml_check_bound(ndata_tail, nidx)[1 + nidx] = cell$1;
      var cell$0 = next;
     }
    }
    var _vK_ = odata.length - 1 - 1 | 0, _vJ_ = 0;
    if(_vK_ >= 0){
     var i$0 = _vJ_;
     for(;;){
      insert_bucket(caml_check_bound(odata, i$0)[1 + i$0]);
      var _vO_ = i$0 + 1 | 0;
      if(_vK_ === i$0) break;
      var i$0 = _vO_;
     }
    }
    if(inplace){
     var _vM_ = nsize - 1 | 0, _vL_ = 0;
     if(_vM_ >= 0){
      var i = _vL_;
      for(;;){
       var match = caml_check_bound(ndata_tail, i)[1 + i];
       if(match) match[3] = 0;
       var _vN_ = i + 1 | 0;
       if(_vM_ === i) break;
       var i = _vN_;
      }
     }
    }
    return;
   }
   function resize$0(indexfun, h){
    var
     odata = h[2],
     osize = odata.length - 1,
     nsize = osize * 2 | 0,
     _vI_ = nsize < max_array_length ? 1 : 0;
    if(! _vI_) return _vI_;
    var ndata = caml_make_vect(nsize, 0), inplace = 1 - ongoing_traversal(h);
    h[2] = ndata;
    return insert_all_buckets(caml_call1(indexfun, h), inplace, odata, ndata);
   }
   function key_index(h, key){
    return 4 <= h.length - 1
            ? caml_hash(10, 100, h[3], key) & (h[2].length - 1 - 1 | 0)
            : invalid_arg(_cq_);
   }
   function add$0(h, key, data){
    var
     i = key_index(h, key),
     bucket = [0, key, data, caml_check_bound(h[2], i)[1 + i]];
    caml_check_bound(h[2], i)[1 + i] = bucket;
    h[1] = h[1] + 1 | 0;
    var _vH_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
    return _vH_ ? resize$0(key_index, h) : _vH_;
   }
   function remove_bucket(h, i, key, prec, c){
    var prec$1 = prec, prec$0 = c;
    for(;;){
     if(! prec$0) return;
     var k = prec$0[1], next = prec$0[3];
     if(0 === caml_compare(k, key)){
      h[1] = h[1] - 1 | 0;
      if(prec$1){prec$1[3] = next; return;}
      caml_check_bound(h[2], i)[1 + i] = next;
      return;
     }
     var prec$1 = prec$0, prec$0 = next;
    }
   }
   function remove(h, key){
    var i = key_index(h, key);
    return remove_bucket(h, i, key, 0, caml_check_bound(h[2], i)[1 + i]);
   }
   function find_rec(key, param){
    var param$0 = param;
    for(;;){
     if(! param$0) throw caml_maybe_attach_backtrace(Not_found, 1);
     var k = param$0[1], data = param$0[2], next = param$0[3];
     if(0 === caml_compare(key, k)) return data;
     var param$0 = next;
    }
   }
   function find(h, key){
    var
     _vG_ = key_index(h, key),
     match = caml_check_bound(h[2], _vG_)[1 + _vG_];
    if(! match) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
    if(0 === caml_compare(key, k1)) return d1;
    if(! next1) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
    if(0 === caml_compare(key, k2)) return d2;
    if(! next2) throw caml_maybe_attach_backtrace(Not_found, 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
    return 0 === caml_compare(key, k3) ? d3 : find_rec(key, next3);
   }
   function find_all$0(h, key){
    function find_in_bucket(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var k = param$0[1], data = param$0[2], next = param$0[3];
      if(0 === caml_compare(k, key)) return [0, data, find_in_bucket(next)];
      var param$0 = next;
     }
    }
    var _vF_ = key_index(h, key);
    return find_in_bucket(caml_check_bound(h[2], _vF_)[1 + _vF_]);
   }
   function mem(h, key){
    function mem_in_bucket(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var
       k = param$0[1],
       next = param$0[3],
       _vE_ = 0 === caml_compare(k, key) ? 1 : 0;
      if(_vE_) return _vE_;
      var param$0 = next;
     }
    }
    var _vD_ = key_index(h, key);
    return mem_in_bucket(caml_check_bound(h[2], _vD_)[1 + _vD_]);
   }
   function id(x){return x;}
   var zero = 0, unknown = -1;
   function is_known(n){return 0 <= n ? 1 : 0;}
   var String_tag = [248, _cr_, caml_fresh_oo_id(0)];
   function pp_enqueue(state, token){
    state[13] = state[13] + token[3] | 0;
    return add(token, state[28]);
   }
   function pp_clear_queue(state){
    state[12] = 1;
    state[13] = 1;
    return clear$0(state[28]);
   }
   var pp_infinity = 1000000010;
   function pp_output_string(state, s){
    return caml_call3(state[17], s, 0, caml_ml_string_length(s));
   }
   function pp_output_newline(state){return caml_call1(state[19], 0);}
   function pp_output_spaces(state, n){return caml_call1(state[20], n);}
   function pp_output_indent(state, n){return caml_call1(state[21], n);}
   function format_pp_text(state, size, text){
    state[9] = state[9] - size | 0;
    pp_output_string(state, text);
    state[11] = 0;
    return;
   }
   function format_string(state, s){
    var _vC_ = caml_string_notequal(s, cst$1);
    return _vC_ ? format_pp_text(state, caml_ml_string_length(s), s) : _vC_;
   }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
    format_string(state, before);
    pp_output_newline(state);
    state[11] = 1;
    var
     indent = (state[6] - width | 0) + offset | 0,
     real_indent = min(state[8], indent);
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
    pp_output_indent(state, state[10]);
    return format_string(state, after);
   }
   function break_line(state, width){
    return break_new_line(state, _cs_, width);
   }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
    format_string(state, before);
    state[9] = state[9] - width | 0;
    pp_output_spaces(state, width);
    return format_string(state, after);
   }
   function pp_force_break_line(state){
    var match = top_opt(state[2]);
    if(! match) return pp_output_newline(state);
    var
     match$0 = match[1],
     width = match$0[2],
     box_type = match$0[1],
     _vB_ = state[9] < width ? 1 : 0;
    if(! _vB_) return _vB_;
    if(3 < box_type - 1 >>> 0) return;
    return break_line(state, width);
   }
   function pp_skip_token(state){
    var match = take_opt(state[28]);
    if(! match) return;
    var match$0 = match[1], size = match$0[1], length = match$0[3];
    state[12] = state[12] - length | 0;
    var _vA_ = id(size);
    state[9] = state[9] + _vA_ | 0;
    return;
   }
   function format_pp_token(state, size, param){
    if(typeof param === "number")
     switch(param){
       case 0:
        var match = top_opt(state[3]);
        if(! match) return;
        var
         tabs = match[1][1],
         add_tab =
           function(n, ls){
            if(! ls) return [0, n, 0];
            var l = ls[2], x = ls[1];
            return caml_lessthan(n, x) ? [0, n, ls] : [0, x, add_tab(n, l)];
           };
        tabs[1] = add_tab(state[6] - state[9] | 0, tabs[1]);
        return;
       case 1:
        pop_opt(state[2]); return;
       case 2:
        pop_opt(state[3]); return;
       case 3:
        var match$0 = top_opt(state[2]);
        if(! match$0) return pp_output_newline(state);
        var width = match$0[1][2];
        return break_line(state, width);
       case 4:
        var _vz_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
        return _vz_ ? pp_skip_token(state) : _vz_;
       default:
        var match$1 = pop_opt(state[5]);
        if(! match$1) return;
        var tag_name = match$1[1], marker = caml_call1(state[25], tag_name);
        return pp_output_string(state, marker);
     }
    switch(param[0]){
      case 0:
       var s = param[1]; return format_pp_text(state, size, s);
      case 1:
       var
        breaks = param[2],
        fits = param[1],
        off = breaks[2],
        before = breaks[1],
        match$2 = top_opt(state[2]);
       if(! match$2) return;
       var match$3 = match$2[1], width$0 = match$3[2], box_type = match$3[1];
       switch(box_type){
         case 0:
          return break_same_line(state, fits);
         case 1:
          return break_new_line(state, breaks, width$0);
         case 2:
          return break_new_line(state, breaks, width$0);
         case 3:
          return state[9] < (size + caml_ml_string_length(before) | 0)
                  ? break_new_line(state, breaks, width$0)
                  : break_same_line(state, fits);
         case 4:
          return state[11]
                  ? break_same_line(state, fits)
                  : state
                     [9]
                    < (size + caml_ml_string_length(before) | 0)
                    ? break_new_line(state, breaks, width$0)
                    : ((state
                       [6]
                      - width$0
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ? break_new_line(state, breaks, width$0)
                      : break_same_line(state, fits);
         default: return break_same_line(state, fits);
       }
      case 2:
       var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
        match$4 = top_opt(state[3]);
       if(! match$4) return;
       var tabs$0 = match$4[1][1], match$5 = tabs$0[1];
       if(match$5)
        var
         first = match$5[1],
         find =
           function(param){
            var param$0 = param;
            for(;;){
             if(! param$0) return first;
             var tail = param$0[2], head = param$0[1];
             if(insertion_point <= head) return head;
             var param$0 = tail;
            }
           },
         tab = find(tabs$0[1]);
       else
        var tab = insertion_point;
       var offset = tab - insertion_point | 0;
       return 0 <= offset
               ? break_same_line(state, [0, _cu_, offset + n | 0, _ct_])
               : break_new_line
                 (state, [0, _cw_, tab + off$0 | 0, _cv_], state[6]);
      case 3:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0) pp_force_break_line(state);
       var
        width$1 = state[9] - off$1 | 0,
        box_type$0 = 1 === ty ? 1 : state[9] < size ? ty : 5;
       return push([0, box_type$0, width$1], state[2]);
      case 4:
       var tbox = param[1]; return push(tbox, state[3]);
      default:
       var
        tag_name$0 = param[1],
        marker$0 = caml_call1(state[24], tag_name$0);
       pp_output_string(state, marker$0);
       return push(tag_name$0, state[5]);
    }
   }
   function advance_left(state){
    for(;;){
     var match = peek_opt(state[28]);
     if(! match) return 0;
     var
      match$0 = match[1],
      size = match$0[1],
      length = match$0[3],
      token = match$0[2],
      pending_count = state[13] - state[12] | 0,
      _vx_ = is_known(size),
      _vy_ = _vx_ || (state[9] <= pending_count ? 1 : 0);
     if(! _vy_) return _vy_;
     take(state[28]);
     var size$0 = is_known(size) ? id(size) : pp_infinity;
     format_pp_token(state, size$0, token);
     state[12] = length + state[12] | 0;
    }
   }
   function enqueue_advance(state, tok){
    pp_enqueue(state, tok);
    return advance_left(state);
   }
   function enqueue_string_as(state, size, s){
    return enqueue_advance(state, [0, size, [0, s], id(size)]);
   }
   function enqueue_string(state, s){
    return enqueue_string_as(state, id(caml_ml_string_length(s)), s);
   }
   function initialize_scan_stack(stack){
    clear(stack);
    var queue_elem = [0, unknown, _cx_, 0];
    return push([0, -1, queue_elem], stack);
   }
   function set_size(state, ty){
    var match = top_opt(state[1]);
    if(! match) return;
    var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
     size = id(queue_elem[1]);
    if(left_total < state[12]) return initialize_scan_stack(state[1]);
    var _vw_ = queue_elem[2];
    if(typeof _vw_ !== "number")
     switch(_vw_[0]){
       case 3:
        if(1 - ty){
         queue_elem[1] = id(state[13] + size | 0);
         pop_opt(state[1]);
        }
        return;
       case 1:
       case 2:
        if(ty){queue_elem[1] = id(state[13] + size | 0); pop_opt(state[1]);}
        return;
     }
    return;
   }
   function scan_push(state, b, token){
    pp_enqueue(state, token);
    if(b) set_size(state, 1);
    var elem = [0, state[13], token];
    return push(elem, state[1]);
   }
   function pp_open_box_gen(state, indent, br_ty){
    state[14] = state[14] + 1 | 0;
    if(state[14] < state[15]){
     var size = id(- state[13] | 0), elem = [0, size, [3, indent, br_ty], 0];
     return scan_push(state, 0, elem);
    }
    var _vv_ = state[14] === state[15] ? 1 : 0;
    return _vv_ ? enqueue_string(state, state[16]) : _vv_;
   }
   function pp_open_sys_box(state){return pp_open_box_gen(state, 0, 3);}
   function pp_close_box(state, param){
    var _vt_ = 1 < state[14] ? 1 : 0;
    if(_vt_){
     if(state[14] < state[15]){
      pp_enqueue(state, [0, zero, 1, 0]);
      set_size(state, 1);
      set_size(state, 0);
     }
     state[14] = state[14] - 1 | 0;
     var _vu_ = 0;
    }
    else
     var _vu_ = _vt_;
    return _vu_;
   }
   function pp_open_stag(state, tag_name){
    if(state[22]){push(tag_name, state[4]); caml_call1(state[26], tag_name);}
    var _vs_ = state[23];
    if(! _vs_) return _vs_;
    var token = [5, tag_name];
    return pp_enqueue(state, [0, zero, token, 0]);
   }
   function pp_close_stag(state, param){
    if(state[23]) pp_enqueue(state, [0, zero, 5, 0]);
    var _vq_ = state[22];
    if(_vq_){
     var match = pop_opt(state[4]);
     if(match){
      var tag_name = match[1];
      return caml_call1(state[27], tag_name);
     }
     var _vr_ = 0;
    }
    else
     var _vr_ = _vq_;
    return _vr_;
   }
   function pp_close_tag(state, param){return pp_close_stag(state, 0);}
   function pp_rinit(state){
    pp_clear_queue(state);
    initialize_scan_stack(state[1]);
    clear(state[2]);
    clear(state[3]);
    clear(state[4]);
    clear(state[5]);
    state[10] = 0;
    state[14] = 0;
    state[9] = state[6];
    return pp_open_sys_box(state);
   }
   function clear_tag_stack(state){
    return iter$0(function(param){return pp_close_tag(state, 0);}, state[4]);
   }
   function pp_flush_queue(state, b){
    clear_tag_stack(state);
    for(;;){
     if(1 >= state[14]){
      state[13] = pp_infinity;
      advance_left(state);
      if(b) pp_output_newline(state);
      return pp_rinit(state);
     }
     pp_close_box(state, 0);
    }
   }
   function pp_print_as_size(state, size, s){
    var _vp_ = state[14] < state[15] ? 1 : 0;
    return _vp_ ? enqueue_string_as(state, size, s) : _vp_;
   }
   function pp_print_as(state, isize, s){
    return pp_print_as_size(state, id(isize), s);
   }
   function pp_print_string(state, s){
    return pp_print_as(state, caml_ml_string_length(s), s);
   }
   function pp_print_bool(state, b){
    return pp_print_string(state, string_of_bool(b));
   }
   function pp_print_char(state, c){
    return pp_print_as(state, 1, make$1(1, c));
   }
   function pp_print_newline(state, param){
    pp_flush_queue(state, 1);
    return caml_call1(state[18], 0);
   }
   function pp_print_flush(state, param){
    pp_flush_queue(state, 0);
    return caml_call1(state[18], 0);
   }
   function pp_force_newline(state, param){
    var _vo_ = state[14] < state[15] ? 1 : 0;
    return _vo_ ? enqueue_advance(state, [0, zero, 3, 0]) : _vo_;
   }
   function pp_print_custom_break(state, fits, breaks){
    var
     after = fits[3],
     width = fits[2],
     before = fits[1],
     _vn_ = state[14] < state[15] ? 1 : 0;
    if(! _vn_) return _vn_;
    var
     size = id(- state[13] | 0),
     token = [1, fits, breaks],
     length =
       (caml_ml_string_length(before) + width | 0)
       + caml_ml_string_length(after)
       | 0,
     elem = [0, size, token, length];
    return scan_push(state, 1, elem);
   }
   function pp_print_break(state, width, offset){
    return pp_print_custom_break
            (state, [0, _cB_, width, _cA_], [0, _cz_, offset, _cy_]);
   }
   function pp_print_cut(state, param){return pp_print_break(state, 0, 0);}
   function display_newline(state, param){
    return caml_call3(state[17], _cC_, 0, 1);
   }
   var blank_line = make$1(80, 32);
   function display_blanks(state, n){
    var n$0 = n;
    for(;;){
     var _vm_ = 0 < n$0 ? 1 : 0;
     if(! _vm_) return _vm_;
     if(80 >= n$0) return caml_call3(state[17], blank_line, 0, n$0);
     caml_call3(state[17], blank_line, 0, 80);
     var n$1 = n$0 - 80 | 0, n$0 = n$1;
    }
   }
   function default_pp_mark_open_tag(param){
    if(param[1] !== String_tag) return _cF_;
    var s = param[2];
    return symbol(_cE_, symbol(s, _cD_));
   }
   function default_pp_mark_close_tag(param){
    if(param[1] !== String_tag) return _cI_;
    var s = param[2];
    return symbol(_cH_, symbol(s, _cG_));
   }
   function default_pp_print_open_tag(_vl_){return 0;}
   function default_pp_print_close_tag(_vk_){return 0;}
   function pp_make_formatter(f, g, h, i, j){
    var pp_queue = create$0(0), sys_tok = [0, unknown, _cJ_, 0];
    add(sys_tok, pp_queue);
    var scan_stack = create(0);
    initialize_scan_stack(scan_stack);
    push([0, 1, sys_tok], scan_stack);
    var pp_margin = 78, _vh_ = create(0), _vi_ = create(0), _vj_ = create(0);
    return [0,
            scan_stack,
            create(0),
            _vj_,
            _vi_,
            _vh_,
            pp_margin,
            10,
            68,
            pp_margin,
            0,
            1,
            1,
            1,
            1,
            max_int,
            _cK_,
            f,
            g,
            h,
            i,
            j,
            0,
            0,
            default_pp_mark_open_tag,
            default_pp_mark_close_tag,
            default_pp_print_open_tag,
            default_pp_print_close_tag,
            pp_queue];
   }
   function make_formatter(output, flush){
    var
     ppf =
       pp_make_formatter
        (output,
         flush,
         function(_vg_){return 0;},
         function(_vf_){return 0;},
         function(_ve_){return 0;});
    ppf[19] = function(_vd_){return display_newline(ppf, _vd_);};
    ppf[20] = function(_vc_){return display_blanks(ppf, _vc_);};
    ppf[21] = function(_vb_){return display_blanks(ppf, _vb_);};
    return ppf;
   }
   function formatter_of_out_channel(oc){
    return make_formatter
            (function(_u__, _u$_, _va_){
              return output_substring(oc, _u__, _u$_, _va_);
             },
             function(param){return _k_(oc);});
   }
   function formatter_of_buffer(b){
    return make_formatter
            (function(_u7_, _u8_, _u9_){
              return add_substring(b, _u7_, _u8_, _u9_);
             },
             function(_u6_){return 0;});
   }
   var pp_buffer_size = 512;
   function pp_make_buffer(param){return create$1(pp_buffer_size);}
   var
    stdbuf = pp_make_buffer(0),
    std_formatter = formatter_of_out_channel(stdout),
    err_formatter = formatter_of_out_channel(stderr);
   formatter_of_buffer(stdbuf);
   function flush_buffer_formatter(buf, ppf){
    pp_flush_queue(ppf, 0);
    var s = contents(buf);
    reset(buf);
    return s;
   }
   function pp_print_list(opt, pp_v, ppf, param){
    var opt$0 = opt, param$0 = param;
    for(;;){
     if(opt$0)
      var sth = opt$0[1], pp_sep = sth;
     else
      var pp_sep = pp_print_cut;
     if(! param$0) return 0;
     var v = param$0[1];
     if(! param$0[2]) return caml_call2(pp_v, ppf, v);
     var vs = param$0[2];
     caml_call2(pp_v, ppf, v);
     caml_call2(pp_sep, ppf, 0);
     var opt$1 = [0, pp_sep], opt$0 = opt$1, param$0 = vs;
    }
   }
   function compute_tag(output, tag_acc){
    var buf = create$1(16), ppf = formatter_of_buffer(buf);
    caml_call2(output, ppf, tag_acc);
    pp_print_flush(ppf, 0);
    var len = length$1(buf);
    return 2 <= len ? sub$2(buf, 1, len - 2 | 0) : contents(buf);
   }
   function output_formatting_lit(ppf, fmting_lit){
    if(typeof fmting_lit === "number")
     switch(fmting_lit){
       case 0:
        return pp_close_box(ppf, 0);
       case 1:
        return pp_close_tag(ppf, 0);
       case 2:
        return pp_print_flush(ppf, 0);
       case 3:
        return pp_force_newline(ppf, 0);
       case 4:
        return pp_print_newline(ppf, 0);
       case 5:
        return pp_print_char(ppf, 64);
       default: return pp_print_char(ppf, 37);
     }
    switch(fmting_lit[0]){
      case 0:
       var offset = fmting_lit[3], width = fmting_lit[2];
       return pp_print_break(ppf, width, offset);
      case 1:
       return 0;
      default:
       var c = fmting_lit[1];
       pp_print_char(ppf, 64);
       return pp_print_char(ppf, c);
    }
   }
   function output_acc$0(ppf, acc){
    if(typeof acc === "number") return 0;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
          output_acc$0(ppf, p);
          return output_formatting_lit(ppf, f);
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
           output_acc$0(ppf, p$0);
           return pp_open_stag
                   (ppf, [0, String_tag, compute_tag(output_acc$0, acc$0)]);
          }
          var acc$1 = match[1];
          output_acc$0(ppf, p$0);
          var
           match$0 = open_box_of_string(compute_tag(output_acc$0, acc$1)),
           bty = match$0[2],
           indent = match$0[1];
          return pp_open_box_gen(ppf, indent, bty);
         case 2:
          var _uX_ = acc[1];
          if(typeof _uX_ !== "number" && 0 === _uX_[0]){
           var _uY_ = _uX_[2];
           if(typeof _uY_ !== "number" && 1 === _uY_[0]){
            var s$0 = acc[2], size = _uY_[2], p$2 = _uX_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _uX_;
          break a;
         case 3:
          var _uZ_ = acc[1];
          if(typeof _uZ_ !== "number" && 0 === _uZ_[0]){
           var _u0_ = _uZ_[2];
           if(typeof _u0_ !== "number" && 1 === _u0_[0]){
            var c$0 = acc[2], size$0 = _u0_[2], p$4 = _uZ_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _uZ_;
          break c;
         case 4:
          var _u2_ = acc[1];
          if(typeof _u2_ !== "number" && 0 === _u2_[0]){
           var _u3_ = _u2_[2];
           if(typeof _u3_ !== "number" && 1 === _u3_[0]){
            var s$0 = acc[2], size = _u3_[2], p$2 = _u2_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _u2_;
          break a;
         case 5:
          var _u4_ = acc[1];
          if(typeof _u4_ !== "number" && 0 === _u4_[0]){
           var _u5_ = _u4_[2];
           if(typeof _u5_ !== "number" && 1 === _u5_[0]){
            var c$0 = acc[2], size$0 = _u5_[2], p$4 = _u4_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _u4_;
          break c;
         case 6:
          var f$0 = acc[2], p$5 = acc[1];
          output_acc$0(ppf, p$5);
          return caml_call1(f$0, ppf);
         case 7:
          var p$6 = acc[1];
          output_acc$0(ppf, p$6);
          return pp_print_flush(ppf, 0);
         default:
          var msg = acc[2], p$7 = acc[1];
          output_acc$0(ppf, p$7);
          return invalid_arg(msg);
       }
       output_acc$0(ppf, p$4);
       var _u1_ = make$1(1, c$0);
       return pp_print_as_size(ppf, id(size$0), _u1_);
      }
      output_acc$0(ppf, p$3);
      return pp_print_char(ppf, c);
     }
     output_acc$0(ppf, p$2);
     return pp_print_as_size(ppf, id(size), s$0);
    }
    output_acc$0(ppf, p$1);
    return pp_print_string(ppf, s);
   }
   function kfprintf$0(k, ppf, param){
    var fmt = param[1];
    return make_printf
            (function(acc){output_acc$0(ppf, acc); return caml_call1(k, ppf);},
             0,
             fmt);
   }
   function fprintf$0(ppf){
    function _uU_(_uW_){return 0;}
    return function(_uV_){return kfprintf$0(_uU_, ppf, _uV_);};
   }
   function kasprintf(k, param){
    var fmt = param[1], b = pp_make_buffer(0), ppf = formatter_of_buffer(b);
    function k$0(acc){
     output_acc$0(ppf, acc);
     return caml_call1(k, flush_buffer_formatter(b, ppf));
    }
    return make_printf(k$0, 0, fmt);
   }
   function asprintf(fmt){return kasprintf(id, fmt);}
   function flush_standard_formatters(param){
    pp_print_flush(std_formatter, 0);
    return pp_print_flush(err_formatter, 0);
   }
   at_exit(flush_standard_formatters);
   function register_exception(name, exn){
    var slot = caml_obj_tag(exn) === 248 ? exn : exn[1];
    caml_register_named_value(name, slot);
    return;
   }
   var Error = [248, _cL_, caml_fresh_oo_id(0)];
   register_exception(_cM_, [0, Error, [0]]);
   (function(exn){throw exn;});
   var jv_global = globalThis;
   function length$2(s){return s[cst_length];}
   function jstr_of_int(opt, i){
    if(opt) var sth = opt[1], base = sth; else var base = 10;
    return i.toString(base);
   }
   var empty = cst$1;
   function concat$0(opt, ss){
    if(opt) var sth = opt[1], sep = sth; else var sep = empty;
    return caml_list_to_js_array(ss).join(sep);
   }
   function is_empty$0(s){return 0 === length$2(s) ? 1 : 0;}
   function equal(_uT_, _uS_){return caml_equal(_uT_, _uS_);}
   jv_global["Number"];
   var null$0 = null, undefined$0 = undefined;
   function is_null(v){return v === null$0 ? 1 : 0;}
   function is_undefined(v){return v === undefined$0 ? 1 : 0;}
   function is_none(v){
    var _uR_ = is_null(v);
    return _uR_ ? _uR_ : is_undefined(v);
   }
   function is_some$0(v){return 1 - is_none(v);}
   function to_option(conv, v){
    return is_none(v) ? 0 : [0, caml_call1(conv, v)];
   }
   function of_option(none, conv, param){
    if(! param) return none;
    var v = param[1];
    return caml_call1(conv, v);
   }
   var global = globalThis;
   function set_if_some(o, p, param){
    if(! param) return;
    var v = param[1];
    o[p] = v;
    return;
   }
   var true$0 = true;
   function get$1(o, p){o[p]; return;}
   function set(o, p, b){o[p] = ! ! b; return;}
   function set_if_some$0(o, p, param){
    if(! param) return;
    var b = param[1];
    return set(o, p, b);
   }
   function get$2(o, p){return o[p];}
   function set$0(o, p, b){o[p] = b; return;}
   function set_if_some$1(o, p, param){
    if(! param) return;
    var f = param[1];
    return set$0(o, p, f);
   }
   function to_string$1(_uQ_){return caml_string_of_jsstring(_uQ_);}
   function create$3(n){return new global["Array"](n);}
   function length$3(a){return a[cst_length];}
   function of_array(conv, a){
    var len = a.length - 1, ja = create$3(len), _uO_ = len - 1 | 0, _uN_ = 0;
    if(_uO_ >= 0){
     var i = _uN_;
     for(;;){
      ja[i] = caml_call1(conv, caml_check_bound(a, i)[1 + i]);
      var _uP_ = i + 1 | 0;
      if(_uO_ === i) break;
      var i = _uP_;
     }
    }
    return ja;
   }
   function to_list$0(conv, v){
    var len = length$3(v);
    return init(len, function(i){return caml_call1(conv, v[i]);});
   }
   function of_list$0(conv, l){
    function loop(i, ja, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return ja;
      var vs = param$0[2], v = param$0[1];
      ja[i$0] = caml_call1(conv, v);
      var i$1 = i$0 + 1 | 0, i$0 = i$1, param$0 = vs;
     }
    }
    return loop(0, create$3(0), l);
   }
   function v(name, msg){
    var e = new global["Error"](msg);
    if(! name) return e;
    var n = name[1];
    e[cst_name] = n;
    return e;
   }
   function throw$0(name, msg){
    var e = v(name, msg);
    return caml_call1(function(exn){throw exn;}, e);
   }
   var promise = global["Promise"];
   function create$4(f){
    function g(res, rej){
     return caml_call2
             (f, function(x){return res(x);}, function(x){return rej(x);});
    }
    return new promise(caml_js_wrap_callback_strict(2, g));
   }
   function resolve(v){return promise.resolve(v);}
   function await$0(p, k){
    p.then(caml_js_wrap_callback_strict(1, k));
    return 0;
   }
   function bind(p, res){return p.then(caml_js_wrap_callback_strict(1, res));}
   function then(p, res, rej){
    return p.then
            (caml_js_wrap_callback_strict(1, res),
             caml_js_wrap_callback_strict(1, rej));
   }
   function call(o, m, args){
    return caml_js_meth_call(o, to_string$1(m), args);
   }
   function value$0(_uM_){return caml_string_of_jsstring(_uM_);}
   function _cN_(_uL_){return caml_jsstring_of_string(_uL_);}
   function fut(p){return {fut: p};}
   function promise$0(f){return f[cst_fut];}
   function create$5(param){
    function not_set(param){
     throw caml_maybe_attach_backtrace([0, Assert_failure, _cO_], 1);
    }
    function is_set(param){return throw$0(0, "The future is already set");}
    var setter = [0, not_set];
    function set_setter(resolve, reject){setter[1] = resolve; return 0;}
    var p = create$4(set_setter);
    function set(v){caml_call1(setter[1], v); setter[1] = is_set; return 0;}
    return [0, fut(p), set];
   }
   function await$1(f, k){return await$0(promise$0(f), k);}
   function return$0(v){return fut(resolve(v));}
   function bind$0(f, fn){
    return fut
            (bind
              (promise$0(f),
               function(v){return promise$0(caml_call1(fn, v));}));
   }
   function map$4(fn, f){
    return bind$0(f, function(v){return return$0(caml_call1(fn, v));});
   }
   function ok(v){return return$0([0, v]);}
   function of_promise(ok, error, p){
    function ok$0(v){return resolve([0, caml_call1(ok, v)]);}
    function error$0(e){return resolve([1, caml_call1(error, e)]);}
    return fut(then(p, ok$0, error$0));
   }
   function of_promise$0(ok, v){
    return of_promise(ok, function(_uK_){return _uK_;}, v);
   }
   function let$0(f, fn){return map$4(fn, f);}
   function let$1(f, fn){
    return function(_uJ_){return bind$0(f, _uJ_);}
            (function(e){
              if(0 !== e[0]) return return$0(e);
              var v = e[1];
              return caml_call1(fn, v);
             });
   }
   function let$2(f, fn){
    return map$4(function(_uI_){return map$0(fn, _uI_);}, f);
   }
   global["Event"];
   function target(e){return e[cst_target];}
   function current_target(e){return e["currentTarget"];}
   function stop_immediate_propagation(e){e.stopImmediatePropagation(); return;
   }
   function prevent_default(e){e.preventDefault(); return 0;}
   function listen(opt, type, f, t){
    if(opt) var sth = opt[1], opts = sth; else var opts = {};
    var f$0 = caml_js_wrap_callback_strict(1, f);
    function unlisten(param){
     t.removeEventListener(type, f$0, opts);
     return 0;
    }
    t.addEventListener(type, f$0, opts);
    return unlisten;
   }
   function unlisten(unlisten){return caml_call1(unlisten, 0);}
   var
    change = "change",
    click = cst_click,
    dom_content_loaded = "DOMContentLoaded",
    ended = "ended",
    error = cst_error,
    keyup = "keyup",
    play = "play",
    scroll = "scroll";
   global["ArrayBuffer"];
   global["DataView"];
   global["Blob"];
   global["File"];
   var json = global["JSON"];
   function encode(v){return json.stringify(v);}
   function decode(s){
    try{var v = json.parse(s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   global["encodeURI"];
   global["decodeURI"];
   global["encodeURIComponent"];
   global["decodeURIComponent"];
   var url = global["URL"];
   function v$0(base, s){
    if(! base) return new url(s);
    var b = base[1];
    return new url(s, b);
   }
   var usp = global["URLSearchParams"];
   function to_jstr(p){return p.toString();}
   function of_obj(o){return new usp(o);}
   function with_query_params(u, ps){
    var u$0 = new url(u);
    set$0(u$0, _cP_, to_jstr(ps));
    return u$0;
   }
   function to_jstr$0(u){return u.toString();}
   function of_jstr(base, s){
    try{var v = v$0(base, s);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Error) throw caml_maybe_attach_backtrace(exn, 0);
     var e = exn[2];
     return [1, e];
    }
    return [0, v];
   }
   function v$1(n, v){return [0, n, v];}
   var void$0 = [0, empty, empty];
   function true$1(n){return [0, n, empty];}
   function int$0(n, i){return [0, n, jstr_of_int(0, i)];}
   function to_pair(_uH_){return _uH_;}
   var
    checked = cst_checked,
    class$0 = "class",
    for$0 = "for",
    id$0 = cst_id,
    name = cst_name,
    placeholder = "placeholder",
    required = "required",
    src = cst_src,
    style = cst_style,
    type = cst_type,
    value$1 = cst_value,
    width = "width",
    checked$0 = true$1(checked);
   function class$1(s){return v$1(class$0, s);}
   function for$1(s){return v$1(for$0, s);}
   function id$1(s){return v$1(id$0, s);}
   var required$0 = true$1(required);
   function src$0(s){return v$1(src, s);}
   function style$0(s){return v$1(style, s);}
   function type$0(s){return v$1(type, s);}
   function value$2(s){return v$1(value$1, s);}
   function width$0(i){return int$0(width, i);}
   var global_document = global["document"];
   function document(e){return e["ownerDocument"];}
   if(! is_none(global_document)) global_document[cst_documentElement];
   function _cQ_(e, n){e.appendChild(n); return 0;}
   function set_atts(e, ss, param){
    var ss$0 = ss, param$0 = param;
    for(;;){
     if(! param$0){
      if(0 !== ss$0){
       var v$0 = concat$0([0, ";"], rev(ss$0));
       e.setAttribute(cst_style, v$0);
      }
      return;
     }
     var at = param$0[2], match = param$0[1], v = match[2], a = match[1];
     if(is_empty$0(a))
      var param$0 = at;
     else if(equal(a, style))
      var ss$1 = [0, v, ss$0], ss$0 = ss$1, param$0 = at;
     else if(equal(a, class$0)){
      if(1 - is_empty$0(v)) e[cst_classList].add(v);
      var param$0 = at;
     }
     else{e.setAttribute(a, v); var param$0 = at;}
    }
   }
   function v$2(opt, _uF_, name, cs){
    if(opt) var sth = opt[1], d = sth; else var d = global_document;
    if(_uF_) var sth$0 = _uF_[1], at = sth$0; else var at = 0;
    var e = d.createElement(name);
    set_atts(e, 0, at);
    iter(function(_uG_){return _cQ_(e, _uG_);}, cs);
    return e;
   }
   function txt(opt, s){
    if(opt) var sth = opt[1], d = sth; else var d = global_document;
    return d.createTextNode(_cN_(s));
   }
   function append_children(e, l){
    caml_js_meth_call(e, cst_append, of_list(l));
    return;
   }
   function set_at(a, v, e){
    if(is_empty$0(a)) return 0;
    if(v){var v$0 = v[1]; e.setAttribute(a, v$0); return 0;}
    e.removeAttribute(a);
    return 0;
   }
   function jv_to_float(f){return is_undefined(f) ? 0. : f;}
   function float$0(n){
    return [0, n, jv_to_float, function(_uE_){return _uE_;}];
   }
   function prop(p, e){var _uD_ = e[p[1]]; return caml_call1(p[2], _uD_);}
   function set_class(c, b, e){
    return b ? (e[cst_classList].add(c), 0) : (e[cst_classList].remove(c), 0);
   }
   function computed_style(opt, p, e){
    if(opt) var sth = opt[1], w = sth; else var w = global[cst_window];
    var style = w.getComputedStyle(e), v = style[p];
    return is_none(v) ? empty : v;
   }
   function scroll_y(e){return get$2(e, _cR_);}
   var
    audio = "audio",
    button = cst_button,
    div = "div",
    form = "form",
    h1 = "h1",
    img = "img",
    input$0 = cst_input,
    label = "label",
    span = "span";
   function cons$0(name, d, at, cs){return v$2(d, at, name, cs);}
   function audio$0(_uA_, _uB_, _uC_){return cons$0(audio, _uA_, _uB_, _uC_);}
   function div$0(_ux_, _uy_, _uz_){return cons$0(div, _ux_, _uy_, _uz_);}
   function h1$0(_uu_, _uv_, _uw_){return cons$0(h1, _uu_, _uv_, _uw_);}
   function span$0(_ur_, _us_, _ut_){return cons$0(span, _ur_, _us_, _ut_);}
   function root(d){return d[cst_documentElement];}
   function body(d){
    var b = d[cst_body];
    return is_some$0(b)
            ? b
            : throw$0
              (0,
               "Document body is null. Try to defer your script execution.");
   }
   function active_el(d){
    return to_option(function(_uq_){return _uq_;}, d["activeElement"]);
   }
   function call$0(c, meth, args){caml_js_meth_call(c, meth, args); return 0;}
   var _cS_ = global[cst_console];
   function msg_to_jv_array(msg){
    function loop(a, i, param){
     var i$0 = i, param$0 = param;
     for(;;){
      if(! param$0) return a;
      var vs = param$0[2], v = param$0[1];
      a[i$0] = v;
      var i$1 = i$0 + 1 | 0, i$0 = i$1, param$0 = vs;
     }
    }
    return caml_js_to_array(loop(create$3(0), 0, msg));
   }
   function log(msg){return call$0(_cS_, _cT_, msg_to_jv_array(msg));}
   function error$0(msg){return call$0(_cS_, _cU_, msg_to_jv_array(msg));}
   function warn(msg){return call$0(_cS_, _cV_, msg_to_jv_array(msg));}
   function info(msg){return call$0(_cS_, _cW_, msg_to_jv_array(msg));}
   function as_target(w){return w;}
   function now_ms(p){return p.now();}
   global[cst_console];
   var
    navigator = global["navigator"],
    performance = global["performance"],
    window = global[cst_window];
   get$1(global, _cX_);
   function set_timeout(ms, f){
    return global.setTimeout(caml_js_wrap_callback_strict(1, f), ms);
   }
   function stop_timer(tid){global.clearTimeout(tid); return;}
   function request_animation_frame(f){
    global.requestAnimationFrame(caml_js_wrap_callback_strict(1, f));
    return;
   }
   global["ClipboardItem"];
   global["FormData"];
   function of_jstr$0(_up_){return _up_;}
   function text(r){
    return of_promise$0(function(_uo_){return _uo_;}, r.text());
   }
   var headers = global["Headers"];
   function of_assoc(init, l){
    if(init) var h = init[1], args = [0, h]; else var args = [0];
    var hs = caml_js_new(headers, args);
    function add(hs, param){
     var v = param[2], k = param[1];
     hs.append(k, v);
     return 0;
    }
    iter(function(_un_){return add(hs, _un_);}, l);
    return hs;
   }
   function init$0
   (body,
    cache,
    credentials,
    headers,
    integrity,
    keepalive,
    method,
    mode,
    redirect,
    referrer,
    referrer_policy,
    signal,
    param){
    var o = {};
    o[cst_body] = of_option(undefined$0, function(_um_){return _um_;}, body);
    set_if_some$1(o, _cY_, cache);
    set_if_some$1(o, _cZ_, credentials);
    set_if_some(o, _c0_, map(function(_ul_){return _ul_;}, headers));
    set_if_some$1(o, _c1_, integrity);
    set_if_some$0(o, _c2_, keepalive);
    set_if_some$1(o, _c3_, method);
    set_if_some$1(o, _c4_, mode);
    set_if_some$1(o, _c5_, redirect);
    set_if_some$1(o, _c6_, referrer);
    set_if_some$1(o, _c7_, referrer_policy);
    o["signal"] = of_option(undefined$0, function(_uk_){return _uk_;}, signal);
    return o;
   }
   var request = global["Request"];
   function v$3(opt, url){
    if(opt) var sth = opt[1], init = sth; else var init = {};
    return new request(url, init);
   }
   global["Response"];
   var fetch = global["fetch"];
   function request$0(r){
    function _uh_(_uj_){return _uj_;}
    return function(_ui_){return of_promise$0(_uh_, _ui_);}(fetch(r));
   }
   global["MediaStream"];
   global["MediaRecorder"];
   global["MessageChannel"];
   global["BroadcastChannel"];
   var message = "message";
   function data(e){return e["data"];}
   global["Notification"];
   function local(w){return w["localStorage"];}
   function get_item(s, k){
    function _ue_(_ug_){return _ug_;}
    return function(_uf_){return to_option(_ue_, _uf_);}(s.getItem(k));
   }
   function set_item(s, k, v){
    try{s.setItem(k, v); return;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Error) return;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   global["WebSocket"];
   var worker = global["Worker"];
   function create$6(opt, uri){
    if(opt) var sth = opt[1], opts = sth; else var opts = undefined$0;
    return new worker(uri, opts);
   }
   function post(opts, w, v){
    if(opts) var o = opts[1], opts$0 = o; else var opts$0 = undefined$0;
    w.postMessage(v, opts$0);
    return;
   }
   global["SharedWorker"];
   function post$0(opts, v){
    if(opts) var o = opts[1], opts$0 = o; else var opts$0 = undefined$0;
    global.postMessage(v, opts$0);
    return 0;
   }
   global["clients"];
   global["registration"];
   global["serviceWorker"];
   function height(t){return t["height"];}
   function _c8_(_ud_){return _ud_;}
   function content_rect(t){return _c8_(t["contentRect"]);}
   function target$0(t){return t[cst_target];}
   function string_of_box(param){
    switch(param){
      case 0:
       return _c9_;
      case 1:
       return _c__;
      default: return _c$_;
    }
   }
   function observe(t, box, target){
    if(box)
     var
      b = box[1],
      box$0 = {box: _cN_(string_of_box(b))},
      args = [0, target, box$0];
    else
     var args = [0, target];
    caml_js_meth_call(t, "observe", args);
    return 0;
   }
   function create$7(callback){
    function callback$0(entries, observer){
     var entries$0 = to_list$0(function(_uc_){return _uc_;}, entries);
     return caml_call2(callback, entries$0, observer);
    }
    return new global["ResizeObserver"](callback$0);
   }
   function of_navigator(n){return n["mediaSession"];}
   function img_to_jv(img){
    var _ua_ = _cN_(img[3]), _ub_ = _cN_(img[2]);
    return {src: _cN_(img[1]), sizes: _ub_, type: _ua_};
   }
   function to_jv(t){
    var
     artwork = of_list$0(img_to_jv, t[4]),
     _t__ = _cN_(t[3]),
     _t$_ = _cN_(t[2]);
    return {title: _cN_(t[1]), artist: _t$_, album: _t__, artwork: artwork};
   }
   function set_metadata(t, v){
    log([0, _da_, [0, to_jv(v), 0]]);
    var _t9_ = to_jv(v), metadata = new global["MediaMetadata"](_t9_);
    t["metadata"] = metadata;
    return;
   }
   var next_track = "nexttrack", previous_track = "previoustrack";
   function set_action_handler(t, action, f){
    var callback = caml_js_wrap_callback_strict(1, f);
    t.setActionHandler(action, callback);
    return;
   }
   function set_position_state(duration, playback_rate, position, t){
    function maybe_float(name, v){
     return map(function(v){return [0, name, v];}, v);
    }
    var
     duration$0 = maybe_float(_db_, duration),
     playback_rate$0 = maybe_float(_dc_, playback_rate),
     position$0 = maybe_float(_dd_, position),
     state_dict =
       filter_map(function(_t8_){return _t8_;})
        ([0, duration$0, [0, playback_rate$0, [0, position$0, 0]]]),
     args = state_dict ? [0, caml_js_object(of_list(state_dict))] : [0];
    log([0, args, 0]);
    caml_js_meth_call(t, "setPositionState", args);
    return 0;
   }
   function to_jv$0(param){
    if(0 === param[0]){var p = param[1]; return _cN_(p);}
    var keys = param[1];
    return of_array(to_jv$0, keys);
   }
   function old_version(t){return t["oldVersion"];}
   function new_version(t){return t["newVersion"];}
   var upgrade_needed = "upgradeneeded", success = "success";
   function of_jv(f, j){return [0, j, f];}
   function result(t){
    var _t7_ = t[1]["result"];
    return caml_call1(t[2], _t7_);
   }
   function on_success(f, t){
    function f$0(ev){return caml_call2(f, ev, t);}
    listen(0, success, f$0, t[1]);
    return t;
   }
   function Make_index(P, C, K){
    var name = P[1];
    return [0, , K, , , , , , , , , , name];
   }
   function Make_object_store(C){
    function create_index(I){
     return function(t){
      var
       key_path = to_jv$0(I[3][1]),
       _t6_ = t.createIndex(_cN_(I[2]), key_path);
      return caml_call1(I[1], _t6_);};
    }
    return [0, C, , , , , , , , , , , create_index];
   }
   function create_object_store(S){
    return function(opt, db){
     if(opt)
      var sth = opt[1], auto_increment = sth;
     else
      var auto_increment = 0;
     var
      opts = [0, [0, _de_, ! ! auto_increment], 0],
      key_path = to_jv$0(S[2][1][1]),
      opts$0 = [0, [0, _df_, key_path], opts],
      options = caml_js_object(of_list(opts$0));
     info([0, _dg_, [0, options, 0]]);
     var _t5_ = db.createObjectStore(_cN_(S[2][2]), options);
     return caml_call1(S[1], _t5_);};
   }
   function on_upgrade_needed(f, t){
    function f$0(ev){
     function _t2_(_t4_){return _t4_;}
     var req = function(_t3_){return of_jv(_t2_, _t3_);}(current_target(ev));
     return caml_call2(f, ev, req);
    }
    listen(0, upgrade_needed, f$0, t[1]);
    return t;
   }
   function open(name, version, t){
    if(version)
     var v = version[1], args = [0, name, string_of_int(v)];
    else
     var args = [0, name];
    function _tU_(_t1_, _t0_, _tZ_){
     return caml_js_meth_call(_t1_, _t0_, _tZ_);
    }
    function _tV_(_tY_){return _tY_;}
    return function(_tW_){return of_jv(_tV_, _tW_);}
            (function(_tX_){return _tU_(t, _dh_, _tX_);}(map$3(_cN_, args)));
   }
   function get_factory(opt, param){
    if(opt) var sth = opt[1], global$0 = sth; else var global$0 = global;
    return global$0["indexedDB"];
   }
   function _di_(_tS_){
    var _tT_ = Make_object_store(_tS_);
    return [0, _tT_[1], , , , , , , , , , , _tT_[12]];
   }
   function _dj_(_tQ_, _tP_, _tO_){
    var _tR_ = Make_index(_tQ_, _tP_, _tO_);
    return [0, , _tR_[2], , , , , , , , , , _tR_[12]];
   }
   var submit = cst_submit, pattern = "pattern";
   function persist(t){
    function _tL_(_tN_){return _tN_ | 0;}
    return function(_tM_){return of_promise$0(_tL_, _tM_);}(t.persist());
   }
   function manager(n){return n["storage"];}
   function any(_tK_){return _tK_;}
   function return$1(x){return [0, x];}
   function pure(x){return [0, x];}
   function is_pure(x){
    if(0 !== x[0]) return 0;
    var x$0 = x[1];
    return [0, x$0];
   }
   var dummy = [0, any(0)];
   function operator(desc){return [1, 0, 0, 0, desc];}
   function func(x, f){
    if(0 !== x[0]) return operator([0, x, f]);
    var vx = x[1];
    return [0, caml_call1(f, vx)];
   }
   function map2(x, y, f){
    if(0 === x[0]){
     var vx = x[1];
     if(0 === y[0]){var vy = y[1]; return [0, caml_call2(f, vx, vy)];}
    }
    return operator([1, x, y, f]);
   }
   function join(child){
    if(0 !== child[0]) return operator([4, child, 0]);
    var v = child[1];
    return v;
   }
   function bind$1(x, f){return join(func(x, f));}
   function add_idx(obj, idx, param){
    switch(param[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dk_], 1);
      case 1:
       param[3] = [0, idx, obj, param[3]]; return;
      default: param[2] = [0, idx, obj, param[2]]; return;
    }
   }
   function rem_idx_rec(obj, self){
    if(! self)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dl_], 1);
    if(self[2] === obj) return [0, self[1], self[3]];
    var match = rem_idx_rec(obj, self[3]), result = match[2], idx = match[1];
    self[3] = result;
    return [0, idx, self];
   }
   function rem_idx(obj, param){
    switch(param[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dm_], 1);
      case 1:
       var
        match = rem_idx_rec(obj, param[3]),
        trace_idx = match[2],
        idx = match[1];
       param[3] = trace_idx;
       return idx;
      default:
       var
        match$0 = rem_idx_rec(obj, param[2]),
        trace_idx$0 = match$0[2],
        idx$0 = match$0[1];
       param[2] = trace_idx$0;
       return idx$0;
    }
   }
   function mov_idx_rec(obj, oldidx, newidx, param){
    var t = param;
    for(;;){
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _dn_], 1);
     if(t[1] === oldidx && t[2] === obj){t[1] = newidx; return;}
     var t = t[3];
    }
   }
   function mov_idx(obj, oldidx, newidx, param){
    switch(param[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _do_], 1);
      case 1:
       return mov_idx_rec(obj, oldidx, newidx, param[3]);
      default: return mov_idx_rec(obj, oldidx, newidx, param[2]);
    }
   }
   function get_idx_rec(obj, param){
    var t = param;
    for(;;){
     if(! t) throw caml_maybe_attach_backtrace([0, Assert_failure, _dp_], 1);
     if(t[2] === obj) return t[1];
     var t = t[3];
    }
   }
   function get_idx(obj, param){
    switch(param[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dq_], 1);
      case 1:
       return get_idx_rec(obj, param[3]);
      default: return get_idx_rec(obj, param[2]);
    }
   }
   function invalidate_node$0(counter, status, sensitivity, node){
    switch(node[0]){
      case 0:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dr_], 1);
      case 1:
       var _tE_ = node[1];
       if(typeof _tE_ === "number" && ! _tE_){
        if(! sensitivity) return;
        if(status[1]) return;
        status[1] = 1;
        return;
       }
       var _tF_ = node[4];
       if(7 === _tF_[0]){
        var _tI_ = _tF_[2];
        if(1 === _tI_[0]){
         var _tJ_ = _tI_[1];
         if(typeof _tJ_ === "number"){
          if(! _tJ_ && sensitivity){
           if(status[1]) return;
           status[1] = 1;
           return;
          }
         }
         else if(sensitivity) return;
        }
       }
       var _tG_ = node[1];
       a:
       {
        if(typeof _tG_ === "number" && _tG_){var sensitivity$0 = 1; break a;}
        var sensitivity$0 = sensitivity;
       }
       node[1] = 0;
       var _tH_ = node[2];
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_trace, [0, status, sensitivity$0, _tH_]);
       var counter$0 = counter + 1 | 0;
       return invalidate_trace(counter$0, status, sensitivity$0, _tH_);
      default:
       var value = node[1];
       node[1] = 0;
       if(typeof value === "number"){
        if(! value) return;
        status[1] = 2;
        return;
       }
       var x = value[1];
       if(sensitivity) status[1] = 2;
       return caml_call1(node[3], x);
    }
   }
   function invalidate_node(status, sensitivity, node){
    return caml_trampoline(invalidate_node$0(0, status, sensitivity, node));
   }
   function invalidate_trace(counter, status, sensitivity, t){
    if(typeof t === "number") return;
    switch(t[0]){
      case 0:
       var x = t[1];
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_node$0, [0, status, sensitivity, x]);
       var counter$0 = counter + 1 | 0;
       return invalidate_node$0(counter$0, status, sensitivity, x);
      case 1:
       var y = t[2], x$0 = t[1];
       invalidate_node(status, sensitivity, x$0);
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_node$0, [0, status, sensitivity, y]);
       var counter$1 = counter + 1 | 0;
       return invalidate_node$0(counter$1, status, sensitivity, y);
      case 2:
       var z = t[3], y$0 = t[2], x$1 = t[1];
       invalidate_node(status, sensitivity, x$1);
       invalidate_node(status, sensitivity, y$0);
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_node$0, [0, status, sensitivity, z]);
       var counter$2 = counter + 1 | 0;
       return invalidate_node$0(counter$2, status, sensitivity, z);
      case 3:
       var w = t[4], z$0 = t[3], y$1 = t[2], x$2 = t[1];
       invalidate_node(status, sensitivity, x$2);
       invalidate_node(status, sensitivity, y$1);
       invalidate_node(status, sensitivity, z$0);
       if(counter >= 50)
        return caml_trampoline_return
                (invalidate_node$0, [0, status, sensitivity, w]);
       var counter$3 = counter + 1 | 0;
       return invalidate_node$0(counter$3, status, sensitivity, w);
      default:
       var active = t[1];
       t[1] = 0;
       var _tC_ = active - 1 | 0, _tB_ = 0;
       if(_tC_ >= 0){
        var i = _tB_;
        for(;;){
         invalidate_node
          (status, sensitivity, caml_check_bound(t[3], i)[1 + i]);
         var _tD_ = i + 1 | 0;
         if(_tC_ === i) break;
         var i = _tD_;
        }
       }
       return;
    }
   }
   function default_unsafe_mutation_logger(param){
    var callstack = caml_get_current_callstack(20);
    return caml_call2(fprintf(stderr, _ds_), print_raw_backtrace, callstack);
   }
   function do_invalidate(sensitivity, node){
    var status = [0, 0];
    invalidate_node(status, sensitivity, node);
    var unsafe = 2 <= status[1] ? 1 : 0;
    return unsafe ? default_unsafe_mutation_logger(0) : unsafe;
   }
   function var$0(x){return operator([5, x]);}
   function get$3(x){return x;}
   function symbol$2(vx, x){
    if(1 === vx[0]){
     var match = vx[4];
     if(5 === match[0]){match[1] = x; return do_invalidate(0, vx);}
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dt_], 1);
   }
   function peek(param){
    if(1 === param[0]){
     var match = param[4];
     if(5 === match[0]) return match[1];
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _du_], 1);
   }
   function update(f, v){return symbol$2(v, caml_call1(f, peek(v)));}
   function prim(acquire, release){return operator([6, acquire, release]);}
   function get_prim(x){return x;}
   function invalidate(x){
    if(1 === x[0]){
     var value = x[1], p = x[4];
     if(6 === p[0]){
      if(typeof value === "number") return value ? do_invalidate(1, x) : 0;
      var v = value[1];
      do_invalidate(0, x);
      return caml_call2(p[2], x, v);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dv_], 1);
   }
   function sub_release(failures, origin, self){
    var failures$0 = failures, origin$1 = origin, origin$0 = self;
    for(;;)
     switch(origin$0[0]){
       case 0:
        return failures$0;
       case 1:
        var trace = origin$0[2];
        if(typeof trace === "number")
         throw caml_maybe_attach_backtrace([0, Assert_failure, _dw_], 1);
        switch(trace[0]){
          case 0:
           var x = trace[1];
           if(x !== origin$1)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _dx_], 1);
           var trace$0 = 0;
           break;
          case 1:
           var y = trace[2], x$4 = trace[1];
           if(x$4 === origin$1)
            var _tv_ = [0, y];
           else{
            if(y !== origin$1)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dy_], 1);
            var _tv_ = [0, x$4];
           }
           var trace$0 = _tv_;
           break;
          case 2:
           var z = trace[3], y$0 = trace[2], x$5 = trace[1];
           if(x$5 === origin$1)
            var _tw_ = [1, y$0, z];
           else if(y$0 === origin$1)
            var _tw_ = [1, x$5, z];
           else{
            if(z !== origin$1)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dz_], 1);
            var _tw_ = [1, x$5, y$0];
           }
           var trace$0 = _tw_;
           break;
          case 3:
           var w = trace[4], z$0 = trace[3], y$1 = trace[2], x$6 = trace[1];
           if(x$6 === origin$1)
            var _tx_ = [2, y$1, z$0, w];
           else if(y$1 === origin$1)
            var _tx_ = [2, x$6, z$0, w];
           else if(z$0 === origin$1)
            var _tx_ = [2, x$6, y$1, w];
           else{
            if(w !== origin$1)
             throw caml_maybe_attach_backtrace([0, Assert_failure, _dA_], 1);
            var _tx_ = [2, x$6, y$1, z$0];
           }
           var trace$0 = _tx_;
           break;
          default:
           var revidx = rem_idx(origin$0, origin$1);
           if(caml_check_bound(trace[3], revidx)[1 + revidx] !== origin$1)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _dB_], 1);
           var count = trace[2] - 1 | 0;
           trace[2] = count;
           if(revidx < count){
            var obj = caml_check_bound(trace[3], count)[1 + count];
            caml_check_bound(trace[3], revidx)[1 + revidx] = obj;
            caml_check_bound(trace[3], count)[1 + count] = dummy;
            mov_idx(origin$0, count, revidx, obj);
           }
           else
            caml_check_bound(trace[3], revidx)[1 + revidx] = dummy;
           if(count < trace[1]) trace[1] = count;
           if(4 === count){
            var
             a = caml_check_bound(trace[3], 0)[1],
             b = caml_check_bound(trace[3], 1)[2],
             c = caml_check_bound(trace[3], 2)[3],
             d = caml_check_bound(trace[3], 3)[4];
            rem_idx(origin$0, a);
            rem_idx(origin$0, b);
            rem_idx(origin$0, c);
            rem_idx(origin$0, d);
            var _ty_ = [3, a, b, c, d];
           }
           else{
            var len = trace[3].length - 1;
            if(count <= (len >>> 2 | 0))
             var
              _tz_ = sub$1(trace[3], 0, len >>> 1 | 0),
              _tA_ = [4, trace[1], trace[2], _tz_];
            else
             var _tA_ = trace;
            var _ty_ = _tA_;
           }
           var trace$0 = _ty_;
        }
        origin$0[2] = trace$0;
        if(typeof trace$0 !== "number") return failures$0;
        var value = origin$0[1];
        origin$0[1] = 1;
        var t = origin$0[4];
        switch(t[0]){
          case 0:
           var self$0 = t[1], origin$1 = origin$0, origin$0 = self$0; break;
          case 1:
           var
            self$1 = t[2],
            x$0 = t[1],
            failures$1 = sub_release(failures$0, origin$0, x$0),
            failures$0 = failures$1,
            origin$1 = origin$0,
            origin$0 = self$1;
           break;
          case 2:
           var
            self$2 = t[2],
            x$1 = t[1],
            failures$2 = sub_release(failures$0, origin$0, x$1),
            failures$0 = failures$2,
            origin$1 = origin$0,
            origin$0 = self$2;
           break;
          case 3:
           var
            self$3 = t[2],
            x$2 = t[1],
            failures$3 = sub_release(failures$0, origin$0, x$2),
            failures$0 = failures$3,
            origin$1 = origin$0,
            origin$0 = self$3;
           break;
          case 4:
           var
            child = t[1],
            intermediate = t[2],
            failures$4 = sub_release(failures$0, origin$0, child);
           if(! intermediate) return failures$4;
           var child$0 = intermediate[1];
           t[2] = 0;
           var
            failures$0 = failures$4,
            origin$1 = origin$0,
            origin$0 = child$0;
           break;
          case 5:
           return failures$0;
          case 6:
           if(typeof value === "number") return failures$0;
           var x$3 = value[1];
           try{caml_call2(t[2], origin$0, x$3); return failures$0;}
           catch(exn$0){
            var exn = caml_wrap_exception(exn$0), bt = _ch_(0);
            return [0, [0, exn, bt], failures$0];
           }
          default:
           var
            wrt = t[2],
            self$4 = t[1],
            failures$5 = sub_release(failures$0, origin$0, wrt),
            failures$0 = failures$5,
            origin$1 = origin$0,
            origin$0 = self$4;
        }
        break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dC_], 1);
     }
   }
   function sub_acquire(origin, self){
    var origin$1 = origin, origin$0 = self;
    for(;;)
     switch(origin$0[0]){
       case 0:
        return;
       case 1:
        var
         acquire = typeof origin$0[2] === "number" ? 1 : 0,
         trace = origin$0[2];
        if(typeof trace === "number")
         var trace$0 = [0, origin$1];
        else
         switch(trace[0]){
           case 0:
            var x$2 = trace[1], trace$0 = [1, origin$1, x$2]; break;
           case 1:
            var y = trace[2], x$3 = trace[1], trace$0 = [2, origin$1, x$3, y];
            break;
           case 2:
            var
             z = trace[3],
             y$0 = trace[2],
             x$4 = trace[1],
             trace$0 = [3, origin$1, x$4, y$0, z];
            break;
           case 3:
            var
             w = trace[4],
             z$0 = trace[3],
             y$1 = trace[2],
             x$5 = trace[1],
             entries = [0, x$5, y$1, z$0, w, origin$1, dummy, dummy, dummy],
             i = 0;
            for(;;){
             add_idx(origin$0, i, caml_check_bound(entries, i)[1 + i]);
             var _tu_ = i + 1 | 0;
             if(4 === i) break;
             var i = _tu_;
            }
            var trace$0 = [4, 5, 5, entries];
            break;
           default:
            var index = trace[2];
            if(index < trace[3].length - 1){
             trace[2] = trace[2] + 1 | 0;
             var trace$1 = trace, entries$0 = trace[3];
            }
            else{
             var entries$1 = caml_make_vect(index * 2 | 0, dummy);
             blit$0(trace[3], 0, entries$1, 0, index);
             var
              trace$1 = [4, trace[1], index + 1 | 0, entries$1],
              entries$0 = entries$1;
            }
            caml_check_bound(entries$0, index)[1 + index] = origin$1;
            add_idx(origin$0, index, origin$1);
            var trace$0 = trace$1;
         }
        origin$0[2] = trace$0;
        if(! acquire) return acquire;
        var match = origin$0[4];
        switch(match[0]){
          case 0:
           var self$0 = match[1], origin$1 = origin$0, origin$0 = self$0;
           break;
          case 1:
           var self$1 = match[2], x = match[1];
           sub_acquire(origin$0, x);
           var origin$1 = origin$0, origin$0 = self$1;
           break;
          case 2:
           var self$2 = match[2], x$0 = match[1];
           sub_acquire(origin$0, x$0);
           var origin$1 = origin$0, origin$0 = self$2;
           break;
          case 3:
           var self$3 = match[2], x$1 = match[1];
           sub_acquire(origin$0, x$1);
           var origin$1 = origin$0, origin$0 = self$3;
           break;
          case 4:
           var child = match[1], intermediate = match[2];
           sub_acquire(origin$0, child);
           if(intermediate)
            throw caml_maybe_attach_backtrace([0, Assert_failure, _dD_], 1);
           return;
          case 5:
           return;
          case 6:
           return;
          default:
           var self$4 = match[2], doc = match[1];
           sub_acquire(origin$0, doc);
           var origin$1 = origin$0, origin$0 = self$4;
        }
        break;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dE_], 1);
     }
   }
   function activate_tracing(self, origin, tn){
    if(typeof tn !== "number" && 4 === tn[0]){
     var idx = get_idx(self, origin), active = tn[1];
     if(active <= idx) tn[1] = active + 1 | 0;
     var _tt_ = active < idx ? 1 : 0;
     if(! _tt_) return _tt_;
     var old = caml_check_bound(tn[3], active)[1 + active];
     caml_check_bound(tn[3], idx)[1 + idx] = old;
     caml_check_bound(tn[3], active)[1 + active] = origin;
     mov_idx(self, active, idx, old);
     return mov_idx(self, idx, active, origin);
    }
    return;
   }
   function sub_is_damaged(param){
    switch(param[0]){
      case 0:
       return 0;
      case 1:
       var value = param[1];
       if(typeof value !== "number") return 0;
       if(value)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dF_], 1);
       return 1;
      default:
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dG_], 1);
    }
   }
   function sub_sample(queue){
    function aux(origin, self){
     switch(self[0]){
       case 0:
        var x = self[1]; return x;
       case 1:
        var match = self[1];
        if(typeof match !== "number"){
         var value = match[1];
         activate_tracing(self, origin, self[2]);
         return value;
        }
        self[1] = 1;
        var x$0 = self[4];
        switch(x$0[0]){
          case 0:
           var
            f = x$0[2],
            x$1 = x$0[1],
            result = caml_call1(f, aux(self, x$1));
           break;
          case 1:
           var
            f$0 = x$0[3],
            y = x$0[2],
            x$2 = x$0[1],
            _tp_ = aux(self, y),
            result = caml_call2(f$0, aux(self, x$2), _tp_);
           break;
          case 2:
           var
            y$0 = x$0[2],
            x$3 = x$0[1],
            _tq_ = aux(self, y$0),
            result = [0, aux(self, x$3), _tq_];
           break;
          case 3:
           var
            x$4 = x$0[2],
            f$1 = x$0[1],
            _tr_ = aux(self, x$4),
            result = caml_call1(aux(self, f$1), _tr_);
           break;
          case 4:
           var intermediate = aux(self, x$0[1]), match$0 = x$0[2];
           if(match$0){
            var x$5 = match$0[1];
            if(x$5 !== intermediate){
             queue[1] = [0, self, x$5, queue[1]];
             x$0[2] = [0, intermediate];
             sub_acquire(self, intermediate);
            }
           }
           else{x$0[2] = [0, intermediate]; sub_acquire(self, intermediate);}
           var result = aux(self, intermediate);
           break;
          case 5:
           var result = x$0[1]; break;
          case 6:
           var result = caml_call1(x$0[1], self); break;
          default:
           var wrt = x$0[2], doc = x$0[1];
           aux(self, wrt);
           var result$0 = aux(self, doc);
           if(sub_is_damaged(wrt))
            var _ts_ = aux(origin, self);
           else{
            if(sub_is_damaged(doc)) do_invalidate(1, self);
            var _ts_ = result$0;
           }
           var result = _ts_;
        }
        var _to_ = self[1];
        a:
        if(typeof _to_ === "number" && _to_){self[1] = [0, result]; break a;}
        activate_tracing(self, origin, self[2]);
        return result;
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dH_], 1);
     }
    }
    return aux;
   }
   function observe$0(opt, child){
    if(opt)
     var sth = opt[1], on_invalidate = sth;
    else
     var on_invalidate = function(_tn_){return 0;};
    var root = [2, 0, 0, on_invalidate, 0, child];
    return root;
   }
   var Release_failure = [248, _dI_, caml_fresh_oo_id(0)];
   function raw_flush_release_queue(queue){
    function aux(failures, param){
     var failures$0 = failures, param$0 = param;
     for(;;){
      if(! param$0) return failures$0;
      var
       failures$1 = sub_release(failures$0, param$0[1], param$0[2]),
       failures$0 = failures$1,
       param$0 = param$0[3];
     }
    }
    return aux(0, queue);
   }
   function flush_release_queue(queue){
    var queue$0 = queue[1];
    queue[1] = 0;
    return raw_flush_release_queue(queue$0);
   }
   function sample(queue, self){
    if(2 !== self[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dJ_], 1);
    var match = self[1];
    if(typeof match !== "number"){var value$0 = match[1]; return value$0;}
    if(1 - self[4]){self[4] = 1; sub_acquire(self, self[5]);}
    self[1] = 1;
    var _tl_ = self[5], value = sub_sample(queue)(self, _tl_), _tm_ = self[1];
    a:
    if(typeof _tm_ === "number" && _tm_){self[1] = [0, value]; break a;}
    return value;
   }
   function set_on_invalidate(x, f){
    if(2 !== x[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dK_], 1);
    x[3] = f;
    return;
   }
   function flush_or_fail(main_exn, queue){
    var failures = flush_release_queue(queue);
    if(failures)
     throw caml_maybe_attach_backtrace
            ([0, Release_failure, main_exn, failures], 1);
    return;
   }
   function quick_sample(root){
    var queue = [0, 0];
    try{var result = sample(queue, root);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     flush_or_fail([0, exn], queue);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    flush_or_fail(0, queue);
    return result;
   }
   function symbol_bind(x, f){return bind$1(x, f);}
   function map_reduce(inj, param, items){
    var plus = param[2], zero = param[1];
    function cons_monoid(c, xs, v){
     var c$0 = c, xs$0 = xs, v$0 = v;
     for(;;){
      if(xs$0){
       var xs$1 = xs$0[2], match = xs$0[1], v$1 = match[2], c$1 = match[1];
       if(c$0 === c$1){
        var
         v$2 = caml_call2(plus, v$1, v$0),
         c$2 = c$0 + 1 | 0,
         c$0 = c$2,
         xs$0 = xs$1,
         v$0 = v$2;
        continue;
       }
      }
      return [0, [0, c$0, v$0], xs$0];
     }
    }
    function cons_monoid$0(xs, v){
     return cons_monoid(0, xs, caml_call1(inj, v));
    }
    var match = fold_left(cons_monoid$0, 0, items);
    if(! match) return zero;
    var xs = match[2], x = match[1][2];
    return fold_left
            (function(acc, param){
              var v = param[2];
              return caml_call2(plus, v, acc);
             },
             x,
             xs);
   }
   var not_origin = [0, 0], origin = [0, 0];
   function make$3(param){return [1, 0, 0, origin, 0];}
   function set_parent(parent, param){
    if(typeof param === "number") return;
    if(0 !== param[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dL_], 1);
    param[5] = parent;
    return;
   }
   function make_node(set, left, right, parent){
    if(set) var value = set[1], binding = [0, value, 1]; else var binding = 0;
    var node = [0, 0, left, binding, right, parent, 0];
    set_parent(node, left);
    set_parent(node, right);
    return node;
   }
   function raw_invalidate(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number")
      throw caml_maybe_attach_backtrace([0, Assert_failure, _dM_], 1);
     if(0 !== param$0[0]) return iter(invalidate, param$0[4]);
     if(0 === param$0[6]) return;
     param$0[6] = 0;
     var param$0 = param$0[5];
    }
   }
   function append(set, parent){
    if(typeof parent !== "number" && 1 === parent[0]){
     raw_invalidate(parent);
     var node = make_node(set, parent[2], 0, parent);
     parent[2] = node;
     return node;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dN_], 1);
   }
   function get$4(param){
    if(typeof param !== "number" && 0 === param[0]){
     var match = param[3];
     if(match){var value = match[1]; return [0, value];}
    }
    return 0;
   }
   function invalidate_binding(param){
    if(! param) return;
    param[2] = 0;
    return;
   }
   function set_binding(x, t){
    if(typeof t !== "number"){
     if(0 !== t[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _dO_], 1);
     if(typeof t[5] !== "number"){
      raw_invalidate(t);
      invalidate_binding(t[3]);
      t[3] = x;
      return 0;
     }
    }
    return 0;
   }
   function symbol$3(t, value){return set_binding([0, value, 1], t);}
   function clear$2(root){
    var root$0 = root;
    for(;;){
     if(typeof root$0 === "number") return;
     if(0 !== root$0[0]){
      var child = root$0[2];
      root$0[2] = 0;
      clear$2(child);
      return raw_invalidate(root$0);
     }
     var left = root$0[2], right = root$0[4];
     invalidate_binding(root$0[3]);
     root$0[2] = 0;
     root$0[4] = 0;
     root$0[5] = 0;
     root$0[3] = 0;
     root$0[1] = max_int;
     clear$2(left);
     var root$0 = right;
    }
   }
   function size(node){
    if(typeof node === "number") return 0;
    if(0 !== node[0])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dQ_], 1);
    if(0 === node[6])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _dP_], 1);
    return node[6];
   }
   function smaller_ell(smin, smax){
    var
     _tj_ = smin < smax ? 1 : 0,
     _tk_ = _tj_ ? (smin & smax) << 1 < smax ? 1 : 0 : _tj_;
    return _tk_;
   }
   function disbalanced(smin, smax){return smaller_ell(smin, smax >>> 1 | 0);}
   function reparent(parent, oldchild, newchild){
    if(typeof parent !== "number"){
     if(0 !== parent[0]){
      if(parent[2] !== oldchild)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _dS_], 1);
      parent[2] = newchild;
      return;
     }
     if(parent[2] === oldchild){parent[2] = newchild; return;}
     if(parent[4] === oldchild){parent[4] = newchild; return;}
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dR_], 1);
   }
   function rot_left$0(counter, version, sn){
    if(typeof sn !== "number" && 0 === sn[0]){
     var rn = sn[4];
     if(typeof rn !== "number" && 1 !== rn[0]){
      var parent = sn[5], rl = rn[2];
      if(typeof rl === "number")
       var rl$0 = 0;
      else{
       if(0 !== rl[0])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dU_], 1);
       rl[5] = sn;
       var rl$0 = rl;
      }
      rn[2] = sn;
      sn[4] = rl$0;
      sn[5] = rn;
      rn[5] = parent;
      reparent(parent, sn, rn);
      balance(version, sn);
      if(counter >= 50)
       return caml_trampoline_return(balance$0, [0, version, rn]);
      var counter$0 = counter + 1 | 0;
      return balance$0(counter$0, version, rn);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dT_], 1);
   }
   function rot_left(version, sn){
    return caml_trampoline(rot_left$0(0, version, sn));
   }
   function rot_right$0(counter, version, sn){
    if(typeof sn !== "number" && 0 === sn[0]){
     var ln = sn[2];
     if(typeof ln !== "number" && 1 !== ln[0]){
      var parent = sn[5], lr = ln[4];
      if(typeof lr === "number")
       var lr$0 = 0;
      else{
       if(0 !== lr[0])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _dW_], 1);
       lr[5] = sn;
       var lr$0 = lr;
      }
      ln[4] = sn;
      sn[2] = lr$0;
      sn[5] = ln;
      ln[5] = parent;
      reparent(parent, sn, ln);
      balance(version, sn);
      if(counter >= 50)
       return caml_trampoline_return(balance$0, [0, version, ln]);
      var counter$0 = counter + 1 | 0;
      return balance$0(counter$0, version, ln);
     }
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dV_], 1);
   }
   function rot_right(version, sn){
    return caml_trampoline(rot_right$0(0, version, sn));
   }
   function inc_left(counter, version, self){
    if(typeof self !== "number" && 0 === self[0]){
     var right = self[4];
     a:
     if(typeof right !== "number" && 0 === right[0]){
      var _ti_ = size(right[2]);
      if(smaller_ell(size(right[4]), _ti_)){rot_right(version, right); break a;}
     }
     if(counter >= 50)
      return caml_trampoline_return(rot_left$0, [0, version, self]);
     var counter$0 = counter + 1 | 0;
     return rot_left$0(counter$0, version, self);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dX_], 1);
   }
   function inc_right(counter, version, self){
    if(typeof self !== "number" && 0 === self[0]){
     var left = self[2];
     a:
     if(typeof left !== "number" && 0 === left[0]){
      var _th_ = size(left[4]);
      if(smaller_ell(size(left[2]), _th_)){rot_left(version, left); break a;}
     }
     if(counter >= 50)
      return caml_trampoline_return(rot_right$0, [0, version, self]);
     var counter$0 = counter + 1 | 0;
     return rot_right$0(counter$0, version, self);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dY_], 1);
   }
   function balance$0(counter, version, self){
    if(typeof self !== "number" && 0 === self[0]){
     var sl = size(self[2]), sr = size(self[4]);
     if(sl < sr){
      if(! disbalanced(sl, sr)){
       self[1] = version;
       self[6] = (1 + sl | 0) + sr | 0;
       return self;
      }
      if(counter >= 50)
       return caml_trampoline_return(inc_left, [0, version, self]);
      var counter$1 = counter + 1 | 0;
      return inc_left(counter$1, version, self);
     }
     if(! disbalanced(sr, sl)){
      self[1] = version;
      self[6] = (1 + sl | 0) + sr | 0;
      return self;
     }
     if(counter >= 50)
      return caml_trampoline_return(inc_right, [0, version, self]);
     var counter$0 = counter + 1 | 0;
     return inc_right(counter$0, version, self);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _dZ_], 1);
   }
   function balance(version, self){
    return caml_trampoline(balance$0(0, version, self));
   }
   function compute_sub_size(version, self){
    var self$0 = self;
    for(;;){
     if(typeof self$0 === "number") return;
     if(0 !== self$0[0]) return;
     var _te_ = 0 === self$0[6] ? 1 : 0;
     if(! _te_) return _te_;
     var _tf_ = self$0[2];
     if(typeof _tf_ !== "number" && 0 === _tf_[0] && 0 === _tf_[6]){var self$2 = self$0[2], self$0 = self$2; continue;}
     var _tg_ = self$0[4];
     if(typeof _tg_ !== "number" && 0 === _tg_[0] && 0 === _tg_[6]){var self$1 = self$0[4], self$0 = self$1; continue;}
     var parent = self$0[5];
     balance(version, self$0);
     var self$0 = parent;
    }
   }
   function reset_version(version, param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return;
     if(0 !== param$0[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d0_], 1);
     param$0[1] = version;
     reset_version(version, param$0[2]);
     var param$0 = param$0[4];
    }
   }
   function rebalance(r){
    if(typeof r !== "number" && 1 === r[0]){
     var _td_ = r[2];
     if(typeof _td_ !== "number"){
      if(0 !== _td_[0])
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d2_], 1);
      if(0 === _td_[6]){
       var
        version = r[1] + 1 | 0,
        version$0 =
          version === 2147483647
           ? (r[3] = [0, 0], reset_version(0, r[2]), 0)
           : version;
       r[1] = version$0;
       compute_sub_size(version$0, r[2]);
       return version$0;
      }
     }
     return r[1];
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d1_], 1);
   }
   function plus(param, x, y){
    var plus = param[2], zero = param[1];
    return x === zero ? y : y === zero ? x : caml_call2(plus, x, y);
   }
   function extract_bindings(tree){
    function aux(acc, param){
     var acc$0 = acc, rnode = param;
     for(;;){
      if(! rnode) return acc$0;
      var acc$1 = aux(acc$0, rnode[6]), _tb_ = rnode[2];
      if(_tb_)
       var
        _tc_ = _tb_[2] ? [0, [0, rnode[2], rnode[3]], acc$1] : acc$1,
        acc$2 = _tc_;
      else
       var acc$2 = acc$1;
      var acc$0 = acc$2, rnode = rnode[5];
     }
    }
    return aux(0, tree);
   }
   function full_rebuild(red, tree){
    var bindings = [0, extract_bindings(red[3])];
    function aux(cell){
     if(typeof cell === "number") return 0;
     if(0 !== cell[0])
      throw caml_maybe_attach_backtrace([0, Assert_failure, _d4_], 1);
     var left = aux(cell[2]), binding = cell[3], _ta_ = bindings[1];
     a:
     if(binding){
      if(_ta_){
       var
        bindings$0 = _ta_[2],
        match = _ta_[1],
        reduction = match[2],
        binding$0 = match[1];
       if(binding === binding$0){
        bindings[1] = bindings$0;
        var reduction$0 = reduction;
        break a;
       }
      }
      if(! binding[2])
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d3_], 1);
      var reduction$0 = caml_call2(red[5], cell, binding[1]);
     }
     else
      var reduction$0 = red[6][1];
     var
      right = aux(cell[4]),
      aggregate = left ? plus(red[6], left[4], reduction$0) : reduction$0,
      aggregate$0 = right ? plus(red[6], aggregate, right[4]) : aggregate;
     return [0, cell, cell[3], reduction$0, aggregate$0, left, right];
    }
    var result = aux(tree);
    if(0 === bindings[1]) return result;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d5_], 1);
   }
   function extract_fringe(version, tree){
    function aux(acc, tree){
     var acc$0 = acc, rnode = tree;
     for(;;){
      if(! rnode) return acc$0;
      var match = rnode[1];
      if(typeof match !== "number" && 0 === match[0] && match[1] <= version)
       return [0, rnode, acc$0];
      var acc$1 = aux(acc$0, rnode[6]), _s__ = rnode[2];
      if(_s__)
       var _s$_ = _s__[2] ? [0, rnode, acc$1] : acc$1, acc$2 = _s$_;
      else
       var acc$2 = acc$1;
      var tree$0 = rnode[5], acc$0 = acc$2, rnode = tree$0;
     }
    }
    return aux(0, tree);
   }
   function incremental_rebuild(red, version, tree){
    var fringe = [0, extract_fringe(version, red[3])];
    function aux(cell){
     if(typeof cell !== "number" && 0 === cell[0]){
      if(cell[1] <= version){
       var match = fringe[1];
       if(match){
        var reduction = match[1];
        if(reduction){
         var fringe$0 = match[2];
         if(reduction[1] !== cell)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d6_], 1);
         fringe[1] = fringe$0;
         return reduction;
        }
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d7_], 1);
      }
      var left = aux(cell[2]), binding = cell[3], _s8_ = fringe[1];
      a:
      if(binding){
       if(_s8_){
        var rnode = _s8_[1];
        if(rnode){
         var fringe$1 = _s8_[2];
         if(binding === rnode[2]){
          fringe[1] = fringe$1;
          var _s9_ = rnode[3], reduction$0 = _s9_;
          break a;
         }
        }
       }
       if(! binding[2])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _d8_], 1);
       var reduction$0 = caml_call2(red[5], cell, binding[1]);
      }
      else
       var reduction$0 = red[6][1];
      var
       right = aux(cell[4]),
       aggregate = left ? plus(red[6], left[4], reduction$0) : reduction$0,
       aggregate$0 = right ? plus(red[6], aggregate, right[4]) : aggregate;
      return [0, cell, cell[3], reduction$0, aggregate$0, left, right];
     }
     return 0;
    }
    var result = aux(tree);
    if(0 === fringe[1]) return result;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d9_], 1);
   }
   function eval$0(red){
    var root = red[2];
    if(typeof root !== "number" && 1 === root[0]){
     var version = rebalance(red[2]);
     if(red[4] !== root[3]){
      red[4] = root[3];
      red[3] = full_rebuild(red, root[2]);
     }
     else
      red[3] = incremental_rebuild(red, red[1], root[2]);
     red[1] = version;
     var match = red[3];
     return match ? match[4] : red[6][1];
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _d__], 1);
   }
   function opaque(_s7_){return _s7_;}
   function map_reduce$0(mapper, monoid, source){
    var
     reduction = [0, 0, source, 0, not_origin, mapper, monoid],
     prim$0 =
       prim
        (function(self){
          var match = reduction[2];
          if(typeof match !== "number" && 1 === match[0]){
           var _s6_ = match[4];
           match[4] = [0, opaque(self), _s6_];
           return reduction;
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _ea_], 1);
         },
         function(self, reduction){
          var match = reduction[2];
          if(typeof match !== "number" && 1 === match[0]){
           var
            _s0_ = match[4],
            _s1_ = opaque(self),
            _s2_ = function(_s5_, _s4_){return _s5_ !== _s4_ ? 1 : 0;};
           match[4] = find_all(function(_s3_){return _s2_(_s1_, _s3_);})(_s0_);
           return 0;
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, _d$_], 1);
         });
    return func(get_prim(prim$0), eval$0);
   }
   var empty$0 = 0;
   function element(v){return [0, 0, v];}
   function maxi(a, b){return a < b ? b : a;}
   function rank(t){
    if(typeof t === "number") return 0;
    if(0 === t[0]){if(0 !== t[1]) invalid_arg(_eb_); return 0;}
    if(0 !== (t[1] & 2)) invalid_arg(_ec_);
    return t[1] >>> 2 | 0;
   }
   function concat$1(a, b){
    if(typeof a === "number")
     var x = b;
    else{
     if(typeof b !== "number"){
      var _sZ_ = rank(b);
      return [1, (maxi(rank(a), _sZ_) + 1 | 0) << 2, a, b];
     }
     var x = a;
    }
    return x;
   }
   function view(param){
    return typeof param === "number"
            ? 0
            : 0 === param[0] ? [0, param[2]] : [1, param[2], param[3]];
   }
   var mask_old = 1, mask_new = 2, mask_both = 3;
   function is_shared(m){return -1 === m ? 1 : 0;}
   function is_not_shared(m){return -1 !== m ? 1 : 0;}
   function is_both(m){return (m & 3) === 3 ? 1 : 0;}
   function is_old(m){return (m & 3) === 1 ? 1 : 0;}
   function is_new(m){return (m & 3) === 2 ? 1 : 0;}
   function set_both(m){return m | 3;}
   function get_index(m){return m >>> 2 | 0;}
   function with_index_new(index){return index << 2 | 2;}
   function unmark(m){return m & lnot(mask_both);}
   function marked(s){return s[1];}
   function shared(s){return s[2];}
   function blocked(s){return s[3];}
   function mk_stats(param){return [0, 0, 0, 0];}
   function new_marked(stats){stats[1] = stats[1] + 1 | 0; return;}
   function new_shared(stats){stats[2] = stats[2] + 1 | 0; return;}
   function new_blocked(stats){stats[3] = stats[3] + 1 | 0; return;}
   function block(stats, mask, param){
    var t = param;
    for(;;){
     if(typeof t === "number") return;
     if(0 === t[0]){
      var
       mark = t[1],
       _sV_ = (mark & 3) !== 3 ? 1 : 0,
       _sW_ = _sV_ ? 0 !== (mark & 3) ? 1 : 0 : _sV_;
      if(_sW_){
       if(0 !== (mark & mask))
        throw caml_maybe_attach_backtrace([0, Assert_failure, _ed_], 1);
       new_marked(stats);
       new_blocked(stats);
       t[1] = mark | 3;
      }
      return;
     }
     var
      mark$0 = t[1],
      _sX_ = (mark$0 & 3) !== 3 ? 1 : 0,
      _sY_ = _sX_ ? 0 !== (mark$0 & 3) ? 1 : 0 : _sX_;
     if(! _sY_) return _sY_;
     if(0 !== (mark$0 & mask))
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ee_], 1);
     new_marked(stats);
     new_blocked(stats);
     t[1] = mark$0 | 3;
     block(stats, mask, t[2]);
     var t = t[3];
    }
   }
   function enqueue(stats, q, mask, t){
    if(typeof t === "number") return;
    if(0 === t[0]){
     var mark = t[1];
     if(0 === (mark & mask)){
      new_marked(stats);
      if(0 === (mark & 3))
       t[1] = mark | mask;
      else{t[1] = -1; new_blocked(stats); new_shared(stats);}
     }
     var
      _sR_ = -1 !== mark ? 1 : 0,
      _sS_ = _sR_ ? (mark & 3) === 3 ? 1 : 0 : _sR_;
     return _sS_ ? (t[1] = -1, new_shared(stats)) : _sS_;
    }
    var mark$0 = t[1];
    if(0 === (mark$0 & mask)){
     new_marked(stats);
     if(0 === (mark$0 & 3)){
      t[1] = mark$0 | mask;
      add(t, q);
     }
     else{
      t[1] = -1;
      new_blocked(stats);
      new_shared(stats);
      block(stats, mask, t[2]);
      block(stats, mask, t[3]);
     }
    }
    var
     _sT_ = -1 !== mark$0 ? 1 : 0,
     _sU_ = _sT_ ? (mark$0 & 3) === 3 ? 1 : 0 : _sT_;
    return _sU_ ? (t[1] = -1, new_shared(stats)) : _sU_;
   }
   function dequeue(stats, q, mask){
    var t = take(q);
    if(typeof t !== "number" && 1 === t[0]){
     var _sQ_ = (t[1] & 3) === mask ? 1 : 0;
     return _sQ_
             ? (enqueue(stats, q, mask, t[2]), enqueue(stats, q, mask, t[3]))
             : _sQ_;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _ef_], 1);
   }
   function traverse1(stats, q, mask){
    for(;;){if(is_empty(q)) return; dequeue(stats, q, mask);}
   }
   function traverse(sold, snew, qold, qnew){
    for(;;){
     if(is_empty(qold)) return traverse1(snew, qnew, mask_new);
     if(is_empty(qnew)) return traverse1(sold, qold, mask_old);
     dequeue(sold, qold, mask_old);
     dequeue(snew, qnew, mask_new);
    }
   }
   function old_stats(tr){return tr[1];}
   function new_stats(tr){return tr[2];}
   function unsafe_traverse(old_root, new_root){
    var
     old_stats = mk_stats(0),
     new_stats = mk_stats(0),
     old_queue = create$0(0),
     new_queue = create$0(0);
    enqueue(old_stats, old_queue, mask_old, old_root);
    enqueue(new_stats, new_queue, mask_new, new_root);
    traverse(old_stats, new_stats, old_queue, new_queue);
    return [0, old_stats, new_stats];
   }
   function restore(param){
    if(typeof param === "number") return;
    if(0 === param[0]){param[1] = 0; return;}
    var _sP_ = rank(param[3]);
    param[1] = (maxi(rank(param[2]), _sP_) + 1 | 0) << 2;
    return;
   }
   function next_shared_index(st){
    var result = st[6];
    st[6] = result + 1 | 0;
    return result;
   }
   function unblock(param){
    var param$0 = param;
    for(;;){
     if(typeof param$0 === "number") return;
     if(0 === param$0[0]){
      var t = param$0[1];
      if(typeof t !== "number" && 0 === t[0]){
       var
        mark = t[1],
        _sL_ = is_not_shared(mark),
        _sM_ = _sL_ ? is_both(mark) : _sL_;
       if(_sM_) t[1] = unmark(mark);
       return;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _eg_], 1);
     }
     var t$0 = param$0[1];
     if(typeof t$0 !== "number" && 1 === t$0[0]){
      var
       r = param$0[4],
       l = param$0[3],
       mark$0 = t$0[1],
       _sN_ = is_not_shared(mark$0),
       _sO_ = _sN_ ? is_both(mark$0) : _sN_;
      if(! _sO_) return _sO_;
      t$0[1] = unmark(mark$0);
      unblock(l);
      var param$0 = r;
      continue;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _eh_], 1);
    }
   }
   function unmark_old(st, t){
    var t$0 = t;
    for(;;){
     if(typeof t$0 === "number") return;
     if(0 === t$0[0]){
      var a = t$0[1];
      if(typeof a !== "number" && 0 === a[0]){
       var b = t$0[2], mark = a[1];
       if(! is_old(mark)){
        if(is_shared(mark)){
         var index = next_shared_index(st);
         caml_check_bound(st[4], index)[1 + index] = a;
         caml_check_bound(st[5], index)[1 + index] = [0, t$0, 0];
         a[1] = with_index_new(index);
         return;
        }
        if(is_new(mark)){
         var
          index$0 = get_index(mark),
          _sH_ = [0, t$0, caml_check_bound(st[5], index$0)[1 + index$0]];
         caml_check_bound(st[5], index$0)[1 + index$0] = _sH_;
         return;
        }
        var _sI_ = is_both(mark);
        if(_sI_)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ek_], 1);
        return _sI_;
       }
       var dropped_leaf = st[2];
       if(-1 < dropped_leaf){
        caml_check_bound(st[1], dropped_leaf)[1 + dropped_leaf] = b;
        st[2] = dropped_leaf + 1 | 0;
        if(st[2] > st[3])
         throw caml_maybe_attach_backtrace([0, Assert_failure, _ej_], 1);
       }
       a[1] = unmark(mark);
       return;
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ei_], 1);
     }
     var a$0 = t$0[1];
     if(typeof a$0 !== "number" && 1 === a$0[0]){
      var b$0 = t$0[2], r = t$0[4], l = t$0[3], mark$0 = a$0[1];
      if(is_shared(mark$0)){
       var index$1 = next_shared_index(st);
       caml_check_bound(st[4], index$1)[1 + index$1] = a$0;
       caml_check_bound(st[5], index$1)[1 + index$1] = [0, t$0, 0];
       a$0[1] = with_index_new(index$1);
       unblock(l);
       return unblock(r);
      }
      if(! is_old(mark$0)){
       if(is_new(mark$0)){
        var
         index$2 = mark$0 >>> 2 | 0,
         _sJ_ = [0, t$0, caml_check_bound(st[5], index$2)[1 + index$2]];
        caml_check_bound(st[5], index$2)[1 + index$2] = _sJ_;
        return;
       }
       var _sK_ = is_both(mark$0);
       if(_sK_)
        throw caml_maybe_attach_backtrace([0, Assert_failure, _en_], 1);
       return _sK_;
      }
      if(-1 < st[3]){
       var dropped_join = st[3] - 1 | 0;
       caml_check_bound(st[1], dropped_join)[1 + dropped_join] = b$0;
       st[3] = dropped_join;
       if(st[2] > st[3])
        throw caml_maybe_attach_backtrace([0, Assert_failure, _em_], 1);
      }
      a$0[1] = unmark(mark$0);
      unmark_old(st, l);
      var t$0 = r;
      continue;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _el_], 1);
    }
   }
   function prepare_shared(st){
    var _sE_ = st[6] - 1 | 0, _sD_ = 0;
    if(_sE_ >= 0){
     var i = _sD_;
     for(;;){
      var match = caml_check_bound(st[4], i)[1 + i];
      if(typeof match !== "number")
       if(0 === match[0])
        match[1] = set_both(match[1]);
       else
        match[1] = set_both(match[1]);
      var xs = caml_check_bound(st[5], i)[1 + i];
      if(! xs)
       throw caml_maybe_attach_backtrace([0, Assert_failure, _eo_], 1);
      if(xs[2]){var _sF_ = rev(xs); caml_check_bound(st[5], i)[1 + i] = _sF_;}
      var _sG_ = i + 1 | 0;
      if(_sE_ === i) break;
      var i = _sG_;
     }
    }
    return;
   }
   function unmark_new(st, t){
    if(typeof t === "number") return 0;
    if(0 !== t[0]){
     var mark$0 = t[1];
     if(-1 === mark$0){
      var index$0 = next_shared_index(st);
      t[1] = 0;
      caml_check_bound(st[4], index$0)[1 + index$0] = t;
      var l = unmark_new(st, t[2]), r = unmark_new(st, t[3]);
      return [1, t, 0, l, r];
     }
     if(! is_both(mark$0)){
      t[1] = unmark(t[1]);
      var l$0 = unmark_new(st, t[2]), r$0 = unmark_new(st, t[3]);
      return [1, t, 0, l$0, r$0];
     }
     var
      index$1 = mark$0 >>> 2 | 0,
      match$0 = caml_check_bound(st[5], index$1)[1 + index$1];
     if(! match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _ep_], 1);
     var xs$0 = match$0[2], x$0 = match$0[1];
     caml_check_bound(st[5], index$1)[1 + index$1] = xs$0;
     if(0 === xs$0) t[1] = 0;
     return x$0;
    }
    var mark = t[1];
    if(is_not_shared(mark) && is_both(mark)){
     var
      index = mark >>> 2 | 0,
      match = caml_check_bound(st[5], index)[1 + index];
     if(! match) return [0, t, 0];
     var xs = match[2], x = match[1];
     caml_check_bound(st[5], index)[1 + index] = xs;
     return x;
    }
    t[1] = 0;
    return [0, t, 0];
   }
   var no_dropped = [0, 0, [0], 0, 0];
   function diff(get_dropped, xold, tnew){
    if(typeof xold === "number"){
     if(typeof tnew === "number") return [0, no_dropped, 0];
    }
    else{var a$0 = xold[1]; if(a$0 === tnew) return [0, no_dropped, xold];}
    if(typeof xold === "number")
     var empty = empty$0;
    else
     var a = xold[1], empty = a;
    var
     traversal = unsafe_traverse(empty, tnew),
     sold = old_stats(traversal),
     snew = new_stats(traversal),
     _sq_ = blocked(snew),
     _sr_ = blocked(sold) + _sq_ | 0,
     nb_dropped = marked(sold) - _sr_ | 0,
     _ss_ = shared(snew),
     nb_shared = shared(sold) + _ss_ | 0,
     _st_ = 0,
     _su_ = caml_make_vect(nb_shared, 0),
     _sv_ = caml_make_vect(nb_shared, 0),
     nb_dropped$0 = get_dropped ? nb_dropped : -1,
     _sw_ = get_dropped ? 0 : -1,
     _sx_ = get_dropped ? caml_make_vect(nb_dropped, 0) : [0],
     st = [0, _sx_, _sw_, nb_dropped$0, _sv_, _su_, _st_];
    unmark_old(st, xold);
    if(st[2] !== st[3])
     throw caml_maybe_attach_backtrace([0, Assert_failure, _eq_], 1);
    prepare_shared(st);
    var result = unmark_new(st, tnew), _sy_ = st[6] - 1 | 0;
    if(_sy_ >= 0){
     var i$0 = _sy_;
     for(;;){
      restore(caml_check_bound(st[4], i$0)[1 + i$0]);
      var _sC_ = i$0 - 1 | 0;
      if(0 === i$0) break;
      var i$0 = _sC_;
     }
    }
    if(! get_dropped) return [0, no_dropped, result];
    var xleaf = [0, 0], xjoin = [0, 0], _sA_ = st[6] - 1 | 0, _sz_ = 0;
    if(_sA_ >= 0){
     var i = _sz_;
     for(;;){
      iter
       (function(param){
         if(typeof param !== "number")
          if(0 === param[0]){
           var match = param[2];
           if(match){var b = match[1]; xleaf[1] = [0, b, xleaf[1]]; return 0;}
          }
          else{
           var match$0 = param[2];
           if(match$0){
            var b$0 = match$0[1];
            xjoin[1] = [0, b$0, xjoin[1]];
            return 0;
           }
          }
         return 0;
        },
        caml_check_bound(st[5], i)[1 + i]);
      var _sB_ = i + 1 | 0;
      if(_sA_ === i) break;
      var i = _sB_;
     }
    }
    return [0, [0, st[2], st[1], xleaf[1], xjoin[1]], result];
   }
   function eval$1(map_reduce, other){
    if(typeof other === "number") return 0;
    function aux(param){
     a:
     if(typeof param !== "number"){
      b:
      {
       if(0 === param[0]){
        var t = param[1];
        if(typeof t !== "number" && 0 === t[0]){
         var _so_ = param[2];
         if(_so_){var b = _so_[1]; break b;}
         var result = caml_call1(map_reduce[1], t[2]);
         param[2] = [0, result];
         return result;
        }
        break a;
       }
       var _sp_ = param[2];
       if(! _sp_){
        var
         l = aux(param[3]),
         r = aux(param[4]),
         result$0 = caml_call2(map_reduce[2], l, r);
        param[2] = [0, result$0];
        return result$0;
       }
       var b = _sp_[1];
      }
      return b;
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _er_], 1);
    }
    return [0, aux(other)];
   }
   function make$4(map, reduce){return [0, [0, map, reduce], 0];}
   function reduce(param){
    var tree = param[2], map_reduce = param[1];
    return eval$1(map_reduce, tree);
   }
   function update$0(param, new_tree){
    var
     old_tree = param[2],
     map_reduce = param[1],
     tree = diff(0, old_tree, new_tree)[2];
    return [0, map_reduce, tree];
   }
   function update_and_get_dropped(param, new_tree){
    var
     old_tree = param[2],
     map_reduce = param[1],
     match = diff(1, old_tree, new_tree),
     tree = match[2],
     dropped = match[1];
    return [0, dropped, [0, map_reduce, tree]];
   }
   function fold_dropped(kind, f, dropped, acc){
    var acc$0 = [0, acc];
    if(3850876 === kind)
     var bound = dropped[1], bound$0 = bound, start = 0;
    else if(858694086 <= kind)
     var bound$0 = dropped[2].length - 1, start = dropped[1];
    else
     var bound$0 = dropped[2].length - 1, start = 0;
    var _sm_ = bound$0 - 1 | 0;
    if(_sm_ >= start){
     var i = start;
     for(;;){
      var match = caml_check_bound(dropped[2], i)[1 + i];
      if(match){var x = match[1]; acc$0[1] = caml_call2(f, x, acc$0[1]);}
      var _sn_ = i + 1 | 0;
      if(_sm_ === i) break;
      var i = _sn_;
     }
    }
    if(858694086 > kind)
     iter
      (function(x){acc$0[1] = caml_call2(f, x, acc$0[1]); return 0;},
       dropped[3]);
    if(3850876 !== kind)
     iter
      (function(x){acc$0[1] = caml_call2(f, x, acc$0[1]); return 0;},
       dropped[4]);
    return;
   }
   function pure_map_reduce(map, reduce, param){
    if(typeof param === "number")
     throw caml_maybe_attach_backtrace([0, Assert_failure, _es_], 1);
    if(0 === param[0]) return caml_call1(map, param[2]);
    var _sl_ = pure_map_reduce(map, reduce, param[3]);
    return caml_call2(reduce, pure_map_reduce(map, reduce, param[2]), _sl_);
   }
   function fold_monoid(map, param, seq){
    var reduce$0 = param[2], zero = param[1], match = is_pure(seq);
    if(match){
     var other = match[1];
     return typeof other === "number"
             ? pure(zero)
             : pure(pure_map_reduce(map, reduce$0, other));
    }
    var reducer = [0, make$4(map, reduce$0)];
    return func
            (seq,
             function(seq){
              var reducer$0 = update$0(reducer[1], seq);
              reducer[1] = reducer$0;
              var match = reduce(reducer$0);
              if(! match) return zero;
              var x = match[1];
              return x;
             });
   }
   var monoid = [0, empty$0, concat$1];
   function transform_list(ls, f){return map_reduce(f, monoid, ls);}
   function of_list$1(ls){return transform_list(ls, element);}
   function to_list$1(x){
    function fold(x, acc){
     var x$0 = x, acc$0 = acc;
     for(;;){
      if(typeof x$0 === "number") return acc$0;
      if(0 === x$0[0]) return [0, x$0[2], acc$0];
      var acc$1 = fold(x$0[3], acc$0), x$1 = x$0[2], x$0 = x$1, acc$0 = acc$1;
     }
    }
    return fold(x, 0);
   }
   var
    lwd_empty = pure(0),
    lwd_monoid = [0, lwd_empty, function(x, y){return map2(x, y, concat$1);}];
   function map$5(f, seq){
    return fold_monoid
            (function(x){return element(caml_call1(f, x));}, monoid, seq);
   }
   function filter_map$0(f, seq){
    function select(x){
     var match = caml_call1(f, x);
     if(! match) return empty$0;
     var y = match[1];
     return element(y);
    }
    return fold_monoid(select, monoid, seq);
   }
   function bind$2(seq, f){return join(fold_monoid(f, lwd_monoid, seq));}
   function lift(seq){
    return bind$2(seq, function(_sk_){return func(_sk_, element);});
   }
   function handler(opts, type, func){return [0, opts, type, func];}
   function is_pure_element(param){
    var _sj_ = param[1];
    if(82 === _sj_){var x = param[2]; return is_some(is_pure(x));}
    if(83 > _sj_) return 1;
    var x$0 = param[2];
    return is_some(is_pure(x$0));
   }
   function extract_pure_element(x){return get$0(is_pure(x));}
   function extract_pure_elements(xs){
    return flatten
            (map$1
              (function(param){
                var _si_ = param[1];
                if(82 === _si_){
                 var x = param[2];
                 return [0, extract_pure_element(x), 0];
                }
                if(83 <= _si_){
                 var x$0 = param[2];
                 return to_list$1(extract_pure_element(x$0));
                }
                var x$1 = param[2];
                return [0, x$1, 0];
               },
               xs));
   }
   function prepare_col(col){
    if(! col) return _et_;
    var
     match = partition(is_pure_element, col),
     impure = match[2],
     pure = match[1];
    return [0, extract_pure_elements(pure), impure];
   }
   function consume_children(col){
    if(! col) return _eu_;
    var _se_ = col[1], _sf_ = _se_[1];
    if(82 === _sf_){
     if(! col[2]){var x = _se_[2]; return [0, 0, [0, func(x, element)]];}
    }
    else
     if(83 <= _sf_){
      if(! col[2]){var x$0 = _se_[2]; return [0, 0, [0, x$0]];}
     }
     else if(! col[2]){var x$1 = _se_[2]; return [0, [0, x$1, 0], 0];}
    return for_all(is_pure_element, col)
            ? [0,
              flatten
               (map$1
                 (function(param){
                   var _sg_ = param[1];
                   if(82 === _sg_){
                    var x = param[2];
                    return [0, extract_pure_element(x), 0];
                   }
                   if(83 <= _sg_){
                    var x$0 = param[2];
                    return to_list$1(extract_pure_element(x$0));
                   }
                   var x$1 = param[2];
                   return [0, x$1, 0];
                  },
                  col)),
              0]
            : [0,
              0,
              [0,
               map_reduce
                (function(param){
                  var _sh_ = param[1];
                  if(82 === _sh_){var x = param[2]; return func(x, element);}
                  if(83 <= _sh_){var x$0 = param[2]; return x$0;}
                  var x$1 = param[2];
                  return pure(element(x$1));
                 },
                 lwd_monoid,
                 col)]];
   }
   function child_node(node){return [0, node];}
   function child_join(left, right){return [1, null$0, left, right];}
   var
    jv_append = cst_append,
    jv_before = "before",
    jv_remove = cst_remove,
    jv_contains = "contains";
   function contains_focus(node){
    var match = active_el(document(node));
    if(! match) return 0;
    var el = match[1];
    return call(node, jv_contains, [0, el]) | 0;
   }
   function update_children(self, children){
    var reducer = [0, make$4(child_node, child_join)];
    return func
            (children,
             function(children){
              var
               match = update_and_get_dropped(reducer[1], children),
               reducer$0 = match[2],
               dropped = match[1];
              reducer[1] = reducer$0;
              function schedule_for_removal(child, param){
               if(0 !== child[0]) return 0;
               var node = child[1];
               return node[cst_lwd_to_remove] = true$0;
              }
              fold_dropped(3850876, schedule_for_removal, dropped, 0);
              var
               preserve_focus = contains_focus(self),
               match$0 = reduce(reducer$0);
              if(match$0){
               var
                tree = match$0[1],
                update =
                  function(acc, t){
                   if(0 !== t[0]){
                    if(! is_null(t[1])) return t[1];
                    var acc$0 = update(acc, t[3]), acc$1 = update(acc$0, t[2]);
                    t[1] = acc$1;
                    return acc$1;
                   }
                   var node = t[1];
                   delete node[cst_lwd_to_remove];
                   if(node.parentNode !== self)
                    if(is_null(acc))
                     call(self, jv_append, [0, node]);
                    else
                     call(acc, jv_before, [0, node]);
                   else{
                    var _sa_ = node.nextSibling !== acc ? 1 : 0;
                    if(_sa_){
                     if(preserve_focus){
                      var _sb_ = contains_focus(node);
                      if(_sb_)
                       var
                        shift_siblings =
                          function(param){
                           for(;;){
                            var sibling = node.nextSibling;
                            if(sibling === acc) return 1;
                            if(is_null(sibling)) return 0;
                            call(node, jv_before, [0, sibling]);
                           }
                          },
                        _sc_ = shift_siblings(0);
                      else
                       var _sc_ = _sb_;
                     }
                     else
                      var _sc_ = preserve_focus;
                     var _sd_ = 1 - _sc_;
                    }
                    else
                     var _sd_ = _sa_;
                    if(_sd_)
                     if(is_null(acc))
                      call(self, jv_append, [0, node]);
                     else
                      call(acc, jv_before, [0, node]);
                   }
                   return node;
                  };
               update(null$0, tree);
              }
              function remove_child(child, param){
               if(0 !== child[0]) return 0;
               var
                node = child[1],
                _r__ = is_some$0(node[cst_lwd_to_remove]),
                _r$_ =
                  _r__
                   ? (delete
                     node[cst_lwd_to_remove],
                     call(node, jv_remove, [0]),
                     0)
                   : _r__;
               return _r$_;
              }
              fold_dropped(3850876, remove_child, dropped, 0);
              return self;
             });
   }
   var pure_unit = pure(0), dummy_kv_at = [0, empty, empty];
   function attach_attribs(el, attribs){
    function set_kv(param){
     var v = param[2], k = param[1];
     return equal(k, class$0) ? set_class(v, 1, el) : set_at(k, [0, v], el);
    }
    function unset_kv(param){
     var v = param[2], k = param[1];
     return equal(k, class$0) ? set_class(v, 0, el) : set_at(k, 0, el);
    }
    function set_lwd_at(param){
     var prev = [0, dummy_kv_at];
     return function(at){
      if(prev[1] !== dummy_kv_at) unset_kv(prev[1]);
      var pair = to_pair(at);
      set_kv(pair);
      prev[1] = pair;
      return 0;};
    }
    return map_reduce
            (function(param){
              var _r8_ = param[1];
              if(82 === _r8_){
               var at = param[2];
               return func(at, set_lwd_at(0));
              }
              if(83 > _r8_)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ev_], 1);
              var ats = param[2];
              function set_at(at){
               var kv = to_pair(at);
               set_kv(kv);
               return kv;
              }
              var
               reducer =
                 [0,
                  make$4(set_at, function(param, _r9_){return dummy_kv_at;})];
              function update(ats){
               var
                match = update_and_get_dropped(reducer[1], ats),
                reducer$0 = match[2],
                dropped = match[1];
               reducer[1] = reducer$0;
               fold_dropped
                (3850876,
                 function(kv, param){return unset_kv(kv);},
                 dropped,
                 0);
               reduce(reducer$0);
               return 0;
              }
              return func(ats, update);
             },
             [0, pure_unit, function(param, _r7_){return pure_unit;}],
             attribs);
   }
   function listen$0(el, param){
    var func = param[3], type = param[2], opts = param[1];
    return listen(opts, type, func, el);
   }
   function attach_events(el, events){
    return map_reduce
            (function(param){
              var _r5_ = param[1];
              if(82 === _r5_){
               var at = param[2], cached = [0, 0];
               return func
                       (at,
                        function(h){
                         var match = cached[1];
                         if(match){var l = match[1]; unlisten(l);}
                         cached[1] = [0, listen$0(el, h)];
                         return 0;
                        });
              }
              if(83 > _r5_)
               throw caml_maybe_attach_backtrace([0, Assert_failure, _ew_], 1);
              var
               ats = param[2],
               reducer =
                 [0,
                  make$4
                   (function(_r6_){return listen$0(el, _r6_);},
                    function(x, y){return x;})];
              function update(ats){
               var
                match = update_and_get_dropped(reducer[1], ats),
                reducer$0 = match[2],
                dropped = match[1];
               reducer[1] = reducer$0;
               fold_dropped
                (3850876, function(l, param){return unlisten(l);}, dropped, 0);
               reduce(reducer$0);
               return 0;
              }
              return func(ats, update);
             },
             [0, pure_unit, function(param, _r4_){return pure_unit;}],
             events);
   }
   function v$4(d, opt, _r2_, tag, children){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    if(_r2_) var sth$0 = _r2_[1], ev = sth$0; else var ev = 0;
    var
     match = prepare_col(at),
     impure_at = match[2],
     at$0 = match[1],
     match$0 = prepare_col(ev),
     impure_ev = match$0[2],
     ev$0 = match$0[1],
     match$1 = consume_children(children),
     impure_children = match$1[2],
     children$0 = match$1[1],
     el = v$2(d, [0, at$0], tag, children$0);
    if(impure_at)
     if(impure_children)
      var
       children$1 = impure_children[1],
       _r3_ = update_children(el, children$1),
       result =
         map2
          (attach_attribs(el, impure_at),
           _r3_,
           function(param, el){return el;});
     else
      var
       result =
         func(attach_attribs(el, impure_at), function(param){return el;});
    else if(impure_children)
     var
      children$2 = impure_children[1],
      result = update_children(el, children$2);
    else
     var result = pure(el);
    iter(function(h){listen$0(el, h); return 0;}, ev$0);
    var
     result$0 =
       impure_ev
        ? map2
          (attach_events(el, impure_ev),
           result,
           function(param, el){return el;})
        : result;
    return result$0;
   }
   function cons$1(name, d, at, ev, cs){return v$4(d, at, ev, name, cs);}
   function void_cons(name, d, at, ev, param){return v$4(d, at, ev, name, 0);}
   function button$0(_rY_, _rZ_, _r0_, _r1_){
    return cons$1(button, _rY_, _rZ_, _r0_, _r1_);
   }
   function div$1(_rU_, _rV_, _rW_, _rX_){
    return cons$1(div, _rU_, _rV_, _rW_, _rX_);
   }
   function form$0(_rQ_, _rR_, _rS_, _rT_){
    return cons$1(form, _rQ_, _rR_, _rS_, _rT_);
   }
   function img$0(_rM_, _rN_, _rO_, _rP_){
    return void_cons(img, _rM_, _rN_, _rO_, _rP_);
   }
   function input$1(_rI_, _rJ_, _rK_, _rL_){
    return void_cons(input$0, _rI_, _rJ_, _rK_, _rL_);
   }
   function label$0(_rE_, _rF_, _rG_, _rH_){
    return cons$1(label, _rE_, _rF_, _rG_, _rH_);
   }
   function span$1(_rA_, _rB_, _rC_, _rD_){
    return cons$1(span, _rA_, _rB_, _rC_, _rD_);
   }
   function symbol$4(_rz_, _ry_){return _rz_ === _ry_ ? 1 : 0;}
   function symbol$5(_rx_, _rw_){return _rx_ !== _rw_ ? 1 : 0;}
   function symbol$6(_rv_, _ru_){return _ru_ < _rv_ ? 1 : 0;}
   function symbol$7(_rt_, _rs_){return _rs_ <= _rt_ ? 1 : 0;}
   function symbol$8(_rr_, _rq_){return _rq_ < _rr_ ? 1 : 0;}
   function to_string$2(opt, item_to_string, a){
    if(opt) var sth = opt[1], sep = sth; else var sep = _ex_;
    return function(_ro_){return concat(sep, _ro_);}
            (function(_rp_){return map$1(item_to_string, _rp_);}(to_list(a)));
   }
   function is_nan(x){return 4 === caml_classify_float(x) ? 1 : 0;}
   function of_string_opt(a){
    try{var _rm_ = [0, caml_float_of_string(a)]; return _rm_;}
    catch(_rn_){
     var _rl_ = caml_wrap_exception(_rn_);
     if(_rl_[1] === Failure) return 0;
     throw caml_maybe_attach_backtrace(_rl_, 0);
    }
   }
   function equal$0(a, b){return a === b ? 1 : 0;}
   function compare$1(a, b){return compare(a, b);}
   function get$5(tbl, x){
    try{var _rj_ = [0, find(tbl, x)]; return _rj_;}
    catch(_rk_){
     var _ri_ = caml_wrap_exception(_rk_);
     if(_ri_ === Not_found) return 0;
     throw caml_maybe_attach_backtrace(_ri_, 0);
    }
   }
   function symbol$9(f, l){
    if(! l) return 0;
    var tl = l[2], x = l[1], x$0 = caml_call1(f, x), block = [0, x$0, 24029];
    map_dps(block, 1, f, tl);
    return block;
   }
   function map_dps(dst, offset, f, l){
    var dst$0 = dst, offset$0 = offset, l$0 = l;
    for(;;){
     if(! l$0){dst$0[1 + offset$0] = 0; return;}
     var
      tl = l$0[2],
      x = l$0[1],
      x$0 = caml_call1(f, x),
      dst$1 = [0, x$0, 24029];
     dst$0[1 + offset$0] = dst$1;
     var dst$0 = dst$1, offset$0 = 1, l$0 = tl;
    }
   }
   function filter(f, l){
    var l$0 = l;
    for(;;){
     if(! l$0) return 0;
     var tl = l$0[2], x = l$0[1], keep = caml_call1(f, x);
     if(keep){
      var block = [0, x, 24029];
      filter_dps(block, 1, f, tl);
      return block;
     }
     var l$0 = tl;
    }
   }
   function filter_dps(dst, offset, f, l){
    var dst$0 = dst, offset$0 = offset, l$0 = l;
    for(;;){
     if(! l$0){dst$0[1 + offset$0] = 0; return;}
     var tl = l$0[2], x = l$0[1], keep = caml_call1(f, x);
     if(keep){
      var dst$1 = [0, x, 24029];
      dst$0[1 + offset$0] = dst$1;
      var dst$0 = dst$1, offset$0 = 1, l$0 = tl;
     }
     else
      var l$0 = tl;
    }
   }
   function init$1(n, f){
    function init(i, n, f){
     if(symbol$4(i, n)) return 0;
     var x = caml_call1(f, i), block = [0, x, 24029];
     init_dps(block, 1, i + 1 | 0, n, f);
     return block;
    }
    function init_dps(dst, offset, i, n, f){
     var dst$0 = dst, offset$0 = offset, i$0 = i;
     for(;;){
      if(symbol$4(i$0, n)){dst$0[1 + offset$0] = 0; return;}
      var x = caml_call1(f, i$0), dst$1 = [0, x, 24029];
      dst$0[1 + offset$0] = dst$1;
      var i$1 = i$0 + 1 | 0, dst$0 = dst$1, offset$0 = 1, i$0 = i$1;
     }
    }
    return init(0, n, f);
   }
   function symbol$10(f, param){
    if(! param) return 0;
    var x = param[1];
    return [0, caml_call1(f, x)];
   }
   function map_or(default$0, f, param){
    if(! param) return default$0;
    var x = param[1];
    return caml_call1(f, x);
   }
   function flat_map(f, o){
    if(! o) return;
    var x = o[1];
    return caml_call1(f, x);
   }
   function symbol_bind$0(o, f){return flat_map(f, o);}
   function value$3(x, default$0){
    if(! x) return default$0;
    var y = x[1];
    return y;
   }
   function to_list$2(o){if(! o) return 0; var x = o[1]; return [0, x, 0];}
   function symbol$11(x, f){return symbol$10(f, x);}
   make_self_init(0);
   function symbol$12(f, e){
    if(0 === e[0]){var x = e[1]; return [0, caml_call1(f, x)];}
    var s = e[1];
    return [1, s];
   }
   var Get_error = [248, _ey_, caml_fresh_oo_id(0)];
   function get_exn(param){
    if(0 !== param[0]) throw caml_maybe_attach_backtrace(Get_error, 1);
    var x = param[1];
    return x;
   }
   function get_or(e, default$0){
    if(0 !== e[0]) return default$0;
    var x = e[1];
    return x;
   }
   function flat_map$0(f, e){
    if(0 === e[0]){var x = e[1]; return caml_call1(f, x);}
    var s = e[1];
    return [1, s];
   }
   function symbol$13(e, f){return symbol$12(f, e);}
   function symbol_bind$1(e, f){return flat_map$0(f, e);}
   function Make$0(O){
    var
     S = _P_(O),
     empty = S[1],
     mem = S[3],
     add = S[4],
     remove = S[6],
     union = S[7],
     elements = S[23],
     of_list = S[37];
    return [0,
            ,
            ,
            ,
            empty,
            ,
            mem,
            add,
            ,
            remove,
            union,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            of_list,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            elements];
   }
   function _ez_(_rg_){
    var _rh_ = Make$0(_rg_);
    return [0,
            _rh_[4],
            ,
            _rh_[6],
            _rh_[7],
            ,
            _rh_[9],
            _rh_[10],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _rh_[40],
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            _rh_[51]];
   }
   function suffix(suf, s){
    var len = caml_ml_string_length(suf);
    if(symbol$6(len, caml_ml_string_length(s))) return 0;
    var off = caml_ml_string_length(s) - len | 0;
    function check(i){
     var i$0 = i;
     for(;;){
      if(symbol$4(i$0, len)) return 1;
      if
       (caml_string_unsafe_get(s, off + i$0 | 0)
        !== caml_string_unsafe_get(suf, i$0))
       return 0;
      var i$1 = i$0 + 1 | 0, i$0 = i$1;
     }
    }
    return check(0);
   }
   function chop_suffix(suf, s){
    return suffix(suf, s)
            ? [0,
              sub$0
               (s,
                0,
                caml_ml_string_length(s) - caml_ml_string_length(suf) | 0)]
            : 0;
   }
   var Lex_error = [248, _eA_, caml_fresh_oo_id(0)];
   function lex_error(err){
    throw caml_maybe_attach_backtrace([0, Lex_error, err], 1);
   }
   function error_pos(lexbuf){
    var
     start = lexbuf[11],
     cnum = lexbuf[7] - start[3] | 0,
     enum$0 = lexbuf[6] - start[3] | 0;
    return [0, start[2], cnum, enum$0];
   }
   function string2num(s){
    try{var _re_ = [3, caml_int_of_string(s)]; return _re_;}
    catch(_rf_){
     var _rd_ = caml_wrap_exception(_rf_);
     if(_rd_[1] === Failure) return [2, s];
     throw caml_maybe_attach_backtrace(_rd_, 0);
    }
   }
   function update_pos(lexbuf){
    var pos = lexbuf[11];
    lexbuf[11] = [0, pos[1], pos[2] + 1 | 0, lexbuf[5], pos[4]];
    return;
   }
   function int_of_hexchar(c){
    if(65 <= c){
     if(97 <= c){
      if(103 > c) return (c - 97 | 0) + 10 | 0;
     }
     else if(71 > c) return (c - 65 | 0) + 10 | 0;
    }
    else if(9 >= c - 48 >>> 0) return c - 48 | 0;
    return lex_error(symbol(_eC_, symbol(make$1(1, c), _eB_)));
   }
   function utf8_of_code(buf, idx, u){
    var i = [0, idx];
    function add_char(b, c){
     caml_bytes_unsafe_set(b, i[1], c);
     i[1] = i[1] + 1 | 0;
     return;
    }
    function max_used_bits(n, u){return 0 === (u >>> n | 0) ? 1 : 0;}
    if(max_used_bits(7, u))
     add_char(buf, of_int_exn(u));
    else if(max_used_bits(11, u)){
     add_char(buf, of_int_exn(192 | (u >>> 6 | 0) & 31));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(16, u)){
     add_char(buf, of_int_exn(224 | (u >>> 12 | 0) & 15));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(21, u)){
     add_char(buf, of_int_exn(240 | (u >>> 18 | 0) & 7));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else if(max_used_bits(26, u)){
     add_char(buf, of_int_exn(248 | (u >>> 24 | 0) & 3));
     add_char(buf, of_int_exn(128 | (u >>> 18 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    else{
     add_char(buf, of_int_exn(252 | (u >>> 30 | 0) & 1));
     add_char(buf, of_int_exn(128 | (u >>> 24 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 18 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 12 | 0) & 63));
     add_char(buf, of_int_exn(128 | (u >>> 6 | 0) & 63));
     add_char(buf, of_int_exn(128 | u & 63));
    }
    return i[1];
   }
   function utf8_of_surrogate_pair(buf, idx, high, low){
    var
     high$0 = high - 55296 | 0,
     low$0 = low - 56320 | 0,
     code = 65536 + (high$0 << 10 | low$0) | 0;
    return utf8_of_code(buf, idx, code);
   }
   function escaping_error(msg, s, c, off){
    var offs = string_of_int(off);
    if(c)
     var c$0 = c[1], cs = symbol(_eE_, symbol(make$1(1, c$0), _eD_));
    else
     var cs = _eH_;
    return lex_error
            (symbol
              (msg, symbol(_eG_, symbol(offs, symbol(cs, symbol(_eF_, s))))));
   }
   function unescape_string(s){
    var
     l = caml_ml_string_length(s),
     s$0 = caml_create_bytes(l),
     j = [0, 0],
     u1 = [0, 0],
     u2 = [0, 0],
     state = [0, 748194550],
     _q6_ = l - 1 | 0,
     _q5_ = 0;
    if(_q6_ >= 0){
     var i = _q5_;
     for(;;){
      var _q7_ = state[1];
      a:
      if(308570827 <= _q7_)
       if(308570829 <= _q7_)
        if(748194550 <= _q7_)
         if(945120947 <= _q7_)
          if(117 === caml_string_get(s, i))
           state[1] = 308570827;
          else
           escaping_error(_eJ_, s, [0, caml_string_get(s, i)], i);
         else{
          var c = caml_string_get(s, i);
          if(92 === c)
           state[1] = 258914209;
          else{caml_bytes_unsafe_set(s$0, j[1], c); j[1] = j[1] + 1 | 0;}
         }
        else if(308570830 <= _q7_){
         state[1] = 748194550;
         var _q9_ = int_of_hexchar(caml_string_get(s, i));
         u2[1] = u2[1] << 4 | _q9_;
         if(56320 <= u2[1] && 57343 >= u2[1]){
          j[1] = utf8_of_surrogate_pair(s$0, j[1], u1[1], u2[1]);
          break a;
         }
         escaping_error(_eK_, s, 0, i);
        }
        else{
         var _q__ = int_of_hexchar(caml_string_get(s, i));
         u2[1] = u2[1] << 4 | _q__;
         state[1] = 308570830;
        }
       else if(308570828 <= _q7_){
        var _q$_ = int_of_hexchar(caml_string_get(s, i));
        u2[1] = u2[1] << 4 | _q$_;
        state[1] = 308570829;
       }
       else{
        u2[1] = int_of_hexchar(caml_string_get(s, i));
        state[1] = 308570828;
       }
      else if(297481261 <= _q7_)
       if(297481263 <= _q7_)
        if(308569555 <= _q7_)
         if(92 === caml_string_get(s, i))
          state[1] = 945120947;
         else
          escaping_error(_eL_, s, [0, caml_string_get(s, i)], i);
        else{
         var _ra_ = int_of_hexchar(caml_string_get(s, i));
         u1[1] = u1[1] << 4 | _ra_;
         if(55296 <= u1[1] && 56319 >= u1[1]){state[1] = 308569555; break a;}
         j[1] = utf8_of_code(s$0, j[1], u1[1]);
         state[1] = 748194550;
        }
       else if(297481262 <= _q7_){
        var _rb_ = int_of_hexchar(caml_string_get(s, i));
        u1[1] = u1[1] << 4 | _rb_;
        state[1] = 297481263;
       }
       else{
        var _rc_ = int_of_hexchar(caml_string_get(s, i));
        u1[1] = u1[1] << 4 | _rc_;
        state[1] = 297481262;
       }
      else if(297481260 <= _q7_){
       u1[1] = int_of_hexchar(caml_string_get(s, i));
       state[1] = 297481261;
      }
      else{
       var match = caml_string_get(s, i);
       b:
       if(34 === match){
        caml_bytes_unsafe_set(s$0, j[1], 34);
        state[1] = 748194550;
        j[1] = j[1] + 1 | 0;
       }
       else{
        c:
        if(92 <= match){
         if(118 > match){
          switch(match - 92 | 0){
            case 0:
             caml_bytes_unsafe_set(s$0, j[1], 92);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 6:
             caml_bytes_unsafe_set(s$0, j[1], 8);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 10:
             caml_bytes_unsafe_set(s$0, j[1], 12);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 18:
             caml_bytes_unsafe_set(s$0, j[1], 10);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 22:
             caml_bytes_unsafe_set(s$0, j[1], 13);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 24:
             caml_bytes_unsafe_set(s$0, j[1], 9);
             state[1] = 748194550;
             j[1] = j[1] + 1 | 0;
             break;
            case 25:
             state[1] = 297481260; break;
            default: break c;
          }
          break b;
         }
        }
        else if(47 === match){
         caml_bytes_unsafe_set(s$0, j[1], 47);
         state[1] = 748194550;
         j[1] = j[1] + 1 | 0;
         break b;
        }
        escaping_error(_eM_, s, [0, caml_string_get(s, i)], i);
       }
      }
      var _q8_ = i + 1 | 0;
      if(_q6_ === i) break;
      var i = _q8_;
     }
    }
    if(748194550 !== state[1]) escaping_error(_eI_, s, 0, l);
    return j[1] !== l ? unsafe_to_string(sub(s$0, 0, j[1])) : s;
   }
   function engine(tbl, state, buf){
    var result = caml_lex_engine(tbl, state, buf);
    return result;
   }
   function Make$1(Compliance){
    function read$0(counter, lexbuf){
     var _q4_ = 0;
     if(counter >= 50)
      return caml_trampoline_return(ocaml_lex_read_rec, [0, lexbuf, _q4_]);
     var counter$0 = counter + 1 | 0;
     return ocaml_lex_read_rec(counter$0, lexbuf, _q4_);
    }
    function read(lexbuf){return caml_trampoline(read$0(0, lexbuf));}
    function ocaml_lex_read_rec(counter, lexbuf, ocaml_lex_state){
     var ocaml_lex_state$0 = ocaml_lex_state;
     for(;;){
      var
       ocaml_lex_state$1 = engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
      if(26 >= ocaml_lex_state$1 >>> 0)
       switch(ocaml_lex_state$1){
         case 0:
          return _eN_;
         case 1:
          return _eO_;
         case 2:
          return 2;
         case 3:
          return 0;
         case 4:
          return 1;
         case 5:
          return 9;
         case 6:
          return 10;
         case 7:
          return caml_call1(Compliance[5], 13)
                  ? 13
                  : lex_error(symbol(_eQ_, symbol(lexeme(lexbuf), _eP_)));
         case 8:
          return caml_call1(Compliance[5], 14)
                  ? 14
                  : lex_error(symbol(_eS_, symbol(lexeme(lexbuf), _eR_)));
         case 9:
          return caml_call1(Compliance[6], 11)
                  ? 11
                  : lex_error(symbol(_eU_, symbol(lexeme(lexbuf), _eT_)));
         case 10:
          return caml_call1(Compliance[6], 12)
                  ? 12
                  : lex_error(symbol(_eW_, symbol(lexeme(lexbuf), _eV_)));
         case 11:
          return 7;
         case 12:
          return 8;
         case 13:
          return caml_call1(Compliance[2], 3);
         case 14:
          return caml_call1(Compliance[2], 5);
         case 15:
          return caml_call1(Compliance[2], 5);
         case 16:
          return caml_call1(Compliance[2], 4);
         case 17:
          var tok = string2num(lexeme(lexbuf));
          if(typeof tok !== "number")
           switch(tok[0]){
             case 2:
              return caml_call1(Compliance[4], tok);
             case 3:
              return caml_call1(Compliance[3], tok);
           }
          return tok;
         case 18:
          var _q3_ = [4, caml_float_of_string(lexeme(lexbuf))];
          return caml_call1(Compliance[2], _q3_);
         case 19:
          return _eX_;
         case 20:
          var s = sub_lexeme(lexbuf, lexbuf[5] + 1 | 0, lexbuf[6] - 1 | 0);
          return [0, unescape_string(s)];
         case 21:
          return 6;
         case 22:
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$0 = counter + 1 | 0;
          return read$0(counter$0, lexbuf);
         case 23:
          update_pos(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$1 = counter + 1 | 0;
          return read$0(counter$1, lexbuf);
         case 24:
          var match = caml_call1(Compliance[7], 0);
          if(0 !== match[0]){var err = match[1]; return [5, err];}
          read_comment(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$2 = counter + 1 | 0;
          return read$0(counter$2, lexbuf);
         case 25:
          var match$0 = caml_call1(Compliance[7], 0);
          if(0 !== match$0[0]){var err$0 = match$0[1]; return [5, err$0];}
          if(counter >= 50)
           return caml_trampoline_return(read$0, [0, lexbuf]);
          var counter$3 = counter + 1 | 0;
          return read$0(counter$3, lexbuf);
         default:
          return lex_error(symbol(_eZ_, symbol(lexeme(lexbuf), _eY_)));
       }
      caml_call1(lexbuf[1], lexbuf);
      var ocaml_lex_state$0 = ocaml_lex_state$1;
     }
    }
    function read_comment$0(counter, lexbuf){
     var _q2_ = 88;
     if(counter >= 50)
      return caml_trampoline_return
              (ocaml_lex_read_comment_rec, [0, lexbuf, _q2_]);
     var counter$0 = counter + 1 | 0;
     return ocaml_lex_read_comment_rec(counter$0, lexbuf, _q2_);
    }
    function read_comment(lexbuf){
     return caml_trampoline(read_comment$0(0, lexbuf));
    }
    function ocaml_lex_read_comment_rec(counter, lexbuf, ocaml_lex_state){
     var ocaml_lex_state$0 = ocaml_lex_state;
     for(;;){
      var
       ocaml_lex_state$1 = engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
      if(3 >= ocaml_lex_state$1 >>> 0)
       switch(ocaml_lex_state$1){
         case 0:
          return;
         case 1:
          update_pos(lexbuf);
          if(counter >= 50)
           return caml_trampoline_return(read_comment$0, [0, lexbuf]);
          var counter$0 = counter + 1 | 0;
          return read_comment$0(counter$0, lexbuf);
         case 2:
          return lex_error(_e0_);
         default:
          if(counter >= 50)
           return caml_trampoline_return(read_comment$0, [0, lexbuf]);
          var counter$1 = counter + 1 | 0;
          return read_comment$0(counter$1, lexbuf);
       }
      caml_call1(lexbuf[1], lexbuf);
      var ocaml_lex_state$0 = ocaml_lex_state$1;
     }
    }
    return [0, read];
   }
   var Json_error_info = [248, _e1_, caml_fresh_oo_id(0)];
   function create_from_lexbuf(lexbuf, emsg){
    var
     match = error_pos(lexbuf),
     echar = match[3],
     schar = match[2],
     eline = match[1];
    return [0, eline, schar, echar, emsg];
   }
   function log2(n){return 1 < n ? 1 + log2(n >> 1) | 0 : 0;}
   function bits$0(n){return log2(n) + 1 | 0;}
   var max_json_int = 53 < bits$0(max_int) ? 2097151 : max_int;
   function string_of_float_json(f){
    var is_int = (f | 0) == f ? 1 : 0;
    if(is_int && Math.abs(f) <= max_json_int){
     var int_value = f | 0;
     return symbol(string_of_int(int_value), _e2_);
    }
    var
     s = caml_format_float("%.16g", f),
     s$0 = caml_float_of_string(s) == f ? s : caml_format_float("%.17g", f);
    if(! contains(s$0, 46) && ! contains(s$0, 101)) return symbol(s$0, _e3_);
    return s$0;
   }
   function token_error(tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        var err = _e4_; break;
       case 1:
        var err = _e5_; break;
       case 2:
        var err = _e6_; break;
       case 3:
        var err = _e7_; break;
       case 4:
        var err = _e8_; break;
       case 5:
        var err = _e9_; break;
       case 6:
        var err = _e__; break;
       case 7:
        var err = _e$_; break;
       case 8:
        var err = _fa_; break;
       case 9:
        var err = _fb_; break;
       case 10:
        var err = _fc_; break;
       case 11:
        var err = _fd_; break;
       case 12:
        var err = _fe_; break;
       case 13:
        var err = _ff_; break;
       default: var err = _fg_;
     }
    else
     switch(tok[0]){
       case 0:
        var s = tok[1], err = symbol(_fi_, symbol(s, _fh_)); break;
       case 1:
        var s$0 = tok[1], err = s$0; break;
       case 2:
        var s$1 = tok[1], err = symbol(_fk_, symbol(s$1, _fj_)); break;
       case 3:
        var i = tok[1], err = symbol(_fm_, symbol(string_of_int(i), _fl_));
        break;
       case 4:
        var f = tok[1], err = symbol(_fo_, symbol(string_of_float(f), _fn_));
        break;
       case 5:
        var s$2 = tok[1], err = symbol(_fq_, symbol(s$2, _fp_)); break;
       default:
        var
         b = tok[1],
         _q1_ = b ? _fs_ : _fu_,
         err = symbol(_ft_, symbol(_q1_, _fr_));
     }
    return [0, 148000204, err];
   }
   function Make$2(Compliance){
    var Parse_error = [248, _fv_, caml_fresh_oo_id(0)];
    function json_value(reader){
     function token_value(tok){
      if(typeof tok === "number")
       switch(tok){
         case 0:
          return object_value_start(0);
         case 2:
          return Compliance[12];
         case 3:
          return caml_call1(Compliance[9], -625979624);
         case 4:
          return caml_call1(Compliance[9], 3900603);
         case 5:
          return caml_call1(Compliance[9], 874173192);
         case 6:
          throw caml_maybe_attach_backtrace([0, Parse_error, 3456156], 1);
         case 9:
          return array_value_start(0);
         case 11:
          return variant_value_start(0);
         case 13:
          return tuple_value_start(0);
       }
      else
       switch(tok[0]){
         case 0:
          var s = tok[1]; return caml_call1(Compliance[13], s);
         case 2:
          var s$0 = tok[1]; return caml_call1(Compliance[11], s$0);
         case 3:
          var i = tok[1]; return caml_call1(Compliance[10], i);
         case 4:
          var f = tok[1]; return caml_call1(Compliance[9], [0, 365180284, f]);
         case 6:
          var b = tok[1]; return caml_call1(Compliance[14], b);
       }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function value(param){return token_value(caml_call1(reader, 0));}
     function array_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 10 === tok)
       return caml_call1(Compliance[16], 0);
      return array_values_start(tok, 0);
     }
     function array_values_start(tok, acc){
      var v = token_value(tok), tok$0 = caml_call1(reader, 0);
      if(typeof tok$0 === "number"){
       if(7 === tok$0) return array_values([0, v, acc]);
       if(10 === tok$0){
        var _q0_ = rev([0, v, acc]);
        return caml_call1(Compliance[16], _q0_);
       }
      }
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, token_error(tok$0)], 1);
     }
     function array_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(7 === tok){var acc$1 = [0, v, acc$0], acc$0 = acc$1; continue;}
        if(10 === tok){
         var _qZ_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[16], _qZ_);
        }
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function object_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 1 === tok)
       return caml_call1(Compliance[15], 0);
      return object_values_start(tok, 0);
     }
     function object_values_start(tok, acc){
      var v = colon_value(tok, 0), tok$0 = caml_call1(reader, 0);
      if(typeof tok$0 === "number"){
       if(1 === tok$0){
        var _qY_ = rev([0, v, acc]);
        return caml_call1(Compliance[15], _qY_);
       }
       if(7 === tok$0) return object_values([0, v, acc]);
      }
      throw caml_maybe_attach_backtrace
             ([0, Parse_error, token_error(tok$0)], 1);
     }
     function object_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = key_colon_value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(1 === tok){
         var _qX_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[15], _qX_);
        }
        if(7 === tok){var acc$1 = [0, v, acc$0], acc$0 = acc$1; continue;}
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function colon_value(v, param){
      if(typeof v !== "number" && 0 === v[0]){
       var k = v[1], tok = caml_call1(reader, 0);
       if(typeof tok === "number" && 8 === tok) return [0, k, value(0)];
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(v)], 1);
     }
     function key_colon_value(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok !== "number" && 0 === tok[0]){
       var k = tok[1], tok$0 = caml_call1(reader, 0);
       if(typeof tok$0 === "number" && 8 === tok$0) return [0, k, value(0)];
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok$0)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function tuple_value_start(param){
      var v1 = value(0), tok = caml_call1(reader, 0);
      if(typeof tok === "number"){
       if(7 === tok){
        var v2 = value(0), tok$0 = caml_call1(reader, 0);
        if(typeof tok$0 === "number"){
         if(7 === tok$0) return tuple_values([0, v2, [0, v1, 0]]);
         if(14 <= tok$0)
          return caml_call1(Compliance[17], [0, v1, [0, v2, 0]]);
        }
        throw caml_maybe_attach_backtrace
               ([0, Parse_error, token_error(tok$0)], 1);
       }
       if(14 <= tok)
        throw caml_maybe_attach_backtrace([0, Parse_error, _fw_], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function tuple_values(acc){
      var acc$0 = acc;
      for(;;){
       var v = value(0), tok = caml_call1(reader, 0);
       if(typeof tok === "number"){
        if(7 === tok){var acc$1 = [0, v, acc$0], acc$0 = acc$1; continue;}
        if(14 <= tok){
         var _qW_ = rev([0, v, acc$0]);
         return caml_call1(Compliance[17], _qW_);
        }
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok)], 1);
      }
     }
     function variant_value_start(param){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number"){
       if(12 === tok)
        throw caml_maybe_attach_backtrace([0, Parse_error, _fx_], 1);
      }
      else if(0 === tok[0]){
       var k = tok[1], tok$0 = caml_call1(reader, 0);
       if(typeof tok$0 === "number"){
        if(8 === tok$0) return variant_end(k, [0, value(0)]);
        if(12 === tok$0) return caml_call2(Compliance[18], k, 0);
       }
       throw caml_maybe_attach_backtrace
              ([0, Parse_error, token_error(tok$0)], 1);
      }
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     function variant_end(k, v){
      var tok = caml_call1(reader, 0);
      if(typeof tok === "number" && 12 === tok)
       return caml_call2(Compliance[18], k, v);
      throw caml_maybe_attach_backtrace([0, Parse_error, token_error(tok)], 1);
     }
     try{var tok = caml_call1(reader, 0);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Parse_error && 3456156 === exn[2]) return 0;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     if(typeof tok === "number" && 6 === tok) return 0;
     return [0, token_value(tok)];
    }
    function decode(reader){
     try{var res = json_value(reader);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Parse_error){
       var match = exn[2];
       if(typeof match === "number") return _fy_;
       var err = match[2];
       return [1, err];
      }
      if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err$0 = exn[2];
      return [1, err$0];
     }
     return [0, res];
    }
    return [0, Compliance, decode];
   }
   function nibble_to_hex(i){
    var _qV_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
    return char_of_int(_qV_);
   }
   function add_hex_byte(add_char, i){
    caml_call1(add_char, nibble_to_hex((i >>> 4 | 0) & 15));
    return caml_call1(add_char, nibble_to_hex(i & 15));
   }
   function escape(add_char, add_string, s){
    var l = caml_ml_string_length(s), _qT_ = l - 1 | 0, _qS_ = 0;
    if(_qT_ >= 0){
     var i = _qS_;
     for(;;){
      var c = caml_string_get(s, i);
      a:
      if(92 === c)
       caml_call1(add_string, _fz_);
      else{
       b:
       {
        c:
        {
         if(35 > c){
          if(8 > c) break b;
          switch(c - 8 | 0){
            case 0:
             caml_call1(add_string, _fB_); break;
            case 1:
             caml_call1(add_string, _fC_); break;
            case 2:
             caml_call1(add_string, _fD_); break;
            case 4:
             caml_call1(add_string, _fE_); break;
            case 5:
             caml_call1(add_string, _fF_); break;
            case 26:
             caml_call1(add_string, _fG_); break;
            case 24:
            case 25:
             break c;
            default: break b;
          }
          break a;
         }
         if(127 === c) break b;
        }
        caml_call1(add_char, caml_string_get(s, i));
        break a;
       }
       caml_call1(add_string, _fA_);
       add_hex_byte(add_char, c);
      }
      var _qU_ = i + 1 | 0;
      if(_qT_ === i) break;
      var i = _qU_;
     }
    }
    return;
   }
   function Make$3(Compliance){
    function to_json_string(s){
     var buf = create$1(100);
     function add_char$0(_qR_){return add_char(buf, _qR_);}
     function add_string$0(_qQ_){return add_string(buf, _qQ_);}
     function add_quote_string(s){
      add_char$0(34);
      escape(add_char$0, add_string$0, s);
      return add_char$0(34);
     }
     add_quote_string(s);
     return contents(buf);
    }
    function pp_list(sep, ppx, out, l){
     function pp_sep(out, param){
      return caml_call1(fprintf$0(out)(_fH_), sep);
     }
     return pp_print_list([0, pp_sep], ppx, out, l);
    }
    function format(out, json){
     if(typeof json === "number") return pp_print_string(out, _fI_);
     var _qH_ = json[1];
     if(726928360 <= _qH_){
      if(737456202 === _qH_){var b = json[2]; return pp_print_bool(out, b);}
      if(928231259 > _qH_){
       if(848054398 <= _qH_){
        var l$0 = json[2];
        return l$0
                ? caml_call2
                  (fprintf$0(out)(_fN_),
                   function(_qO_, _qP_){
                    return pp_list(_fM_, format, _qO_, _qP_);
                   },
                   l$0)
                : pp_print_string(out, _fO_);
       }
       var l$1 = json[2];
       return 0 === l$1
               ? pp_print_string(out, _fP_)
               : caml_call2
                 (fprintf$0(out)(_fR_),
                  function(_qM_, _qN_){
                   return pp_list(_fQ_, format, _qM_, _qN_);
                  },
                  l$1);
      }
      if(963043957 <= _qH_){
       var l = json[2];
       return l
               ? caml_call2
                 (fprintf$0(out)(_fK_),
                  function(_qK_, _qL_){
                   return pp_list(_fJ_, format_field, _qK_, _qL_);
                  },
                  l)
               : pp_print_string(out, _fL_);
      }
     }
     else{
      if(3654863 === _qH_){
       var i = json[2];
       return pp_print_string(out, string_of_int(i));
      }
      if(365180284 <= _qH_){
       if(708012133 > _qH_){
        var f = json[2], s$2 = caml_call1(Compliance[8], f);
        return pp_print_string(out, s$2);
       }
       var _qI_ = json[2], match = _qI_[2], s$0 = _qI_[1];
       if(match){
        var json$0 = match[1], s$1 = to_json_string(s$0);
        return caml_call3(fprintf$0(out)(_fS_), s$1, format, json$0);
       }
       var _qJ_ = to_json_string(s$0);
       return caml_call1(fprintf$0(out)(_fT_), _qJ_);
      }
      if(-752863768 > _qH_){
       var s$3 = json[2];
       return pp_print_string(out, to_json_string(s$3));
      }
     }
     var s = json[2];
     return pp_print_string(out, s);
    }
    function format_field(out, param){
     var json = param[2], name = param[1], _qG_ = to_json_string(name);
     return caml_call3(fprintf$0(out)(_fU_), _qG_, format, json);
    }
    function pretty_print(out, json){
     return caml_call2(fprintf$0(out)(_fV_), format, json);
    }
    function pretty_print_to_string(json){
     return caml_call2(asprintf(_fW_), pretty_print, json);
    }
    function pretty_print_to_channel(oc, json){
     var fmt = formatter_of_out_channel(oc);
     return caml_call2(fprintf$0(fmt)(_fX_), pretty_print, json);
    }
    return [0,
            ,
            ,
            ,
            ,
            pretty_print,
            pretty_print_to_string,
            pretty_print_to_channel];
   }
   function _fY_(_qE_){
    var _qF_ = Make$3(_qE_);
    return [0, _qF_[5], _qF_[6], _qF_[7]];
   }
   function error$1(msg, json){
    throw caml_maybe_attach_backtrace([0, Failure, msg], 1);
   }
   function Strict(M){
    function to_assoc(json){
     if(typeof json !== "number" && 963043957 === json[1]){var obj = json[2]; return obj;}
     return error$1(_fZ_, json);
    }
    function to_string(json){
     if(typeof json !== "number" && -976970511 === json[1]){var s = json[2]; return s;}
     return error$1(_f0_, json);
    }
    return [0, , , , to_assoc, , , to_string];
   }
   function null$1(param){return 870828711;}
   var
    M = [0, null$1],
    _f1_ = Strict(M),
    to_assoc = _f1_[4],
    to_string$3 = _f1_[7];
   function token_to_string(tok){
    if(typeof tok === "number")
     switch(tok){
       case 0:
        return _f2_;
       case 1:
        return _f3_;
       case 2:
        return _f4_;
       case 3:
        return _f5_;
       case 4:
        return _f6_;
       case 5:
        return _f7_;
       case 6:
        return _f8_;
       case 7:
        return _f9_;
       case 8:
        return _f__;
       case 9:
        return _f$_;
       case 10:
        return _ga_;
       case 11:
        return _gb_;
       case 12:
        return _gc_;
       case 13:
        return _gd_;
       default: return _ge_;
     }
    switch(tok[0]){
      case 0:
       var s = tok[1]; return s;
      case 1:
       var err = tok[1]; return symbol(_gg_, symbol(err, _gf_));
      case 2:
       var s$0 = tok[1]; return s$0;
      case 3:
       var i = tok[1]; return string_of_int(i);
      case 4:
       var f = tok[1]; return string_of_float(f);
      case 5:
       var err$0 = tok[1]; return err$0;
      default: var b = tok[1]; return b ? _gh_ : _gi_;
    }
   }
   function Make$4(Lexxer, Parser){
    function read_json(lexbuf){
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     var match = caml_call1(Parser[2], reader);
     if(0 !== match[0]){var s = match[1]; return [1, s];}
     var match$0 = match[1];
     if(! match$0) return _gk_;
     var res = match$0[1];
     try{var tok = reader(0);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err = exn[2];
      return [1, err];
     }
     if(typeof tok === "number" && 6 === tok) return [0, res];
     return [1, symbol(_gj_, token_to_string(tok))];
    }
    function read_json_error_info(lexbuf){
     var res = read_json(lexbuf);
     if(0 === res[0]) return res;
     var err = res[1], err_info = create_from_lexbuf(lexbuf, err);
     return [1, err_info];
    }
    function json_of_string_error_info(s){
     var lexbuf = from_string(0, s);
     return read_json_error_info(lexbuf);
    }
    function json_of_channel_error_info(inc){
     var lexbuf = from_channel(0, inc);
     return read_json_error_info(lexbuf);
    }
    function json_of_file_error_info(filename){
     try{
      var inc = open_in(filename), res = json_of_channel_error_info(inc);
      _i_(inc);
      return res;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] !== Sys_error) throw caml_maybe_attach_backtrace(exn, 0);
      var err = exn[2];
      return [1, [0, 0, 0, 0, err]];
     }
    }
    function json_of_lexbuf_error_info_comp(opt, lexbuf){
     if(opt) var sth = opt[1], stream = sth; else var stream = 0;
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     var match = caml_call1(Parser[2], reader);
     if(0 === match[0]){
      var match$0 = match[1];
      if(match$0){
       var res = match$0[1];
       a:
       if(stream)
        var _qA_ = [0, [0, res]];
       else{
        try{var tok = reader(0);}
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] !== Lex_error) throw caml_maybe_attach_backtrace(exn, 0);
         var err = exn[2], _qC_ = [1, err], _qA_ = _qC_;
         break a;
        }
        b:
        {
         if(typeof tok === "number" && 6 === tok){var _qD_ = [0, [0, res]]; break b;}
         var _qD_ = [1, symbol(_gl_, token_to_string(tok))];
        }
        var _qA_ = _qD_;
       }
       var _qB_ = _qA_;
      }
      else
       var _qB_ = stream ? _gm_ : _gn_;
      var res$0 = _qB_;
     }
     else
      var s$0 = match[1], res$0 = [1, s$0];
     if(0 === res$0[0]){var res$1 = res$0[1]; return [0, res$1];}
     var s = res$0[1], err_info = create_from_lexbuf(lexbuf, s);
     return [1, err_info];
    }
    function read_json_stream_error_info(fin, lexbuf){
     function reader(param){return caml_call1(Lexxer[1], lexbuf);}
     function f(i){
      var match = caml_call1(Parser[2], reader);
      if(0 !== match[0]){
       var err = match[1];
       caml_call1(fin, 0);
       var err_info = create_from_lexbuf(lexbuf, err);
       throw caml_maybe_attach_backtrace([0, Json_error_info, err_info], 1);
      }
      var match$0 = match[1];
      if(match$0){var res = match$0[1]; return [0, res];}
      caml_call1(fin, 0);
      return 0;
     }
     return from(f);
    }
    function stream_from_string_error_info(s){
     var lexbuf = from_string(0, s);
     return read_json_stream_error_info(function(param){return 0;}, lexbuf);
    }
    function stream_from_channel_error_info(opt, inc){
     if(opt)
      var sth = opt[1], fin = sth;
     else
      var fin = function(param){return 0;};
     var lexbuf = from_channel(0, inc);
     return read_json_stream_error_info(fin, lexbuf);
    }
    function stream_from_file_error_info(filename){
     var inc = open_in(filename);
     return stream_from_channel_error_info
             ([0, function(param){return _i_(inc);}], inc);
    }
    function stream_from_lexbuf_error_info(lexbuf){
     return read_json_stream_error_info(function(param){return 0;}, lexbuf);
    }
    return [0,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            json_of_string_error_info,
            json_of_file_error_info,
            json_of_channel_error_info,
            ,
            ,
            json_of_lexbuf_error_info_comp,
            ,
            ,
            ,
            ,
            ,
            stream_from_string_error_info,
            stream_from_channel_error_info,
            stream_from_file_error_info,
            ,
            stream_from_lexbuf_error_info];
   }
   function Make$5(Compliance){
    function nibble_to_hex(i){
     var _qz_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
     return char_of_int(_qz_);
    }
    function add_hex_byte(oc, i){
     _j_(oc, nibble_to_hex((i >>> 4 | 0) & 15));
     return _j_(oc, nibble_to_hex(i & 15));
    }
    function escape(oc, s){
     function add_char(_qy_){return _j_(oc, _qy_);}
     function add_string(_qx_){return output_string(oc, _qx_);}
     var l = caml_ml_string_length(s), _qv_ = l - 1 | 0, _qu_ = 0;
     if(_qv_ >= 0){
      var i = _qu_;
      for(;;){
       var c = caml_string_get(s, i);
       a:
       if(92 === c)
        add_string(_go_);
       else{
        b:
        {
         c:
         {
          if(35 > c){
           if(8 > c) break b;
           switch(c - 8 | 0){
             case 0:
              add_string(_gq_); break;
             case 1:
              add_string(_gr_); break;
             case 2:
              add_string(_gs_); break;
             case 4:
              add_string(_gt_); break;
             case 5:
              add_string(_gu_); break;
             case 26:
              add_string(_gv_); break;
             case 24:
             case 25:
              break c;
             default: break b;
           }
           break a;
          }
          if(127 === c) break b;
         }
         add_char(caml_string_get(s, i));
         break a;
        }
        add_string(_gp_);
        add_hex_byte(oc, c);
       }
       var _qw_ = i + 1 | 0;
       if(_qv_ === i) break;
       var i = _qw_;
      }
     }
     return;
    }
    function json_to_channel_fmt(oc, json, eol, incr, psep){
     function add_char(_qt_){return _j_(oc, _qt_);}
     function add_string(_qs_){return output_string(oc, _qs_);}
     function add_quote_string(s){
      add_char(34);
      escape(oc, s);
      return add_char(34);
     }
     function add_int(i){return add_string(string_of_int(i));}
     function add_float(f){return add_string(caml_call1(Compliance[8], f));}
     var psep$0 = symbol(_gw_, psep);
     function fmt(off, value){
      if(typeof value === "number") return add_string(_gx_);
      var _qr_ = value[1];
      if(708012133 <= _qr_){
       if(737456202 > _qr_){
        if(726928360 <= _qr_){
         var t = value[2], ldr$1 = make$1(off, 32);
         add_char(40);
         add_string(eol);
         json_list(off + incr | 0, t);
         add_string(eol);
         add_string(ldr$1);
         return add_char(41);
        }
        var v = value[2], ldr$2 = make$1(off, 32);
        add_char(60);
        add_string(eol);
        variant(off + incr | 0, v);
        add_string(eol);
        add_string(ldr$2);
        return add_char(62);
       }
       if(928231259 <= _qr_){
        if(963043957 <= _qr_){
         var o = value[2], ldr = make$1(off, 32);
         add_char(123);
         add_string(eol);
         json_assoc(off + incr | 0, o);
         add_string(eol);
         add_string(ldr);
         return add_char(125);
        }
        var s = value[2];
        return add_string(s);
       }
       if(848054398 <= _qr_){
        var l = value[2], ldr$0 = make$1(off, 32);
        add_char(91);
        add_string(eol);
        json_list(off + incr | 0, l);
        add_string(eol);
        add_string(ldr$0);
        return add_char(93);
       }
       var b = value[2];
       return add_string(string_of_bool(b));
      }
      if(-752863768 === _qr_){var s$0 = value[2]; return add_string(s$0);}
      if(3654863 <= _qr_){
       if(365180284 <= _qr_){var f = value[2]; return add_float(f);}
       var i = value[2];
       return add_int(i);
      }
      if(-375152890 <= _qr_){var s$1 = value[2]; return add_string(s$1);}
      var s$2 = value[2];
      return add_quote_string(s$2);
     }
     function json_assoc(off, o){
      var
       ldr = make$1(off, 32),
       sep = [0, ldr],
       newsep = symbol(_gy_, symbol(eol, ldr));
      return iter
              (function(v){
                add_string(sep[1]);
                sep[1] = newsep;
                return pair(off, v);
               },
               o);
     }
     function pair(off, param){
      var v = param[2], k = param[1];
      add_quote_string(k);
      add_string(psep$0);
      return fmt(off, v);
     }
     function json_list(off, l){
      var
       ldr = make$1(off, 32),
       sep = [0, ldr],
       newsep = symbol(_gz_, symbol(eol, ldr));
      return iter
              (function(v){
                add_string(sep[1]);
                sep[1] = newsep;
                return fmt(off, v);
               },
               l);
     }
     function variant(off, param){
      var j = param[2], k = param[1];
      add_quote_string(k);
      if(! j) return;
      var j$0 = j[1];
      add_string(psep$0);
      return fmt(off + incr | 0, j$0);
     }
     fmt(0, json);
     return add_string(eol);
    }
    function json_to_channel(_qk_){
     function _ql_(_qn_, _qo_, _qp_, _qq_){
      return json_to_channel_fmt(_qk_, _qn_, _qo_, _qp_, _qq_);
     }
     return function(_qm_){return _ql_(_qm_, _gB_, 0, _gA_);};
    }
    function json_to_file_exn(file, json){
     var oc = open_out(file);
     try{json_to_channel(oc)(json); close_out(oc); return;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      close_out(oc);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    return [0, , , , , , , , , json_to_file_exn, , json_to_channel];
   }
   function Make$6(Compliance){
    function nibble_to_hex(i){
     var _qj_ = 9 < i ? (65 + i | 0) - 10 | 0 : 48 + i | 0;
     return char_of_int(_qj_);
    }
    function add_hex_byte(buf, i){
     add_char(buf, nibble_to_hex((i >>> 4 | 0) & 15));
     return add_char(buf, nibble_to_hex(i & 15));
    }
    function escape(buf, s){
     function add_char$0(_qi_){return add_char(buf, _qi_);}
     function add_string$0(_qh_){return add_string(buf, _qh_);}
     var l = caml_ml_string_length(s), _qf_ = l - 1 | 0, _qe_ = 0;
     if(_qf_ >= 0){
      var i = _qe_;
      for(;;){
       var c = caml_string_get(s, i);
       a:
       if(92 === c)
        add_string$0(_gC_);
       else{
        b:
        {
         c:
         {
          if(35 > c){
           if(8 > c) break b;
           switch(c - 8 | 0){
             case 0:
              add_string$0(_gE_); break;
             case 1:
              add_string$0(_gF_); break;
             case 2:
              add_string$0(_gG_); break;
             case 4:
              add_string$0(_gH_); break;
             case 5:
              add_string$0(_gI_); break;
             case 26:
              add_string$0(_gJ_); break;
             case 24:
             case 25:
              break c;
             default: break b;
           }
           break a;
          }
          if(127 === c) break b;
         }
         add_char$0(caml_string_get(s, i));
         break a;
        }
        add_string$0(_gD_);
        add_hex_byte(buf, c);
       }
       var _qg_ = i + 1 | 0;
       if(_qf_ === i) break;
       var i = _qg_;
      }
     }
     return;
    }
    function json_to_buffer(buf, json){
     function add_char$0(_qd_){return add_char(buf, _qd_);}
     function add_string$0(_qc_){return add_string(buf, _qc_);}
     function add_quote_string(s){
      add_char$0(34);
      escape(buf, s);
      return add_char$0(34);
     }
     function add_int(i){return add_string$0(string_of_int(i));}
     function add_float(f){return add_string$0(caml_call1(Compliance[8], f));}
     function fmt(value){
      if(typeof value === "number") return add_string$0(_gK_);
      var _qb_ = value[1];
      if(708012133 <= _qb_){
       if(737456202 > _qb_){
        if(726928360 <= _qb_){
         var t = value[2];
         add_char$0(40);
         json_list(t);
         return add_char$0(41);
        }
        var v = value[2];
        add_char$0(60);
        variant(v);
        return add_char$0(62);
       }
       if(928231259 <= _qb_){
        if(963043957 <= _qb_){
         var o = value[2];
         add_char$0(123);
         json_assoc(o);
         return add_char$0(125);
        }
        var s = value[2];
        return add_string$0(s);
       }
       if(848054398 <= _qb_){
        var l = value[2];
        add_char$0(91);
        json_list(l);
        return add_char$0(93);
       }
       var b = value[2];
       return add_string$0(string_of_bool(b));
      }
      if(-752863768 === _qb_){var s$0 = value[2]; return add_string$0(s$0);}
      if(3654863 <= _qb_){
       if(365180284 <= _qb_){var f = value[2]; return add_float(f);}
       var i = value[2];
       return add_int(i);
      }
      if(-375152890 <= _qb_){var s$1 = value[2]; return add_string$0(s$1);}
      var s$2 = value[2];
      return add_quote_string(s$2);
     }
     function json_assoc(o){
      var sep = [0, _gL_];
      return iter
              (function(v){
                add_string$0(sep[1]);
                sep[1] = _gM_;
                return pair(v);
               },
               o);
     }
     function pair(param){
      var v = param[2], k = param[1];
      add_quote_string(k);
      add_char$0(58);
      return fmt(v);
     }
     function json_list(l){
      var sep = [0, _gN_];
      return iter
              (function(v){
                add_string$0(sep[1]);
                sep[1] = _gO_;
                return fmt(v);
               },
               l);
     }
     function variant(param){
      var j = param[2], k = param[1];
      add_quote_string(k);
      if(! j) return;
      var j$0 = j[1];
      add_char$0(58);
      return fmt(j$0);
     }
     return fmt(json);
    }
    function json_to_string(json){
     var buf = create$1(100);
     json_to_buffer(buf, json);
     return contents(buf);
    }
    return [0, , , json_to_string, , , , , , , , json_to_buffer];
   }
   var Json_error = [248, _gP_, caml_fresh_oo_id(0)];
   function json_error(msg){
    throw caml_maybe_attach_backtrace([0, Json_error, msg], 1);
   }
   function Common_reader(Compliance){
    var
     Lexxer = Make$1(Compliance),
     Parser = Make$2(Compliance),
     include = function(_qa_){return Make$4(Lexxer, _qa_);}(Parser),
     json_of_string_error_info = include[15],
     json_of_file_error_info = include[16],
     json_of_channel_error_info = include[17],
     json_of_lexbuf_error_info_comp = include[20],
     stream_from_string_error_info = include[26],
     stream_from_channel_error_info = include[27],
     stream_from_file_error_info = include[28],
     stream_from_lexbuf_error_info = include[30],
     Internal_reader =
       [0,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        json_of_string_error_info,
        json_of_file_error_info,
        json_of_channel_error_info,
        ,
        ,
        json_of_lexbuf_error_info_comp,
        ,
        ,
        ,
        ,
        ,
        stream_from_string_error_info,
        stream_from_channel_error_info,
        stream_from_file_error_info,
        ,
        stream_from_lexbuf_error_info];
    function error_to_string(error_info, fname, lnum){
     if(lnum) var lnum$0 = lnum[1], lnum$1 = lnum$0; else var lnum$1 = 1;
     var
      _p8_ = error_info[4],
      _p9_ = error_info[3],
      _p__ = error_info[2],
      _p$_ = (lnum$1 + error_info[1] | 0) - 1 | 0;
     if(fname)
      var name = fname[1], fname$0 = symbol(_gR_, symbol(name, _gQ_));
     else
      var fname$0 = _gT_;
     var loc = caml_call4(sprintf(_gS_), fname$0, _p$_, _p__, _p9_);
     return symbol(loc, _p8_);
    }
    function apply_and_handle_errors(f, a, fname, lnum){
     var match = caml_call1(f, a);
     if(0 === match[0]){var json = match[1]; return json;}
     var error_info = match[1];
     return json_error(error_to_string(error_info, fname, lnum));
    }
    function from_string(param, fname, lnum, s){
     return apply_and_handle_errors(Internal_reader[17], s, fname, lnum);
    }
    return [0, , , , from_string];
   }
   function Common_writer(Compliance){
    var
     _p3_ = Make$6(Compliance),
     to_string = _p3_[3],
     to_buffer = _p3_[11],
     _p4_ = Make$5(Compliance),
     to_file = _p4_[9],
     to_channel = _p4_[11],
     include = _fY_(Compliance),
     pretty_print = include[1],
     pretty_print_to_string = include[2],
     pretty_print_to_channel = include[3],
     Internal_writer =
       [0,
        ,
        ,
        to_string,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        to_buffer,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        ,
        to_file,
        ,
        to_channel,
        ,
        ,
        ,
        pretty_print,
        pretty_print_to_string,
        pretty_print_to_channel];
    function to_standard(json){
     function map(node){
      if(typeof node === "number") return 870828711;
      var _p7_ = node[1];
      if(708012133 > _p7_){
       if(-752863768 === _p7_){
        var v$1 = node[2];
        return [0, -976970511, v$1];
       }
       if(3654863 <= _p7_) return 365180284 <= _p7_ ? node : node;
       if(-375152890 > _p7_) return node;
       var s = node[2];
       return 1 < caml_ml_string_length(s) >>> 0
               ? [0,
                 -976970511,
                 sub$0(s, 1, caml_ml_string_length(s) - 2 | 0)]
               : [0, -976970511, s];
      }
      if(737456202 > _p7_){
       if(726928360 <= _p7_){
        var tpl = node[2];
        return [0, 848054398, map$1(map, tpl)];
       }
       var match = node[2], jopt = match[2], name = match[1];
       if(! jopt) return [0, -976970511, name];
       var v$0 = jopt[1];
       return [0, 848054398, [0, [0, -976970511, name], [0, map(v$0), 0]]];
      }
      if(928231259 > _p7_){
       if(848054398 > _p7_) return node;
       var l = node[2];
       return [0, 848054398, map$1(map, l)];
      }
      if(963043957 <= _p7_){
       var a = node[2];
       return [0,
               963043957,
               map$1
                (function(param){
                  var v = param[2], id = param[1];
                  return [0, id, map(v)];
                 },
                 a)];
      }
      var v = node[2];
      return [0, 365180284, caml_float_of_string(v)];
     }
     return map(json);
    }
    function to_string$0(param, _p5_, opt, json){
     if(opt) var sth = opt[1], std = sth; else var std = 0;
     if(! std) return Internal_writer[3].call(null, json);
     var _p6_ = to_standard(json);
     return Internal_writer[3].call(null, _p6_);
    }
    return [0, , , to_string$0];
   }
   function lex_string(s){return unescape_string(s);}
   function lex_number(token){return token;}
   function lex_integer(token){return token;}
   function lex_largeint(param){return _gU_;}
   function lex_variant(param){return 0;}
   function lex_tuple(param){return 0;}
   function comment_check(param){return _gV_;}
   function number_to_string(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _gW_ : _gX_
            : 4 <= match ? _gY_ : string_of_float_json(f);
   }
   function largeint(s){return [0, 365180284, caml_float_of_string(s)];}
   function integer(i){return [0, 3654863, i];}
   var null$2 = 870828711;
   function string$0(s){return [0, -976970511, s];}
   function bool(b){return [0, 737456202, b];}
   function assoc(a){return [0, 963043957, a];}
   function list(l){return [0, 848054398, l];}
   function tuple(l){
    throw caml_maybe_attach_backtrace([0, Failure, _gZ_], 1);
   }
   function variant(l){
    throw caml_maybe_attach_backtrace([0, Failure, _g0_], 1);
   }
   function number(param){
    if(typeof param === "number")
     return 3900603 === param
             ? [0, 365180284, NaN]
             : 874173192
               <= param
               ? [0, 365180284, Infinity]
               : [0, 365180284, -Infinity];
    if(928231259 <= param[1])
     throw caml_maybe_attach_backtrace([0, Failure, _g1_], 1);
    var f = param[2];
    return [0, 365180284, f];
   }
   function array_start(param){return 14610;}
   function array_end(param){return 14596;}
   function object_start(param){return 17732;}
   function object_end(param){return 17718;}
   function tuple_start(param){
    throw caml_maybe_attach_backtrace([0, Failure, _g2_], 1);
   }
   function tuple_end(param){
    throw caml_maybe_attach_backtrace([0, Failure, _g3_], 1);
   }
   function variant_start(param){
    throw caml_maybe_attach_backtrace([0, Failure, _g4_], 1);
   }
   function variant_end(param){
    throw caml_maybe_attach_backtrace([0, Failure, _g5_], 1);
   }
   function name$0(s){return [0, 869834347, s];}
   Common_reader
    ([0,
      lex_string,
      lex_number,
      lex_integer,
      lex_largeint,
      lex_tuple,
      lex_variant,
      comment_check,
      number_to_string,
      number,
      integer,
      largeint,
      null$2,
      string$0,
      bool,
      assoc,
      list,
      tuple,
      variant,
      [0,
       number,
       integer,
       largeint,
       null$2,
       string$0,
       bool,
       array_start,
       array_end,
       object_start,
       object_end,
       tuple_start,
       tuple_end,
       variant_start,
       variant_end,
       name$0]]);
   Common_writer
    ([0,
      lex_string,
      lex_number,
      lex_integer,
      lex_largeint,
      lex_tuple,
      lex_variant,
      comment_check,
      number_to_string,
      number,
      integer,
      largeint,
      null$2,
      string$0,
      bool,
      assoc,
      list,
      tuple,
      variant,
      [0,
       number,
       integer,
       largeint,
       null$2,
       string$0,
       bool,
       array_start,
       array_end,
       object_start,
       object_end,
       tuple_start,
       tuple_end,
       variant_start,
       variant_end,
       name$0]]);
   function lex_string$0(s){return unescape_string(s);}
   function lex_number$0(token){return token;}
   function lex_integer$0(token){return token;}
   function lex_largeint$0(token){return token;}
   function lex_variant$0(param){return 1;}
   function lex_tuple$0(param){return 1;}
   function comment_check$0(param){return _g6_;}
   function number_to_string$0(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _g7_ : _g8_
            : 4 <= match ? _g9_ : string_of_float_json(f);
   }
   function largeint$0(s){return [0, -752863768, s];}
   function integer$0(i){return [0, 3654863, i];}
   var null$3 = 870828711;
   function string$1(s){return [0, -976970511, s];}
   function bool$0(b){return [0, 737456202, b];}
   function assoc$0(a){return [0, 963043957, a];}
   function list$0(l){return [0, 848054398, l];}
   function tuple$0(l){return [0, 726928360, l];}
   function variant$0(k, v){return [0, 708012133, [0, k, v]];}
   function number$0(param){
    if(typeof param === "number")
     return 3900603 === param
             ? [0, 365180284, NaN]
             : 874173192
               <= param
               ? [0, 365180284, Infinity]
               : [0, 365180284, -Infinity];
    if(928231259 <= param[1])
     throw caml_maybe_attach_backtrace([0, Failure, _g__], 1);
    var f = param[2];
    return [0, 365180284, f];
   }
   function array_start$0(param){return 14610;}
   function array_end$0(param){return 14596;}
   function object_start$0(param){return 17732;}
   function object_end$0(param){return 17718;}
   function tuple_start$0(param){return 18847;}
   function tuple_end$0(param){return 18833;}
   function variant_start$0(param){return 19293;}
   function variant_end$0(param){return 19279;}
   function name$1(s){return [0, 869834347, s];}
   var
    from_string$0 =
      Common_reader
        ([0,
          lex_string$0,
          lex_number$0,
          lex_integer$0,
          lex_largeint$0,
          lex_tuple$0,
          lex_variant$0,
          comment_check$0,
          number_to_string$0,
          number$0,
          integer$0,
          largeint$0,
          null$3,
          string$1,
          bool$0,
          assoc$0,
          list$0,
          tuple$0,
          variant$0,
          [0,
           number$0,
           integer$0,
           largeint$0,
           null$3,
           string$1,
           bool$0,
           array_start$0,
           array_end$0,
           object_start$0,
           object_end$0,
           tuple_start$0,
           tuple_end$0,
           variant_start$0,
           variant_end$0,
           name$1]])
       [4],
    include =
      Common_writer
       ([0,
         lex_string$0,
         lex_number$0,
         lex_integer$0,
         lex_largeint$0,
         lex_tuple$0,
         lex_variant$0,
         comment_check$0,
         number_to_string$0,
         number$0,
         integer$0,
         largeint$0,
         null$3,
         string$1,
         bool$0,
         assoc$0,
         list$0,
         tuple$0,
         variant$0,
         [0,
          number$0,
          integer$0,
          largeint$0,
          null$3,
          string$1,
          bool$0,
          array_start$0,
          array_end$0,
          object_start$0,
          object_end$0,
          tuple_start$0,
          tuple_end$0,
          variant_start$0,
          variant_end$0,
          name$1]]),
    to_string$4 = include[3];
   function lex_string$1(s){return symbol(_ha_, symbol(s, _g$_));}
   function lex_number$1(token){return token;}
   function lex_integer$1(token){return token;}
   function lex_largeint$1(token){return token;}
   function lex_variant$1(param){return 1;}
   function lex_tuple$1(param){return 1;}
   function comment_check$1(param){return _hb_;}
   function number_to_string$1(f){
    var match = caml_classify_float(f);
    return 3 === match
            ? f < 0. ? _hc_ : _hd_
            : 4 <= match ? _he_ : string_of_float_json(f);
   }
   function largeint$1(s){return [0, -752863768, s];}
   function integer$1(i){return [0, -752863768, string_of_int(i)];}
   var null$4 = 870828711;
   function string$2(s){return [0, -375152890, s];}
   function bool$1(b){return [0, 737456202, b];}
   function assoc$1(a){return [0, 963043957, a];}
   function list$1(l){return [0, 848054398, l];}
   function tuple$1(l){return [0, 726928360, l];}
   function variant$1(k, v){return [0, 708012133, [0, k, v]];}
   function number$1(param){
    if(typeof param === "number")
     return 3900603 === param ? _hf_ : 874173192 <= param ? _hg_ : _hh_;
    if(928231259 <= param[1]){var f = param[2]; return [0, 928231259, f];}
    var f$0 = param[2];
    return [0, 928231259, string_of_float(f$0)];
   }
   function array_start$1(param){return 14610;}
   function array_end$1(param){return 14596;}
   function object_start$1(param){return 17732;}
   function object_end$1(param){return 17718;}
   function tuple_start$1(param){return 18847;}
   function tuple_end$1(param){return 18833;}
   function variant_start$1(param){return 19293;}
   function variant_end$1(param){return 19279;}
   function name$2(s){return [0, 869834347, s];}
   Common_reader
    ([0,
      lex_string$1,
      lex_number$1,
      lex_integer$1,
      lex_largeint$1,
      lex_tuple$1,
      lex_variant$1,
      comment_check$1,
      number_to_string$1,
      number$1,
      integer$1,
      largeint$1,
      null$4,
      string$2,
      bool$1,
      assoc$1,
      list$1,
      tuple$1,
      variant$1,
      [0,
       number$1,
       integer$1,
       largeint$1,
       null$4,
       string$2,
       bool$1,
       array_start$1,
       array_end$1,
       object_start$1,
       object_end$1,
       tuple_start$1,
       tuple_end$1,
       variant_start$1,
       variant_end$1,
       name$2]]);
   Common_writer
    ([0,
      lex_string$1,
      lex_number$1,
      lex_integer$1,
      lex_largeint$1,
      lex_tuple$1,
      lex_variant$1,
      comment_check$1,
      number_to_string$1,
      number$1,
      integer$1,
      largeint$1,
      null$4,
      string$2,
      bool$1,
      assoc$1,
      list$1,
      tuple$1,
      variant$1,
      [0,
       number$1,
       integer$1,
       largeint$1,
       null$4,
       string$2,
       bool$1,
       array_start$1,
       array_end$1,
       object_start$1,
       object_end$1,
       tuple_start$1,
       tuple_end$1,
       variant_start$1,
       variant_end$1,
       name$2]]);
   function rand(s, param){return bits(s);}
   make_self_init(0);
   function v4_ocaml_random_uuid(rand){
    var
     r0 = caml_call1(rand, 0),
     r1 = caml_call1(rand, 0),
     r2 = caml_call1(rand, 0),
     r3 = caml_call1(rand, 0),
     r4 = caml_call1(rand, 0),
     u = caml_create_bytes(16),
     _ox_ = 0;
    function _oy_(_p2_, _p1_, _p0_){caml_bytes_set(_p2_, _p1_, _p0_); return;}
    (function(_pZ_){return _oy_(u, _ox_, _pZ_);}(r0 & 255));
    var _oz_ = 1;
    function _oA_(_pY_, _pX_, _pW_){caml_bytes_set(_pY_, _pX_, _pW_); return;}
    (function(_pV_){return _oA_(u, _oz_, _pV_);}((r0 >>> 8 | 0) & 255));
    var _oB_ = 2;
    function _oC_(_pU_, _pT_, _pS_){caml_bytes_set(_pU_, _pT_, _pS_); return;}
    (function(_pR_){return _oC_(u, _oB_, _pR_);}((r0 >>> 16 | 0) & 255));
    var _oD_ = 3;
    function _oE_(_pQ_, _pP_, _pO_){caml_bytes_set(_pQ_, _pP_, _pO_); return;}
    (function(_pN_){return _oE_(u, _oD_, _pN_);}(r1 & 255));
    var _oF_ = 4;
    function _oG_(_pM_, _pL_, _pK_){caml_bytes_set(_pM_, _pL_, _pK_); return;}
    (function(_pJ_){return _oG_(u, _oF_, _pJ_);}((r1 >>> 8 | 0) & 255));
    var _oH_ = 5;
    function _oI_(_pI_, _pH_, _pG_){caml_bytes_set(_pI_, _pH_, _pG_); return;}
    (function(_pF_){return _oI_(u, _oH_, _pF_);}((r1 >>> 16 | 0) & 255));
    var _oJ_ = 6;
    function _oK_(_pE_, _pD_, _pC_){caml_bytes_set(_pE_, _pD_, _pC_); return;}
    (function(_pB_){return _oK_(u, _oJ_, _pB_);}(64 | (r1 >>> 24 | 0) & 15));
    var _oL_ = 7;
    function _oM_(_pA_, _pz_, _py_){caml_bytes_set(_pA_, _pz_, _py_); return;}
    (function(_px_){return _oM_(u, _oL_, _px_);}(r2 & 255));
    var _oN_ = 8;
    function _oO_(_pw_, _pv_, _pu_){caml_bytes_set(_pw_, _pv_, _pu_); return;}
    (function(_pt_){return _oO_(u, _oN_, _pt_);}(128 | (r2 >>> 24 | 0) & 63));
    var _oP_ = 9;
    function _oQ_(_ps_, _pr_, _pq_){caml_bytes_set(_ps_, _pr_, _pq_); return;}
    (function(_pp_){return _oQ_(u, _oP_, _pp_);}((r2 >>> 8 | 0) & 255));
    var _oR_ = 10;
    function _oS_(_po_, _pn_, _pm_){caml_bytes_set(_po_, _pn_, _pm_); return;}
    (function(_pl_){return _oS_(u, _oR_, _pl_);}((r2 >>> 16 | 0) & 255));
    var _oT_ = 11;
    function _oU_(_pk_, _pj_, _pi_){caml_bytes_set(_pk_, _pj_, _pi_); return;}
    (function(_ph_){return _oU_(u, _oT_, _ph_);}(r3 & 255));
    var _oV_ = 12;
    function _oW_(_pg_, _pf_, _pe_){caml_bytes_set(_pg_, _pf_, _pe_); return;}
    (function(_pd_){return _oW_(u, _oV_, _pd_);}((r3 >>> 8 | 0) & 255));
    var _oX_ = 13;
    function _oY_(_pc_, _pb_, _pa_){caml_bytes_set(_pc_, _pb_, _pa_); return;}
    (function(_o$_){return _oY_(u, _oX_, _o$_);}((r3 >>> 16 | 0) & 255));
    var _oZ_ = 14;
    function _o0_(_o__, _o9_, _o8_){caml_bytes_set(_o__, _o9_, _o8_); return;}
    (function(_o7_){return _o0_(u, _oZ_, _o7_);}(r4 & 255));
    var _o1_ = 15;
    function _o2_(_o6_, _o5_, _o4_){caml_bytes_set(_o6_, _o5_, _o4_); return;}
    (function(_o3_){return _o2_(u, _o1_, _o3_);}((r4 >>> 8 | 0) & 255));
    return unsafe_to_string(u);
   }
   function v4_gen(seed){
    function rand$0(_ow_){return rand(seed, _ow_);}
    return function(param){return v4_ocaml_random_uuid(rand$0);};
   }
   function to_string$5(opt, u){
    if(opt) var sth = opt[1], upper = sth; else var upper = 0;
    var hbase = upper ? 55 : 87;
    function hex(hbase, i){return 10 <= i ? hbase + i | 0 : 48 + i | 0;}
    var s = of_string(_hi_), i = [0, 0], j = [0, 0];
    function byte$0(s, i, c){
     function _ol_(_ov_, _ou_, _ot_){
      caml_bytes_set(_ov_, _ou_, _ot_);
      return;
     }
     (function(_os_){return _ol_(s, i, _os_);}(hex(hbase, c >>> 4 | 0)));
     var _om_ = i + 1 | 0;
     function _on_(_or_, _oq_, _op_){
      caml_bytes_set(_or_, _oq_, _op_);
      return;
     }
     return function(_oo_){return _on_(s, _om_, _oo_);}(hex(hbase, c & 15));
    }
    for(;;){
     if(4 <= j[1]) break;
     var _ok_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _ok_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
    i[1]++;
    for(;;){
     if(6 <= j[1]) break;
     var _oj_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _oj_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
    i[1]++;
    for(;;){
     if(8 <= j[1]) break;
     var _oi_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _oi_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
    i[1]++;
    for(;;){
     if(10 <= j[1]) break;
     var _oh_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _oh_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
    i[1]++;
    for(;;){
     if(16 <= j[1]) return unsafe_to_string(s);
     var _og_ = caml_string_get(u, j[1]);
     byte$0(s, i[1], _og_);
     i[1] = i[1] + 2 | 0;
     j[1]++;
    }
   }
   var include$0 = _ez_([0, compare$0]);
   function to_jstr$1(t){return encode(t);}
   function of_jstr$1(jstr){
    var match = decode(jstr);
    if(0 === match[0]){var v = match[1]; return [0, v];}
    var err = match[1];
    error$0([0, err, 0]);
    return _hj_;
   }
   function of_jv$0(jv){return of_jstr$1(jv);}
   var random_state = get_state(0);
   function new_uuid_v4(param){return v4_gen(random_state)(0);}
   function tee(f, x){caml_call1(f, x); return x;}
   var
    empty$1 = include$0[1],
    union = include$0[7],
    of_list$2 = include$0[29],
    to_list$3 = include$0[49];
   function to_at(t){
    return symbol$9
            (function(c){return [0, 80, class$1(caml_jsstring_of_string(c))];},
             to_list$3(t));
   }
   var empty$2 = [0, empty$1, 0];
   function to_at$0(id, t){
    var
     _od_ = to_at(t[1]),
     _oe_ = t[2],
     at = function(_of_){return rev_append(_oe_, _of_);}(_od_);
    if(! id) return at;
    var id$0 = id[1];
    return [0, [0, 80, id$1(caml_jsstring_of_string(id$0))], at];
   }
   function classes(l){var _oc_ = empty$2[2]; return [0, of_list$2(l), _oc_];}
   function union$0(param, _oa_){
    var
     a = _oa_[2],
     c = _oa_[1],
     attrs = param[2],
     classes = param[1],
     _ob_ = rev_append(attrs, a);
    return [0, union(classes, c), _ob_];
   }
   function add$1(at_name, v, at){
    var _n9_ = v[1];
    if(82 === _n9_)
     var
      v$0 = v[2],
      a =
        [0,
         82,
         func
          (v$0,
           function(v){
            return function(_n__){return v$1(at_name, _n__);}
                    (caml_jsstring_of_string(v));
           })];
    else if(83 <= _n9_)
     var a = failwith(_hk_);
    else
     var
      v$2 = v[2],
      a =
        [0,
         80,
         function(_n$_){return v$1(at_name, _n$_);}
          (caml_jsstring_of_string(v$2))];
    return [0, a, at];
   }
   function add_bool(at$0, v, at){return v ? [0, [0, 80, at$0], at] : at;}
   function add_opt(at_name, v, at){
    if(! v) return at;
    var v$0 = v[1];
    return [0,
            [0,
             80,
             function(_n8_){return v$1(at_name, _n8_);}
              (caml_jsstring_of_string(v$0))],
            at];
   }
   function of_string$0(s){
    var match = chop_suffix(_hl_, s);
    if(match){
     var i = match[1], _n2_ = function(i){return [0, i];};
     return function(_n7_){return symbol$10(_n2_, _n7_);}(of_string_opt(i));
    }
    var match$0 = chop_suffix(_hm_, s);
    if(match$0){
     var f = match$0[1], _n3_ = function(f){return [1, f];};
     return function(_n6_){return symbol$10(_n3_, _n6_);}(of_string_opt(f));
    }
    var match$1 = chop_suffix(_hn_, s);
    if(! match$1) return 0;
    var f$0 = match$1[1];
    function _n4_(f){return [1, f];}
    return function(_n5_){return symbol$10(_n4_, _n5_);}(of_string_opt(f$0));
   }
   function to_string$6(param){
    switch(param[0]){
      case 0:
       var i = param[1]; return caml_call1(sprintf(_ho_), i);
      case 1:
       var f = param[1]; return caml_call1(sprintf(_hp_), f);
      default: var f$0 = param[1]; return caml_call1(sprintf(_hq_), f$0);
    }
   }
   function to_px(opt){
    if(opt)
     var sth = opt[1], parent = sth;
    else
     var parent = root(global_document);
    function get_font_size_in_px(parent){
     var
      font_size =
        caml_string_of_jsstring(computed_style(0, "font-size", parent)),
      match = of_string$0(font_size);
     if(match){
      var match$0 = match[1];
      if(0 === match$0[0]){var i = match$0[1]; return i;}
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _hr_], 1);
    }
    return function(param){
     switch(param[0]){
       case 0:
        var i = param[1]; return i;
       case 1:
        var
         f = param[1],
         font_size = get_font_size_in_px(root(global_document));
        return f * font_size;
       default:
        var f$0 = param[1], font_size$0 = get_font_size_in_px(parent);
        return f$0 * font_size$0;
     }};
   }
   function v$5(name, css_size, content){return [0, name, css_size, content];}
   function to_header(t){
    var
     cells =
       fold_right
        (function(param, acc){
          var content = param[3];
          return [0, [0, 82, div$1(0, 0, 0, content)], acc];
         },
         t,
         0);
    return cells;
   }
   function style$1(t){
    var
     template =
       to_string$2
        (_hs_, function(param){var css_size = param[2]; return css_size;}, t);
    return caml_call2(sprintf(_hu_), _ht_, template);
   }
   function style$2(t){
    var style = style$1(t[1][1]);
    return concat(_hv_, [0, style, 0]);
   }
   function header(t){
    var
     row_height = to_string$6(t[2]),
     at =
       [0,
        [0,
         80,
         style$0
          (caml_jsstring_of_string(caml_call1(sprintf(_hw_), row_height)))],
        0],
     _nY_ = [0, at],
     _nX_ = to_header(t[1][1]);
    return function(_nZ_){
              return function(_n0_, _n1_){
               return div$1(_nZ_, _nY_, _n0_, _n1_);};
             }
             (0)
            (0, _nX_);
   }
   to_px(0)(_hx_);
   function Uniqueue(O){
    var Set = _ez_(O);
    function create(param){
     var queue = create$0(0), uniq = Set[1];
     return [0, queue, uniq];
    }
    function add$0(v, t){
     var new_elt = 1 - Set[3].call(null, v, t[2]);
     if(new_elt){
      add(v, t[1]);
      t[2] = Set[4].call(null, v, t[2]);
     }
     else{
      var new_queue = create$0(0);
      iter$2
       (function(v$0){
         var _nW_ = 1 - equal$0(caml_call2(O[1], v, v$0), 0);
         return _nW_ ? add(v$0, new_queue) : _nW_;
        },
        t[1]);
      add(v, new_queue);
      t[1] = new_queue;
     }
     return new_elt;
    }
    function take$0(t){
     var i = take(t[1]);
     t[2] = Set[6].call(null, i, t[2]);
     return i;
    }
    function length(t){return length$0(t[1]);}
    function clear(t){
     var new_queue = create(0);
     t[1] = new_queue[1];
     t[2] = new_queue[2];
     return;
    }
    return [0, , create, add$0, take$0, length, clear];
   }
   var Int_uniqueue = Uniqueue([0, compare$1]);
   function make$5(ui_table, opt, data_source){
    var row_size = to_string$6(ui_table[2]);
    function height_n(n){return caml_call2(sprintf(_hy_), row_size, n);}
    var
     height$0 = caml_call1(sprintf(_hz_), row_size),
     table = make$3(0),
     row_index = create$2(0, 2048),
     unload_queue = Int_uniqueue[2].call(null, 0);
    function add(fetch, opt, indexes){
     if(opt) var sth = opt[1], max_items = sth; else var max_items = 200;
     function unload(i){
      symbol_bind$0
       (get$5(row_index, i),
        function(row){
         return symbol$11
                 (get$4(row),
                  function(row_data){
                   return symbol$3(row, [0, row_data[1], 0, row_data[3]]);
                  });
        });
      return;
     }
     function load(indexes){
      let$2
       (caml_call1(fetch, indexes),
        function(data){
         return iter2
                 (function(i, data){
                   symbol_bind$0
                    (get$5(row_index, i),
                     function(row){
                      return symbol$11
                              (get$4(row),
                               function(row_data){
                                if(! data) throw caml_maybe_attach_backtrace(Not_found, 1);
                                var data$0 = data[1];
                                return symbol$3
                                        (row, [0, row_data[1], [0, data$0], row_data[3]]);
                               });
                     });
                   return 0;
                  },
                  indexes,
                  data);
        });
      return;
     }
     function cleanup(param){
      var
       q_length = Int_uniqueue[5].call(null, unload_queue),
       _nR_ = symbol$6(q_length, max_items);
      if(_nR_){
       if(q_length >= max_items){
        var for$0 = max_items;
        for(;;){
         try{unload(Int_uniqueue[4].call(null, unload_queue));}
         catch(_nV_){
          var _nT_ = caml_wrap_exception(_nV_);
          if(_nT_ !== Empty) throw caml_maybe_attach_backtrace(_nT_, 0);
         }
         var _nU_ = for$0 + 1 | 0;
         if(q_length === for$0) break;
         var for$0 = _nU_;
        }
       }
       var _nS_ = 0;
      }
      else
       var _nS_ = _nR_;
      return _nS_;
     }
     var
      to_load =
        filter
         (function(i){return Int_uniqueue[3].call(null, i, unload_queue);},
          indexes);
     load(of_list(to_load));
     return cleanup(0);
    }
    var table_height = var$0(0);
    function compute_visible_rows(last_scroll_y, div){
     function height(elt){return elt["offsetHeight"];}
     var
      scroll_y$0 = scroll_y(div),
      direction = symbol$8(scroll_y$0, last_scroll_y[1]) ? 759637122 : 19067;
     last_scroll_y[1] = scroll_y$0;
     var
      visible_height = height(div),
      _nO_ = ui_table[2],
      header_height = to_px([0, div])(_nO_),
      number_of_visible_rows = visible_height / header_height | 0,
      scroll_y$1 = scroll_y$0 - header_height,
      first_visible_row = (scroll_y$1 / header_height | 0) + 1 | 0,
      last_visible_row = first_visible_row + number_of_visible_rows | 0,
      bleeding =
        19067 === direction
         ? number_of_visible_rows
         : number_of_visible_rows / 2 | 0,
      _nP_ = 0,
      first =
        function(_nQ_){return max(_nP_, _nQ_);}
         (first_visible_row - bleeding | 0),
      bleeding$0 =
        759637122 === direction
         ? number_of_visible_rows
         : number_of_visible_rows / 2 | 0,
      last = last_visible_row + bleeding$0 | 0;
     return init$1(last - first | 0, function(i){return first + i | 0;});
    }
    function prepare(total, render){
     clear$2(table);
     clear$1(row_index);
     Int_uniqueue[6].call(null, unload_queue);
     var _nL_ = total - 1 | 0, _nK_ = 0;
     if(_nL_ >= 0){
      var i = _nK_;
      for(;;){
       var set = [0, i, 0, render];
       let i$0 = i;
       (function(_nN_){return add$0(row_index, i$0, _nN_);}
         (append([0, set], table)));
       var _nM_ = i + 1 | 0;
       if(_nL_ === i) break;
       var i = _nM_;
      }
     }
     return;
    }
    var
     populate_on_scroll =
       func
        (data_source,
         function(param){
          var render = param[3], fetch = param[2], total_items = param[1];
          function add$0(_nI_, _nJ_){return add(fetch, _nI_, _nJ_);}
          var last_scroll_y = [0, 0.];
          function update(div){
           var visible_rows = compute_visible_rows(last_scroll_y, div);
           return add$0([0, 4 * length(visible_rows) | 0], visible_rows);
          }
          return let$0
                  (total_items,
                   function(total_items){
                    if(0 !== total_items[0]) return function(_nH_){return 0;};
                    var total_items$0 = total_items[1];
                    prepare(total_items$0, render);
                    return update;
                   });
         }),
     scroll_handler =
       func
        (populate_on_scroll,
         function(update){
          return handler
                  (0,
                   scroll,
                   function(ev){
                    let$0
                     (update,
                      function(update){
                       var last_update = [0, 0.], timeout = [0, -1];
                       function reset_ticker(div){
                        var debouncing_interval = 25, now = now_ms(performance);
                        if(symbol$7(timeout[1], 0)) stop_timer(timeout[1]);
                        timeout[1] =
                         set_timeout
                          (debouncing_interval,
                           function(param){return caml_call1(update, div);});
                        var
                         _nG_ = symbol$8(now - last_update[1], debouncing_interval);
                        return _nG_
                                ? (last_update[1] = now, caml_call1(update, div))
                                : _nG_;
                       }
                       function scroll_handler(div){return reset_ticker(div);}
                       var div = target(ev);
                       return scroll_handler(div);
                      });
                    return 0;
                   });
         }),
     repopulate_deps =
       map2
        (populate_on_scroll,
         get$3(table_height),
         function(a, b){return [0, a, b];}),
     root = observe$0(0, repopulate_deps);
    set_on_invalidate
     (root,
      function(param){
       var _nE_ = quick_sample(root), _nF_ = _nE_[2];
       if(! _nF_) return 0;
       var div = _nF_[1][2], update = _nE_[1];
       return await$1
               (update, function(update){return caml_call1(update, div);});
      });
    quick_sample(root);
    function make_spacer(n){
     var
      at = [0, class$1("row_spacer"), 0],
      style = style$0(caml_jsstring_of_string(height_n(n)));
     return div$0(0, [0, [0, style, at]], 0);
    }
    function render(param, _nD_){
     var
      render = _nD_[3],
      content = _nD_[2],
      index = _nD_[1],
      at = add$1(class$0, _hA_, 0),
      style = [0, 80, style$0(caml_jsstring_of_string(height$0))];
     if(! content) return [0, 1, empty$0, 0];
     var data = content[1];
     return [0,
             0,
             element
              (div$1
                (0, [0, [0, style, at]], 0, caml_call2(render, index, data))),
             0];
    }
    var
     rows =
       map_reduce$0
        (render,
         [0,
          [0, 0, empty$0, 0],
          function(param, _nB_){
           var
            q = _nB_[3],
            s = _nB_[2],
            p = _nB_[1],
            m = param[3],
            s$0 = param[2],
            n = param[1],
            match = view(s$0),
            match$0 = view(s);
           if(typeof match === "number")
            return typeof match$0 === "number"
                    ? [0, ((n + m | 0) + p | 0) + q | 0, s$0, 0]
                    : [0, (n + m | 0) + p | 0, s, q];
           if(typeof match$0 === "number")
            return [0, n, s$0, (m + p | 0) + q | 0];
           if(symbol$6(m + p | 0, 0))
            var
             spacer = pure(make_spacer(m + p | 0)),
             s$1 =
               function(_nC_){return concat$1(s$0, _nC_);}
                (concat$1(element(spacer), s));
           else
            var s$1 = concat$1(s$0, s);
           return [0, n, s$1, q];
          }],
         table),
     table_body =
       func
        (rows,
         function(param){
          var m = param[3], s = param[2], n = param[1];
          if(symbol$6(n, 0))
           var
            first_spacer = pure(make_spacer(n)),
            result = concat$1(element(first_spacer), s);
          else
           var result = s;
          if(! symbol$6(m, 0)) return result;
          var last_spacer = pure(make_spacer(m));
          return concat$1(result, element(last_spacer));
         }),
     table_header = header(ui_table),
     observer =
       create$7
        (function(entries, param){
          var
           entry = hd(entries),
           div = target$0(entry),
           rect = content_rect(entry),
           height$0 = height(rect),
           match = peek(table_height);
          if(! match) return symbol$2(table_height, [0, [0, height$0, div]]);
          var h = match[1][1];
          return symbol$5(h, height$0)
                  ? symbol$2(table_height, [0, [0, height$0, div]])
                  : 0;
         }),
     at = to_at$0(0, classes(_hB_)),
     grid_style = style$2(ui_table),
     s = style$0(caml_jsstring_of_string(grid_style)),
     at$0 = [0, [0, 80, s], at];
    function arg(_nz_, _nA_){return observe(observer, _nz_, _nA_);}
    function _nv_(eta){return arg(0, eta);}
    function _nw_(_ny_){return tee(_nv_, _ny_);}
    var
     container =
       function(_nx_){return func(_nx_, _nw_);}
        (div$1
          (0,
           [0, at$0],
           [0, [0, [0, 82, scroll_handler], 0]],
           [0, [0, 82, table_header], [0, [0, 83, lift(table_body)], 0]])),
     el =
       div$1(0, [0, to_at$0(0, classes(_hC_))], 0, [0, [0, 82, container], 0]);
    return el;
   }
   function make$6(C){
    function set(lang){return symbol$2(C[1], lang);}
    return [0, set];
   }
   var keys = create$2(0, 64);
   function check_key(key){
    return mem(keys, key)
            ? failwith(caml_call1(sprintf(_hD_), key))
            : add$0(keys, key, 0);
   }
   var local_storage = local(window);
   function store(key, value){
    return function(_nu_){return set_item(local_storage, key, _nu_);}
            (to_jstr$1(value));
   }
   function fetch$0(key){
    var match = get_item(local_storage, key);
    function _ns_(encoded_value){return of_jstr$1(encoded_value);}
    if(match) var v = match[1], _nt_ = [0, v]; else var _nt_ = _hE_;
    return symbol_bind$1(_nt_, _ns_);
   }
   function initial_value(key, f){
    var match = fetch$0(key);
    if(0 === match[0]){var v = match[1]; return v;}
    var match$0 = match[1];
    if(typeof match$0 === "number") return caml_call1(f, 0);
    var msg = match$0[2];
    warn([0, msg, 0]);
    return caml_call1(f, 0);
   }
   function make_persistent_var(key, value){
    store(key, value);
    var var$1 = var$0(value), root = observe$0(0, get$3(var$1));
    set_on_invalidate
     (root,
      function(param){
       var new_value = quick_sample(root);
       store(key, new_value);
       return 0;
      });
    quick_sample(root);
    return var$1;
   }
   function var_f(key, f){
    check_key(key);
    var key$0 = caml_jsstring_of_string(key), value = initial_value(key$0, f);
    return make_persistent_var(key$0, value);
   }
   function var$1(key, default$0){
    return var_f(key, function(param){return default$0;});
   }
   function make_handler(value, value_change_event, default_value){
    var
     var$1 = var$0(default_value),
     on_change =
       handler
        (0,
         value_change_event,
         function(ev){
          var t = target(ev), v = t[cst_value];
          return symbol$2(var$1, [0, caml_call1(value, v)]);
         });
    return [0, on_change, var$1];
   }
   function make_input
   (value,
    validate,
    d,
    opt,
    ev,
    _np_,
    value_change_event,
    pattern$0,
    type,
    default_value){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    if(_np_) var sth$0 = _np_[1], required = sth$0; else var required = 0;
    var
     type$1 = type$0(caml_jsstring_of_string(type)),
     at$0 = [0, [0, 80, type$1], at],
     at$1 =
       function(_nq_){return add_opt(pattern, pattern$0, _nq_);}
        (function(_nr_){return add_bool(required$0, required, _nr_);}(at$0)),
     validate$0 = value$3(validate, function(v){return [0, v];}),
     match = make_handler(value, value_change_event, default_value),
     value$0 = match[2],
     on_change = match[1],
     ev$0 = [0, [0, 80, on_change], to_list$2(ev)],
     elt = input$1(d, [0, at$1], [0, ev$0], 0);
    return [0, elt, value$0, validate$0];
   }
   function text_input
   (validate, d, opt, ev, required, pattern, placeholder$0, default_value){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var
     at$0 =
       function(_nn_){return add_opt(value$1, default_value, _nn_);}
        (function(_no_){return add_opt(placeholder, placeholder$0, _no_);}(at));
    return make_input
            (value$0,
             validate,
             d,
             [0, at$0],
             ev,
             required,
             keyup,
             pattern,
             _hF_,
             default_value);
   }
   function password_input
   (validate, d, opt, ev, required, pattern, placeholder$0, value){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var
     at$0 =
       function(_nm_){return add_opt(placeholder, placeholder$0, _nm_);}(at);
    return make_input
            (value$0,
             validate,
             d,
             [0, at$0],
             ev,
             required,
             keyup,
             pattern,
             _hG_,
             0);
   }
   function submit$0(d, opt, ev, text){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var at$0 = add$1(value$1, text, at);
    return make_input
            (function(_nl_){return 0;},
             0,
             d,
             [0, at$0],
             ev,
             0,
             change,
             0,
             _hH_,
             0);
   }
   function field$0(field, setter){
    return func(field, function(field){return [0, field, setter];});
   }
   function create$8(d, at, ev, Form){
    return function(on_submit){
     var
      _ne_ =
        [0,
         [0, empty$0, function(_nk_){return _nk_;}],
         function(param, _nj_){
          var f = _nj_[2], elts = _nj_[1], f$0 = param[2], elts$0 = param[1];
          return [0,
                  concat$1(elts$0, elts),
                  function(t){return caml_call1(f, caml_call1(f$0, t));}];
         }];
     function _nf_(param){
      var mapper = param[2], field = param[1];
      function value(param){
       var match = peek(field[2]);
       if(! match) return 0;
       var v = match[1];
       return caml_call1(field[3], v);
      }
      return [0,
              element(field[1]),
              function(t){
               var _ni_ = value(0);
               return caml_call1(caml_call1(mapper, t), _ni_);
              }];
     }
     var
      fields =
        function(_nh_){return fold_monoid(_nf_, _ne_, _nh_);}(lift(Form[2])),
      handler$0 =
        func
         (fields,
          function(param){
           var value = param[2];
           function on_submit$0(e){
            caml_call1(on_submit, caml_call1(value, Form[1]));
            return prevent_default(e);
           }
           return handler(0, submit, on_submit$0);
          }),
      on_submit$0 = [0, 82, handler$0],
      elts = func(fields, function(param){var elts = param[1]; return elts;}),
      ev$0 =
        map_or
         ([0, on_submit$0, 0],
          function(_ng_){return cons(on_submit$0, _ng_);},
          ev);
     return form$0(d, at, [0, ev$0], [0, [0, 83, lift(elts)], 0]);};
   }
   function name$3(id, base_name){
    return id
            ? caml_call1(sprintf(_hI_), base_name)
            : caml_call1(sprintf(_hJ_), base_name);
   }
   function make$7(t){
    var
     id = name$3(1, t[1]),
     name$0 = name$3(0, t[1]),
     var$0 = var$1(id, t[2]),
     _na_ = t[3][2];
    label$0
     (0, [0, [0, [0, 80, for$1(caml_jsstring_of_string(id))], 0]], 0, _na_);
    var
     _nb_ = [0, 80, name$0],
     at =
       function(_nc_){return add$1(type, _hK_, _nc_);}
        (function(_nd_){return add$1(name, _nb_, _nd_);}
          (add$1(id$0, [0, 80, id], 0))),
     match = peek(var$0);
    if(match)
     var
      v = match[1],
      at$0 = [0, [0, 80, value$2(caml_jsstring_of_string(v))], at];
    else
     var at$0 = at;
    var
     on_change =
       handler
        (0,
         keyup,
         function(ev){
          var t = target(ev), value = t[cst_value];
          return symbol$2(var$0, [0, value$0(value)]);
         }),
     ev = [0, [0, 80, on_change], 0],
     field =
       div$1(0, 0, 0, [0, [0, 82, input$1(0, [0, at$0], [0, ev], 0)], 0]);
    return [0, field, , get$3(var$0)];
   }
   function name$4(g, n, id, base_name){
    return id
            ? caml_call3(sprintf(_hL_), base_name, g, n)
            : caml_call3(sprintf(_hM_), base_name, g, n);
   }
   function make$8(t){
    function make_check(g, n, value, label, checked){
     var id = name$4(g, n, 1, t[1]), name$0 = name$4(g, n, 0, t[1]);
     function result(checked){return checked ? [0, value] : 0;}
     var
      var$0 = var$1(id, result(checked)),
      lbl =
        label$0
         (0,
          [0, [0, [0, 80, for$1(caml_jsstring_of_string(id))], 0]],
          0,
          label),
      _m8_ = [0, 80, name$0],
      at =
        function(_m__){return add$1(type, _hN_, _m__);}
         (function(_m$_){return add$1(name, _m8_, _m$_);}
           (add$1(id$0, [0, 80, id], 0))),
      checked$1 =
        func
         (get$3(var$0), function(param){return param ? checked$0 : void$0;}),
      at$0 = [0, [0, 82, checked$1], at],
      on_change =
        handler
         (0,
          change,
          function(ev){
           var t = target(ev), checked = t[cst_checked];
           return symbol$2(var$0, result(checked | 0));
          }),
      ev = [0, [0, 80, on_change], 0],
      _m9_ = get$3(var$0);
     return [0,
             div$1
              (0,
               0,
               0,
               [0,
                [0, 82, input$1(0, [0, at$0], [0, ev], 0)],
                [0, [0, 82, lbl], 0]]),
             _m9_];
    }
    function make_all(g, desc){
     var n = [0, 0];
     return map$5
             (function(param){
               var
                c = param[3],
                l = param[2],
                v = param[1],
                match = make_check(g, n[1], v, l, c),
                value = match[2],
                elt = match[1];
               n[1]++;
               return [0, elt, value];
              },
              desc);
    }
    var
     all = make_all(0, t[2]),
     elts = map$5(function(param){var elt = param[1]; return elt;}, all);
    function _m4_(_m7_){return _m7_;}
    var
     value =
       function(_m5_){return func(_m5_, to_list$1);}
        (function(_m6_){return filter_map$0(_m4_, _m6_);}
          (lift
            (fold_monoid
              (function(param){var v = param[2]; return element(v);},
               monoid,
               all))));
    return [0, div$1(0, 0, 0, [0, [0, 83, lift(elts)], 0]), value];
   }
   function v$6(d, opt, ev, value){
    if(opt) var sth = opt[1], at = sth; else var at = 0;
    var
     at$0 =
       function(_m3_){return add$1(value$1, value, _m3_);}
        (add$1(type, _hO_, at));
    return input$1(d, [0, at$0], ev, 0);
   }
   function handler$0(opts, type, func){return [0, opts, type, func];}
   function apply_state(state, f){return caml_call1(f, state);}
   function with_state(opt, S){
    if(opt) var sth = opt[1], base = sth; else var base = empty$2;
    return function(opt, d, at){
     if(opt) var sth = opt[1], state = sth; else var state = S[1];
     return function(ev, content){
      var v_state = var$0(state);
      function get_state(param){return get$3(v_state);}
      function set_state(t){return symbol$2(v_state, t);}
      var
       elt =
         symbol_bind
          (get_state(0),
           function(state){
            function with_state(param){
             var func = param[3], type = param[2], opts = param[1];
             function func$0(ev){
              var match = caml_call2(func, state, ev);
              if(typeof match === "number")
               return match ? set_state(caml_call1(S[2], state)) : 0;
              var s = match[1];
              return set_state(s);
             }
             return handler(opts, type, func$0);
            }
            var
             at$0 =
               map_or
                (base,
                 function(at){
                  return function(_m2_){return union$0(base, _m2_);}
                          (apply_state(state, at));
                 },
                 at),
             at$1 = to_at$0(0, at$0);
            function _mZ_(param){
             var _m1_ = param[1];
             if(82 === _m1_){
              var h = param[2];
              return [0, 82, func(h, with_state)];
             }
             if(83 <= _m1_){
              var h$0 = param[2];
              return [0, 83, map$5(with_state, h$0)];
             }
             var h$1 = param[2];
             return [0, 80, with_state(h$1)];
            }
            var
             ev$0 =
               symbol$10(function(_m0_){return symbol$9(_mZ_, _m0_);}, ev);
            return button$0(d, [0, at$1], ev$0, caml_call1(content, state));
           });
      return [0, elt, get_state, set_state];};};
   }
   function next(param){return param ? 0 : 1;}
   var Two_state = [0, 0, next];
   function two_state(base){return with_state(base, Two_state);}
   function yojson_of_string(str){return [0, -976970511, str];}
   function yojson_of_int(n){return [0, 3654863, n];}
   function yojson_of_option(yojson_of_a, param){
    if(! param) return 870828711;
    var x = param[1];
    return caml_call1(yojson_of_a, x);
   }
   function yojson_of_list(yojson_of_a, lst){
    return [0, 848054398, rev(rev_map(yojson_of_a, lst))];
   }
   var
    Of_yojson_error = [248, _hP_, caml_fresh_oo_id(0)],
    record_check_extra_fields = [0, 1];
   function of_yojson_error(what, yojson){
    throw caml_maybe_attach_backtrace
           ([0, Of_yojson_error, [0, Failure, what], yojson], 1);
   }
   function string_of_yojson(yojson){
    if(typeof yojson !== "number" && -976970511 === yojson[1]){var str = yojson[2]; return str;}
    return of_yojson_error(_hQ_, yojson);
   }
   function int_of_yojson(yojson){
    if(typeof yojson !== "number" && 3654863 === yojson[1]){var v = yojson[2]; return v;}
    return of_yojson_error(_hR_, yojson);
   }
   function option_of_yojson(a_of_yojson, yojson){
    return 870828711 === yojson ? 0 : [0, caml_call1(a_of_yojson, yojson)];
   }
   function list_of_yojson(a_of_yojson, yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var lst = yojson[2], rev_lst = rev_map(a_of_yojson, lst);
     return rev(rev_lst);
    }
    return of_yojson_error(_hS_, yojson);
   }
   function stag_no_args(loc, yojson){
    return of_yojson_error(symbol(loc, _hT_), yojson);
   }
   function nested_list_invalid_sum(loc, yojson){
    return of_yojson_error(symbol(loc, _hU_), yojson);
   }
   function empty_list_invalid_sum(loc, yojson){
    return of_yojson_error(symbol(loc, _hV_), yojson);
   }
   function unexpected_stag(loc, yojson){
    return of_yojson_error(symbol(loc, _hW_), yojson);
   }
   function record_superfluous_fields(what, loc, rev_fld_names, yojson){
    var
     fld_names_str = concat(_hX_, rev(rev_fld_names)),
     msg = caml_call3(sprintf(_hY_), loc, what, fld_names_str);
    return of_yojson_error(msg, yojson);
   }
   function record_duplicate_fields(loc, rev_fld_names, yojson){
    return record_superfluous_fields(_hZ_, loc, rev_fld_names, yojson);
   }
   function record_extra_fields(loc, rev_fld_names, yojson){
    return record_superfluous_fields(_h0_, loc, rev_fld_names, yojson);
   }
   function record_get_undefined_loop(fields, param){
    var fields$0 = fields, param$0 = param;
    for(;;){
     if(! param$0) return concat(_h1_, rev(fields$0));
     var _mY_ = param$0[1];
     if(_mY_[1])
      var
       rest = param$0[2],
       field = _mY_[2],
       fields$1 = [0, field, fields$0],
       fields$0 = fields$1,
       param$0 = rest;
     else
      var rest$0 = param$0[2], param$0 = rest$0;
    }
   }
   function record_undefined_elements(loc, yojson, lst){
    var
     undefined$0 = record_get_undefined_loop(0, lst),
     msg = caml_call2(sprintf(_h2_), loc, undefined$0);
    return of_yojson_error(msg, yojson);
   }
   function record_list_instead_atom(loc, yojson){
    var msg = symbol(loc, _h3_);
    return of_yojson_error(msg, yojson);
   }
   function symbol$14(x){return x[1];}
   function jstr_of_method(param){return param ? "POST" : "GET";}
   function user_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      name_field = [0, 0],
      server_id_field = [0, 0],
      server_name_field = [0, 0],
      id_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(caml_string_notequal(field_name, cst_Id))
           if(caml_string_notequal(field_name, cst_Name))
            if(caml_string_notequal(field_name, cst_ServerId)){
             if(! caml_string_notequal(field_name, cst_ServerName))
              if(symbol$14(server_name_field))
               duplicates[1] = [0, field_name, symbol$14(duplicates)];
              else{
               var fvalue = option_of_yojson(string_of_yojson, field_yojson);
               server_name_field[1] = [0, fvalue];
              }
            }
            else if(symbol$14(server_id_field))
             duplicates[1] = [0, field_name, symbol$14(duplicates)];
            else{
             var fvalue$0 = string_of_yojson(field_yojson);
             server_id_field[1] = [0, fvalue$0];
            }
           else if(symbol$14(name_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue$1 = string_of_yojson(field_yojson);
            name_field[1] = [0, fvalue$1];
           }
          else if(symbol$14(id_field))
           duplicates[1] = [0, field_name, symbol$14(duplicates)];
          else{
           var fvalue$2 = string_of_yojson(field_yojson);
           id_field[1] = [0, fvalue$2];
          }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc, symbol$14(extra), yojson);
     var
      match = symbol$14(name_field),
      match$0 = symbol$14(server_id_field),
      server_name_value = symbol$14(server_name_field),
      match$1 = symbol$14(id_field);
     if(match && match$0 && match$1){
      var
       id_value = match$1[1],
       server_id_value = match$0[1],
       name_value = match[1];
      if(server_name_value)
       var v = server_name_value[1], v$0 = v;
      else
       var v$0 = 0;
      return [0, name_value, server_id_value, v$0, id_value];
     }
     var
      _mW_ = [0, [0, 0 === symbol$14(id_field) ? 1 : 0, _h4_], 0],
      _mX_ = [0, [0, 0 === symbol$14(server_id_field) ? 1 : 0, _h5_], _mW_];
     return record_undefined_elements
             (tp_loc,
              yojson,
              [0, [0, 0 === symbol$14(name_field) ? 1 : 0, _h6_], _mX_]);
    }
    return record_list_instead_atom(tp_loc, yojson);
   }
   function yojson_of_user(param){
    var
     v_id = param[4],
     v_server_name = param[3],
     v_server_id = param[2],
     v_name = param[1],
     arg = yojson_of_string(v_id),
     bnds = [0, [0, _h7_, arg], 0],
     arg$0 = yojson_of_option(yojson_of_string, v_server_name),
     bnds$0 = [0, [0, _h8_, arg$0], bnds],
     arg$1 = yojson_of_string(v_server_id),
     bnds$1 = [0, [0, _h9_, arg$1], bnds$0],
     arg$2 = yojson_of_string(v_name),
     bnds$2 = [0, [0, _h__, arg$2], bnds$1];
    return [0, 963043957, bnds$2];
   }
   function params_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      username_field = [0, 0],
      pw_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(caml_string_notequal(field_name, cst_Pw))
           if(caml_string_notequal(field_name, cst_Username)){
            if(symbol$14(record_check_extra_fields))
             extra[1] = [0, field_name, symbol$14(extra)];
           }
           else if(symbol$14(username_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue = string_of_yojson(field_yojson);
            username_field[1] = [0, fvalue];
           }
          else if(symbol$14(pw_field))
           duplicates[1] = [0, field_name, symbol$14(duplicates)];
          else{
           var fvalue$0 = string_of_yojson(field_yojson);
           pw_field[1] = [0, fvalue$0];
          }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc$0, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc$0, symbol$14(extra), yojson);
     var match = symbol$14(username_field), match$0 = symbol$14(pw_field);
     if(match && match$0){
      var pw_value = match$0[1], username_value = match[1];
      return [0, username_value, pw_value];
     }
     var _mV_ = [0, [0, 0 === symbol$14(pw_field) ? 1 : 0, _h$_], 0];
     return record_undefined_elements
             (tp_loc$0,
              yojson,
              [0, [0, 0 === symbol$14(username_field) ? 1 : 0, _ia_], _mV_]);
    }
    return record_list_instead_atom(tp_loc$0, yojson);
   }
   function yojson_of_params(param){
    var
     v_pw = param[2],
     v_username = param[1],
     arg = yojson_of_string(v_pw),
     bnds = [0, [0, _ib_, arg], 0],
     arg$0 = yojson_of_string(v_username),
     bnds$0 = [0, [0, _ic_, arg$0], bnds];
    return [0, 963043957, bnds$0];
   }
   function response_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      user_field = [0, 0],
      access_token_field = [0, 0],
      server_id_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(caml_string_notequal(field_name, cst_AccessToken))
           if(caml_string_notequal(field_name, cst_ServerId)){
            if(! caml_string_notequal(field_name, cst_User))
             if(symbol$14(user_field))
              duplicates[1] = [0, field_name, symbol$14(duplicates)];
             else{
              var fvalue = user_of_yojson(field_yojson);
              user_field[1] = [0, fvalue];
             }
           }
           else if(symbol$14(server_id_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue$0 = string_of_yojson(field_yojson);
            server_id_field[1] = [0, fvalue$0];
           }
          else if(symbol$14(access_token_field))
           duplicates[1] = [0, field_name, symbol$14(duplicates)];
          else{
           var fvalue$1 = string_of_yojson(field_yojson);
           access_token_field[1] = [0, fvalue$1];
          }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc$1, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc$1, symbol$14(extra), yojson);
     var
      match = symbol$14(user_field),
      match$0 = symbol$14(access_token_field),
      match$1 = symbol$14(server_id_field);
     if(match && match$0 && match$1){
      var
       server_id_value = match$1[1],
       access_token_value = match$0[1],
       user_value = match[1];
      return [0, user_value, access_token_value, server_id_value];
     }
     var
      _mT_ = [0, [0, 0 === symbol$14(server_id_field) ? 1 : 0, _id_], 0],
      _mU_ = [0, [0, 0 === symbol$14(access_token_field) ? 1 : 0, _ie_], _mT_];
     return record_undefined_elements
             (tp_loc$1,
              yojson,
              [0, [0, 0 === symbol$14(user_field) ? 1 : 0, _if_], _mU_]);
    }
    return record_list_instead_atom(tp_loc$1, yojson);
   }
   function yojson_of_response(param){
    var
     v_server_id = param[3],
     v_access_token = param[2],
     v_user = param[1],
     arg = yojson_of_string(v_server_id),
     bnds = [0, [0, _ig_, arg], 0],
     arg$0 = yojson_of_string(v_access_token),
     bnds$0 = [0, [0, _ih_, arg$0], bnds],
     arg$1 = yojson_of_user(v_user),
     bnds$1 = [0, [0, _ii_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   function endpoint(param){return _ij_;}
   function image_blur_hash_of_yojson(y){
    var assoc = to_assoc(y);
    return map$1
            (function(param){
              var v = param[2], key = param[1];
              return [0, key, to_string$3(v)];
             },
             assoc);
   }
   function yojson_of_image_blur_hash(i){
    var
     assoc =
       map$1
        (function(param){
          var v = param[2], key = param[1];
          return [0, key, [0, -976970511, v]];
         },
         i);
    return [0, 963043957, assoc];
   }
   function image_blur_hashes_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      primary_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(! caml_string_notequal(field_name, cst_Primary))
           if(symbol$14(primary_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue = image_blur_hash_of_yojson(field_yojson);
            primary_field[1] = [0, fvalue];
           }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc$2, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc$2, symbol$14(extra), yojson);
     var primary_value = symbol$14(primary_field);
     return [0, primary_value];
    }
    return record_list_instead_atom(tp_loc$2, yojson);
   }
   function yojson_of_image_blur_hashes(param){
    var v_primary = param[1], bnds = 0;
    if(v_primary)
     var
      v = v_primary[1],
      arg = yojson_of_image_blur_hash(v),
      bnd = [0, _ik_, arg],
      bnds$0 = [0, bnd, bnds];
    else
     var bnds$0 = bnds;
    return [0, 963043957, bnds$0];
   }
   function type_of_yojson(yojson){
    if(typeof yojson !== "number" && 848054398 === yojson[1]){
     var _mP_ = yojson[2];
     if(! _mP_) return empty_list_invalid_sum(tp_loc$3, yojson);
     var _mQ_ = _mP_[1];
     if(typeof _mQ_ !== "number"){
      var _mR_ = _mQ_[1];
      if(-976970511 === _mR_){
       var
        _mS_ = _mQ_[2],
        switch$0 = caml_string_compare(_mS_, cst_MusicGenre);
       if(0 <= switch$0){
        if(0 >= switch$0)
         return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 18;
        var switch$1 = caml_string_compare(_mS_, cst_Series);
        if(0 <= switch$1){
         if(0 >= switch$1)
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 28;
         if(! caml_string_notequal(_mS_, cst_Studio))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 29;
         if(! caml_string_notequal(_mS_, cst_Trailer))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 30;
         if(! caml_string_notequal(_mS_, cst_TvChannel))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 31;
         if(! caml_string_notequal(_mS_, cst_TvProgram))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 32;
         if(! caml_string_notequal(_mS_, cst_UserRootFolder))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 33;
         if(! caml_string_notequal(_mS_, cst_UserView))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 34;
         if(! caml_string_notequal(_mS_, cst_Video))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 35;
         if(! caml_string_notequal(_mS_, cst_Year))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 36;
        }
        else{
         if(! caml_string_notequal(_mS_, cst_MusicVideo))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 19;
         if(! caml_string_notequal(_mS_, cst_Person))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 20;
         if(! caml_string_notequal(_mS_, cst_Photo))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 21;
         if(! caml_string_notequal(_mS_, cst_PhotoAlbum))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 22;
         if(! caml_string_notequal(_mS_, cst_Playlist))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 23;
         if(! caml_string_notequal(_mS_, cst_PlaylistsFolder))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 24;
         if(! caml_string_notequal(_mS_, cst_Program))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 25;
         if(! caml_string_notequal(_mS_, cst_Recording))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 26;
         if(! caml_string_notequal(_mS_, cst_Season))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 27;
        }
       }
       else{
        var switch$2 = caml_string_compare(_mS_, cst_Episode);
        if(0 <= switch$2){
         if(0 >= switch$2)
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 9;
         if(! caml_string_notequal(_mS_, cst_Folder))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 10;
         if(! caml_string_notequal(_mS_, cst_Genre))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 11;
         if(! caml_string_notequal(_mS_, cst_LiveTvChannel))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 12;
         if(! caml_string_notequal(_mS_, cst_LiveTvProgram))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 13;
         if(! caml_string_notequal(_mS_, cst_ManualPlaylistsFolder))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 14;
         if(! caml_string_notequal(_mS_, cst_Movie))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 15;
         if(! caml_string_notequal(_mS_, cst_MusicAlbum))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 16;
         if(! caml_string_notequal(_mS_, cst_MusicArtist))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 17;
        }
        else{
         if(! caml_string_notequal(_mS_, cst_AggregateFolder))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 0;
         if(! caml_string_notequal(_mS_, cst_Audio))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 1;
         if(! caml_string_notequal(_mS_, cst_AudioBook))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 2;
         if(! caml_string_notequal(_mS_, cst_BasePluginFolder))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 3;
         if(! caml_string_notequal(_mS_, cst_Book))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 4;
         if(! caml_string_notequal(_mS_, cst_BoxSet))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 5;
         if(! caml_string_notequal(_mS_, cst_Channel))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 6;
         if(! caml_string_notequal(_mS_, cst_ChannelFolderItem))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 7;
         if(! caml_string_notequal(_mS_, cst_CollectionFolder))
          return _mP_[2] ? stag_no_args(tp_loc$3, yojson) : 8;
        }
       }
      }
      else if(848054398 === _mR_)
       return nested_list_invalid_sum(tp_loc$3, yojson);
     }
    }
    return unexpected_stag(tp_loc$3, yojson);
   }
   function yojson_of_type(param){
    switch(param){
      case 0:
       return _il_;
      case 1:
       return _im_;
      case 2:
       return _in_;
      case 3:
       return _io_;
      case 4:
       return _ip_;
      case 5:
       return _iq_;
      case 6:
       return _ir_;
      case 7:
       return _is_;
      case 8:
       return _it_;
      case 9:
       return _iu_;
      case 10:
       return _iv_;
      case 11:
       return _iw_;
      case 12:
       return _ix_;
      case 13:
       return _iy_;
      case 14:
       return _iz_;
      case 15:
       return _iA_;
      case 16:
       return _iB_;
      case 17:
       return _iC_;
      case 18:
       return _iD_;
      case 19:
       return _iE_;
      case 20:
       return _iF_;
      case 21:
       return _iG_;
      case 22:
       return _iH_;
      case 23:
       return _iI_;
      case 24:
       return _iJ_;
      case 25:
       return _iK_;
      case 26:
       return _iL_;
      case 27:
       return _iM_;
      case 28:
       return _iN_;
      case 29:
       return _iO_;
      case 30:
       return _iP_;
      case 31:
       return _iQ_;
      case 32:
       return _iR_;
      case 33:
       return _iS_;
      case 34:
       return _iT_;
      case 35:
       return _iU_;
      default: return _iV_;
    }
   }
   function type_str_of_yojson(j){
    var s = to_string$3(j);
    return type_of_yojson([0, 848054398, [0, [0, -976970511, s], 0]]);
   }
   function yojson_of_type_str(ts){
    var match = yojson_of_type(ts);
    if(typeof match !== "number" && 848054398 === match[1]){
     var _mO_ = match[2];
     if(_mO_ && ! _mO_[2]){var json = _mO_[1]; return json;}
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _iW_], 1);
   }
   function t_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      name_field = [0, 0],
      sort_name_field = [0, 0],
      id_field = [0, 0],
      path_field = [0, 0],
      album_id_field = [0, 0],
      parent_id_field = [0, 0],
      server_id_field = [0, 0],
      image_blur_hashes_field = [0, 0],
      type_field = [0, 0],
      collection_type_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1],
           switch$0 = caml_string_compare(field_name, cst_ParentId);
          a:
          b:
          {
           if(0 <= switch$0)
            if(0 < switch$0)
             if(caml_string_notequal(field_name, cst_Path))
              if(caml_string_notequal(field_name, cst_ServerId))
               if(caml_string_notequal(field_name, cst_SortName)){
                if(caml_string_notequal(field_name, cst_Type)) break b;
                if(symbol$14(type_field))
                 duplicates[1] = [0, field_name, symbol$14(duplicates)];
                else{
                 var fvalue = type_str_of_yojson(field_yojson);
                 type_field[1] = [0, fvalue];
                }
               }
               else if(symbol$14(sort_name_field))
                duplicates[1] = [0, field_name, symbol$14(duplicates)];
               else{
                var fvalue$0 = string_of_yojson(field_yojson);
                sort_name_field[1] = [0, fvalue$0];
               }
              else if(symbol$14(server_id_field))
               duplicates[1] = [0, field_name, symbol$14(duplicates)];
              else{
               var fvalue$1 = string_of_yojson(field_yojson);
               server_id_field[1] = [0, fvalue$1];
              }
             else if(symbol$14(path_field))
              duplicates[1] = [0, field_name, symbol$14(duplicates)];
             else{
              var fvalue$2 = string_of_yojson(field_yojson);
              path_field[1] = [0, fvalue$2];
             }
            else if(symbol$14(parent_id_field))
             duplicates[1] = [0, field_name, symbol$14(duplicates)];
            else{
             var fvalue$3 = option_of_yojson(string_of_yojson, field_yojson);
             parent_id_field[1] = [0, fvalue$3];
            }
           else if(caml_string_notequal(field_name, cst_AlbumId))
            if(caml_string_notequal(field_name, cst_CollectionType))
             if(caml_string_notequal(field_name, cst_Id))
              if(caml_string_notequal(field_name, cst_ImageBlurHashes)){
               if(caml_string_notequal(field_name, cst_Name)) break b;
               if(symbol$14(name_field))
                duplicates[1] = [0, field_name, symbol$14(duplicates)];
               else{
                var fvalue$4 = string_of_yojson(field_yojson);
                name_field[1] = [0, fvalue$4];
               }
              }
              else if(symbol$14(image_blur_hashes_field))
               duplicates[1] = [0, field_name, symbol$14(duplicates)];
              else{
               var fvalue$5 = image_blur_hashes_of_yojson(field_yojson);
               image_blur_hashes_field[1] = [0, fvalue$5];
              }
             else if(symbol$14(id_field))
              duplicates[1] = [0, field_name, symbol$14(duplicates)];
             else{
              var fvalue$6 = string_of_yojson(field_yojson);
              id_field[1] = [0, fvalue$6];
             }
            else if(symbol$14(collection_type_field))
             duplicates[1] = [0, field_name, symbol$14(duplicates)];
            else{
             var fvalue$7 = option_of_yojson(string_of_yojson, field_yojson);
             collection_type_field[1] = [0, fvalue$7];
            }
           else if(symbol$14(album_id_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue$8 = string_of_yojson(field_yojson);
            album_id_field[1] = [0, fvalue$8];
           }
           break a;
          }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc$4, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc$4, symbol$14(extra), yojson);
     var
      match = symbol$14(name_field),
      sort_name_value = symbol$14(sort_name_field),
      match$0 = symbol$14(id_field),
      path_value = symbol$14(path_field),
      album_id_value = symbol$14(album_id_field),
      parent_id_value = symbol$14(parent_id_field),
      match$1 = symbol$14(server_id_field),
      match$2 = symbol$14(image_blur_hashes_field),
      match$3 = symbol$14(type_field),
      collection_type_value = symbol$14(collection_type_field);
     if(match && match$0 && match$1 && match$2 && match$3){
      var
       type_value = match$3[1],
       image_blur_hashes_value = match$2[1],
       server_id_value = match$1[1],
       id_value = match$0[1],
       name_value = match[1];
      if(collection_type_value)
       var v = collection_type_value[1], v$0 = v;
      else
       var v$0 = 0;
      return [0,
              name_value,
              sort_name_value,
              id_value,
              path_value,
              album_id_value,
              parent_id_value,
              server_id_value,
              image_blur_hashes_value,
              type_value,
              v$0];
     }
     var
      _mK_ = [0, [0, 0 === symbol$14(type_field) ? 1 : 0, _iX_], 0],
      _mL_ =
        [0, [0, 0 === symbol$14(image_blur_hashes_field) ? 1 : 0, _iY_], _mK_],
      _mM_ = [0, [0, 0 === symbol$14(server_id_field) ? 1 : 0, _iZ_], _mL_],
      _mN_ = [0, [0, 0 === symbol$14(id_field) ? 1 : 0, _i0_], _mM_];
     return record_undefined_elements
             (tp_loc$4,
              yojson,
              [0, [0, 0 === symbol$14(name_field) ? 1 : 0, _i1_], _mN_]);
    }
    return record_list_instead_atom(tp_loc$4, yojson);
   }
   function yojson_of_t(param){
    var
     v_collection_type = param[10],
     v_type = param[9],
     v_image_blur_hashes = param[8],
     v_server_id = param[7],
     v_parent_id = param[6],
     v_album_id = param[5],
     v_path = param[4],
     v_id = param[3],
     v_sort_name = param[2],
     v_name = param[1],
     bnds = 0;
    if(0 === v_collection_type)
     var bnds$0 = bnds;
    else
     var
      arg$8 =
        function(_mJ_){return yojson_of_option(yojson_of_string, _mJ_);}
         (v_collection_type),
      bnd$3 = [0, _i$_, arg$8],
      bnds$0 = [0, bnd$3, bnds];
    var
     arg = yojson_of_type_str(v_type),
     bnds$1 = [0, [0, _i2_, arg], bnds$0],
     arg$0 = yojson_of_image_blur_hashes(v_image_blur_hashes),
     bnds$2 = [0, [0, _i3_, arg$0], bnds$1],
     arg$1 = yojson_of_string(v_server_id),
     bnds$3 = [0, [0, _i4_, arg$1], bnds$2];
    if(v_parent_id)
     var
      v = v_parent_id[1],
      arg$2 = yojson_of_option(yojson_of_string, v),
      bnd = [0, _i5_, arg$2],
      bnds$4 = [0, bnd, bnds$3];
    else
     var bnds$4 = bnds$3;
    if(v_album_id)
     var
      v$0 = v_album_id[1],
      arg$3 = yojson_of_string(v$0),
      bnd$0 = [0, _i6_, arg$3],
      bnds$5 = [0, bnd$0, bnds$4];
    else
     var bnds$5 = bnds$4;
    if(v_path)
     var
      v$1 = v_path[1],
      arg$4 = yojson_of_string(v$1),
      bnd$1 = [0, _i7_, arg$4],
      bnds$6 = [0, bnd$1, bnds$5];
    else
     var bnds$6 = bnds$5;
    var
     arg$5 = yojson_of_string(v_id),
     bnds$7 = [0, [0, _i8_, arg$5], bnds$6];
    if(v_sort_name)
     var
      v$2 = v_sort_name[1],
      arg$6 = yojson_of_string(v$2),
      bnd$2 = [0, _i9_, arg$6],
      bnds$8 = [0, bnd$2, bnds$7];
    else
     var bnds$8 = bnds$7;
    var
     arg$7 = yojson_of_string(v_name),
     bnds$9 = [0, [0, _i__, arg$7], bnds$8];
    return [0, 963043957, bnds$9];
   }
   function virtual_folder_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      name_field = [0, 0],
      locations_field = [0, 0],
      item_id_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(caml_string_notequal(field_name, cst_ItemId))
           if(caml_string_notequal(field_name, cst_Locations)){
            if(! caml_string_notequal(field_name, cst_Name))
             if(symbol$14(name_field))
              duplicates[1] = [0, field_name, symbol$14(duplicates)];
             else{
              var fvalue = string_of_yojson(field_yojson);
              name_field[1] = [0, fvalue];
             }
           }
           else if(symbol$14(locations_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue$0 = list_of_yojson(string_of_yojson, field_yojson);
            locations_field[1] = [0, fvalue$0];
           }
          else if(symbol$14(item_id_field))
           duplicates[1] = [0, field_name, symbol$14(duplicates)];
          else{
           var fvalue$1 = string_of_yojson(field_yojson);
           item_id_field[1] = [0, fvalue$1];
          }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc$5, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc$5, symbol$14(extra), yojson);
     var
      match = symbol$14(name_field),
      match$0 = symbol$14(locations_field),
      match$1 = symbol$14(item_id_field);
     if(match && match$0 && match$1){
      var
       item_id_value = match$1[1],
       locations_value = match$0[1],
       name_value = match[1];
      return [0, name_value, locations_value, item_id_value];
     }
     var
      _mH_ = [0, [0, 0 === symbol$14(item_id_field) ? 1 : 0, _ja_], 0],
      _mI_ = [0, [0, 0 === symbol$14(locations_field) ? 1 : 0, _jb_], _mH_];
     return record_undefined_elements
             (tp_loc$5,
              yojson,
              [0, [0, 0 === symbol$14(name_field) ? 1 : 0, _jc_], _mI_]);
    }
    return record_list_instead_atom(tp_loc$5, yojson);
   }
   function yojson_of_virtual_folder(param){
    var
     v_item_id = param[3],
     v_locations = param[2],
     v_name = param[1],
     arg = yojson_of_string(v_item_id),
     bnds = [0, [0, _jd_, arg], 0],
     arg$0 = yojson_of_list(yojson_of_string, v_locations),
     bnds$0 = [0, [0, _je_, arg$0], bnds],
     arg$1 = yojson_of_string(v_name),
     bnds$1 = [0, [0, _jf_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   function authorization(token, param){
    if(token)
     var t = token[1], token$0 = caml_call1(sprintf(_jg_), t);
    else
     var token$0 = _jj_;
    return caml_call2(sprintf(_ji_), _jh_, token$0);
   }
   function request$1(base_url, token, headers, Q){
    return function(params, path_params){
     var
      _mE_ = caml_jsstring_of_string(caml_call1(Q[6], path_params)),
      uri =
        get_ok
         (of_jstr
           (map
             (function(_mG_){return caml_jsstring_of_string(_mG_);}, base_url),
            _mE_)),
      authorization$0 = authorization(token, 0),
      headers$0 =
        of_assoc
         (headers,
          [0,
           [0, "content-type", "text/json"],
           [0,
            [0,
             "X-Emby-Authorization",
             caml_jsstring_of_string(authorization$0)],
            0]]),
      method = jstr_of_method(Q[5]);
     if(Q[5])
      var
       body =
         of_jstr$0
          (caml_jsstring_of_string
            (to_string$4(0, 0, 0, caml_call1(Q[1], params)))),
       url = to_jstr$0(uri),
       url$0 = url,
       init =
         init$0
          ([0, body],
           0,
           0,
           [0, headers$0],
           0,
           0,
           [0, method],
           0,
           0,
           0,
           0,
           0,
           0);
     else
      var
       params$0 =
         of_obj
          (get_ok
            (decode
              (caml_jsstring_of_string
                (to_string$4(0, 0, 0, caml_call1(Q[1], params)))))),
       uri_with_params = with_query_params(uri, params$0),
       url$1 = to_jstr$0(uri_with_params),
       init$1 =
         init$0(0, 0, 0, [0, headers$0], 0, 0, [0, method], 0, 0, 0, 0, 0, 0),
       url$0 = url$1,
       init = init$1;
     return let$1
             (request$0(v$3([0, init], url$0)),
              function(res){
               return let$2
                       (text(res),
                        function(json){
                         var
                          yojson =
                            from_string$0(0, 0, 0, caml_string_of_jsstring(json));
                         try{var _mF_ = caml_call1(Q[4], yojson); return _mF_;}
                         catch(e$0){
                          var e = caml_wrap_exception(e$0);
                          log([0, _jk_, [0, json, 0]]);
                          log([0, e, 0]);
                          throw caml_maybe_attach_backtrace(e, 0);
                         }
                        });
              });};
   }
   var method = 1;
   function connect(credentials){
    var
     password = credentials[3],
     username = credentials[2],
     base_url = credentials[1],
     auth = [0, username, password];
    return let$2
            (request$1
               ([0, base_url],
                0,
                0,
                [0,
                 yojson_of_params,
                 params_of_yojson,
                 yojson_of_response,
                 response_of_yojson,
                 method,
                 endpoint])
              (auth, 0),
             function(auth_response){return [0, base_url, auth_response];});
   }
   function tag_of(obj){
    return is_block(obj) ? [0, caml_obj_tag(obj)] : [1, obj];
   }
   function Make$7(Q){
    function Start_client(P){
     var
      futures = create$2(0, 64),
      listeners = create$2(0, 64),
      worker = create$6(0, caml_jsstring_of_string(P[1]));
     function query(query){
      var
       uuid = to_string$5(0, new_uuid_v4(0)),
       match = create$5(0),
       set = match[2],
       fut = match[1];
      function set$0(jv){return set(of_jv$0(jv));}
      var query$0 = to_jstr$1([0, uuid, query]);
      post(0, worker, query$0);
      add$0(futures, uuid, set$0);
      return fut;
     }
     function listen$0(event, f){
      to_string$5(0, new_uuid_v4(0));
      function set(jv){return caml_call1(f, jv);}
      add$0(listeners, tag_of(event), set);
      return;
     }
     function on_message(ev){
      symbol$13
       (of_jstr$1(data(ev)),
        function(message){
         if(0 === message[0]){
          var
           match = message[1],
           data = match[2],
           uuid = match[1],
           f = find(futures, uuid);
          remove(futures, uuid);
          return caml_call1(f, data);
         }
         var match$0 = message[1], v = match$0[2], e = match$0[1];
         function _mC_(f){return caml_call1(f, v);}
         return function(_mD_){return iter(_mC_, _mD_);}
                 (find_all$0(listeners, tag_of(e)));
        });
      return 0;
     }
     var _mA_ = 0;
     (function(_mB_){return listen(_mA_, message, on_message, _mB_);}(worker));
     return [0, , , , query, listen$0];
    }
    function Make_worker(W){
     var W$0 = caml_call1(W, [0]);
     function on_message(ev){
      symbol$13
       (of_jstr$1(data(ev)),
        function(param){
         var data = param[2], uuid = param[1];
         return let$2
                 (caml_call1(W$0[1], data),
                  function(result){
                   var data = to_jstr$1(result);
                   return post$0(0, to_jstr$1([0, [0, uuid, data]]));
                  });
        });
      return 0;
     }
     listen(0, message, on_message, global);
     return;
    }
    return [0, Start_client, , Make_worker];
   }
   function _jl_(_mw_){
    var _mx_ = Make$7(_mw_)[1];
    return [0,
            function(_my_){
             var _mz_ = _mx_(_my_);
             return [0, , _mz_[4], _mz_[5]];
            }];
   }
   function item_count(t){return t[5] - t[4] | 0;}
   function req(kind, opt, _mv_, _mu_, param){
    if(opt) var sth = opt[1], src_views = sth; else var src_views = 0;
    if(_mv_) var sth$0 = _mv_[1], sort = sth$0; else var sort = _jm_;
    if(_mu_) var sth$1 = _mu_[1], filters = sth$1; else var filters = 0;
    return [0, kind, src_views, sort, filters];
   }
   function t_to_jv(encoder, t){
    return get_exn
            (decode
              (caml_jsstring_of_string
                (to_string$4(0, 0, 0, caml_call1(encoder, t)))));
   }
   function jv_to_t(decoder, j){
    var json = encode(j);
    return [0,
            caml_call1
             (decoder, from_string$0(0, 0, 0, caml_string_of_jsstring(json)))];
   }
   function t_of_yojson$0(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      id_field = [0, 0],
      item_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(caml_string_notequal(field_name, cst_id))
           if(caml_string_notequal(field_name, cst_item)){
            if(symbol$14(record_check_extra_fields))
             extra[1] = [0, field_name, symbol$14(extra)];
           }
           else if(symbol$14(item_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue = option_of_yojson(string_of_yojson, field_yojson);
            item_field[1] = [0, fvalue];
           }
          else if(symbol$14(id_field))
           duplicates[1] = [0, field_name, symbol$14(duplicates)];
          else{
           var fvalue$0 = int_of_yojson(field_yojson);
           id_field[1] = [0, fvalue$0];
          }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc$6, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc$6, symbol$14(extra), yojson);
     var match = symbol$14(id_field), match$0 = symbol$14(item_field);
     if(match && match$0){
      var item_value = match$0[1], id_value = match[1];
      return [0, id_value, item_value];
     }
     var _mt_ = [0, [0, 0 === symbol$14(item_field) ? 1 : 0, _jn_], 0];
     return record_undefined_elements
             (tp_loc$6,
              yojson,
              [0, [0, 0 === symbol$14(id_field) ? 1 : 0, _jo_], _mt_]);
    }
    return record_list_instead_atom(tp_loc$6, yojson);
   }
   function yojson_of_t$0(param){
    var
     v_item = param[2],
     v_id = param[1],
     arg = yojson_of_option(yojson_of_string, v_item),
     bnds = [0, [0, _jp_, arg], 0],
     arg$0 = yojson_of_int(v_id),
     bnds$0 = [0, [0, _jq_, arg$0], bnds];
    return [0, 963043957, bnds$0];
   }
   function to_jv$1(k){return k;}
   function of_jv$1(j){return j;}
   function to_jv$2(t){return t_to_jv(yojson_of_t$0, t);}
   function of_jv$2(j){return get_exn(jv_to_t(t_of_yojson$0, j));}
   function get_key(t){return t[1];}
   function sorts_of_yojson(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      date_added_field = [0, 0],
      views_field = [0, 0],
      sort_name_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(caml_string_notequal(field_name, cst_date_added))
           if(caml_string_notequal(field_name, cst_sort_name))
            if(caml_string_notequal(field_name, cst_views)){
             if(symbol$14(record_check_extra_fields))
              extra[1] = [0, field_name, symbol$14(extra)];
            }
            else if(symbol$14(views_field))
             duplicates[1] = [0, field_name, symbol$14(duplicates)];
            else{
             var fvalue = list_of_yojson(string_of_yojson, field_yojson);
             views_field[1] = [0, fvalue];
            }
           else if(symbol$14(sort_name_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue$0 = string_of_yojson(field_yojson);
            sort_name_field[1] = [0, fvalue$0];
           }
          else if(symbol$14(date_added_field))
           duplicates[1] = [0, field_name, symbol$14(duplicates)];
          else{
           var fvalue$1 = int_of_yojson(field_yojson);
           date_added_field[1] = [0, fvalue$1];
          }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc$7, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc$7, symbol$14(extra), yojson);
     var
      match = symbol$14(date_added_field),
      match$0 = symbol$14(views_field),
      match$1 = symbol$14(sort_name_field);
     if(match && match$0 && match$1){
      var
       sort_name_value = match$1[1],
       views_value = match$0[1],
       date_added_value = match[1];
      return [0, date_added_value, views_value, sort_name_value];
     }
     var
      _mr_ = [0, [0, 0 === symbol$14(sort_name_field) ? 1 : 0, _jr_], 0],
      _ms_ = [0, [0, 0 === symbol$14(views_field) ? 1 : 0, _js_], _mr_];
     return record_undefined_elements
             (tp_loc$7,
              yojson,
              [0, [0, 0 === symbol$14(date_added_field) ? 1 : 0, _jt_], _ms_]);
    }
    return record_list_instead_atom(tp_loc$7, yojson);
   }
   function yojson_of_sorts(param){
    var
     v_sort_name = param[3],
     v_views = param[2],
     v_date_added = param[1],
     arg = yojson_of_string(v_sort_name),
     bnds = [0, [0, _ju_, arg], 0],
     arg$0 = yojson_of_list(yojson_of_string, v_views),
     bnds$0 = [0, [0, _jv_, arg$0], bnds],
     arg$1 = yojson_of_int(v_date_added),
     bnds$1 = [0, [0, _jw_, arg$1], bnds$0];
    return [0, 963043957, bnds$1];
   }
   function t_of_yojson$1(yojson){
    if(typeof yojson !== "number" && 963043957 === yojson[1]){
     var
      field_yojsons = yojson[2],
      sorts_field = [0, 0],
      item_field = [0, 0],
      duplicates = [0, 0],
      extra = [0, 0],
      iter =
        function(param){
         var param$0 = param;
         for(;;){
          if(! param$0) return;
          var
           tail = param$0[2],
           match = param$0[1],
           field_yojson = match[2],
           field_name = match[1];
          if(caml_string_notequal(field_name, cst_item))
           if(caml_string_notequal(field_name, cst_sorts)){
            if(symbol$14(record_check_extra_fields))
             extra[1] = [0, field_name, symbol$14(extra)];
           }
           else if(symbol$14(sorts_field))
            duplicates[1] = [0, field_name, symbol$14(duplicates)];
           else{
            var fvalue = sorts_of_yojson(field_yojson);
            sorts_field[1] = [0, fvalue];
           }
          else if(symbol$14(item_field))
           duplicates[1] = [0, field_name, symbol$14(duplicates)];
          else{
           var fvalue$0 = t_of_yojson(field_yojson);
           item_field[1] = [0, fvalue$0];
          }
          var param$0 = tail;
         }
        };
     iter(field_yojsons);
     if(symbol$14(duplicates))
      return record_duplicate_fields(tp_loc$8, symbol$14(duplicates), yojson);
     if(symbol$14(extra))
      return record_extra_fields(tp_loc$8, symbol$14(extra), yojson);
     var match = symbol$14(sorts_field), match$0 = symbol$14(item_field);
     if(match && match$0){
      var item_value = match$0[1], sorts_value = match[1];
      return [0, sorts_value, item_value];
     }
     var _mq_ = [0, [0, 0 === symbol$14(item_field) ? 1 : 0, _jx_], 0];
     return record_undefined_elements
             (tp_loc$8,
              yojson,
              [0, [0, 0 === symbol$14(sorts_field) ? 1 : 0, _jy_], _mq_]);
    }
    return record_list_instead_atom(tp_loc$8, yojson);
   }
   function yojson_of_t$1(param){
    var
     v_item = param[2],
     v_sorts = param[1],
     arg = yojson_of_t(v_item),
     bnds = [0, [0, _jz_, arg], 0],
     arg$0 = yojson_of_sorts(v_sorts),
     bnds$0 = [0, [0, _jA_, arg$0], bnds];
    return [0, 963043957, bnds$0];
   }
   function compare$2(t$0, t){return compare$0(t$0[1][3], t[1][3]);}
   function to_jv$3(param){
    var
     views = param[3],
     sort_name = param[2],
     id = param[1],
     id$0 = _cN_(id),
     sort_name$0 = _cN_(sort_name),
     views$0 = of_list$0(_cN_, views);
    return caml_js_from_array([0, id$0, sort_name$0, views$0]);
   }
   function of_jv$3(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(3 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _jB_], 1);
    var
     id = match[1],
     sort_name = match[2],
     views = match[3],
     id$0 = value$0(id),
     sort_name$0 = value$0(sort_name),
     views$0 = to_list$0(value$0, views);
    return [0, id$0, sort_name$0, views$0];
   }
   var path$0 = [1, [0, _jE_, _jD_, _jC_]];
   function to_jv$4(k){return k;}
   function of_jv$4(j){return j;}
   function to_jv$5(k){return _cN_(k);}
   function of_jv$5(j){return value$0(j);}
   function to_jv$6(k){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _jF_], 1);
   }
   function of_jv$6(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(2 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _jG_], 1);
    var type = match[1], views = match[2], _mp_ = to_list$0(value$0, views);
    return [0, value$0(type), _mp_];
   }
   var path$3 = [1, [0, _jI_, _jH_]];
   function to_jv$7(t){
    throw caml_maybe_attach_backtrace([0, Assert_failure, _jJ_], 1);
   }
   function of_jv$7(j){
    var match = caml_js_to_array(j), len = match.length - 1;
    if(2 !== len)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _jK_], 1);
    var
     collection_type = match[1],
     sort_name = match[2],
     _mo_ = value$0(sort_name);
    return [0, value$0(collection_type), _mo_];
   }
   var path$4 = [1, [0, _jM_, _jL_]];
   function to_jv$8(t){return t_to_jv(yojson_of_t$1, t);}
   function of_jv$8(j){return get_exn(jv_to_t(t_of_yojson$1, j));}
   function get_key$0(t){return [0, t[1][3], t[2][3], t[1][2]];}
   function to_jv$9(k){return _cN_(k);}
   function of_jv$9(j){return value$0(j);}
   function to_jv$10(t){return t_to_jv(yojson_of_virtual_folder, t);}
   function of_jv$10(j){return get_exn(jv_to_t(virtual_folder_of_yojson, j));}
   function get_key$1(t){return t[3];}
   var
    Orderred_items_store =
      _di_
       ([0, [0, path, to_jv$1, of_jv$1], name$5, to_jv$2, of_jv$2, get_key]),
    Items_store =
      _di_
       ([0,
         [0, path$0, to_jv$3, of_jv$3],
         name$6,
         to_jv$8,
         of_jv$8,
         get_key$0]),
    Virtual_folder_store =
      _di_
       ([0,
         [0, path$5, to_jv$9, of_jv$9],
         name$7,
         to_jv$10,
         of_jv$10,
         get_key$1]),
    _jN_ =
      [0, [0, path$0, to_jv$3, of_jv$3], name$6, to_jv$8, of_jv$8, get_key$0],
    _jO_ = [0, name$8];
   function _jP_(_mm_, _mn_){return _dj_(_jO_, _mm_, _mn_);}
   var
    ItemsByDateAdded =
      function(_ml_){return _jP_(_jN_, _ml_);}([0, path$1, to_jv$4, of_jv$4]),
    _jQ_ =
      [0, [0, path$0, to_jv$3, of_jv$3], name$6, to_jv$8, of_jv$8, get_key$0],
    _jR_ = [0, name$9];
   function _jS_(_mj_, _mk_){return _dj_(_jR_, _mj_, _mk_);}
   var
    ItemsByViewAndKind =
      function(_mi_){return _jS_(_jQ_, _mi_);}([0, path$3, to_jv$6, of_jv$6]),
    _jT_ =
      [0, [0, path$0, to_jv$3, of_jv$3], name$6, to_jv$8, of_jv$8, get_key$0],
    _jU_ = [0, name$10];
   function _jV_(_mg_, _mh_){return _dj_(_jU_, _mg_, _mh_);}
   var
    ItemsById =
      function(_mf_){return _jV_(_jT_, _mf_);}([0, path$2, to_jv$5, of_jv$5]),
    _jW_ =
      [0, [0, path$0, to_jv$3, of_jv$3], name$6, to_jv$8, of_jv$8, get_key$0],
    _jX_ = [0, name$11];
   function _jY_(_md_, _me_){return _dj_(_jX_, _md_, _me_);}
   var
    ItemsByTypeAndName =
      function(_mc_){return _jY_(_jW_, _mc_);}([0, path$4, to_jv$7, of_jv$7]),
    Queries = [0],
    include$1 = _jl_(Queries),
    Start_client = include$1[1];
   function on_upgrade_needed$0(e, q){
    var new_version$0 = new_version(e), old_version$0 = old_version(e);
    info([0, _j0_, [0, old_version$0, [0, _jZ_, [0, new_version$0, 0]]]]);
    var
     db = result(q),
     list =
       create_object_store
         ([0, function(_mb_){return _mb_;}, Orderred_items_store[1]])
        (_j1_, db),
     items =
       create_object_store([0, function(_ma_){return _ma_;}, Items_store[1]])
        (_j2_, db),
     virtual_folders =
       create_object_store
         ([0, function(_l$_){return _l$_;}, Virtual_folder_store[1]])
        (_j3_, db),
     index_date_added =
       caml_call1
        (Items_store[12].call
          (null,
           [0,
            function(_l__){return _l__;},
            ItemsByDateAdded[12],
            ItemsByDateAdded[2]]),
         items);
    caml_call1
     (Items_store[12].call
       (null,
        [0,
         function(_l9_){return _l9_;},
         ItemsByTypeAndName[12],
         ItemsByTypeAndName[2]]),
      items);
    caml_call1
     (Items_store[12].call
       (null,
        [0,
         function(_l8_){return _l8_;},
         ItemsByViewAndKind[12],
         ItemsByViewAndKind[2]]),
      items);
    caml_call1
     (Items_store[12].call
       (null, [0, function(_l7_){return _l7_;}, ItemsById[12], ItemsById[2]]),
      items);
    return info
            ([0,
              _j4_,
              [0,
               list,
               [0, items, [0, index_date_added, [0, virtual_folders, 0]]]]]);
   }
   function with_idb(version, name, f){
    function f$0(ev, dbr){var db = result(dbr); return caml_call1(f, db);}
    (function(_l4_){return on_success(f$0, _l4_);}
      (function(_l5_){return on_upgrade_needed(on_upgrade_needed$0, _l5_);}
        (function(_l6_){return open(name, version, _l6_);}(get_factory(0, 0)))));
    return 0;
   }
   function Make$8(K, V){return;}
   function _j5_(_l3_, _l2_){Make$8(_l3_, _l2_); return;}
   var _j6_ = [0, compare$0];
   function MMap(_l1_){return _j5_(_j6_, _l1_);}
   MMap([0, compare$2]);
   var active = var$0(0);
   function get$6(lang, string){
    return function(_l0_){return value(_l0_, string);}
            (assoc_opt([0, lang, string], strings));
   }
   var
    Config = [0, active, get$6],
    set$1 = make$6(Config)[1],
    include$2 = Start_client([0, url$0]),
    query = include$2[2],
    listen$1 = include$2[3],
    connexions = var$1(_j7_, empty$0);
   function connect$0(param){
    var
     match = param[2],
     refresh = match[3],
     status = match[2],
     connexion = match[1],
     server_id = param[1];
    listen$1
     (0,
      function(param){
       var
        report = param[2],
        id = param[1],
        previous_status = peek(status),
        _lW_ = symbol$1(server_id, id);
       if(_lW_){
        symbol$2(status, report);
        var _lX_ = previous_status[2], _lY_ = report[2];
        if(_lX_){
         var remaining = _lX_[1][2];
         if(! _lY_) return symbol$2(refresh, 0);
         var remaining$0 = _lY_[1][2];
         if(symbol$5(remaining, remaining$0)) return symbol$2(refresh, 0);
        }
        var _lZ_ = 0;
       }
       else
        var _lZ_ = _lW_;
       return _lZ_;
      });
    query([0, [0, [0, server_id, connexion], 0]]);
    return;
   }
   var
    servers_with_status =
      map$5
       (function(param){
         var
          connexion = param[2],
          id = param[1],
          status = var$0(initial_report),
          refresh = var$0(0),
          server = [0, id, [0, connexion, status, refresh]];
         connect$0(server);
         return server;
        },
        get$3(connexions));
   function new_connexion(base_url, username, password){
    return let$2
            (connect([0, base_url, username, password]),
             function(connexion){
              var server_id = connexion[2][3];
              return update
                      (function(servers){
                        return concat$1(servers, element([0, server_id, connexion]));
                       },
                       connexions);
             });
   }
   var
    url_field =
      field$0
       (pure(text_input(0, 0, 0, 0, _j9_, 0, 0, _j8_)),
        function(t, v){return [0, v, t[2], t[3]];}),
    username_field =
      field$0
       (pure(text_input(0, 0, 0, 0, _j__, 0, 0, 0)),
        function(t, v){return [0, t[1], v, t[3]];}),
    password_field =
      field$0
       (pure(password_input(0, 0, 0, 0, _j$_, 0, 0, 0)),
        function(t, v){return [0, t[1], t[2], v];}),
    submit$1 =
      field$0(pure(submit$0(0, 0, 0, _ka_)), function(t, v){return t;}),
    fields$0 =
      return$1
       (of_list$1
         ([0,
           url_field,
           [0, username_field, [0, password_field, [0, submit$1, 0]]]])),
    Connect_form = [0, default$1, fields$0];
   function ui_form(param){
    return create$8(0, 0, 0, Connect_form)
            (function(t){
              log([0, _kb_, [0, t, 0]]);
              var _lU_ = t[1];
              a:
              if(typeof _lU_ !== "number" && 1 !== _lU_[0]){
               var _lV_ = t[2], url = _lU_[1];
               if(typeof _lV_ !== "number" && 1 !== _lV_[0]){
                var match = t[3], username = _lV_[1];
                if(typeof match !== "number" && 1 !== match[0]){
                 var password = match[1];
                 log([0, _kc_, [0, url, [0, username, 0]]]);
                 new_connexion(url, username, password);
                 return 0;
                }
                break a;
               }
               break a;
              }
              return 0;
             });
   }
   function ui_status(server){
    var
     status =
       func
        (get$3(server[2]),
         function(param){
          var sync_progress = param[2], status = param[1];
          if(typeof status === "number" && 1 === status && ! sync_progress)
           return txt(0, _kf_);
          if(! sync_progress) return txt(0, _ke_);
          var
           match = sync_progress[1],
           remaining = match[2],
           total = match[1];
          return txt
                  (0, caml_call2(sprintf(_kd_), total - remaining | 0, total));
         });
    return status;
   }
   function fut_to_lwd(init, f){
    var v = var$0(init);
    await$1(f, function(_lT_){return symbol$2(v, _lT_);});
    return get$3(v);
   }
   var
    servers_libraries =
      map$5
       (function(param){
         var
          refresh = param[2][3],
          server_id = param[1],
          views =
            bind$1
             (get$3(refresh),
              function(param){
               function _lO_(_lS_){return get_or(_lS_, 0);}
               var _lP_ = 0;
               return function(_lQ_){return fut_to_lwd(_lP_, _lQ_);}
                       (function(_lR_){return map$4(_lO_, _lR_);}
                         (query([3, server_id])));
              });
         return [0, server_id, views];
        },
        servers_with_status);
   function ui(param){
    var
     statuses =
       map$5
        (function(param){var server = param[2]; return ui_status(server);},
         servers_with_status),
     ui_form$0 =
       func
        (servers_with_status,
         function(s){
          return typeof view(s) === "number"
                  ? element(div$1(0, 0, 0, [0, [0, 82, ui_form(0)], 0]))
                  : empty$0;
         }),
     _lN_ = [0, [0, 83, lift(statuses)], 0];
    return div$1(0, 0, 0, [0, [0, 83, lift(ui_form$0)], _lN_]);
   }
   var _kg_ = var$0(0), _kh_ = var$0(0), now_playing = var$0(0);
   function audio_url(server, item_id){
    var _lL_ = server[2][2], _lM_ = server[1];
    return caml_call3(sprintf(_ki_), _lM_, item_id, _lL_);
   }
   function Playback_controller(P){
    function set_play_url(playlist, current_index){
     if(! playlist) return ok(0);
     var playlist$0 = playlist[1];
     return let$2
             (let$2
               (caml_call2(P[1], playlist$0, [0, current_index]),
                function(result){
                 var len = result.length - 1;
                 if(1 === len){
                  var _lJ_ = result[1];
                  if(_lJ_){
                   var
                    item = _lJ_[1][2],
                    server_id = item[7],
                    album_id = item[5],
                    id = item[3],
                    name = item[1],
                    servers = to_list$1(peek(connexions)),
                    connexion = assq(server_id, servers),
                    url = audio_url(connexion, id);
                   log([0, _kj_, [0, name, [0, _cN_(url), 0]]]);
                   var
                    session = of_navigator(navigator),
                    image_id = value$3(album_id, id),
                    _lK_ = connexion[1],
                    img_src = caml_call2(sprintf(_kk_), _lK_, image_id),
                    artwork = [0, [0, img_src, _km_, _kl_], 0];
                   log([0, artwork, 0]);
                   set_metadata(session, [0, name, artist, album, artwork]);
                   return [0, item, url];
                  }
                 }
                 throw caml_maybe_attach_backtrace(Not_found, 1);
                }),
              function(item){return symbol$2(now_playing, [0, item]);});
    }
    function reset_playlist(playlist){
     set_play_url([0, playlist], 0);
     symbol$2(_kh_, [0, playlist]);
     return symbol$2(_kg_, 0);
    }
    function make(param){
     var
      _lB_ = [0, v$1("preload", "auto"), 0],
      _lC_ = [0, v$1("autoplay", cst_true), _lB_],
      audio_elt = audio$0(0, [0, [0, v$1("controls", cst_true), _lC_]], 0);
     function set_src(url){
      return set_at(cst_src, [0, caml_jsstring_of_string(url)], audio_elt);
     }
     var root = observe$0(0, get$3(now_playing));
     set_on_invalidate
      (root,
       function(param){
        var match = quick_sample(root);
        if(! match) return 0;
        var url = match[1][2];
        return set_src(url);
       });
     quick_sample(root);
     function next(param){
      var
       playlist = peek(_kh_),
       current_index = peek(_kg_),
       next_index = current_index + 1 | 0;
      set_play_url(playlist, next_index);
      return symbol$2(_kg_, next_index);
     }
     function prev(param){
      var
       playlist = peek(_kh_),
       current_index = peek(_kg_),
       next_index = max(0, current_index - 1 | 0);
      set_play_url(playlist, next_index);
      return symbol$2(_kg_, next_index);
     }
     var session = of_navigator(navigator);
     function set_position_state$0(param){
      var
       duration = prop(float$0(cst_duration), audio_elt),
       _lI_ = 1 - is_nan(duration);
      if(! _lI_) return _lI_;
      var
       playback_rate = prop(float$0(cst_playbackRate), audio_elt),
       position = prop(float$0("currentTime"), audio_elt);
      return set_position_state
              ([0, duration], [0, playback_rate], [0, position], session);
     }
     set_action_handler(session, next_track, next);
     set_action_handler(session, previous_track, prev);
     function on_error(ev){
      stop_immediate_propagation(ev);
      prevent_default(ev);
      log([0, _kn_, [0, ev, 0]]);
      return next(0);
     }
     function next$0(param){return next(0);}
     listen(0, ended, next$0, audio_elt);
     listen(0, error, on_error, audio_elt);
     listen
      (0, play, function(param){return set_position_state$0(0);}, audio_elt);
     var
      btn_next =
        v$6(0, 0, [0, [0, [0, 80, handler(0, click, next$0)], 0]], _ko_),
      style$0 =
        func
         (get$3(now_playing),
          function(np){
           if(np)
            var
             match = np[1][1],
             server_id = match[7],
             album_id = match[5],
             id = match[3],
             image_id = value$3(album_id, id),
             servers = to_list$1(peek(connexions)),
             connexion = assq(server_id, servers),
             _lH_ = connexion[1],
             src = caml_call2(sprintf(_kp_), _lH_, image_id);
           else
            var src = _kr_;
           return caml_call1(sprintf(_kq_), src);
          }),
      _lD_ = [0, 82, style$0],
      at =
        function(_lG_){return add$1(style, _lD_, _lG_);}
         (add$1(class$0, _ks_, 0)),
      track_cover = div$1(0, [0, at], 0, 0),
      track_details =
        func
         (get$3(now_playing),
          function(param){
           if(! param) return txt(0, _kt_);
           var name = param[1][1][1];
           return txt(0, name);
          }),
      at$0 =
        function(_lF_){return add$1(class$0, _kv_, _lF_);}
         (add$1(class$0, _ku_, 0)),
      now_playing$0 =
        div$1
         (0,
          [0, at$0],
          0,
          [0, [0, 82, track_cover], [0, [0, 82, track_details], 0]]),
      at$1 =
        function(_lE_){return add$1(class$0, _kx_, _lE_);}
         (add$1(class$0, _kw_, 0));
     return div$1
             (0,
              [0, at$1],
              0,
              [0,
               [0, 82, now_playing$0],
               [0, [0, 80, audio_elt], [0, [0, 82, btn_next], 0]]]);
    }
    return [0, , reset_playlist, make];
   }
   var base = classes(_ky_);
   function at(param){return param ? classes(_kz_) : classes(_kA_);}
   function make$9(on_click){
    var
     on_click$0 = handler$0(0, click, on_click),
     _lx_ = [0, at],
     _ly_ = [0, [0, [0, 80, on_click$0], 0]];
    return function(_lA_, _lz_){
     return caml_call1(two_state([0, base])(_lA_, _lz_, _lx_), _ly_);};
   }
   classes(_kB_);
   function columns(param){
    var
     _ls_ =
       function(_lw_){return v$5(_kE_, _kD_, _lw_);}
        ([0, [0, 80, txt(0, _kC_)], 0]),
     _lt_ =
       function(_lv_){return v$5(_kH_, _kG_, _lv_);}
        ([0, [0, 80, txt(0, _kF_)], 0]);
    return [0,
            function(_lu_){return v$5(_kK_, _kJ_, _lu_);}
             ([0, [0, 80, txt(0, _kI_)], 0]),
            _lt_,
            _ls_];
   }
   function make$10(reset_playlist, fetch, view){
    function img_url(server_id, item_id){
     var servers = to_list$1(peek(connexions));
     try{
      var
       connexion = assq(server_id, servers),
       _lp_ = connexion[1],
       _lq_ = caml_call2(sprintf(_kM_), _lp_, item_id),
       url = _lq_;
     }
     catch(_lr_){
      var _lo_ = caml_wrap_exception(_lr_);
      if(_lo_ !== Not_found) throw caml_maybe_attach_backtrace(_lo_, 0);
      var url = _kL_;
     }
     return src$0(caml_jsstring_of_string(url));
    }
    function render(view, start_index, param){
     var
      match = param[2],
      image_blur_hashes = match[8],
      server_id = match[7],
      album_id = match[5],
      id = match[3],
      name = match[1];
     function play_from(param){
      let$2
       (view,
        function(view){
         return caml_call1
                 (reset_playlist,
                  [0,
                   view[1],
                   view[2],
                   view[3],
                   view[4] + start_index | 0,
                   view[5]]);
        });
      return 0;
     }
     var play_on_click = handler(0, click, play_from);
     a:
     {
      if(image_blur_hashes[1] && album_id){
       var
        id$0 = album_id[1],
        _ll_ = return$1(img_url(server_id, id$0)),
        img_url$0 = _ll_;
       break a;
      }
      var img_url$0 = return$1(src$0(cst_track_png));
     }
     var
      status =
        func
         (get$3(now_playing),
          function(param){
           if(param){
            var item_id = param[1][1][3];
            if(symbol$1(item_id, id)){
             var _ln_ = [0, txt(0, _kN_), 0];
             return div$0(0, [0, [0, class$1("playing"), 0]], _ln_);
            }
           }
           return div$0
                   (0, 0, [0, txt(0, string_of_int(start_index + 1 | 0)), 0]);
          }),
      _lm_ =
        [0,
         [0, 80, div$0(0, 0, [0, span$0(0, 0, [0, txt(0, name), 0]), 0])],
         0];
     return [0,
             [0, 82, status],
             [0,
              [0,
               82,
               div$1
                (0,
                 0,
                 [0, [0, [0, 80, play_on_click], 0]],
                 [0,
                  [0,
                   82,
                   img$0
                    (0,
                     [0, [0, [0, 82, img_url$0], [0, [0, 80, width$0(50)], 0]]],
                     0,
                     0)],
                  0])],
              _lm_]];
    }
    function placeholder(i){return 0;}
    var
     ui_table = [0, [0, columns(0)], _kO_],
     data_source =
       func
        (view,
         function(view){
          var
           total_items =
             map$4(function(_lk_){return symbol$12(item_count, _lk_);}, view);
          function fetch$0(i){
           return let$1
                   (view, function(view){return caml_call2(fetch, view, i);});
          }
          function render$0(_li_, _lj_){return render(view, _li_, _lj_);}
          return [0, total_items, fetch$0, render$0];
         });
    return make$5(ui_table, [0, placeholder], data_source);
   }
   function fetch$1(view, i){return query([5, view, i]);}
   var P = Playback_controller([0, fetch$1]);
   function app(idb){
    var playlist = var$1(_kP_, 0);
    function on_click(param, _lh_){
     symbol$2(playlist, peek(playlist) + 1 | 0);
     set$1(1);
     return 1;
    }
    caml_call1
     (make$9(on_click)(0, 0),
      function(param){
       return [0,
               [0,
                82,
                func
                 (get$3(playlist),
                  function(pl){
                   return txt(0, symbol(_kQ_, string_of_int(pl)));
                  })],
               0];
      });
    var
     _k6_ = [0, [0, 82, ui(0)], 0],
     _k7_ = [0, [0, 80, h1$0(0, 0, [0, txt(0, _kR_), 0])], _k6_],
     status =
       div$1(0, [0, [0, [0, 80, style$0(cst_grid_column_1_1)], 0]], 0, _k7_),
     player = P[3].call(null, 0),
     player_ui =
       div$1
        (0,
         [0, [0, [0, 80, style$0(cst_grid_column_1_1)], 0]],
         0,
         [0, [0, 82, player], 0]),
     f_search = make$7([0, _kS_, 0, [0, pure(0), 0]]),
     choices =
       fold_monoid
        (function(param){
          var l = param[2];
          return func
                  (l,
                   function(l){
                    return transform_list
                            (l,
                             function(l){
                              var _lg_ = [0, [0, 80, txt(0, l[2][1])], 0];
                              return element([0, l[2][3], _lg_, 1]);
                             });
                   });
         },
         [0,
          return$1(empty$0),
          function(_lb_){
           function _lc_(_le_, _lf_){return map2(_lb_, _le_, _lf_);}
           return function(_ld_){return _lc_(_ld_, concat$1);};
          }],
         servers_libraries),
     f_libraries = make$8([0, _kT_, join(choices)]),
     filters =
       div$1
        (0, 0, 0, [0, [0, 82, f_search[1]], [0, [0, 82, f_libraries[1]], 0]]),
     f_value = f_libraries[2],
     main_view =
       map2
        (f_value,
         f_search[3],
         function(l, t){
          var
           filters = symbol$10(function(s){return [0, [0, s], 0];}, t),
           _la_ = [0, of_list$0(_cN_, l), 0];
          log([0, _kV_, [0, of_option(_cN_(_kU_), _cN_, t), _la_]]);
          return query([4, req(0, [0, [0, l]], _kW_, filters, 0)]);
         }),
     main_list = make$10(P[2], fetch$1, main_view),
     playlist$0 =
       func
        (get$3(_kh_),
         function(param){
          if(! param) return span$1(0, 0, 0, [0, [0, 80, txt(0, _kX_)], 0]);
          var playlist = param[1], _k$_ = pure(ok(playlist));
          return make$10(P[2], fetch$1, _k$_);
         }),
     now_playing = join(playlist$0),
     _k8_ =
       [0,
        [0,
         82,
         div$1
          (0,
           [0, [0, [0, 80, class$1("playlist")], 0]],
           0,
           [0, [0, 82, now_playing], 0])],
        [0, [0, 82, player_ui], 0]],
     _k9_ =
       [0,
        [0, 82, status],
        [0,
         [0,
          82,
          div$1
           (0,
            [0, [0, [0, 80, class$1("item-list")], 0]],
            0,
            [0, [0, 82, filters], [0, [0, 82, main_list], 0]])],
         _k8_]];
    return div$1
            (0,
             [0, function(_k__){return to_at$0(_kY_, _k__);}(classes(0))],
             0,
             _k9_);
   }
   var is_storage_persistent = persist(manager(navigator));
   function on_load(param){
    log([0, _kZ_, [0, is_storage_persistent, 0]]);
    return function(_k4_){return with_idb(_k1_, _k0_, _k4_);}
            (function(idb){
              var app$0 = observe$0(0, app(idb));
              function on_invalidate(param){
               request_animation_frame
                (function(param){quick_sample(app$0); return 0;});
               return 0;
              }
              var _k5_ = [0, quick_sample(app$0), 0];
              append_children(body(global_document), _k5_);
              set_on_invalidate(app$0, on_invalidate);
              return 0;
             });
   }
   listen(0, dom_content_loaded, on_load, as_target(window));
   do_at_exit(0);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
